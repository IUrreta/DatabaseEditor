/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/backend/UESaveHandler.js":
/*!*****************************************!*\
  !*** ./src/js/backend/UESaveHandler.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeFileToDatabase: () => (/* binding */ analyzeFileToDatabase),\n/* harmony export */   dump: () => (/* binding */ dump),\n/* harmony export */   parseGvasProps: () => (/* binding */ parseGvasProps),\n/* harmony export */   repack: () => (/* binding */ repack)\n/* harmony export */ });\n/* harmony import */ var _UESaveTool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UESaveTool */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _initSql_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./initSql.js */ \"./src/js/backend/initSql.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pako */ \"./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! file-saver */ \"./node_modules/file-saver/dist/FileSaver.min.js\");\n/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\n\nconst parseGvasProps = Properties => {\n  const careerSaveMetadata = {};\n  const metadataProperty = Properties.Properties.filter(x => x.Name === \"MetaData\")[0];\n  const careerSaveMetadataProperty = metadataProperty.Properties[0];\n  careerSaveMetadataProperty.Properties.forEach(prop => {\n    careerSaveMetadata[prop.Name] = prop.Property || prop.Properties;\n  });\n  return {\n    careerSaveMetadata\n  };\n};\nconst analyzeFileToDatabase = async (file, SQL) => {\n  return new Promise(resolve => {\n    if (file !== undefined) {\n      let reader = new FileReader();\n      reader.onload = async e => {\n        const serial = new _UESaveTool__WEBPACK_IMPORTED_MODULE_0__.Serializer(buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(reader.result));\n        const gvasMeta = new _UESaveTool__WEBPACK_IMPORTED_MODULE_0__.Gvas().deserialize(serial);\n        const {\n          Header,\n          Properties\n        } = gvasMeta;\n        const {\n          SaveGameVersion,\n          EngineVersion\n        } = Header;\n        const {\n          BuildId,\n          Build\n        } = EngineVersion;\n        let version = 0,\n          gameVersion,\n          gameVersionWithBuild;\n        switch (SaveGameVersion) {\n          case 2:\n            version = 2;\n            gameVersion = BuildId.substring(BuildId.indexOf(\"22_\") + 3);\n            gameVersionWithBuild = `${gameVersion}.${Build & 0x7fffffff}`;\n            break;\n          case 3:\n            if (BuildId.indexOf(\"volta23\") !== -1) {\n              version = 3;\n              gameVersion = BuildId.substring(BuildId.indexOf(\"23+\") + 3);\n              gameVersionWithBuild = `${gameVersion}.${Build & 0x7fffffff}`;\n            }\n            if (BuildId.indexOf(\"volta24\") !== -1) {\n              version = 4;\n              gameVersion = BuildId.substring(BuildId.indexOf(\"24+\") + 8);\n              gameVersionWithBuild = `${gameVersion}.${Build & 0x7fffffff}`;\n            }\n            break;\n          default:\n            version = 0;\n        }\n        const unk_zero = serial.readInt32();\n        const total_size = serial.readInt32();\n        const size_1 = serial.readInt32();\n        const size_2 = serial.readInt32();\n        const size_3 = serial.readInt32();\n        const compressedData = serial.read(total_size);\n        const output = pako__WEBPACK_IMPORTED_MODULE_2__[\"default\"].inflate(compressedData);\n        const databaseFile = output.slice(0, size_1);\n        const text = new TextDecoder().decode(databaseFile.slice(0, 16));\n\n        // @ts-ignore\n\n        const db = new SQL.Database(databaseFile);\n        const metadata = {\n          filename: file.name,\n          // for in-app\n\n          version,\n          fullBuildId: BuildId,\n          gameVersion,\n          gameVersionWithBuild,\n          databaseFile,\n          gvasMeta,\n          gvasHeader: Header,\n          // read-only\n\n          ...parseGvasProps(Properties),\n          otherDatabases: [{\n            size: size_2,\n            file: output.slice(size_1, size_1 + size_2)\n          }, {\n            size: size_3,\n            file: output.slice(size_1 + size_2, size_1 + size_2 + size_3)\n          }]\n        };\n        if (true) {\n          // saveAs(new Blob([metadata.chunk0], {type: \"application/binary\"}), \"chunk0\");\n        }\n        resolve({\n          db,\n          metadata\n        });\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  });\n};\nconst repack = (db, metadata, overwrite = false) => {\n  const db_data = db.export();\n  const db_size = db_data.length;\n  const {\n    otherDatabases,\n    gvasMeta\n  } = metadata;\n  const s1 = otherDatabases[0].size;\n  const s2 = otherDatabases[1].size;\n  const compressedData = new buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer(db_size + s1 + s2);\n  compressedData.set(db_data, 0);\n  compressedData.set(otherDatabases[0].file, db_size);\n  compressedData.set(otherDatabases[1].file, db_size + s1);\n  const compressed = pako__WEBPACK_IMPORTED_MODULE_2__[\"default\"].deflate(compressedData);\n  const compressed_size = compressed.length;\n  const serialized = gvasMeta.serialize();\n  const meta_length = serialized.length;\n  const check = new _UESaveTool__WEBPACK_IMPORTED_MODULE_0__.Gvas().deserialize(new _UESaveTool__WEBPACK_IMPORTED_MODULE_0__.Serializer(buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(serialized)));\n  if (JSON.stringify(gvasMeta) === JSON.stringify(check)) {\n    const finalData = new buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer(meta_length + 16 + compressed_size);\n    finalData.set(serialized, 0);\n    finalData.writeInt32LE(compressed_size, meta_length);\n    finalData.writeInt32LE(db_size, meta_length + 4);\n    finalData.writeInt32LE(s1, meta_length + 8);\n    finalData.writeInt32LE(s2, meta_length + 12);\n    finalData.set(compressed, meta_length + 16);\n    console.log(\"Repacked\", finalData);\n    return {\n      finalData,\n      metadata\n    };\n    (0,file_saver__WEBPACK_IMPORTED_MODULE_3__.saveAs)(new Blob([finalData], {\n      type: \"application/binary\"\n    }), metadata.filename);\n  } else {\n    alert(\"Savefile Serialization Check failed.\");\n  }\n};\nconst dump = (db, metadata) => {\n  (0,file_saver__WEBPACK_IMPORTED_MODULE_3__.saveAs)(new Blob([db.export()], {\n    type: \"application/vnd.sqlite3\"\n  }), metadata.filename + \".db\");\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveHandler.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/Gvas.js":
/*!*******************************************!*\
  !*** ./src/js/backend/UESaveTool/Gvas.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Gvas: () => (/* binding */ Gvas)\n/* harmony export */ });\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var _GvasHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GvasHeader */ \"./src/js/backend/UESaveTool/GvasHeader.js\");\n/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./properties */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\n\n\nclass Gvas {\n  constructor() {\n    this.Header = new _GvasHeader__WEBPACK_IMPORTED_MODULE_1__.GvasHeader();\n    this.Properties = new _properties__WEBPACK_IMPORTED_MODULE_2__.Tuple();\n  }\n  get Size() {\n    let size = this.Header.Size;\n    size += this.Properties.Size;\n    size += 4;\n    return size;\n  }\n  deserialize(serial) {\n    let format = serial.read(4);\n    if (buffer__WEBPACK_IMPORTED_MODULE_5__.Buffer.compare(buffer__WEBPACK_IMPORTED_MODULE_5__.Buffer.from('GVAS'), format) !== 0) throw Error(`Unexpected header, expected 'GVAS`);\n    this.Header.deserialize(serial);\n    this.Properties.Name = this.Header.SaveGameClassName;\n    this.Properties.deserialize(serial);\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_4__.Serializer.alloc(this.Size);\n    serial.write(this.Header.serialize());\n    serial.write(this.Properties.serialize());\n    serial.seek(4);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_3__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let gvas = new Gvas();\n    gvas.Header = _GvasHeader__WEBPACK_IMPORTED_MODULE_1__.GvasHeader.from(obj.Header);\n    gvas.Properties = _factories__WEBPACK_IMPORTED_MODULE_0__.PropertyFactory.create(obj.Properties);\n    return gvas;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/Gvas.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/GvasHeader.js":
/*!*************************************************!*\
  !*** ./src/js/backend/UESaveTool/GvasHeader.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GvasHeader: () => (/* binding */ GvasHeader)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\nclass GvasHeader {\n  constructor() {\n    this.Format = 'GVAS';\n    this.SaveGameVersion = 0;\n    this.PackageVersion = 0;\n    this.PackageFileVersionUE5 = 0;\n    this.EngineVersion = {\n      Major: 0,\n      Minor: 0,\n      Patch: 0,\n      Build: 0,\n      BuildId: \"\"\n    };\n    this.CustomFormatVersion = 0;\n    this.CustomFormatData = {\n      Count: 0,\n      Entries: []\n    };\n    this.SaveGameClassName = \"\";\n  }\n  get Size() {\n    let size = this.Format.length;\n    size += 18;\n    size += this.EngineVersion.BuildId.length + 1 + 4;\n    if (this.EngineVersion.Major >= 5) {\n      size += 4;\n    }\n    size += 8;\n    this.CustomFormatData.Entries.forEach(guid => {\n      size += guid.Size; // 20\n    });\n    size += this.SaveGameClassName.length + 1 + 4;\n    return size;\n  }\n  deserialize(serial) {\n    /* 5.3: https://github.com/EpicGames/UnrealEngine/blob/5.3/Engine/Source/Runtime/Engine/Private/GameplayStatics.cpp#L85 */\n\n    // FileTypeTag: GVAS\n    this.SaveGameVersion = serial.readInt32();\n    this.PackageVersion = serial.readInt32();\n    if (this.SaveGameVersion >= 3) {\n      this.PackageFileVersionUE5 = serial.readInt32();\n      /* this needs to be larger than 1000 */\n    }\n    /*\r\n        3 means PackageFileSummaryVersionChange, rather than F1M 2023\r\n        https://github.com/EpicGames/UnrealEngine/blob/5.3/Engine/Source/Runtime/Engine/Private/GameplayStatics.cpp#L93\r\n    */\n    this.EngineVersion.Major = serial.readUInt16();\n    this.EngineVersion.Minor = serial.readUInt16();\n    this.EngineVersion.Patch = serial.readUInt16();\n    this.EngineVersion.Build = serial.readUInt32();\n    this.EngineVersion.BuildId = serial.readString();\n    this.CustomFormatVersion = serial.readInt32();\n    this.CustomFormatData.Count = serial.readInt32();\n    for (let i = 0; i < this.CustomFormatData.Count; i++) {\n      let guid = _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Type: 'Guid'\n      });\n      this.CustomFormatData.Entries.push(guid.deserialize(serial));\n    }\n    this.SaveGameClassName = serial.readString();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_2__.Serializer.alloc(this.Size);\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(this.Format));\n    serial.writeInt32(this.SaveGameVersion);\n    serial.writeInt32(this.PackageVersion);\n    if (this.SaveGameVersion >= 3) {\n      serial.writeInt32(this.PackageFileVersionUE5);\n    } // UE 5 for F1M 23\n\n    serial.writeUInt16(this.EngineVersion.Major);\n    serial.writeUInt16(this.EngineVersion.Minor);\n    serial.writeUInt16(this.EngineVersion.Patch);\n    serial.writeUInt32(this.EngineVersion.Build);\n    serial.writeString(this.EngineVersion.BuildId);\n    serial.writeInt32(this.CustomFormatVersion);\n    serial.writeInt32(this.CustomFormatData.Count);\n    this.CustomFormatData.Entries.forEach(guid => serial.write(guid.serialize()));\n    serial.writeString(this.SaveGameClassName);\n    if (serial.tell != this.Size) throw new ___WEBPACK_IMPORTED_MODULE_0__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let header = new GvasHeader();\n    header.SaveGameVersion = obj.SaveGameVersion;\n    header.PackageVersion = obj.PackageVersion;\n    header.EngineVersion = obj.EngineVersion;\n    header.CustomFormatVersion = obj.CustomFormatVersion;\n    header.CustomFormatData.Count = obj.CustomFormatData.Count;\n    obj.CustomFormatData.Entries.forEach(guid => {\n      header.CustomFormatData.Entries.push(_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(guid));\n    });\n    header.SaveGameClassName = obj.SaveGameClassName;\n    return header;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/GvasHeader.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/PropertyErrors.js":
/*!*****************************************************!*\
  !*** ./src/js/backend/UESaveTool/PropertyErrors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeserializationError: () => (/* binding */ DeserializationError),\n/* harmony export */   SerializationError: () => (/* binding */ SerializationError),\n/* harmony export */   TypeNotImplementedError: () => (/* binding */ TypeNotImplementedError)\n/* harmony export */ });\nclass SerializationError extends Error {\n  constructor(prop) {\n    super(`Problem occurred during serialization of Property: ${prop.Name}`);\n  }\n}\nclass DeserializationError extends Error {\n  constructor(type, offset) {\n    super(`Problem occurred during deserialization of Property '${type}' at offset 0x${offset.toString(16)}`);\n  }\n}\nclass TypeNotImplementedError extends Error {\n  constructor(type) {\n    super(`No implementation for Property type: '${type}'`);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/PropertyErrors.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/Serializer.js":
/*!*************************************************!*\
  !*** ./src/js/backend/UESaveTool/Serializer.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializer: () => (/* binding */ Serializer)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\nclass Serializer {\n  constructor(buf) {\n    this._data = buf;\n    this._offset = 0;\n  }\n  get Data() {\n    return this._data;\n  }\n  get tell() {\n    return this._offset;\n  }\n  seek(count) {\n    if (this._offset >= this._data.length) throw new Error(`Reached end of Buffer at offset 0x${this.tell.toString(16)}`);\n    return this._offset += count;\n  }\n  read(count) {\n    return this.Data.slice(this.tell, this.seek(count));\n  }\n  readInt32() {\n    let int = this.Data.readInt32LE(this.tell);\n    this.seek(4);\n    return int;\n  }\n  readUInt32() {\n    let int = this.Data.readUInt32LE(this.tell);\n    this.seek(4);\n    return int;\n  }\n  readInt64() {\n    let int1 = this.Data.readUInt32LE(this.tell);\n    this.seek(4);\n    let int2 = this.Data.readInt32LE(this.tell);\n    this.seek(4);\n    const val = (BigInt(int2) << 32n) + BigInt(int1);\n    if (val > 1n << 52n) {\n      return val.toString();\n    }\n    return Number(val);\n  }\n  readInt16() {\n    let int = this.Data.readInt16LE(this.tell);\n    this.seek(2);\n    return int;\n  }\n  readUInt16() {\n    let int = this.Data.readUInt16LE(this.tell);\n    this.seek(2);\n    return int;\n  }\n  readInt8() {\n    let int = this.Data.readInt8(this.tell);\n    this.seek(1);\n    return int;\n  }\n  readUInt8() {\n    let int = this.Data.readUInt8(this.tell);\n    this.seek(1);\n    return int;\n  }\n  readFloat() {\n    let float = this.Data.readFloatLE(this.tell);\n    this.seek(4);\n    return float;\n  }\n  readString() {\n    let length = this.readInt32();\n    let str = this.read(length - 1).toString('latin1');\n    this.read(1);\n    return str;\n  }\n  readUnicodeString() {\n    let length = this.readInt32();\n    if (length < 0) {\n      let str = this.read(-length * 2 - 2).toString('utf16le');\n      this.read(2);\n      return [str, \"utf16le\"];\n    } else {\n      let str = this.read(length - 1).toString('latin1');\n      this.read(1);\n      return [str, \"latin1\"];\n    }\n  }\n  write(buf) {\n    this._offset += buf.copy(this.Data, this.tell);\n  }\n  writeInt64(num) {\n    let bi = BigInt.asIntN(64, BigInt(num));\n    let high = Number(bi >> 32n);\n    let low = Number(bi & (1n << 32n) - 1n);\n    this._offset = this.Data.writeUInt32LE(low, this.tell);\n    this._offset = this.Data.writeInt32LE(high, this.tell);\n    // TODO: this._offset = this.Data.writeBigInt64LE(num, this.tell);\n  }\n  writeUInt32(num) {\n    this._offset = this.Data.writeUInt32LE(num, this.tell);\n  }\n  writeInt32(num) {\n    this._offset = this.Data.writeInt32LE(num, this.tell);\n  }\n  writeUInt16(num) {\n    this._offset = this.Data.writeUInt16LE(num, this.tell);\n  }\n  writeInt16(num) {\n    this._offset = this.Data.writeInt16LE(num, this.tell);\n  }\n  writeUInt8(byte) {\n    this._offset = this.Data.writeUInt8(byte, this.tell);\n  }\n  writeInt8(byte) {\n    this._offset = this.Data.writeInt8(byte, this.tell);\n  }\n  writeFloat(num) {\n    this._offset = this.Data.writeFloatLE(num, this.tell);\n  }\n  writeString(str) {\n    this._offset = this.Data.writeInt32LE(str.length + 1, this.tell);\n    this._offset += this.Data.write(str, this.tell);\n    this._offset = this.Data.writeInt8(0, this.tell);\n  }\n  writeUTF16String(str) {\n    this._offset += this.Data.write(str + \"\\0\", this.tell, \"utf16le\");\n  }\n  writeLatin1String(str) {\n    this._offset += this.Data.write(str + \"\\0\", this.tell, \"latin1\");\n  }\n  append(buf) {\n    this._data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([this.Data, buf]);\n    this._offset += buf.length;\n  }\n  static alloc(size) {\n    return new Serializer(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size));\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/Serializer.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/arrays/IntArray.js":
/*!******************************************************!*\
  !*** ./src/js/backend/UESaveTool/arrays/IntArray.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntArray: () => (/* binding */ IntArray)\n/* harmony export */ });\n/* harmony import */ var _properties___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../properties/ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\n\nclass IntArray extends _properties___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Type = \"IntProperty\";\n    this.Properties = [];\n  }\n  get Size() {\n    let size = this.Properties.length * 4;\n    this.Properties.forEach(int => {\n      size += int.Size;\n    });\n    return size;\n  }\n  get Count() {\n    return this.Properties.length;\n  }\n  deserialize(serial, count) {\n    serial.seek(count * 4);\n    for (let i = 1; i < count; i++) {\n      let Name = serial.readString();\n      let Type = serial.readString();\n      let Size = serial.readInt32();\n      let prop = _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Name,\n        Type\n      });\n      prop.deserialize(serial);\n      this.Properties.push(prop);\n    }\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_3__.Serializer.alloc(this.Size);\n    serial.seek(this.Count * 4);\n    this.Properties.forEach(int => serial.write(int.serialize()));\n    if (serial.tell !== this.Size) throw new ___WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let array = new IntArray();\n    if (obj.Properties !== undefined) obj.Properties.forEach(int => array.Properties.push(_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(int)));\n    return array;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/arrays/IntArray.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/arrays/SoftObjectArray.js":
/*!*************************************************************!*\
  !*** ./src/js/backend/UESaveTool/arrays/SoftObjectArray.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoftObjectArray: () => (/* binding */ SoftObjectArray)\n/* harmony export */ });\n/* harmony import */ var _properties___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../properties/ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\nclass SoftObjectArray extends _properties___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Type = \"SoftObjectProperty\";\n    this.Properties = [];\n  }\n  get Size() {\n    let size = 0;\n    this.Properties.forEach(str => {\n      size += str.length + 1 + 4;\n      size += 4;\n    });\n    return size;\n  }\n  get Count() {\n    return this.Properties.length;\n  }\n  deserialize(serial, count) {\n    for (let i = 0; i < count; i++) {\n      this.Properties.push(serial.readString());\n      serial.seek(4);\n    }\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_2__.Serializer.alloc(this.Size);\n    this.Properties.forEach(str => {\n      serial.writeString(str);\n      serial.seek(4);\n    });\n    if (serial.tell !== this.Size) throw new ___WEBPACK_IMPORTED_MODULE_1__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let array = new SoftObjectArray();\n    if (obj.Properties !== undefined) array.Properties = obj.Properties;\n    return array;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/arrays/SoftObjectArray.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/arrays/StructArray.js":
/*!*********************************************************!*\
  !*** ./src/js/backend/UESaveTool/arrays/StructArray.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StructArray: () => (/* binding */ StructArray)\n/* harmony export */ });\n/* harmony import */ var _properties_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../properties/index.js */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"./src/js/backend/UESaveTool/index.js\");\n\n\nclass StructArray extends _properties_index_js__WEBPACK_IMPORTED_MODULE_0__.StructProperty {\n  deserialize(serial, count) {\n    // console.log(`Deserializing ${this.Name} Count: ${count}`)\n    this.Name = serial.readString();\n    this.Type = serial.readString();\n    let Size = serial.readInt32();\n    serial.seek(4);\n    this.StoredPropertyType = serial.readString();\n    serial.seek(17);\n    let i = 0;\n    while (i < count) {\n      let Name = this.StoredPropertyType;\n      let Type = 'Tuple';\n      let prop = _index_js__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Name,\n        Type\n      });\n      prop.deserialize(serial);\n      this.Properties.push(prop);\n      i++;\n    }\n    // console.log(`Done Deserializing ${this.Name} Offset: ${serial.tell}`)\n    return this;\n  }\n  static from(obj) {\n    let struct = new StructArray();\n    struct.Name = obj.Name;\n    struct.Type = obj.Type;\n    struct.StoredPropertyType = obj.StoredPropertyType;\n    struct.Properties = [];\n    if (obj.Properties !== undefined) obj.Properties.forEach(prop => struct.Properties.push(_index_js__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(prop)));\n    return struct;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/arrays/StructArray.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/arrays/index.js":
/*!***************************************************!*\
  !*** ./src/js/backend/UESaveTool/arrays/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntArray: () => (/* reexport safe */ _IntArray__WEBPACK_IMPORTED_MODULE_0__.IntArray),\n/* harmony export */   SoftObjectArray: () => (/* reexport safe */ _SoftObjectArray__WEBPACK_IMPORTED_MODULE_1__.SoftObjectArray),\n/* harmony export */   StructArray: () => (/* reexport safe */ _arrays_StructArray__WEBPACK_IMPORTED_MODULE_2__.StructArray)\n/* harmony export */ });\n/* harmony import */ var _IntArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IntArray */ \"./src/js/backend/UESaveTool/arrays/IntArray.js\");\n/* harmony import */ var _SoftObjectArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SoftObjectArray */ \"./src/js/backend/UESaveTool/arrays/SoftObjectArray.js\");\n/* harmony import */ var _arrays_StructArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../arrays/StructArray */ \"./src/js/backend/UESaveTool/arrays/StructArray.js\");\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/arrays/index.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/factories.js":
/*!************************************************!*\
  !*** ./src/js/backend/UESaveTool/factories.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PropertyFactory: () => (/* binding */ PropertyFactory)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"./src/js/backend/UESaveTool/index.js\");\n\nclass Factory {\n  constructor() {\n    this.Properties = {};\n    this.Arrays = {};\n  }\n  create(obj) {\n    let type = obj.Type;\n    if (this.Properties[type] === undefined) throw new _index__WEBPACK_IMPORTED_MODULE_0__.TypeNotImplementedError(type);\n    return this.Properties[type].from(obj);\n  }\n  createArray(obj) {\n    let type = obj.Type;\n    if (this.Arrays[type] === undefined) throw new _index__WEBPACK_IMPORTED_MODULE_0__.TypeNotImplementedError(type);\n    return this.Arrays[type].from(obj);\n  }\n}\nconst PropertyFactory = new Factory();\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/factories.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/index.js":
/*!********************************************!*\
  !*** ./src/js/backend/UESaveTool/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.ArrayProperty),\n/* harmony export */   BoolProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.BoolProperty),\n/* harmony export */   DeserializationError: () => (/* reexport safe */ _PropertyErrors__WEBPACK_IMPORTED_MODULE_6__.DeserializationError),\n/* harmony export */   EnumProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.EnumProperty),\n/* harmony export */   FloatProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.FloatProperty),\n/* harmony export */   Guid: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Guid),\n/* harmony export */   Gvas: () => (/* reexport safe */ _Gvas__WEBPACK_IMPORTED_MODULE_3__.Gvas),\n/* harmony export */   GvasHeader: () => (/* reexport safe */ _GvasHeader__WEBPACK_IMPORTED_MODULE_4__.GvasHeader),\n/* harmony export */   Int16Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Int16Property),\n/* harmony export */   Int64Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Int64Property),\n/* harmony export */   Int8Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Int8Property),\n/* harmony export */   IntArray: () => (/* reexport safe */ _arrays__WEBPACK_IMPORTED_MODULE_0__.IntArray),\n/* harmony export */   IntProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.IntProperty),\n/* harmony export */   ObjectProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.ObjectProperty),\n/* harmony export */   Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Property),\n/* harmony export */   PropertyFactory: () => (/* reexport safe */ _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory),\n/* harmony export */   SerializationError: () => (/* reexport safe */ _PropertyErrors__WEBPACK_IMPORTED_MODULE_6__.SerializationError),\n/* harmony export */   Serializer: () => (/* reexport safe */ _Serializer__WEBPACK_IMPORTED_MODULE_5__.Serializer),\n/* harmony export */   SoftObjectArray: () => (/* reexport safe */ _arrays__WEBPACK_IMPORTED_MODULE_0__.SoftObjectArray),\n/* harmony export */   SoftObjectProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.SoftObjectProperty),\n/* harmony export */   StrProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.StrProperty),\n/* harmony export */   StructArray: () => (/* reexport safe */ _arrays__WEBPACK_IMPORTED_MODULE_0__.StructArray),\n/* harmony export */   StructProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.StructProperty),\n/* harmony export */   Tuple: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Tuple),\n/* harmony export */   TypeNotImplementedError: () => (/* reexport safe */ _PropertyErrors__WEBPACK_IMPORTED_MODULE_6__.TypeNotImplementedError),\n/* harmony export */   UInt32Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.UInt32Property)\n/* harmony export */ });\n/* harmony import */ var _arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays */ \"./src/js/backend/UESaveTool/arrays/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./properties */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _Gvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Gvas */ \"./src/js/backend/UESaveTool/Gvas.js\");\n/* harmony import */ var _GvasHeader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GvasHeader */ \"./src/js/backend/UESaveTool/GvasHeader.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['ArrayProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.ArrayProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['BoolProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.BoolProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['EnumProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.EnumProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['FloatProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.FloatProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['IntProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.IntProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['UInt32Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.UInt32Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Int64Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Int64Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['UInt64Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Int64Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Int8Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Int8Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Int16Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Int16Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['ObjectProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.ObjectProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['SoftObjectProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.SoftObjectProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['StrProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.StrProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['StructProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.StructProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Tuple'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Tuple;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Guid'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Guid;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['IntArray'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.IntArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['SoftObjectArray'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.SoftObjectArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['StructProperty'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.StructArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['IntProperty'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.IntArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['IntProperty'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.IntArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['SoftObjectProperty'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.SoftObjectArray;\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/index.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/ArrayProperty.js":
/*!***************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/ArrayProperty.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayProperty: () => (/* binding */ ArrayProperty)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\n\n\nclass ArrayProperty extends ___WEBPACK_IMPORTED_MODULE_1__.Property {\n  constructor() {\n    super();\n    this.StoredPropertyType = \"\";\n    this.Property = new ___WEBPACK_IMPORTED_MODULE_1__.Property();\n  }\n  get Size() {\n    let size = 0;\n    size += this.Name.length + 1 + 4;\n    size += this.Type.length + 1 + 4;\n    size += 8; // 4 byte size + 4 byte padding\n    size += this.StoredPropertyType.length + 1 + 4;\n    size += 5; // 1 byte padding + 2 byte int + 2 byte padding\n    size += this.Property.Size;\n    return size;\n  }\n  get HeaderSize() {\n    let size = this.Name.length + 1 + 4;\n    size += this.Type.length + 1 + 4;\n    size += 8;\n    size += this.StoredPropertyType.length + 1 + 4;\n    size += 1;\n    return size;\n  }\n  get ArraySize() {\n    if (this.StoredPropertyType === 'IntProperty') return 12;else return this.Size - this.HeaderSize;\n  }\n  deserialize(serial) {\n    serial.seek(4);\n    this.StoredPropertyType = serial.readString();\n    serial.seek(1);\n    let count = serial.readInt16();\n    serial.seek(2);\n    this.Property = _factories__WEBPACK_IMPORTED_MODULE_2__.PropertyFactory.createArray({\n      Name: this.Name,\n      Type: this.StoredPropertyType\n    });\n    this.Property.deserialize(serial, count);\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_4__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.ArraySize);\n    serial.seek(4);\n    serial.writeString(this.StoredPropertyType);\n    serial.seek(1);\n    serial.writeInt16(this.Property.Count);\n    serial.seek(2);\n    serial.write(this.Property.serialize());\n    if (serial.tell !== this.Size) throw new ___WEBPACK_IMPORTED_MODULE_3__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let array = new ArrayProperty();\n    array.Name = obj.Name;\n    array.Type = obj.Type;\n    array.StoredPropertyType = obj.StoredPropertyType;\n    if (obj.Property !== undefined) array.Property = _factories__WEBPACK_IMPORTED_MODULE_2__.PropertyFactory.createArray(obj.Property);\n    return array;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/ArrayProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/BoolProperty.js":
/*!**************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/BoolProperty.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BoolProperty: () => (/* binding */ BoolProperty)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass BoolProperty extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = false;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 10;\n  }\n  deserialize(serial) {\n    serial.seek(4);\n    this.Property = serial.readUInt8() === 1;\n    serial.seek(1);\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.seek(8);\n    serial.writeUInt8(this.Property === true ? 1 : 0);\n    serial.seek(1);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new BoolProperty();\n    obj.Property = !!obj.Property;\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/BoolProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/EnumProperty.js":
/*!**************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/EnumProperty.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnumProperty: () => (/* binding */ EnumProperty)\n/* harmony export */ });\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! . */ \"./src/js/backend/UESaveTool/properties/index.js\");\n\n\n\nclass EnumProperty extends ___WEBPACK_IMPORTED_MODULE_2__.Property {\n  constructor() {\n    super();\n    this.EnumType = \"\";\n    this.Property = \"\";\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + this.Property.length + 1 + 4 + this.EnumType.length + 1 + 4 + 9;\n  }\n  deserialize(serial) {\n    serial.seek(4);\n    this.EnumType = serial.readString();\n    serial.seek(1);\n    this.Property = serial.readString();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_0__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.Property.length + 1 + 4);\n    serial.seek(4);\n    serial.writeString(this.EnumType);\n    serial.seek(1);\n    serial.writeString(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new EnumProperty();\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/EnumProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/FloatProperty.js":
/*!***************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/FloatProperty.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FloatProperty: () => (/* binding */ FloatProperty)\n/* harmony export */ });\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n\n\n\nclass FloatProperty extends ___WEBPACK_IMPORTED_MODULE_2__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 13;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readFloat();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_0__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeFloat(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new FloatProperty();\n    obj.Property = Number(obj.Property);\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/FloatProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Guid.js":
/*!******************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Guid.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Guid: () => (/* binding */ Guid)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\n\nclass Guid extends ___WEBPACK_IMPORTED_MODULE_1__.Property {\n  constructor() {\n    super();\n    this.Type = 'Guid';\n    this.Id = \"00000000-00-00-00-000000000000\";\n    this.Value = 0;\n  }\n  get Size() {\n    return 20;\n  }\n  deserialize(serial) {\n    this.Id = `${serial.read(4).swap32().toString('hex')}`;\n    this.Id += `-${serial.read(2).swap16().toString('hex')}`;\n    this.Id += `-${serial.read(2).swap16().toString('hex')}`;\n    this.Id += `-${serial.read(2).toString('hex')}`;\n    this.Id += `-${serial.read(6).toString('hex')}`;\n    this.Value = serial.readInt32();\n    return this;\n  }\n  serialize() {\n    let guid = this.Id.split('-');\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_3__.Serializer.alloc(this.Size);\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[0], 'hex').swap32());\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[1], 'hex').swap16());\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[2], 'hex').swap16());\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[3], 'hex'));\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[4], 'hex'));\n    serial.writeInt32(this.Value);\n    if (serial.tell !== 20) throw new ___WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let guid = new Guid();\n    guid.Id = obj.Id;\n    guid.Value = obj.Value;\n    return guid;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Guid.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Int16Property.js":
/*!***************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Int16Property.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Int16Property: () => (/* binding */ Int16Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass Int16Property extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 2;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readInt16();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeInt16(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new Int16Property();\n    obj.Property = obj.Property || 0;\n    const lb = -1 << 15;\n    const ub = (1 << 15) - 1;\n    if (obj.Property > ub || obj.Property < lb) {\n      throw Error(`${obj.Name} = ${obj.Property} out of range [${lb}, ${ub}]`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Int16Property.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Int64Property.js":
/*!***************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Int64Property.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Int64Property: () => (/* binding */ Int64Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass Int64Property extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0n;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 8;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readInt64();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeInt64(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new Int64Property();\n    let bi = 0n;\n    try {\n      bi = BigInt(obj.Property || 0);\n      const lb = -1n << 64n;\n      const ub = (1n << 63n) - 1n;\n      if (bi > ub || bi < lb) {\n        throw Error(`out of range [${lb}, ${ub}]`);\n      }\n      const doubleVal = Number(obj.Property);\n      if (Math.abs(doubleVal) >= 2 ** 53) {\n        obj.Property = BigInt(obj.Property).toString();\n      } else {\n        obj.Property = Number(obj.Property);\n      }\n    } catch (e) {\n      throw Error(`${obj.Name} = ${obj.Property}: ${e.toString()}`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Int64Property.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Int8Property.js":
/*!**************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Int8Property.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Int8Property: () => (/* binding */ Int8Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass Int8Property extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 1;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readInt8();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeInt8(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new Int8Property();\n    obj.Property = obj.Property || 0;\n    const lb = -128;\n    const ub = 127;\n    if (obj.Property > ub || obj.Property < lb) {\n      throw Error(`${obj.Name} = ${obj.Property} out of range [${lb}, ${ub}]`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Int8Property.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/IntProperty.js":
/*!*************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/IntProperty.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntProperty: () => (/* binding */ IntProperty),\n/* harmony export */   UInt32Property: () => (/* binding */ UInt32Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass IntProperty extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 4;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readInt32();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeInt32(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new IntProperty();\n    obj.Property = obj.Property || 0;\n    const lb = -1 << 31;\n    const ub = 0x7fffffff;\n    if (obj.Property > ub || obj.Property < lb) {\n      throw Error(`${obj.Name} = ${obj.Property} out of range [${lb}, ${ub}]`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\nclass UInt32Property extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 4;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readUInt32();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeUInt32(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new IntProperty();\n    obj.Property = obj.Property || 0;\n    const lb = 0;\n    const ub = 0xffffffff;\n    if (obj.Property > ub || obj.Property < lb) {\n      throw Error(`${obj.Name} = ${obj.Property} out of range [${lb}, ${ub}]`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/IntProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/ObjectProperty.js":
/*!****************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/ObjectProperty.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectProperty: () => (/* binding */ ObjectProperty)\n/* harmony export */ });\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n\n\n\nclass ObjectProperty extends ___WEBPACK_IMPORTED_MODULE_2__.Property {\n  constructor() {\n    super();\n    this.Property = \"\";\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + this.Property.length + 1 + 4 + 9;\n  }\n  deserialize(serial) {\n    serial.seek(5);\n    this.Property = serial.readString();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_0__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.Property.length + 1 + 4);\n    serial.seek(5);\n    serial.writeString(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new ObjectProperty();\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/ObjectProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Property.js":
/*!**********************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Property.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Property: () => (/* binding */ Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ */ \"./src/js/backend/UESaveTool/index.js\");\n\nclass Property {\n  constructor() {\n    this.Name = \"\";\n    this.Type = \"\";\n  }\n  /**\r\n   * Per-property byte size getter\r\n   * @returns {Number} `Size` in bytes of all attributes and properties held by this property to be serialized\r\n   */\n  get Size() {\n    throw new Error(`Size getter not implemented for property: ${this.Type}`);\n  }\n  /**\r\n   * Per-property deserialization function\r\n   * @param {Serializer} serial Serializer instance used to read a buffer\r\n   * @param {Number} size Size in bytes or Count of elements for Arrays\r\n   * @returns {Property} Returns `this` instance\r\n   */\n  deserialize(serial, size) {\n    throw new Error(`Deserialization not implemented for property: ${this.Type}`);\n  }\n  /**\r\n   * Per-property serialization function\r\n   * @returns {Buffer} Returns a `Buffer` of the serialized data\r\n   */\n  serialize() {\n    throw new Error(`Serialization not implemented for property: ${this.Type}`);\n  }\n  /**\r\n   * Factory function for a `Property` type. This should instantiate a `new Property` with default values if not given in the `json`\r\n   * @param {Object} json Template from which to create a new instance of a `Property`\r\n   */\n  static from(json) {\n    throw new Error(`from() not implemented for property: ${this.Type}`);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Property.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/SoftObjectProperty.js":
/*!********************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/SoftObjectProperty.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoftObjectProperty: () => (/* binding */ SoftObjectProperty)\n/* harmony export */ });\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\nclass SoftObjectProperty extends ___WEBPACK_IMPORTED_MODULE_1__.Property {\n  constructor() {\n    super();\n    this.Property = \"\";\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + this.Property.length + 1 + 4 + 13;\n  }\n  deserialize(serial) {\n    serial.seek(5);\n    this.Property = serial.readString();\n    serial.seek(4);\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_2__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.Property.length + 8);\n    serial.seek(5);\n    serial.writeString(this.Property);\n    serial.seek(4);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_0__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new SoftObjectProperty();\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/SoftObjectProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/StrProperty.js":
/*!*************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/StrProperty.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StrProperty: () => (/* binding */ StrProperty)\n/* harmony export */ });\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\nconst is8Bit = string => /^[\\x00-\\xFF]*$/.test(string);\nclass StrProperty extends ___WEBPACK_IMPORTED_MODULE_2__.Property {\n  constructor() {\n    super();\n    this.Property = \"\";\n  }\n  get Encoding() {\n    return is8Bit(this.Property) ? \"latin1\" : \"utf16le\";\n  }\n  get StringEncodedLength() {\n    return buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(this.Property + \"\\0\", this.Encoding).length;\n  }\n  get Size() {\n    const baseLength = this.Name.length + 1 + 4 + this.Type.length + 1 + 4;\n    return baseLength + this.StringEncodedLength + 4 + 9;\n  }\n  deserialize(serial) {\n    serial.seek(5);\n    [this.Property] = serial.readUnicodeString();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.StringEncodedLength + 4);\n    serial.seek(5);\n    switch (this.Encoding) {\n      case \"latin1\":\n        serial.writeInt32(this.StringEncodedLength);\n        serial.writeLatin1String(this.Property);\n        break;\n      case \"utf16le\":\n        serial.writeInt32(-(this.StringEncodedLength / 2));\n        serial.writeUTF16String(this.Property);\n        break;\n    }\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_0__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new StrProperty();\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/StrProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/StructProperty.js":
/*!****************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/StructProperty.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StructProperty: () => (/* binding */ StructProperty)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\nclass StructProperty extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.StoredPropertyType = \"\";\n    this.Properties = [];\n  }\n  get Size() {\n    let size = this.Name.length + 1 + 4;\n    size += this.Type.length + 1 + 4;\n    size += 8; // 4 byte size + 4 byte padding\n    size += this.StoredPropertyType.length + 1 + 4;\n    size += 17; // 17 byte padding\n    for (let i = 0; i < this.Properties.length; i++) {\n      size += this.Properties[i].Size;\n    }\n    return size;\n  }\n  get HeaderSize() {\n    let size = this.Name.length + 1 + 4;\n    size += this.Type.length + 1 + 4;\n    size += 8;\n    size += this.StoredPropertyType.length + 1 + 4;\n    size += 17;\n    return size;\n  }\n  get Count() {\n    return this.Properties.length;\n  }\n  deserialize(serial, size) {\n    // console.log(`Deserializing ${this.Name} Size: ${size}`)\n    serial.seek(4);\n    this.StoredPropertyType = serial.readString();\n    serial.seek(17);\n    let end = serial.tell + size;\n    let i = 0;\n    while (serial.tell < end) {\n      let Name = this.StoredPropertyType;\n      let Type = 'Tuple';\n      let prop = _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Name,\n        Type\n      });\n      prop.deserialize(serial);\n      this.Properties.push(prop);\n      i++;\n    }\n    // console.log(`Done Deserializing ${this.Name} Offset: ${serial.tell}`)\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_2__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.Size - this.HeaderSize);\n    serial.seek(4);\n    serial.writeString(this.StoredPropertyType);\n    serial.seek(17);\n    for (let i = 0; i < this.Properties.length; i++) {\n      serial.write(this.Properties[i].serialize());\n    }\n    if (serial.tell !== this.Size) throw new SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let struct = new StructProperty();\n    struct.Name = obj.Name;\n    struct.Type = obj.Type;\n    struct.StoredPropertyType = obj.StoredPropertyType;\n    struct.Properties = [];\n    if (obj.Properties !== undefined) obj.Properties.forEach(prop => struct.Properties.push(_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(prop)));\n    return struct;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/StructProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Tuple.js":
/*!*******************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Tuple.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tuple: () => (/* binding */ Tuple)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\n\nclass Tuple extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Type = 'Tuple';\n    this.Properties = [];\n  }\n  get Size() {\n    let size = 0;\n    for (let i = 0; i < this.Properties.length; i++) {\n      size += this.Properties[i].Size;\n    }\n    size += 9;\n    return size;\n  }\n  get Count() {\n    return this.Properties.length;\n  }\n  deserialize(serial) {\n    let Name;\n    while ((Name = serial.readString()) !== 'None') {\n      let Type = serial.readString();\n      let Size = serial.readInt32();\n      let prop = _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Name,\n        Type\n      });\n      prop.deserialize(serial, Size);\n      this.Properties.push(prop);\n    }\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_3__.Serializer.alloc(this.Size);\n    for (let i = 0; i < this.Properties.length; i++) {\n      serial.write(this.Properties[i].serialize());\n    }\n    serial.writeString('None');\n    if (serial.tell !== this.Size) throw new ___WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let tuple = new Tuple();\n    tuple.Name = obj.Name;\n    if (obj.Properties !== undefined) obj.Properties.forEach(prop => tuple.Properties.push(_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(prop)));\n    return tuple;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Tuple.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/index.js":
/*!*******************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayProperty: () => (/* reexport safe */ _ArrayProperty__WEBPACK_IMPORTED_MODULE_11__.ArrayProperty),\n/* harmony export */   BoolProperty: () => (/* reexport safe */ _BoolProperty__WEBPACK_IMPORTED_MODULE_1__.BoolProperty),\n/* harmony export */   EnumProperty: () => (/* reexport safe */ _EnumProperty__WEBPACK_IMPORTED_MODULE_12__.EnumProperty),\n/* harmony export */   FloatProperty: () => (/* reexport safe */ _FloatProperty__WEBPACK_IMPORTED_MODULE_6__.FloatProperty),\n/* harmony export */   Guid: () => (/* reexport safe */ _Guid__WEBPACK_IMPORTED_MODULE_14__.Guid),\n/* harmony export */   Int16Property: () => (/* reexport safe */ _Int16Property__WEBPACK_IMPORTED_MODULE_4__.Int16Property),\n/* harmony export */   Int64Property: () => (/* reexport safe */ _Int64Property__WEBPACK_IMPORTED_MODULE_5__.Int64Property),\n/* harmony export */   Int8Property: () => (/* reexport safe */ _Int8Property__WEBPACK_IMPORTED_MODULE_3__.Int8Property),\n/* harmony export */   IntProperty: () => (/* reexport safe */ _IntProperty__WEBPACK_IMPORTED_MODULE_2__.IntProperty),\n/* harmony export */   ObjectProperty: () => (/* reexport safe */ _ObjectProperty__WEBPACK_IMPORTED_MODULE_8__.ObjectProperty),\n/* harmony export */   Property: () => (/* reexport safe */ _Property__WEBPACK_IMPORTED_MODULE_0__.Property),\n/* harmony export */   SoftObjectProperty: () => (/* reexport safe */ _SoftObjectProperty__WEBPACK_IMPORTED_MODULE_9__.SoftObjectProperty),\n/* harmony export */   StrProperty: () => (/* reexport safe */ _StrProperty__WEBPACK_IMPORTED_MODULE_7__.StrProperty),\n/* harmony export */   StructProperty: () => (/* reexport safe */ _StructProperty__WEBPACK_IMPORTED_MODULE_10__.StructProperty),\n/* harmony export */   Tuple: () => (/* reexport safe */ _Tuple__WEBPACK_IMPORTED_MODULE_13__.Tuple),\n/* harmony export */   UInt32Property: () => (/* reexport safe */ _IntProperty__WEBPACK_IMPORTED_MODULE_2__.UInt32Property)\n/* harmony export */ });\n/* harmony import */ var _Property__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Property */ \"./src/js/backend/UESaveTool/properties/Property.js\");\n/* harmony import */ var _BoolProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BoolProperty */ \"./src/js/backend/UESaveTool/properties/BoolProperty.js\");\n/* harmony import */ var _IntProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IntProperty */ \"./src/js/backend/UESaveTool/properties/IntProperty.js\");\n/* harmony import */ var _Int8Property__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Int8Property */ \"./src/js/backend/UESaveTool/properties/Int8Property.js\");\n/* harmony import */ var _Int16Property__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Int16Property */ \"./src/js/backend/UESaveTool/properties/Int16Property.js\");\n/* harmony import */ var _Int64Property__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Int64Property */ \"./src/js/backend/UESaveTool/properties/Int64Property.js\");\n/* harmony import */ var _FloatProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FloatProperty */ \"./src/js/backend/UESaveTool/properties/FloatProperty.js\");\n/* harmony import */ var _StrProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./StrProperty */ \"./src/js/backend/UESaveTool/properties/StrProperty.js\");\n/* harmony import */ var _ObjectProperty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ObjectProperty */ \"./src/js/backend/UESaveTool/properties/ObjectProperty.js\");\n/* harmony import */ var _SoftObjectProperty__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SoftObjectProperty */ \"./src/js/backend/UESaveTool/properties/SoftObjectProperty.js\");\n/* harmony import */ var _StructProperty__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./StructProperty */ \"./src/js/backend/UESaveTool/properties/StructProperty.js\");\n/* harmony import */ var _ArrayProperty__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ArrayProperty */ \"./src/js/backend/UESaveTool/properties/ArrayProperty.js\");\n/* harmony import */ var _EnumProperty__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./EnumProperty */ \"./src/js/backend/UESaveTool/properties/EnumProperty.js\");\n/* harmony import */ var _Tuple__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Tuple */ \"./src/js/backend/UESaveTool/properties/Tuple.js\");\n/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Guid */ \"./src/js/backend/UESaveTool/properties/Guid.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/index.js?");

/***/ }),

/***/ "./src/js/backend/commands/commandGlobals.js":
/*!***************************************************!*\
  !*** ./src/js/backend/commands/commandGlobals.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobals: () => (/* binding */ getGlobals),\n/* harmony export */   prettyNames: () => (/* binding */ prettyNames),\n/* harmony export */   setGlobals: () => (/* binding */ setGlobals),\n/* harmony export */   teamReplaceDict: () => (/* binding */ teamReplaceDict)\n/* harmony export */ });\n// commandGlobals.js\nconst teamReplaceDict = {\n  \"Alpha Tauri\": \"Alpha Tauri\",\n  \"Alpine\": \"Alpine\",\n  \"Alfa Romeo\": \"Alfa Romeo\",\n  \"Aston Martin\": \"Aston Martin\",\n  \"Ferrari\": \"Ferrari\",\n  \"Haas\": \"Haas\",\n  \"McLaren\": \"McLaren\",\n  \"Mercedes\": \"Mercedes\",\n  \"Red Bull\": \"Red Bull\",\n  \"Williams\": \"Williams\",\n  \"Renault\": \"Renault\",\n  \"F2\": \"Formula 2\",\n  \"F3\": \"Formula 3\",\n  \"Custom Team\": \"Custom Team\"\n};\nconst prettyNames = {\n  \"visarb\": \"Visa Cashapp RB\",\n  \"toyota\": \"Toyota\",\n  \"hugo\": \"Hugo Boss\",\n  \"alphatauri\": \"Alpha Tauri\",\n  \"brawn\": \"Brawn GP\",\n  \"porsche\": \"Porsche\",\n  \"alpine\": \"Alpine\",\n  \"renault\": \"Renault\",\n  \"andretti\": \"Andretti\",\n  \"lotus\": \"Lotus\",\n  \"alfa\": \"Alfa Romeo\",\n  \"audi\": \"Audi\",\n  \"sauber\": \"Sauber\",\n  \"stake\": \"Stake Sauber\"\n};\nlet path = null;\nlet yearIteration = null;\nlet isCreateATeam = false;\nfunction setGlobals({\n  dbPath,\n  year,\n  createTeam\n}) {\n  path = dbPath || path;\n  yearIteration = year || yearIteration;\n  isCreateATeam = createTeam || isCreateATeam;\n}\nfunction getGlobals() {\n  return {\n    path,\n    yearIteration,\n    isCreateATeam\n  };\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/commandGlobals.js?");

/***/ }),

/***/ "./src/js/backend/commands/worker.js":
/*!*******************************************!*\
  !*** ./src/js/backend/commands/worker.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scriptUtils/dbUtils */ \"./src/js/backend/scriptUtils/dbUtils.js\");\n/* harmony import */ var _scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scriptUtils/carAnalysisUtils */ \"./src/js/backend/scriptUtils/carAnalysisUtils.js\");\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n/* harmony import */ var _scriptUtils_head2head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scriptUtils/head2head */ \"./src/js/backend/scriptUtils/head2head.js\");\n/* harmony import */ var _scriptUtils_editTeamUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scriptUtils/editTeamUtils */ \"./src/js/backend/scriptUtils/editTeamUtils.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../scriptUtils/eidtStatsUtils */ \"./src/js/backend/scriptUtils/eidtStatsUtils.js\");\n/* harmony import */ var _scriptUtils_transferUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../scriptUtils/transferUtils */ \"./src/js/backend/scriptUtils/transferUtils.js\");\n/* harmony import */ var _scriptUtils_calendarUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../scriptUtils/calendarUtils */ \"./src/js/backend/scriptUtils/calendarUtils.js\");\n/* harmony import */ var _UESaveHandler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../UESaveHandler */ \"./src/js/backend/UESaveHandler.js\");\n/* harmony import */ var sql_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! sql.js */ \"./node_modules/sql.js/dist/sql-wasm.js\");\n/* harmony import */ var sql_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(sql_js__WEBPACK_IMPORTED_MODULE_10__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Diccionario de comandos\nconst workerCommands = {\n  loadDB: async (data, postMessage) => {\n    console.log(data);\n    const SQL = await sql_js__WEBPACK_IMPORTED_MODULE_10___default()({\n      locateFile: file => 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/sql-wasm.wasm',\n      wasmMemory: new WebAssembly.Memory({\n        initial: 1024\n      })\n    });\n    const {\n      db,\n      metadata\n    } = await (0,_UESaveHandler__WEBPACK_IMPORTED_MODULE_9__.analyzeFileToDatabase)(data.file, SQL);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_2__.setDatabase)(db, metadata);\n    postMessage({\n      responseMessage: \"Database loaded\"\n    });\n  },\n  exportDB: async (data, postMessage) => {\n    const db = (0,_dbManager__WEBPACK_IMPORTED_MODULE_2__.getDatabase)();\n    const metadata = (0,_dbManager__WEBPACK_IMPORTED_MODULE_2__.getMetadata)();\n    const result = (0,_UESaveHandler__WEBPACK_IMPORTED_MODULE_9__.repack)(db, metadata);\n    postMessage({\n      responseMessage: \"Database exported\",\n      content: result\n    });\n  },\n  yearSelected: (year, postMessage) => {\n    const results = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchSeasonResults)(year);\n    const events = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchEventsFrom)(year);\n    const teams = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchTeamsStandings)(year);\n    postMessage({\n      responseMessage: \"Results fetched\",\n      content: [events, results, teams]\n    });\n  },\n  saveSelected: (data, postMessage) => {\n    const yearData = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.checkYearSave)();\n    postMessage({\n      responseMessage: \"Game Year\",\n      content: yearData\n    });\n    (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.checkCustomTables)(yearData[0]);\n    if (yearData[1] !== null) {\n      (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_5__.setGlobals)({\n        createTeam: true\n      });\n    } else {\n      (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_5__.setGlobals)({\n        createTeam: false\n      });\n    }\n    (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_5__.setGlobals)({\n      year: yearData[0]\n    });\n    const drivers = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchDrivers)(yearData[0]);\n    postMessage({\n      responseMessage: \"Save loaded succesfully\",\n      content: drivers\n    });\n    const staff = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchStaff)(yearData[0]);\n    postMessage({\n      responseMessage: \"Staff fetched\",\n      content: staff\n    });\n    const customConfig = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchCustomConfig)();\n    postMessage({\n      responseMessage: \"Config\",\n      content: customConfig\n    });\n    const engines = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchEngines)();\n    postMessage({\n      responseMessage: \"Engines fetched\",\n      content: engines\n    });\n    const calendar = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchCalendar)();\n    postMessage({\n      responseMessage: \"Calendar fetched\",\n      content: calendar\n    });\n    const year = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchYear)();\n    postMessage({\n      responseMessage: \"Year fetched\",\n      content: year\n    });\n    const numbers = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchDriverNumbers)();\n    postMessage({\n      responseMessage: \"Numbers fetched\",\n      content: numbers\n    });\n    const [performance, races] = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getPerformanceAllTeamsSeason)(yearData[2]);\n    postMessage({\n      responseMessage: \"Season performance fetched\",\n      content: [performance, races]\n    });\n    const attributes = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getAttributesAllTeams)(yearData[2]);\n    postMessage({\n      responseMessage: \"Performance fetched\",\n      content: [performance[performance.length - 1], attributes]\n    });\n    const carPerformance = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getPerformanceAllCars)(yearData[2]);\n    const carAttributes = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getAttributesAllCars)(yearData[2]);\n    postMessage({\n      responseMessage: \"Cars fetched\",\n      content: [carPerformance, carAttributes]\n    });\n  },\n  configuredH2H: (data, postMessage) => {\n    if (data.h2h !== \"-1\") {\n      let h2hRes;\n      if (data.mode === \"driver\") {\n        h2hRes = (0,_scriptUtils_head2head__WEBPACK_IMPORTED_MODULE_3__.fetchHead2Head)(data.h2h[0], data.h2h[1], data.year);\n      } else if (data.mode === \"team\") {\n        h2hRes = (0,_scriptUtils_head2head__WEBPACK_IMPORTED_MODULE_3__.fetchHead2HeadTeam)(data.h2h[0], data.h2h[1], data.year, \"team\");\n      }\n      if (h2hRes) {\n        postMessage({\n          responseMessage: \"H2H fetched\",\n          content: h2hRes\n        });\n      }\n    }\n    const h2hDrivers = [];\n    data.graph.forEach(driver => {\n      let res;\n      if (data.mode === \"driver\") {\n        res = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchOneDriverSeasonResults)(driver, data.year);\n      } else if (data.mode === \"team\") {\n        res = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchOneTeamSeasonResults)(driver, data.year);\n      }\n      h2hDrivers.push(res);\n    });\n\n    // Consulta eventos y los envía al frontend\n    const eventsDone = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchEventsDoneFrom)(data.year);\n    const allEvents = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchEventsFrom)(data.year);\n    h2hDrivers.push(eventsDone);\n    h2hDrivers.unshift(allEvents);\n    postMessage({\n      responseMessage: \"H2HDriver fetched\",\n      content: h2hDrivers\n    });\n  },\n  customEngines: (data, postMessage) => {\n    (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.updateCustomEngines)(data.enginesData);\n    postMessage({\n      responseMessage: \"Custom engines updated\"\n    });\n  },\n  yearSelectedH2H: (data, postMessage) => {\n    const drivers = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchDriversPerYear)(data.year);\n    postMessage({\n      responseMessage: \"DriversH2H fetched\",\n      content: drivers\n    });\n  },\n  teamRequest: (data, postMessage) => {\n    const teamID = data.teamID;\n    const teamData = (0,_scriptUtils_editTeamUtils__WEBPACK_IMPORTED_MODULE_4__.fetchTeamData)(teamID);\n    postMessage({\n      responseMessage: \"TeamData fetched\",\n      content: teamData\n    });\n  },\n  performanceRequest: (data, postMessage) => {\n    const designDict = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getPartsFromTeam)(data.teamID);\n    const unitValues = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getUnitValueFromParts)(designDict);\n    const allParts = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getAllPartsFromTeam)(data.teamID);\n    const maxDesign = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getMaxDesign)();\n    const designResponse = {\n      responseMessage: \"Parts stats fetched\",\n      content: [unitValues, allParts, maxDesign]\n    };\n    postMessage(designResponse);\n  },\n  driverRequest: (data, postMessage) => {\n    const contract = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchDriverContract)(data.driverID);\n    postMessage({\n      responseMessage: \"Contract fetched\",\n      content: contract\n    });\n  },\n  partRequest: (data, postMessage) => {\n    const partValues = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getUnitValueFromOnePart)(data.designID);\n    postMessage({\n      responseMessage: \"Part values fetched\",\n      content: partValues\n    });\n  },\n  editTeam: (data, postMessage) => {\n    (0,_scriptUtils_editTeamUtils__WEBPACK_IMPORTED_MODULE_4__.editTeam)(data);\n    postMessage({\n      responseMessage: \"Team updated\"\n    });\n  },\n  editStats: (data, postMessage) => {\n    const globals = (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_5__.getGlobals)();\n    (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__.editRetirement)(data.driverID, data.isRetired);\n    if (data.typeStaff === \"0\") {\n      (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__.editSuperlicense)(data.driverID, data.superLicense);\n      if (globals.yearIteration == \"24\") {\n        (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__.editMarketability)(data.driverID, data.marketability);\n      }\n    }\n    (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__.editStats)(data.driverID, data.typeStaff, data.statsArray, data.retirement, data.driverNum, data.wants1);\n    if (data.mentality !== \"-1\" && globals.yearIteration == \"24\") {\n      (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__.editMentality)(data.driverID, data.mentality);\n    }\n    (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__.editAge)(data.driverID, data.age);\n    if (data.newName !== \"-1\") {\n      (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__.editName)(data.driverID, data.newName);\n    }\n    if (data.newCode !== \"-1\") {\n      (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_6__.editCode)(data.driverID, data.newCode);\n    }\n    postMessage({\n      responseMessage: \"Stats updated\"\n    });\n  },\n  editPerformance: (data, postMessage) => {\n    let globals = (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_5__.getGlobals)();\n    const yearData = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.checkYearSave)();\n    (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.overwritePerformanceTeam)(data.teamID, data.parts, globals.isCreateATeam, globals.yearIteration, data.loadouts);\n    (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.updateItemsForDesignDict)(data.n_parts_designs, data.teamID);\n    (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.fitLoadoutsDict)(data.loadouts, data.teamID);\n    const [performance, races] = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getPerformanceAllTeamsSeason)(yearData[2]);\n    const performanceResponse = {\n      responseMessage: \"Season performance fetched\",\n      content: [performance, races]\n    };\n    postMessage(performanceResponse);\n    const attibutes = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getAttributesAllTeams)(yearData[2]);\n    const attributesResponse = {\n      responseMessage: \"Performance fetched\",\n      content: [performance[performance.length - 1], attibutes]\n    };\n    postMessage(attributesResponse);\n    const carPerformance = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getPerformanceAllCars)(yearData[2]);\n    const carAttributes = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_1__.getAttributesAllCars)(yearData[2]);\n    const carPerformanceResponse = {\n      responseMessage: \"Cars fetched\",\n      content: [carPerformance, carAttributes]\n    };\n    postMessage(carPerformanceResponse);\n  },\n  editEngine: (data, postMessage) => {\n    (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.editEngines)(data.engines);\n    postMessage({\n      responseMessage: \"Engines updated\"\n    });\n  },\n  editContract: (data, postMessage) => {\n    const year = (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_5__.getGlobals)().yearIteration;\n    (0,_scriptUtils_transferUtils__WEBPACK_IMPORTED_MODULE_7__.editContract)(data.driverID, data.salary, data.year, data.signBonus, data.raceBonus, data.raceBonusPos);\n    (0,_scriptUtils_transferUtils__WEBPACK_IMPORTED_MODULE_7__.futureContract)(data.futureTeam, data.driverID, data.futureSalary, data.futureYear, data.futureSignBonus, data.futureRaceBonus, data.futureRaceBonusPos, data.futurePosition, year);\n    postMessage({\n      responseMessage: \"Contract updated\"\n    });\n  },\n  editCalendar: (data, postMessage) => {\n    const year = (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_5__.getGlobals)().yearIteration;\n    console.log(year);\n    console.log((0,_commandGlobals__WEBPACK_IMPORTED_MODULE_5__.getGlobals)());\n    (0,_scriptUtils_calendarUtils__WEBPACK_IMPORTED_MODULE_8__.editCalendar)(data.calendarCodes, year);\n    postMessage({\n      responseMessage: \"Calendar updated\"\n    });\n  },\n  configUpdate(data, postMessage) {\n    (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.updateCustomConfig)(data);\n    postMessage({\n      responseMessage: \"Config updated\"\n    });\n  }\n};\nself.addEventListener('message', async e => {\n  const {\n    command,\n    data\n  } = e.data;\n  console.log(e.data);\n  console.log(\"Command:\", command);\n  console.log(\"Data:\", data);\n  if (workerCommands[command]) {\n    try {\n      await workerCommands[command](data, response => postMessage(response));\n    } catch (error) {\n      console.error(`[Worker] Error executing command '${command}':`, error);\n      postMessage({\n        responseMessage: \"Error\",\n        error: error.message\n      });\n    }\n  } else {\n    console.error(`[Worker] Unknown command: '${command}'`);\n    postMessage({\n      responseMessage: \"Unknown command\",\n      command\n    });\n  }\n});\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/worker.js?");

/***/ }),

/***/ "./src/js/backend/dbManager.js":
/*!*************************************!*\
  !*** ./src/js/backend/dbManager.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDatabase: () => (/* binding */ getDatabase),\n/* harmony export */   getMetadata: () => (/* binding */ getMetadata),\n/* harmony export */   queryDB: () => (/* binding */ queryDB),\n/* harmony export */   setDatabase: () => (/* binding */ setDatabase)\n/* harmony export */ });\nlet db = null;\nlet metadata = null;\nfunction setDatabase(database, meta) {\n  db = database;\n  console.log(\"db: \", db);\n  metadata = meta;\n}\nfunction getDatabase() {\n  return db;\n}\nfunction getMetadata() {\n  return metadata;\n}\n\n/**\r\n * Ejecuta una consulta SQL y devuelve el resultado según 'type'.\r\n * @param {string} query - La consulta a ejecutar.\r\n * @param {\"singleValue\"|\"singleRow\"|\"allRows\"} [type=\"allRows\"] - El tipo de resultado.\r\n * @returns {any} \r\n *    - 'singleValue': un único valor (o null).\r\n *    - 'singleRow': la primera fila (array de valores) o null.\r\n *    - 'allRows': array de filas (cada fila, array de valores), o [] si no hay ninguna.\r\n */\nfunction queryDB(query, type = 'allRows') {\n  const res = db.exec(query); // o tu instancia real de db\n  if (!res.length) {\n    // No hay resultsets\n    return type === 'allRows' ? [] : null;\n  }\n  const rows = res[0].values;\n  if (!rows.length) {\n    // Hay resultset pero 0 filas\n    return type === 'allRows' ? [] : null;\n  }\n  switch (type) {\n    case 'singleValue':\n      // Devuelvo la primera columna de la primera fila\n      return rows[0][0] ?? null;\n    case 'singleRow':\n      // Devuelvo la primera fila entera (array)\n      return rows[0];\n    case 'allRows':\n    default:\n      // Devuelvo todas las filas\n      return rows;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/dbManager.js?");

/***/ }),

/***/ "./src/js/backend/initSql.js":
/*!***********************************!*\
  !*** ./src/js/backend/initSql.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var sql_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sql.js */ \"./node_modules/sql.js/dist/sql-wasm.js\");\n/* harmony import */ var sql_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sql_js__WEBPACK_IMPORTED_MODULE_0__);\n\n(async () => {\n  // Inicia la instancia de sql.js\n  const SQL = await sql_js__WEBPACK_IMPORTED_MODULE_0___default()({\n    locateFile: file => 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/sql-wasm.wasm',\n    wasmMemory: new WebAssembly.Memory({\n      initial: 1024\n    })\n    // O la ruta local de tu sql-wasm.wasm\n  });\n})();\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/initSql.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/calendarUtils.js":
/*!*****************************************************!*\
  !*** ./src/js/backend/scriptUtils/calendarUtils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   editCalendar: () => (/* binding */ editCalendar)\n/* harmony export */ });\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n\nconst weatherDict = {\n  \"0\": 1,\n  \"1\": 2,\n  \"2\": 4,\n  \"3\": 8,\n  \"4\": 16,\n  \"5\": 32\n};\nfunction editCalendar(calendarStr, year_iteration) {\n  const calendar = calendarStr.toLowerCase();\n  let races = calendar.split(\" \");\n  const yearIteration = year_iteration;\n  let maxRaces;\n  let weeks;\n  if (yearIteration === \"24\") {\n    maxRaces = 24;\n    weeks = [11, 8, 15, 36, 24, 20, 22, 25, 26, 9, 28, 29, 34, 37, 13, 42, 41, 43, 48, 17, 33, 19, 46, 47];\n  } else if (yearIteration === \"23\") {\n    maxRaces = 23;\n    weeks = [12, 8, 16, 21, 20, 23, 25, 26, 10, 28, 29, 34, 36, 37, 42, 41, 43, 46, 17, 33, 19, 45, 39];\n  } else {\n    maxRaces = 0;\n    weeks = [];\n  }\n  const raceBlanks = maxRaces - races.length;\n  const daySeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    SELECT Day, CurrentSeason\n    FROM Player_State\n  `, 'singleRow');\n  let actualCalendar = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    SELECT TrackID\n    FROM Races\n    WHERE SeasonID = ${daySeason[1]}\n  `, 'allRows') || [];\n  actualCalendar = actualCalendar.map(row => row[0]);\n  const newCalendar = races.map(gp => parseInt(gp.slice(0, -5), 10));\n  if (arraysEqual(actualCalendar, newCalendar)) {\n    const ids = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT RaceID\n      FROM Races\n      WHERE SeasonID = ${daySeason[1]}\n    `, 'allRows') || [];\n    const raceIDs = ids.map(row => row[0]);\n    for (let i = 0; i < races.length; i++) {\n      const race = races[i];\n      const state = race.slice(-1);\n      const format = race.slice(-2, -1);\n      const rainR = weatherDict[race.slice(-3, -2)];\n      const rainRBool = parseFloat(rainR) >= 8 ? 1 : 0;\n      const rainQ = weatherDict[race.slice(-4, -3)];\n      const rainQBool = parseFloat(rainQ) >= 8 ? 1 : 0;\n      const rainP = weatherDict[race.slice(-5, -4)];\n      const rainPBool = parseFloat(rainP) >= 8 ? 1 : 0;\n      // race_code = race.slice(0, -5); // en Python, no lo usas aquí para nada\n\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Races\n        SET\n          RainQualifying = ${rainQBool},\n          WeatherStateQualifying = ${rainQ},\n          RainRace = ${rainRBool},\n          WeatherStateRace = ${rainR},\n          WeekendType = ${format}\n        WHERE RaceID = ${raceIDs[i]}\n      `);\n    }\n  } else {\n    const randomBlanks = [];\n    for (let i = 0; i < raceBlanks; i++) {\n      let n = Math.floor(Math.random() * maxRaces);\n      while (randomBlanks.includes(n)) {\n        n = Math.floor(Math.random() * maxRaces);\n      }\n      randomBlanks.push(n);\n    }\n    for (const el of randomBlanks) {\n      weeks[el] = 0;\n    }\n    weeks = weeks.filter(x => x !== 0);\n    weeks.sort();\n    let leapYearCount = 2;\n    const yearDiff = daySeason[1] - 2023;\n    leapYearCount += yearDiff;\n    let dayStart = 44927 + yearDiff * 365 + Math.floor(leapYearCount / 4);\n    const dayOfWeek = dayStart % 7;\n    const daysUntilSunday = (8 - dayOfWeek) % 7;\n    dayStart += daysUntilSunday;\n    const lastRaceLastSeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT MAX(RaceID)\n      FROM Races\n      WHERE SeasonID = ${daySeason[1] - 1}\n    `, 'singleValue');\n    const firstRaceThisSeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT MIN(RaceID)\n      FROM Races\n      WHERE SeasonID = ${daySeason[1]}\n    `, 'singleValue');\n    let raceid;\n    if (parseInt(lastRaceLastSeason, 10) === parseInt(firstRaceThisSeason, 10) - 1) {\n      raceid = lastRaceLastSeason;\n    } else {\n      raceid = firstRaceThisSeason - 1;\n    }\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      DELETE FROM Races\n      WHERE State != 2\n        AND SeasonID = ${daySeason[1]}\n    `);\n    for (let i = 0; i < races.length; i++) {\n      const race = races[i];\n      const state = race.slice(-1);\n      const format = race.slice(-2, -1);\n      const rainR = weatherDict[race.slice(-3, -2)];\n      const rainRBool = parseFloat(rainR) >= 8 ? 1 : 0;\n      const rainQ = weatherDict[race.slice(-4, -3)];\n      const rainQBool = parseFloat(rainQ) >= 8 ? 1 : 0;\n      const rainP = weatherDict[race.slice(-5, -4)];\n      const rainPBool = parseFloat(rainP) >= 8 ? 1 : 0;\n      const raceCode = parseInt(race.slice(0, -5), 10);\n      const temps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT TemperatureMin, TemperatureMax\n        FROM Races_Templates\n        WHERE TrackID = ${raceCode}\n      `, 'singleRow');\n      const tempP = randomInt(temps[0], temps[1]);\n      const tempQ = randomInt(temps[0], temps[1]);\n      const tempR = randomInt(temps[0], temps[1]);\n      const day = (weeks[i] + 1) * 7 + dayStart;\n      raceid += 1;\n      if (state !== \"2\") {\n        (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          INSERT INTO Races\n          VALUES (\n            ${raceid},\n            ${daySeason[1]},\n            ${day},\n            ${raceCode},\n            ${state},\n            ${rainPBool},\n            ${tempP},\n            ${rainP},\n            ${rainQBool},\n            ${tempQ},\n            ${rainQ},\n            ${rainRBool},\n            ${tempR},\n            ${rainR},\n            ${format}\n          )\n        `);\n      }\n    }\n  }\n}\n\n// Helpers\n\nfunction arraysEqual(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nfunction randomInt(min, max) {\n  const mn = parseInt(min, 10);\n  const mx = parseInt(max, 10);\n  return Math.floor(Math.random() * (mx - mn + 1)) + mn;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/calendarUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/carAnalysisUtils.js":
/*!********************************************************!*\
  !*** ./src/js/backend/scriptUtils/carAnalysisUtils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add4Items: () => (/* binding */ add4Items),\n/* harmony export */   addNewDesign: () => (/* binding */ addNewDesign),\n/* harmony export */   addPartToLoadout: () => (/* binding */ addPartToLoadout),\n/* harmony export */   calculateCarAttributes: () => (/* binding */ calculateCarAttributes),\n/* harmony export */   calculateOverallPerformance: () => (/* binding */ calculateOverallPerformance),\n/* harmony export */   changeExpertiseBased: () => (/* binding */ changeExpertiseBased),\n/* harmony export */   convertPercentageToValue: () => (/* binding */ convertPercentageToValue),\n/* harmony export */   copyFromTable: () => (/* binding */ copyFromTable),\n/* harmony export */   createNewItem: () => (/* binding */ createNewItem),\n/* harmony export */   deleteItem: () => (/* binding */ deleteItem),\n/* harmony export */   fitLatestDesignsAllGrid: () => (/* binding */ fitLatestDesignsAllGrid),\n/* harmony export */   fitLatestDesignsOneTeam: () => (/* binding */ fitLatestDesignsOneTeam),\n/* harmony export */   fitLoadoutsDict: () => (/* binding */ fitLoadoutsDict),\n/* harmony export */   getAllPartsFromTeam: () => (/* binding */ getAllPartsFromTeam),\n/* harmony export */   getAllRaces: () => (/* binding */ getAllRaces),\n/* harmony export */   getAttributesAllCars: () => (/* binding */ getAttributesAllCars),\n/* harmony export */   getAttributesAllTeams: () => (/* binding */ getAttributesAllTeams),\n/* harmony export */   getBestParts: () => (/* binding */ getBestParts),\n/* harmony export */   getBestPartsUntil: () => (/* binding */ getBestPartsUntil),\n/* harmony export */   getCarStats: () => (/* binding */ getCarStats),\n/* harmony export */   getContributorsDict: () => (/* binding */ getContributorsDict),\n/* harmony export */   getDriverNumberWithCar: () => (/* binding */ getDriverNumberWithCar),\n/* harmony export */   getFirstDaySeason: () => (/* binding */ getFirstDaySeason),\n/* harmony export */   getFittedDesigns: () => (/* binding */ getFittedDesigns),\n/* harmony export */   getMaxDesign: () => (/* binding */ getMaxDesign),\n/* harmony export */   getPartStatsDict: () => (/* binding */ getPartStatsDict),\n/* harmony export */   getPartsFromTeam: () => (/* binding */ getPartsFromTeam),\n/* harmony export */   getPerformanceAllCars: () => (/* binding */ getPerformanceAllCars),\n/* harmony export */   getPerformanceAllTeams: () => (/* binding */ getPerformanceAllTeams),\n/* harmony export */   getPerformanceAllTeamsSeason: () => (/* binding */ getPerformanceAllTeamsSeason),\n/* harmony export */   getRacesDays: () => (/* binding */ getRacesDays),\n/* harmony export */   getUnitValueFromOnePart: () => (/* binding */ getUnitValueFromOnePart),\n/* harmony export */   getUnitValueFromParts: () => (/* binding */ getUnitValueFromParts),\n/* harmony export */   makeAttributesReadable: () => (/* binding */ makeAttributesReadable),\n/* harmony export */   overwritePerformanceTeam: () => (/* binding */ overwritePerformanceTeam),\n/* harmony export */   updateItemsForDesignDict: () => (/* binding */ updateItemsForDesignDict)\n/* harmony export */ });\n/* harmony import */ var _carConstants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carConstants.js */ \"./src/js/backend/scriptUtils/carConstants.js\");\n/* harmony import */ var _dbManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dbManager.js */ \"./src/js/backend/dbManager.js\");\n\n\n\n/**\r\n * Devuelve las mejores piezas para cada equipo.\r\n * @param {boolean} customTeam - si es true, incluye el equipo 32 además de 1..10\r\n */\nfunction getBestParts(customTeam = false) {\n  const teams = {};\n  // Creamos la lista de equipos\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) // 1..10 y 32\n  : [...Array(10).keys()].map(i => i + 1); // 1..10\n\n  for (const teamId of teamList) {\n    teams[teamId] = getPartsFromTeam(teamId);\n  }\n  return teams;\n}\n\n/**\r\n * Obtiene TODAS las piezas (varias designs) de un equipo\r\n * (Como en Python: get_all_parts_from_team)\r\n */\nfunction getAllPartsFromTeam(teamId) {\n  // Obtenemos Day y Season\n  const [day, currentSeason] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(\"SELECT Day, CurrentSeason FROM Player_State\", \"singleRow\") || [0, 0];\n\n  // Query para extraer las designs del PartType con DayCompleted > 0\n  const query = `\n        SELECT \n          d.DesignID,\n          d.DayCreated,\n          d.DayCompleted, \n          (\n            SELECT r.TrackID \n            FROM Races r \n            WHERE r.Day >= d.DayCompleted \n            ORDER BY r.Day ASC \n            LIMIT 1\n          ) AS TrackID\n        FROM Parts_Designs d\n        WHERE \n          d.PartType = ?\n          AND d.TeamID = ?\n          AND d.ValidFrom = ?\n          AND d.DayCompleted > 0\n      `;\n\n  // En Python se usaba placeholders \"?\", en JS podemos hacer un template\n  // pero si necesitas SQL parametrizado, deberías adaptarlo. Por simplicidad:\n  // haremos un template string con la parte variable:\n  // d.PartType = {j}, d.TeamID = {teamId}, d.ValidFrom = {currentSeason}\n  // y repetimos para cada PartType.\n\n  const partsDict = {};\n\n  // Ej. en Python, PartType iba de 3..8\n  for (let j = 3; j < 9; j++) {\n    const sql = `\n          SELECT \n            d.DesignID,\n            d.DayCreated,\n            d.DayCompleted, \n            (\n              SELECT r.TrackID \n              FROM Races r \n              WHERE r.Day >= d.DayCompleted \n              ORDER BY r.Day ASC \n              LIMIT 1\n            ) AS TrackID\n          FROM Parts_Designs d\n          WHERE \n            d.PartType = ${j}\n            AND d.TeamID = ${teamId}\n            AND d.ValidFrom = ${currentSeason}\n            AND d.DayCompleted > 0\n        `;\n    let designs = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(sql, \"allRows\");\n\n    // Para cada design, agregamos info extra: equipped_1, equipped_2, n_parts\n    designs = designs.map(designRow => {\n      // designRow => [ DesignID, DayCreated, DayCompleted, TrackID ]\n      const [designID, dayCreated, dayCompleted, trackID] = designRow;\n\n      // Vemos si está equipado en loadout 1\n      const equipped1 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT DesignID\n            FROM Parts_CarLoadout\n            WHERE TeamID = ${teamId} \n              AND PartType = ${j} \n              AND LoadoutID = 1\n          `, \"singleValue\");\n      let eq1 = equipped1 === designID ? 1 : 0;\n\n      // Equipado en loadout 2?\n      const equipped2 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT DesignID\n            FROM Parts_CarLoadout\n            WHERE TeamID = ${teamId} \n              AND PartType = ${j} \n              AND LoadoutID = 2\n          `, \"singleValue\");\n      let eq2 = equipped2 === designID ? 1 : 0;\n\n      // Número de partes (items) construidas\n      const nParts = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT COUNT(*)\n            FROM Parts_Items\n            WHERE DesignID = ${designID}\n              AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[j]}\n          `, \"singleValue\") || 0;\n\n      // Devolvemos un nuevo array con toda la info\n      return [designID,\n      // 0\n      dayCreated,\n      // 1\n      dayCompleted,\n      // 2\n      trackID,\n      // 3\n      eq1,\n      // 4\n      eq2,\n      // 5\n      nParts // 6\n      ];\n    });\n\n    // Asignamos a partsDict[ parts[j] ] = designs\n    // Asumiendo que 'parts[j]' existe. Ajusta si es distinto\n    partsDict[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.parts[j]] = designs;\n  }\n  return partsDict;\n}\n\n/**\r\n * Obtiene las piezas \"mejores\" (MAX(DesignID)) para un equipo y su season actual\r\n * (Similar a get_parts_from_team en el Python original)\r\n */\nfunction getPartsFromTeam(teamId) {\n  // Day, Season\n  const [day, season] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(\"SELECT Day, CurrentSeason FROM Player_State\", \"singleRow\") || [0, 0];\n  const designs = {};\n  // En Python, j va de 3..8 => motor = 0\n  for (let j = 3; j < 9; j++) {\n    const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n          SELECT MAX(DesignID)\n          FROM Parts_Designs\n          WHERE PartType = ${j}\n            AND TeamID = ${teamId}\n            AND ValidFrom = ${season}\n            AND (DayCompleted > 0 OR DayCreated < 0)\n        `, \"allRows\");\n    designs[j] = row;\n  }\n\n  // engine:\n  const engine = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(DesignID)\n        FROM Parts_Designs\n        WHERE PartType = 0\n          AND TeamID = ${teamId}\n      `, \"allRows\");\n  designs[0] = engine;\n  return designs;\n}\n\n/**\r\n * Obtiene las mejores piezas hasta un día concreto (versión con day param)\r\n * (Similar a get_best_parts_until en el Python original)\r\n */\nfunction getBestPartsUntil(day, customTeam = false) {\n  // Day, season\n  const [dayCur, season] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Day, CurrentSeason \n        FROM Player_State\n      `, \"singleRow\") || [0, 0];\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  const teams = {};\n  for (const t of teamList) {\n    const designs = {};\n    for (let j = 3; j < 9; j++) {\n      const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT MAX(DesignID)\n            FROM Parts_Designs\n            WHERE PartType = ${j}\n              AND TeamID = ${t}\n              AND ValidFrom = ${season}\n              AND ((DayCompleted > 0 AND DayCompleted <= ${day}) OR DayCreated < 0)\n          `, \"allRows\");\n      designs[j] = row;\n    }\n    // engine\n    const engine = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n          SELECT MAX(DesignID)\n          FROM Parts_Designs\n          WHERE PartType = 0\n            AND TeamID = ${t}\n        `, \"allRows\");\n    designs[0] = engine;\n    teams[t] = designs;\n  }\n  return teams;\n}\n\n/**\r\n * Devuelve un diccionario con los valores de stats (PartStat -> Value)\r\n * de cada parte (partType).\r\n * (get_car_stats en el Python original)\r\n */\nfunction getCarStats(designDict) {\n  const statsValues = {};\n  for (const part in designDict) {\n    // designDict[part] es algo como [[DesignID], ...] en el Python original\n    // asumiendo designDict[part][0][0] sea el designID\n    // Ojo: si no hay array, chequear que exista\n    const designInfo = designDict[part][0];\n    const designID = designInfo && designInfo.length ? designInfo[0] : null;\n    if (designID !== null) {\n      const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT PartStat, Value\n            FROM Parts_Designs_StatValues\n            WHERE DesignID = ${designID}\n          `, \"allRows\");\n      // rows => [ [PartStat, Value], [PartStat, Value], ... ]\n      const tmp = {};\n      for (const [stat, val] of rows) {\n        tmp[stat] = Math.round(val * 1000) / 1000; // round to 3 decimals\n      }\n      statsValues[part] = tmp;\n    } else {\n      // Si no hay design -> pon stats 0\n      // En Python: stats_values[part] = { stat: 0 for stat in default_parts_stats[part] }\n      // Asumimos default_parts_stats[part] es un array de stats\n      const zeroStats = {};\n      for (const stat of _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.defaultPartsStats[part]) {\n        zeroStats[stat] = 0;\n      }\n      statsValues[part] = zeroStats;\n    }\n  }\n  return statsValues;\n}\n\n/**\r\n * Devuelve el UnitValue de cada stat de un dict de diseños\r\n * (En Python: get_unitvalue_from_parts)\r\n */\nfunction getUnitValueFromParts(designDict) {\n  const statsValues = {};\n  for (const part in designDict) {\n    const designID = designDict[part][0][0];\n    const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n          SELECT PartStat, UnitValue\n          FROM Parts_Designs_StatValues\n          WHERE DesignID = ${designID}\n        `, 'allRows');\n    const tmp = {};\n    for (const [stat, unitVal] of rows) {\n      tmp[stat] = unitVal;\n    }\n    statsValues[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.parts[part]] = tmp;\n  }\n  return statsValues;\n}\n\n/**\r\n * UnitValue de un solo diseño\r\n * (get_unitvalue_from_one_part en Python)\r\n */\nfunction getUnitValueFromOnePart(designId) {\n  const partType = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT PartType\n            FROM Parts_Designs\n            WHERE DesignID = ${designId}\n        `, 'singleValue');\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT PartStat, UnitValue\n            FROM Parts_Designs_StatValues\n            WHERE DesignID = ${designId}\n        `, 'allRows');\n  const statsValues = {};\n  for (const [stat, uv] of rows) {\n    statsValues[stat] = uv;\n  }\n  const partValues = {};\n  partValues[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.parts[partType]] = statsValues;\n  return partValues;\n}\n\n/**\r\n * Simple helper: convierte un porcentaje a valor físico según min/max\r\n * (convert_percentage_to_value en Python)\r\n */\nfunction convertPercentageToValue(attribute, percentage, minMax) {\n  // minMax[attribute] = [min_value, max_value]\n  const [minValue, maxValue] = minMax[attribute];\n  return minValue + (maxValue - minValue) * (percentage / 100.0);\n}\n\n/**\r\n * Pasa todos los atributos a rango human-readable\r\n * (make_attributes_readable en Python)\r\n */\nfunction makeAttributesReadable(attributes) {\n  for (const attribute in attributes) {\n    attributes[attribute] = convertPercentageToValue(attribute, attributes[attribute], _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.attributesMinMax);\n    // redondea a 3 dec\n    attributes[attribute] = Math.round(attributes[attribute] * 1000) / 1000;\n    attributes[attribute] = `${attributes[attribute]} ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.attributesUnits[attribute]}`;\n  }\n  return attributes;\n}\n\n/**\r\n * Calcula la performance global sumando (valorStat * contribución)\r\n * (calculate_overall_performance en Python)\r\n */\nfunction calculateOverallPerformance(attributes) {\n  let ovr = 0;\n  for (const attr in attributes) {\n    ovr += attributes[attr] * _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.attributesContributions[attr];\n  }\n  return Math.round(ovr * 100) / 100;\n}\n\n/**\r\n * Devuelve un diccionario con las contribuciones\r\n * (get_contributors_dict en Python)\r\n */\nfunction getContributorsDict() {\n  // Lógica similar a Python\n  const contributorsValues = {};\n  const totalValues = {};\n  for (const attribute in _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes) {\n    totalValues[attribute] = 0;\n    const referenceDict = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__[`${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes[attribute]}_contributors`];\n    // O donde sea que esté definido\n    for (const stat in referenceDict) {\n      totalValues[attribute] += referenceDict[stat];\n    }\n  }\n  for (const attribute in _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes) {\n    const referenceDict = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__[`${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes[attribute]}_contributors`];\n    contributorsValues[attribute] = {};\n    for (const stat in referenceDict) {\n      contributorsValues[attribute][stat] = Math.round(referenceDict[stat] / totalValues[attribute] * 1000) / 1000;\n    }\n  }\n  return contributorsValues;\n}\n\n/**\r\n * Suma los factores de cada stat de cada parte\r\n * (get_part_stats_dict en Python)\r\n */\nfunction getPartStatsDict(carDict) {\n  const partStats = {};\n  for (const part in carDict) {\n    for (const stat in carDict[part]) {\n      const factor = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__[`${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.stats[stat]}_factors`][part];\n      if (!partStats[stat]) {\n        partStats[stat] = 0;\n      }\n      partStats[stat] += carDict[part][stat] * factor;\n    }\n  }\n  return partStats;\n}\n\n/**\r\n * Calcula los atributos finales sumando (contribución * partStats[stat]) / 10\r\n * (calculate_car_attributes en Python)\r\n */\nfunction calculateCarAttributes(contributors, partsStats) {\n  const attributesDict = {};\n  // Ajuste: partsStats[16] = (20000 - partsStats[15]) / 20  (como en el .py)\n  partsStats[16] = (20000 - partsStats[15]) / 20;\n  for (const attribute in contributors) {\n    attributesDict[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes[attribute]] = 0;\n    for (const stat in contributors[attribute]) {\n      attributesDict[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes[attribute]] += contributors[attribute][stat] * partsStats[stat] / 10;\n    }\n  }\n  return attributesDict;\n}\n\n/**\r\n * Obtiene días de carreras\r\n * (get_races_days en Python)\r\n */\nfunction getRacesDays() {\n  const [day, season] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Day, CurrentSeason \n        FROM Player_State\n      `, 'singleRow') || [0, 0];\n\n  // state=2 => completadas, state=0 => no comenzadas\n  const races = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT RaceID, Day, TrackID\n        FROM Races\n        WHERE SeasonID = ${season}\n          AND State = 2\n      `, 'allRows');\n\n  // first_race_state_0 => la primera no iniciada\n  const firstRaceState0 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT RaceID, Day, TrackID\n        FROM Races\n        WHERE SeasonID = ${season}\n          AND State = 0\n        ORDER BY Day ASC\n        LIMIT 1\n      `, 'singleRow');\n  if (firstRaceState0) {\n    races.push(firstRaceState0);\n  }\n  return races;\n}\nfunction getAllRaces() {\n  const [day, season] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Day, CurrentSeason\n        FROM Player_State\n      `, 'singleRow') || [0, 0];\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT RaceID, Day, TrackID\n        FROM Races\n        WHERE SeasonID = ${season}\n      `, 'allRows');\n  return rows;\n}\n\n/**\r\n * Devuelve la performance de todos los equipos en un día dado (o actual)\r\n * (get_performance_all_teams en Python)\r\n */\nfunction getPerformanceAllTeams(day = null, previous = null, customTeam = false) {\n  const teams = {};\n  const contributors = getContributorsDict();\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  let parts;\n  if (day == null) {\n    // Usamos getBestParts\n    parts = getBestParts(customTeam);\n  } else {\n    parts = getBestPartsUntil(day, customTeam);\n  }\n  for (const teamId of teamList) {\n    const dict = getCarStats(parts[teamId]);\n    const partStats = getPartStatsDict(dict);\n    const attributes = calculateCarAttributes(contributors, partStats);\n    const ovr = calculateOverallPerformance(attributes);\n    teams[teamId] = ovr;\n  }\n  return teams;\n}\n\n/**\r\n * Devuelve la performance de todos los coches (car1 y car2) de cada equipo\r\n * (get_performance_all_cars en Python)\r\n */\nfunction getPerformanceAllCars(customTeam = false) {\n  const cars = {};\n  const contributors = getContributorsDict();\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n\n  // Este método en Python usaba \"get_fitted_designs(custom_team=custom_team)\"\n  const carsParts = getFittedDesigns(customTeam);\n  for (const teamId of Object.keys(carsParts)) {\n    cars[teamId] = {};\n    for (const carId of Object.keys(carsParts[teamId])) {\n      const dict = getCarStats(carsParts[teamId][carId]);\n      // Falta ver si hay partes sin design\n      const missingParts = [];\n      for (const part in carsParts[teamId][carId]) {\n        if (carsParts[teamId][carId][part][0][0] == null) {\n          missingParts.push(part);\n        }\n      }\n      const partStats = getPartStatsDict(dict);\n      const attributes = calculateCarAttributes(contributors, partStats);\n      const ovr = calculateOverallPerformance(attributes);\n      const driverNumber = getDriverNumberWithCar(teamId, carId);\n      cars[teamId][carId] = [ovr, driverNumber, missingParts];\n    }\n  }\n  return cars;\n}\n\n/**\r\n * Devuelve los atributos de todos los coches\r\n * (get_attributes_all_cars en Python)\r\n */\nfunction getAttributesAllCars(customTeam = false) {\n  const cars = {};\n  const contributors = getContributorsDict();\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  const carsParts = getFittedDesigns(customTeam);\n  for (const teamId of Object.keys(carsParts)) {\n    cars[teamId] = {};\n    for (const carId of Object.keys(carsParts[teamId])) {\n      const dict = getCarStats(carsParts[teamId][carId]);\n      const partStats = getPartStatsDict(dict);\n      const attributes = calculateCarAttributes(contributors, partStats);\n      // (En Python, se dejaba la opción de \"make_attributes_readable\")\n      // attributes = makeAttributesReadable(attributes);\n      cars[teamId][carId] = attributes;\n    }\n  }\n  return cars;\n}\n\n/**\r\n * Devuelve el número del driver que conduce un coche concreto\r\n * (get_driver_number_with_car en Python)\r\n */\nfunction getDriverNumberWithCar(teamId, carId) {\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT con.StaffID\n        FROM Staff_Contracts con\n        JOIN Staff_GameData gam ON con.StaffID = gam.StaffID\n        WHERE con.TeamID = ${teamId}\n          AND gam.StaffType = 0\n          AND con.ContractType = 0\n          AND con.PosInTeam = ${carId}\n      `, 'singleRow');\n  if (!row) {\n    return null;\n  }\n  const driverId = row[0];\n  const number = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Number\n        FROM Staff_DriverNumbers\n        WHERE CurrentHolder = ${driverId}\n      `, 'singleValue');\n  return number ?? null;\n}\n\n/**\r\n * Obtiene los diseños equipados en cada coche (loadout 1 y 2) de cada equipo\r\n * (get_fitted_designs en Python)\r\n */\nfunction getFittedDesigns(customTeam = false) {\n  const teams = {};\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  for (const t of teamList) {\n    teams[t] = {};\n    // loadout => 1 o 2\n    for (let loadout = 1; loadout <= 2; loadout++) {\n      const designs = {};\n      for (let part = 3; part < 9; part++) {\n        const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                    SELECT DesignID\n                    FROM Parts_CarLoadout\n                    WHERE TeamID = ${t}\n                        AND PartType = ${part}\n                        AND LoadoutID = ${loadout}\n                    `, 'allRows');\n        designs[part] = row;\n      }\n      // engine\n      const engine = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                    SELECT MAX(DesignID)\n                    FROM Parts_Designs\n                    WHERE PartType = 0\n                    AND TeamID = ${t}\n                `, 'allRows');\n      designs[0] = engine;\n      teams[t][loadout] = designs;\n    }\n  }\n  return teams;\n}\n\n// Asumiendo que tu clase CarAnalysisUtils ya tiene otros métodos traducidos\n// Añadimos/completamos con estos métodos:\n\nfunction fitLatestDesignsAllGrid(customTeam = false) {\n  // SELECT Day, CurrentSeason FROM Player_State\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Day, CurrentSeason \n        FROM Player_State\n        `, \"singleRow\");\n  if (!row) {\n    console.warn(\"No Player_State data found.\");\n    return;\n  }\n  const [day, season] = row;\n  // Obtenemos las mejores piezas hasta 'day'\n  const bestParts = getBestPartsUntil(day, customTeam);\n\n  // Para cada equipo en bestParts\n  for (const team of Object.keys(bestParts)) {\n    fitLatestDesignsOneTeam(team, bestParts[team]);\n  }\n\n  // conn.commit() (en SQL.js no es necesario típicamente)\n}\nfunction fitLatestDesignsOneTeam(teamId, parts) {\n  // Recorremos loadout = 1 y 2\n  for (let loadout = 1; loadout <= 2; loadout++) {\n    // Para cada 'part' en el objeto parts\n    for (const partKey of Object.keys(parts)) {\n      const part = Number(partKey);\n      if (part !== 0) {\n        // En Python, parts[part] = [[designId], ...], asumiendo la estructura\n        const design = parts[part][0][0]; // -> designID\n        // fitted_design actual\n        const fittedRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT DesignID \n                        FROM Parts_CarLoadout\n                        WHERE TeamID = ${teamId}\n                        AND PartType = ${part}\n                        AND LoadoutID = ${loadout}\n                    `, \"singleRow\");\n        if (!fittedRow) {\n          console.warn(`No fittedRow found for TeamID=${teamId}, part=${part}, loadout=${loadout}`);\n          continue;\n        }\n        const fittedDesign = fittedRow[0];\n        if (design !== fittedDesign) {\n          // Buscamos items disponibles\n          const partsAvailable = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID\n                        FROM Parts_Items\n                        WHERE DesignID = ${design}\n                            AND AssociatedCar IS NULL\n                        `, \"allRows\");\n          if (!partsAvailable.length) {\n            // no hay items disponibles => creamos uno nuevo\n            const item = createNewItem(design, part);\n            addPartToLoadout(design, part, teamId, loadout, item);\n          } else {\n            const item = partsAvailable[0][0]; // primer item\n            addPartToLoadout(design, part, teamId, loadout, item);\n          }\n        } else {\n          // design ya está equipado en este loadout\n          // Miramos si loadout 1 y 2 comparten item\n          const otherLoadout = loadout === 2 ? 1 : 2;\n          const fittedItemOther = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID \n                        FROM Parts_CarLoadout\n                        WHERE TeamID = ${teamId}\n                            AND PartType = ${part}\n                            AND LoadoutID = ${otherLoadout}\n                        `, \"singleRow\");\n          const fittedItem = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID \n                        FROM Parts_CarLoadout\n                        WHERE TeamID = ${teamId}\n                            AND PartType = ${part}\n                            AND LoadoutID = ${loadout}\n                        `, \"singleRow\");\n          if (fittedItemOther && fittedItem && fittedItemOther[0] === fittedItem[0]) {\n            // Ambos loadouts tienen el mismo item => creamos uno nuevo\n            const item = createNewItem(design, part);\n            addPartToLoadout(design, part, teamId, loadout, item);\n          }\n        }\n      }\n    }\n  }\n\n  // commit\n  // (en SQL.js no es necesario, pero podrías hacer db.run(\"BEGIN/COMMIT\") si fuera el caso)\n}\nfunction updateItemsForDesignDict(designDict, teamId) {\n  for (const designKey of Object.keys(designDict)) {\n    const design = Number(designKey);\n    const nParts = parseInt(designDict[designKey], 10);\n\n    // SELECT PartType FROM Parts_Designs WHERE DesignID = {design}\n    const partType = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT PartType\n        FROM Parts_Designs\n        WHERE DesignID = ${design}\n      `, \"singleValue\");\n\n    // SELECT COUNT(*) FROM Parts_Items WHERE DesignID = {design} AND BuildWork = X\n    let actualParts = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT COUNT(*)\n        FROM Parts_Items\n        WHERE DesignID = ${design}\n          AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[partType]}\n      `, \"singleValue\");\n    if (actualParts == null) actualParts = 0;\n    let diff = nParts - actualParts;\n    if (diff > 0) {\n      while (diff > 0) {\n        createNewItem(design, partType);\n        diff--;\n      }\n    } else if (diff < 0) {\n      while (diff < 0) {\n        deleteItem(design);\n        diff++;\n      }\n    }\n  }\n\n  // commit\n}\nfunction fitLoadoutsDict(loadoutsDict, teamId) {\n  for (const partKey of Object.keys(loadoutsDict)) {\n    const part = Number(partKey);\n    const design1 = loadoutsDict[part][0];\n    const design2 = loadoutsDict[part][1];\n\n    // SELECT DesignID, ItemID FROM Parts_CarLoadout ...\n    let fittedDesign1 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                SELECT DesignID, ItemID\n                FROM Parts_CarLoadout\n                WHERE TeamID = ${teamId}\n                AND PartType = ${part}\n                AND LoadoutID = 1\n            `, \"singleRow\");\n    if (design1 != null) {\n      if (fittedDesign1 && fittedDesign1[0] != null && fittedDesign1[1] != null) {\n        // \"UPDATE Parts_Items SET AssociatedCar = NULL WHERE ItemID = ?\"\n        const itemId = fittedDesign1[1];\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        UPDATE Parts_Items\n                        SET AssociatedCar = NULL\n                        WHERE ItemID = ${itemId}\n                    `);\n        // fittedDesign1 = fittedDesign1[0]\n        fittedDesign1 = [fittedDesign1[0], itemId]; // si necesitas retenerlo\n      }\n\n      // Si la design1 actual es distinta...\n      if (!fittedDesign1 || fittedDesign1[0] !== design1) {\n        // SELECT ItemID FROM Parts_Items WHERE ...\n        const items1 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID\n                        FROM Parts_Items\n                        WHERE DesignID = ${design1}\n                        AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[part]}\n                        AND AssociatedCar IS NULL\n                    `, \"allRows\");\n        let item1;\n        if (!items1.length) {\n          item1 = createNewItem(design1, part);\n        } else {\n          item1 = items1[0][0];\n        }\n        addPartToLoadout(design1, part, teamId, 1, item1);\n      }\n    }\n\n    // Ahora loadout 2\n    let fittedDesign2 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                SELECT DesignID, ItemID\n                FROM Parts_CarLoadout\n                WHERE TeamID = ${teamId}\n                AND PartType = ${part}\n                AND LoadoutID = 2\n            `, \"singleRow\");\n    if (design2 != null) {\n      if (fittedDesign2 && fittedDesign2[0] != null && fittedDesign2[1] != null) {\n        const itemId2 = fittedDesign2[1];\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        UPDATE Parts_Items\n                        SET AssociatedCar = NULL\n                        WHERE ItemID = ${itemId2}\n                    `);\n        fittedDesign2 = [fittedDesign2[0], itemId2];\n      }\n      if (!fittedDesign2 || fittedDesign2[0] !== design2) {\n        const items2 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID\n                        FROM Parts_Items\n                        WHERE DesignID = ${design2}\n                        AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[part]}\n                        AND AssociatedCar IS NULL\n                    `, \"allRows\");\n        let item2;\n        if (!items2.length) {\n          item2 = createNewItem(design2, part);\n        } else {\n          item2 = items2[0][0];\n        }\n        addPartToLoadout(design2, part, teamId, 2, item2);\n      }\n    }\n  }\n\n  // commit\n}\n\n// En Python: create_new_item(design_id, part)\nfunction createNewItem(designId, part) {\n  // SELECT MAX(ItemID) FROM Parts_Items\n  let maxItem = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(ItemID)\n        FROM Parts_Items\n        `, \"singleValue\");\n  const newItem = maxItem + 1;\n  const numberOfManufactures = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT ManufactureCount\n        FROM Parts_Designs\n        WHERE DesignID = ${designId}\n        `, \"singleValue\");\n  const newNManufactures = numberOfManufactures + 1;\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        INSERT INTO Parts_Items\n        VALUES (\n            ${newItem}, \n            ${designId},\n            ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[part]},\n            1,\n            ${newNManufactures},\n            NULL,\n            NULL,\n            0,\n            NULL\n        )\n        `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            UPDATE Parts_Designs\n            SET ManufactureCount = ${newNManufactures}\n            WHERE DesignID = ${designId}\n            `);\n  return newItem;\n}\nfunction deleteItem(designId) {\n  // SELECT PartType FROM Parts_Designs WHERE DesignID = {designId}\n  const partType = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT PartType\n      FROM Parts_Designs\n      WHERE DesignID = ${designId}\n    `, \"singleValue\");\n\n  // SELECT ItemID FROM Parts_Items WHERE DesignID = {designId} AND BuildWork = ...\n  const item = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT ItemID\n      FROM Parts_Items\n      WHERE DesignID = ${designId}\n        AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[partType]}\n    `, \"singleValue\");\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      DELETE FROM Parts_Items\n      WHERE ItemID = ${item}\n    `);\n}\nfunction addNewDesign(part, teamId, day, season, latestDesignPartFromTeam, newDesignId) {\n  const maxDesignFromPart = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT MAX(DesignNumber)\n      FROM Parts_Designs\n      WHERE PartType = ${part}\n        AND TeamID = ${teamId}\n    `, \"singleValue\");\n  const newMaxDesign = maxDesignFromPart + 1;\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        UPDATE Parts_Designs_TeamData\n        SET NewDesignsThisSeason = ${newMaxDesign}\n        WHERE TeamID = ${teamId}\n            AND PartType = ${part}\n        `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        INSERT INTO Parts_Designs\n        VALUES (\n            ${newDesignId}, \n            ${part}, \n            6720, \n            6600, \n            ${day - 1}, \n            ${day}, \n            NULL,\n            5,\n            1,\n            0,\n            0,\n            1500,\n            ${season},\n            0,\n            0,\n            4,\n            ${newMaxDesign},\n            1,\n            ${teamId},\n            1\n        )\n        `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        INSERT INTO Parts_DesignHistoryData\n        VALUES (\n            ${newDesignId}, \n            0,\n            0,\n            0,\n            0\n        )\n        `);\n  copyFromTable(\"building\", latestDesignPartFromTeam, newDesignId);\n  copyFromTable(\"staff\", latestDesignPartFromTeam, newDesignId);\n  add4Items(newDesignId, part, teamId);\n}\nfunction copyFromTable(table, latestDesignId, newDesignId) {\n  let tableName = \"\";\n  if (table === \"building\") {\n    tableName = \"Parts_Designs_BuildingEffects\";\n  } else if (table === \"staff\") {\n    tableName = \"Parts_Designs_StaffEffects\";\n  }\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT *\n        FROM ${tableName}\n        WHERE DesignID = ${latestDesignId}\n        `, \"allRows\");\n  for (const row of rows) {\n    // row => [DesignID, col1, col2, ...]\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                INSERT INTO ${tableName}\n                VALUES (${newDesignId}, ${row[1]}, ${row[2]}, 0)\n            `);\n  }\n}\nfunction add4Items(newDesignId, part, teamId) {\n  let maxItem = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(ItemID)\n        FROM Parts_Items\n        `, \"singleValue\");\n  for (let i = 1; i <= 4; i++) {\n    maxItem += 1;\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        INSERT INTO Parts_Items\n        VALUES (\n          ${maxItem},\n          ${newDesignId},\n          ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[part]},\n          1,\n          ${i},\n          NULL,\n          NULL,\n          0,\n          NULL\n        )\n      `);\n\n    // Para loadout 1 y 2\n    if (i <= 2) {\n      const loadoutId = i;\n      addPartToLoadout(newDesignId, part, teamId, loadoutId, maxItem);\n    }\n  }\n}\nfunction addPartToLoadout(designId, part, teamId, loadoutId, itemId) {\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            UPDATE Parts_CarLoadout\n            SET DesignID = ${designId}, ItemID = ${itemId}\n            WHERE TeamID = ${teamId}\n                AND PartType = ${part}\n                AND LoadoutID = ${loadoutId}\n        `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            UPDATE Parts_Items\n            SET AssociatedCar = ${loadoutId}, LastEquippedCar = ${loadoutId}\n            WHERE ItemID = ${itemId}\n        `);\n}\n\n// overwrite_performance_team(...)\nfunction overwritePerformanceTeam(teamId, performance, customTeam = null, yearIteration = null, loadoutDict = null) {\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!row) {\n    console.warn(\"Player_State not found\");\n    return;\n  }\n  const [day, season] = row;\n  const bestParts = getBestPartsUntil(day, customTeam);\n  const teamParts = bestParts[Number(teamId)];\n  for (const partKey of Object.keys(teamParts)) {\n    const part = Number(partKey);\n    if (part !== 0) {\n      const design = teamParts[part][0][0]; // design actual\n      const partName = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.parts[part]; // \"Suspension\", \"Wing\", etc.\n      const newDesign = performance[partName][\"designEditing\"];\n      delete performance[partName][\"designEditing\"];\n      let finalDesign = design;\n      if (Number(newDesign) === -1) {\n        // new part\n        const maxDesign = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT MAX(DesignID)\n                        FROM Parts_Designs\n                    `, 'singleValue');\n        const latestDesignPartFromTeam = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT MAX(DesignID)\n                        FROM Parts_Designs\n                        WHERE PartType = ${part}\n                        AND TeamID = ${teamId}\n                    `, 'singleValue');\n        const newDesignId = loadoutDict[String(part)][0];\n        addNewDesign(part, Number(teamId), day, season, latestDesignPartFromTeam, newDesignId);\n        finalDesign = newDesignId;\n      } else {\n        finalDesign = Number(newDesign);\n      }\n      const statsObj = performance[partName];\n      for (const statKey of Object.keys(statsObj)) {\n        const statNum = parseFloat(statsObj[statKey]);\n        let value;\n        if (yearIteration === \"24\" && Number(statKey) >= 7 && Number(statKey) <= 9) {\n          value = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.downforce24UnitValueToValue[statKey](statNum);\n        } else {\n          value = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.unitValueToValue[statKey](statNum);\n        }\n        if (Number(newDesign) !== -1) {\n          // update\n          changeExpertiseBased(part, statKey, value, Number(teamId));\n          (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n              UPDATE Parts_Designs_StatValues\n              SET UnitValue = ${statsObj[statKey]}\n              WHERE DesignID = ${finalDesign}\n                AND PartStat = ${statKey}\n            `);\n          (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n              UPDATE Parts_Designs_StatValues\n              SET Value = ${value}\n              WHERE DesignID = ${finalDesign}\n                AND PartStat = ${statKey}\n            `);\n        } else {\n          // insert\n          (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n              INSERT INTO Parts_Designs_StatValues\n              VALUES (\n                ${finalDesign}, \n                ${statKey}, \n                ${value}, \n                ${statsObj[statKey]}, \n                0.5, \n                1, \n                0.1\n              )\n            `);\n        }\n      }\n\n      // si newDesign == -1 => insertamos el peso standard\n      if (Number(newDesign) === -1) {\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            INSERT INTO Parts_Designs_StatValues\n            VALUES (\n              ${finalDesign},\n              15,\n              500,\n              ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardWeightPerPart[part]},\n              0.5,\n              0,\n              0\n            )\n          `);\n\n        // Tras insertar stats, cambiamos expertise\n        for (const statKey of Object.keys(statsObj)) {\n          const statNum = parseFloat(statsObj[statKey]);\n          let value;\n          if (yearIteration === \"24\" && Number(statKey) >= 7 && Number(statKey) <= 9) {\n            value = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.downforce24UnitValueToValue[statKey](statNum);\n          } else {\n            value = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.unitValueToValue[statKey](statNum);\n          }\n          changeExpertiseBased(part, statKey, value, Number(teamId), \"new\", latestDesignPartFromTeam);\n        }\n      }\n    }\n  }\n\n  // commit\n}\nfunction changeExpertiseBased(part, stat, newValue, teamId, type = \"existing\", oldDesign = null) {\n  // SELECT Day, CurrentSeason FROM Player_State\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!row) {\n    console.warn(\"No Player_State found to do expertise changes\");\n    return;\n  }\n  const [day, curSeason] = row;\n  let currentValue = null;\n  if (type === \"existing\") {\n    // SELECT MAX(Value) FROM Parts_Designs_StatValues ...\n    currentValue = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(Value)\n        FROM Parts_Designs_StatValues\n        WHERE PartStat = ${stat}\n          AND DesignID IN (\n            SELECT MAX(DesignID)\n            FROM Parts_Designs\n            WHERE PartType = ${part}\n              AND TeamID = ${teamId}\n              AND ValidFrom = ${curSeason}\n          )\n      `, 'singleValue');\n  } else if (type === \"new\") {\n    // SELECT Value FROM Parts_Designs_StatValues ...\n    currentValue = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Value\n        FROM Parts_Designs_StatValues\n        WHERE PartStat = ${stat}\n          AND DesignID = ${oldDesign}\n      `, 'singleValue');\n  }\n  if (!currentValue) {\n    currentValue = 1; // si no hay valor\n  }\n  if (currentValue === 0) {\n    currentValue = 1;\n  }\n\n  // en Python se hacía un cálculo con \"current_expertise\" (combinado),\n  // pero aquí se ve que en el final pones:\n  // new_expertise = current_value / 0.8\n  // => Hardcodeado. Ajusta si corresponde a tu lógica real.\n  const newExpertise = currentValue / 0.8;\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        UPDATE Parts_TeamExpertise\n        SET Expertise = ${newExpertise}\n        WHERE TeamID = ${teamId}\n            AND PartType = ${part}\n            AND PartStat = ${stat}\n        `);\n}\n\n// get_performance_all_teams_season(...) => ya lo tienes, o lo traduces igual\n\nfunction getPerformanceAllTeamsSeason(customTeam = false) {\n  const races = getRacesDays();\n  const firstDay = getFirstDaySeason();\n  // Insertamos al principio (0, firstDay, 0)\n  races.unshift([0, firstDay, 0]); // similar a insert(0, first_tuple)\n\n  const racesPerformances = [];\n  let previous = null;\n  for (const raceDay of races) {\n    // raceDay => [RaceID, Day, TrackID], en python pilla el day en [1]\n    const day = raceDay[1];\n    const performances = getPerformanceAllTeams(day, previous, customTeam);\n    racesPerformances.push(performances);\n    previous = performances;\n  }\n  const allRaces = getAllRaces();\n  return [racesPerformances, allRaces];\n}\nfunction getFirstDaySeason() {\n  const query = `\n        SELECT Number, COUNT(*) as Occurrences\n        FROM (\n            SELECT DayCreated as Number FROM Parts_Designs\n            UNION ALL\n            SELECT DayCompleted as Number FROM Parts_Designs\n        ) Combined\n        GROUP BY Number\n        ORDER BY Occurrences DESC\n        LIMIT 1;\n        `;\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(query, 'singleRow');\n  if (!row) {\n    console.warn(\"No firstDay found\");\n    return 0;\n  }\n  const firstDay = row[0];\n  return firstDay;\n}\nfunction getAttributesAllTeams(customTeam = false) {\n  const teams = {};\n  const contributors = getContributorsDict();\n  const bestParts = getBestParts(customTeam);\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  for (const i of teamList) {\n    const dict = getCarStats(bestParts[i]);\n    const partStats = getPartStatsDict(dict);\n    const attributes = calculateCarAttributes(contributors, partStats);\n    teams[i] = attributes;\n  }\n  return teams;\n}\nfunction getMaxDesign() {\n  const val = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(DesignID)\n        FROM Parts_Designs\n        `, 'singleValue');\n  return val;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/carAnalysisUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/carConstants.js":
/*!****************************************************!*\
  !*** ./src/js/backend/scriptUtils/carConstants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceleration_contributors: () => (/* binding */ acceleration_contributors),\n/* harmony export */   airflow_front_factors: () => (/* binding */ airflow_front_factors),\n/* harmony export */   airflow_middle_factors: () => (/* binding */ airflow_middle_factors),\n/* harmony export */   airflow_sensitivity_factors: () => (/* binding */ airflow_sensitivity_factors),\n/* harmony export */   attributesContributions: () => (/* binding */ attributesContributions),\n/* harmony export */   attributesContributions2: () => (/* binding */ attributesContributions2),\n/* harmony export */   attributesContributions3: () => (/* binding */ attributesContributions3),\n/* harmony export */   attributesMinMax: () => (/* binding */ attributesMinMax),\n/* harmony export */   attributesUnits: () => (/* binding */ attributesUnits),\n/* harmony export */   brake_cooling_contributors: () => (/* binding */ brake_cooling_contributors),\n/* harmony export */   brake_cooling_factors: () => (/* binding */ brake_cooling_factors),\n/* harmony export */   carAttributes: () => (/* binding */ carAttributes),\n/* harmony export */   defaultPartsStats: () => (/* binding */ defaultPartsStats),\n/* harmony export */   dirty_air_contributors: () => (/* binding */ dirty_air_contributors),\n/* harmony export */   downforce24UnitValueToValue: () => (/* binding */ downforce24UnitValueToValue),\n/* harmony export */   drag_reduction_factors: () => (/* binding */ drag_reduction_factors),\n/* harmony export */   drs_contributors: () => (/* binding */ drs_contributors),\n/* harmony export */   drs_delta_factors: () => (/* binding */ drs_delta_factors),\n/* harmony export */   engine_cooling_contributors: () => (/* binding */ engine_cooling_contributors),\n/* harmony export */   engine_cooling_factors: () => (/* binding */ engine_cooling_factors),\n/* harmony export */   engine_unitValueToValue: () => (/* binding */ engine_unitValueToValue),\n/* harmony export */   fuel_efficiency_factors: () => (/* binding */ fuel_efficiency_factors),\n/* harmony export */   high_speed_contributors: () => (/* binding */ high_speed_contributors),\n/* harmony export */   high_speed_downforce_factors: () => (/* binding */ high_speed_downforce_factors),\n/* harmony export */   lifespanPartsMinMax: () => (/* binding */ lifespanPartsMinMax),\n/* harmony export */   lifespan_factors: () => (/* binding */ lifespan_factors),\n/* harmony export */   low_speed_contributors: () => (/* binding */ low_speed_contributors),\n/* harmony export */   low_speed_downforce_factors: () => (/* binding */ low_speed_downforce_factors),\n/* harmony export */   medium_speed_contributors: () => (/* binding */ medium_speed_contributors),\n/* harmony export */   medium_speed_downforce_factors: () => (/* binding */ medium_speed_downforce_factors),\n/* harmony export */   minimalWeightPerPart: () => (/* binding */ minimalWeightPerPart),\n/* harmony export */   operational_range_factors: () => (/* binding */ operational_range_factors),\n/* harmony export */   optimalWeightPerPart: () => (/* binding */ optimalWeightPerPart),\n/* harmony export */   parts: () => (/* binding */ parts),\n/* harmony export */   performance_loss_factors: () => (/* binding */ performance_loss_factors),\n/* harmony export */   performance_threshold_factors: () => (/* binding */ performance_threshold_factors),\n/* harmony export */   power_factors: () => (/* binding */ power_factors),\n/* harmony export */   standardBuildworkPerPart: () => (/* binding */ standardBuildworkPerPart),\n/* harmony export */   standardWeightPerPart: () => (/* binding */ standardWeightPerPart),\n/* harmony export */   stats: () => (/* binding */ stats),\n/* harmony export */   statsMinMax: () => (/* binding */ statsMinMax),\n/* harmony export */   top_speed_contributors: () => (/* binding */ top_speed_contributors),\n/* harmony export */   unitValueToValue: () => (/* binding */ unitValueToValue)\n/* harmony export */ });\nconst stats = {\n  0: \"airflow_front\",\n  1: \"airflow_sensitivity\",\n  2: \"brake_cooling\",\n  3: \"drs_delta\",\n  4: \"drag_reduction\",\n  5: \"engine_cooling\",\n  6: \"fuel_efficiency\",\n  7: \"low_speed_downforce\",\n  8: \"medium_speed_downforce\",\n  9: \"high_speed_downforce\",\n  10: \"power\",\n  11: \"performance_loss\",\n  12: \"performance_threshold\",\n  13: \"airflow_middle\",\n  14: \"operational_range\",\n  15: \"lifespan\",\n  16: \"special_weight\"\n};\nconst defaultPartsStats = {\n  3: [3, 4, 5, 13, 15],\n  4: [0, 1, 2, 7, 8, 9, 15],\n  5: [1, 3, 4, 7, 8, 9, 15],\n  6: [0, 4, 5, 13, 15],\n  7: [1, 4, 7, 8, 9, 15],\n  8: [0, 2, 4, 7, 8, 9, 15]\n};\nconst unitValueToValue = {\n  0: x => x * 10,\n  1: x => x * 10,\n  2: x => x * 10,\n  3: x => x * 10,\n  4: x => x * 10,\n  5: x => x * 10,\n  6: x => (x - 90) * 1000 / 10,\n  7: x => (x - 3) / 0.002,\n  8: x => (x - 5) / 0.002,\n  9: x => (x - 7) / 0.001,\n  10: x => (x - 90) * 1000 / 10,\n  11: x => (85 - x) * 1000 / 20,\n  12: x => (x - 70) * 1000 / 15,\n  13: x => x * 10,\n  14: x => (85 - x) * 1000 / 15,\n  15: x => (x - 40) * 1000 / 30,\n  18: x => (x - 40) * 1000 / 30,\n  19: x => (x - 40) * 1000 / 30\n};\nconst engine_unitValueToValue = {\n  6: x => 20 * (x - 50),\n  10: x => 50 * (x - 80),\n  11: x => -50 * (x - 85),\n  12: x => 200 / 3 * (x - 70),\n  14: x => 50 * (x - 60),\n  18: x => 50 * (x - 50),\n  19: x => 50 * (x - 50)\n};\nconst downforce24UnitValueToValue = {\n  7: x => 497.6 * x - 1489.8,\n  8: x => 496.8 * x - 2479.5,\n  9: x => 974.048 * x - 6803.2614\n};\nconst parts = {\n  0: \"engine\",\n  3: \"chassis\",\n  4: \"front_wing\",\n  5: \"rear_wing\",\n  6: \"sidepods\",\n  7: \"underfloor\",\n  8: \"suspension\"\n};\nconst standardWeightPerPart = {\n  3: 5150,\n  4: 2625,\n  5: 3125,\n  6: 4125,\n  7: 3550,\n  8: 2900\n};\nconst standardBuildworkPerPart = {\n  3: 2000,\n  4: 500,\n  5: 500,\n  6: 1500,\n  7: 1500,\n  8: 1500\n};\nconst optimalWeightPerPart = {\n  3: 4070,\n  4: 1525,\n  5: 1945,\n  6: 3025,\n  7: 2390,\n  8: 1940\n};\nconst minimalWeightPerPart = {\n  3: 3800,\n  4: 1250,\n  5: 1650,\n  6: 2750,\n  7: 2100,\n  8: 1700\n};\nconst carAttributes = {\n  0: \"top_speed\",\n  1: \"acceleration\",\n  2: \"drs\",\n  3: \"low_speed\",\n  4: \"medium_speed\",\n  5: \"high_speed\",\n  6: \"dirty_air\",\n  7: \"brake_cooling\",\n  8: \"engine_cooling\"\n};\nconst statsMinMax = {\n  0: [0, 100],\n  1: [0, 100],\n  2: [0, 100],\n  3: [0, 100],\n  4: [0, 100],\n  5: [0, 100],\n  7: [3, 5],\n  8: [5, 7],\n  9: [7, 8],\n  10: [90, 100],\n  13: [0, 100]\n};\nconst lifespanPartsMinMax = {\n  3: [3800, 6500],\n  4: [1250, 4000],\n  5: [1650, 4600],\n  6: [2750, 5500],\n  7: [2100, 5000],\n  8: [1700, 4100]\n};\nconst attributesMinMax = {\n  top_speed: [313.00, 328.00],\n  acceleration: [1.800, 1.900],\n  drs: [0, 100],\n  low_speed: [2.000, 3.000],\n  medium_speed: [3.000, 4.000],\n  high_speed: [4.000, 5.500],\n  dirty_air: [0, 100],\n  brake_cooling: [0, 100],\n  engine_cooling: [0, 100]\n};\nconst attributesUnits = {\n  top_speed: \"km/h\",\n  acceleration: \"G\",\n  drs: \"%\",\n  low_speed: \"G\",\n  medium_speed: \"G\",\n  high_speed: \"G\",\n  dirty_air: \"%\",\n  brake_cooling: \"%\",\n  engine_cooling: \"%\"\n};\nconst attributesContributions = {\n  top_speed: 0.15,\n  acceleration: 0,\n  drs: 0.15,\n  low_speed: 0.1666,\n  medium_speed: 0.1666,\n  high_speed: 0.1666,\n  dirty_air: 0.0666,\n  brake_cooling: 0.0666,\n  engine_cooling: 0.0666\n};\nconst attributesContributions2 = {\n  top_speed: 0.15,\n  acceleration: 0,\n  drs: 0.15,\n  low_speed: 0.2166,\n  medium_speed: 0.2166,\n  high_speed: 0.2166,\n  dirty_air: 0.03,\n  brake_cooling: 0.01,\n  engine_cooling: 0.01\n};\nconst attributesContributions3 = {\n  top_speed: 0.144,\n  acceleration: 0.018,\n  drs: 0.115,\n  low_speed: 0.195,\n  medium_speed: 0.195,\n  high_speed: 0.195,\n  dirty_air: 0.029,\n  brake_cooling: 0.078,\n  engine_cooling: 0.031\n};\nconst fuel_efficiency_factors = {\n  0: 1\n};\nconst power_factors = {\n  0: 1\n};\nconst performance_loss_factors = {\n  0: 1\n};\nconst performance_threshold_factors = {\n  0: 1\n};\nconst operational_range_factors = {\n  0: 1\n};\nconst lifespan_factors = {\n  1: 0,\n  2: 0,\n  3: 5,\n  4: 2,\n  5: 3,\n  6: 5,\n  7: 4,\n  8: 1\n};\nconst drag_reduction_factors = {\n  3: 0.2,\n  5: 0.3,\n  6: 0.2,\n  7: 0.2,\n  8: 0.1\n};\nconst engine_cooling_factors = {\n  3: 0.4,\n  6: 0.6\n};\nconst airflow_middle_factors = {\n  3: 0.6,\n  6: 0.4\n};\nconst airflow_front_factors = {\n  4: 0.4,\n  6: 0.2,\n  8: 0.4\n};\nconst airflow_sensitivity_factors = {\n  4: 0.4,\n  5: 0.4,\n  7: 0.2\n};\nconst brake_cooling_factors = {\n  4: 0.4,\n  8: 0.6\n};\nconst low_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.3,\n  8: 0.3\n};\nconst medium_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.5,\n  8: 0.1\n};\nconst high_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.5,\n  8: 0.1\n};\nconst drs_delta_factors = {\n  5: 0.75,\n  3: 0.25\n};\nconst top_speed_contributors = {\n  4: 1\n};\nconst acceleration_contributors = {\n  10: 0.5,\n  4: 0.5,\n  16: 0.15\n};\nconst drs_contributors = {\n  3: 1\n};\nconst low_speed_contributors = {\n  0: 0.6,\n  7: 1,\n  16: 0.24\n};\nconst medium_speed_contributors = {\n  0: 0.4,\n  13: 0.4,\n  8: 1,\n  16: 0.27\n};\nconst high_speed_contributors = {\n  13: 0.6,\n  9: 1,\n  16: 0.24\n};\nconst dirty_air_contributors = {\n  1: 1\n};\nconst brake_cooling_contributors = {\n  2: 1\n};\nconst engine_cooling_contributors = {\n  5: 1\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/carConstants.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/countries.js":
/*!*************************************************!*\
  !*** ./src/js/backend/scriptUtils/countries.js ***!
  \*************************************************/
/***/ (() => {

eval("countries_abreviations = {\n  \"Andorra\": \"AD\",\n  \"United Arab Emirates\": \"AE\",\n  \"Afghanistan\": \"AF\",\n  \"Antigua and Barbuda\": \"AG\",\n  \"Anguilla\": \"AI\",\n  \"Albania\": \"AL\",\n  \"Armenia\": \"AM\",\n  \"Netherlands Antilles\": \"AN\",\n  \"Angola\": \"AO\",\n  \"Antarctica\": \"AQ\",\n  \"Argentina\": \"AR\",\n  \"American Samoa\": \"AS\",\n  \"Austria\": \"AT\",\n  \"Australia\": \"AU\",\n  \"Aruba\": \"AW\",\n  \"Åland Islands\": \"AX\",\n  \"Azerbaijan\": \"AZ\",\n  \"Bosnia and Herzegovina\": \"BA\",\n  \"Barbados\": \"BB\",\n  \"Bangladesh\": \"BD\",\n  \"Belgium\": \"BE\",\n  \"Burkina Faso\": \"BF\",\n  \"Bulgaria\": \"BG\",\n  \"Bahrain\": \"BH\",\n  \"Burundi\": \"BI\",\n  \"Benin\": \"BJ\",\n  \"Saint Barthélemy\": \"BL\",\n  \"Bermuda\": \"BM\",\n  \"Brunei Darussalam\": \"BN\",\n  \"Bolivia\": \"BO\",\n  \"Brazil\": \"BR\",\n  \"Bahamas\": \"BS\",\n  \"Bhutan\": \"BT\",\n  \"Bouvet Island\": \"BV\",\n  \"Botswana\": \"BW\",\n  \"Belarus\": \"BY\",\n  \"Belize\": \"BZ\",\n  \"Canada\": \"CA\",\n  \"Cocos (Keeling) Islands\": \"CC\",\n  \"Congo, Democratic Republic of the\": \"CD\",\n  \"Central African Republic\": \"CF\",\n  \"Congo, Republic of the\": \"CG\",\n  \"Switzerland\": \"CH\",\n  \"Côte d'Ivoire\": \"CI\",\n  \"Cook Islands\": \"CK\",\n  \"Chile\": \"CL\",\n  \"Cameroon\": \"CM\",\n  \"China\": \"CN\",\n  \"Colombia\": \"CO\",\n  \"Costa Rica\": \"CR\",\n  \"Cuba\": \"CU\",\n  \"Cape Verde\": \"CV\",\n  \"Curaçao\": \"CW\",\n  \"Christmas Island\": \"CX\",\n  \"Cyprus\": \"CY\",\n  \"Czech Republic\": \"CZ\",\n  \"Germany\": \"DE\",\n  \"Djibouti\": \"DJ\",\n  \"Denmark\": \"DK\",\n  \"Dominica\": \"DM\",\n  \"Dominican Republic\": \"DO\",\n  \"Algeria\": \"DZ\",\n  \"Ecuador\": \"EC\",\n  \"Estonia\": \"EE\",\n  \"Egypt\": \"EG\",\n  \"Western Sahara\": \"EH\",\n  \"Eritrea\": \"ER\",\n  \"Spain\": \"ES\",\n  \"Ethiopia\": \"ET\",\n  \"Finland\": \"FI\",\n  \"Fiji\": \"FJ\",\n  \"Falkland Islands (Malvinas)\": \"FK\",\n  \"Micronesia, Federated States of\": \"FM\",\n  \"Faroe Islands\": \"FO\",\n  \"France\": \"FR\",\n  \"Gabon\": \"GA\",\n  \"United Kingdom\": \"GB\",\n  \"Grenada\": \"GD\",\n  \"Georgia\": \"GE\",\n  \"French Guiana\": \"GF\",\n  \"Guernsey\": \"GG\",\n  \"Ghana\": \"GH\",\n  \"Gibraltar\": \"GI\",\n  \"Greenland\": \"GL\",\n  \"Gambia\": \"GM\",\n  \"Guinea\": \"GN\",\n  \"Guadeloupe\": \"GP\",\n  \"Equatorial Guinea\": \"GQ\",\n  \"Greece\": \"GR\",\n  \"South Georgia and the South Sandwich Islands\": \"GS\",\n  \"Guatemala\": \"GT\",\n  \"Guam\": \"GU\",\n  \"Guinea-Bissau\": \"GW\",\n  \"Guyana\": \"GY\",\n  \"Hong Kong\": \"HK\",\n  \"Heard Island and McDonald Islands\": \"HM\",\n  \"Honduras\": \"HN\",\n  \"Croatia\": \"HR\",\n  \"Haiti\": \"HT\",\n  \"Hungary\": \"HU\",\n  \"Indonesia\": \"ID\",\n  \"Ireland\": \"IE\",\n  \"Israel\": \"IL\",\n  \"Isle of Man\": \"IM\",\n  \"India\": \"IN\",\n  \"British Indian Ocean Territory\": \"IO\",\n  \"Iraq\": \"IQ\",\n  \"Iran, Islamic Republic of\": \"IR\",\n  \"Iceland\": \"IS\",\n  \"Italy\": \"IT\",\n  \"Jersey\": \"JE\",\n  \"Jamaica\": \"JM\",\n  \"Jordan\": \"JO\",\n  \"Japan\": \"JP\",\n  \"Kenya\": \"KE\",\n  \"Kyrgyzstan\": \"KG\",\n  \"Cambodia\": \"KH\",\n  \"Kiribati\": \"KI\",\n  \"Comoros\": \"KM\",\n  \"Saint Kitts and Nevis\": \"KN\",\n  \"Korea, Democratic People's Republic of\": \"KP\",\n  \"Korea, Republic of\": \"KR\",\n  \"Kuwait\": \"KW\",\n  \"Cayman Islands\": \"KY\",\n  \"Kazakhstan\": \"KZ\",\n  \"Lao People's Democratic Republic\": \"LA\",\n  \"Lebanon\": \"LB\",\n  \"Saint Lucia\": \"LC\",\n  \"Liechtenstein\": \"LI\",\n  \"Sri Lanka\": \"LK\",\n  \"Liberia\": \"LR\",\n  \"Lesotho\": \"LS\",\n  \"Lithuania\": \"LT\",\n  \"Luxembourg\": \"LU\",\n  \"Latvia\": \"LV\",\n  \"Libya\": \"LY\",\n  \"Morocco\": \"MA\",\n  \"Monaco\": \"MC\",\n  \"Moldova, Republic of\": \"MD\",\n  \"Montenegro\": \"ME\",\n  \"Saint Martin (French part)\": \"MF\",\n  \"Madagascar\": \"MG\",\n  \"Marshall Islands\": \"MH\",\n  \"Macedonia, the Former Yugoslav Republic of\": \"MK\",\n  \"Mali\": \"ML\",\n  \"Myanmar\": \"MM\",\n  \"Mongolia\": \"MN\",\n  \"Macao\": \"MO\",\n  \"Northern Mariana Islands\": \"MP\",\n  \"Martinique\": \"MQ\",\n  \"Mauritania\": \"MR\",\n  \"Montserrat\": \"MS\",\n  \"Malta\": \"MT\",\n  \"Mauritius\": \"MU\",\n  \"Maldives\": \"MV\",\n  \"Malawi\": \"MW\",\n  \"Mexico\": \"MX\",\n  \"Malaysia\": \"MY\",\n  \"Mozambique\": \"MZ\",\n  \"Namibia\": \"NA\",\n  \"New Caledonia\": \"NC\",\n  \"Niger\": \"NE\",\n  \"Norfolk Island\": \"NF\",\n  \"Nigeria\": \"NG\",\n  \"Nicaragua\": \"NI\",\n  \"Netherlands\": \"NL\",\n  \"Norway\": \"NO\",\n  \"Nepal\": \"NP\",\n  \"Nauru\": \"NR\",\n  \"Niue\": \"NU\",\n  \"New Zealand\": \"NZ\",\n  \"Oman\": \"OM\",\n  \"Panama\": \"PA\",\n  \"Peru\": \"PE\",\n  \"French Polynesia\": \"PF\",\n  \"Papua New Guinea\": \"PG\",\n  \"Philippines\": \"PH\",\n  \"Pakistan\": \"PK\",\n  \"Poland\": \"PL\",\n  \"Saint Pierre and Miquelon\": \"PM\",\n  \"Pitcairn\": \"PN\",\n  \"Puerto Rico\": \"PR\",\n  \"Palestine, State of\": \"PS\",\n  \"Portugal\": \"PT\",\n  \"Palau\": \"PW\",\n  \"Paraguay\": \"PY\",\n  \"Qatar\": \"QA\",\n  \"Réunion\": \"RE\",\n  \"Romania\": \"RO\",\n  \"Serbia\": \"RS\",\n  \"Russian\": \"RU\",\n  \"Rwanda\": \"RW\",\n  \"Saudi Arabia\": \"SA\",\n  \"Solomon Islands\": \"SB\",\n  \"Seychelles\": \"SC\",\n  \"Sudan\": \"SD\",\n  \"Sweden\": \"SE\",\n  \"Singapore\": \"SG\",\n  \"Saint Helena, Ascension and Tristan da Cunha\": \"SH\",\n  \"Slovenia\": \"SI\",\n  \"Svalbard and Jan Mayen\": \"SJ\",\n  \"Slovakia\": \"SK\",\n  \"Sierra Leone\": \"SL\",\n  \"San Marino\": \"SM\",\n  \"Senegal\": \"SN\",\n  \"Somalia\": \"SO\",\n  \"Suriname\": \"SR\",\n  \"South Sudan\": \"SS\",\n  \"Sao Tome and Principe\": \"ST\",\n  \"El Salvador\": \"SV\",\n  \"Sint Maarten (Dutch part)\": \"SX\",\n  \"Syrian Arab Republic\": \"SY\",\n  \"Swaziland\": \"SZ\",\n  \"Turks and Caicos Islands\": \"TC\",\n  \"Chad\": \"TD\",\n  \"French Southern Territories\": \"TF\",\n  \"Togo\": \"TG\",\n  \"Thailand\": \"TH\",\n  \"Tajikistan\": \"TJ\",\n  \"Tokelau\": \"TK\",\n  \"Timor-Leste\": \"TL\",\n  \"Turkmenistan\": \"TM\",\n  \"Tunisia\": \"TN\",\n  \"Tonga\": \"TO\",\n  \"Turkey\": \"TR\",\n  \"Trinidad and Tobago\": \"TT\",\n  \"Tuvalu\": \"TV\",\n  \"Taiwan, Province of China\": \"TW\",\n  \"Tanzania, United Republic of\": \"TZ\",\n  \"Ukraine\": \"UA\",\n  \"Uganda\": \"UG\",\n  \"United States Minor Outlying Islands\": \"UM\",\n  \"United States\": \"US\",\n  \"Uruguay\": \"UY\",\n  \"Uzbekistan\": \"UZ\",\n  \"Holy See (Vatican City State)\": \"VA\",\n  \"Saint Vincent and the Grenadines\": \"VC\",\n  \"Venezuela\": \"VE\",\n  \"Virgin Islands, British\": \"VG\",\n  \"Virgin Islands, U.S.\": \"VI\",\n  \"Vietnam\": \"VN\",\n  \"Vanuatu\": \"VU\",\n  \"Wallis and Futuna\": \"WF\",\n  \"Samoa\": \"WS\",\n  \"Yemen\": \"YE\",\n  \"Mayotte\": \"YT\",\n  \"South Africa\": \"ZA\",\n  \"Zambia\": \"ZM\",\n  \"Zimbabwe\": \"ZW\"\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/countries.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/dbUtils.js":
/*!***********************************************!*\
  !*** ./src/js/backend/scriptUtils/dbUtils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   argbToHex: () => (/* binding */ argbToHex),\n/* harmony export */   calculateTimeDifference: () => (/* binding */ calculateTimeDifference),\n/* harmony export */   calculateTimeToPole: () => (/* binding */ calculateTimeToPole),\n/* harmony export */   checkCustomTables: () => (/* binding */ checkCustomTables),\n/* harmony export */   checkDrivesForTeam32: () => (/* binding */ checkDrivesForTeam32),\n/* harmony export */   checkYearSave: () => (/* binding */ checkYearSave),\n/* harmony export */   editEngines: () => (/* binding */ editEngines),\n/* harmony export */   fetchCalendar: () => (/* binding */ fetchCalendar),\n/* harmony export */   fetchCustomConfig: () => (/* binding */ fetchCustomConfig),\n/* harmony export */   fetchDriverCode: () => (/* binding */ fetchDriverCode),\n/* harmony export */   fetchDriverContract: () => (/* binding */ fetchDriverContract),\n/* harmony export */   fetchDriverNumberDetails: () => (/* binding */ fetchDriverNumberDetails),\n/* harmony export */   fetchDriverNumbers: () => (/* binding */ fetchDriverNumbers),\n/* harmony export */   fetchDriverRetirement: () => (/* binding */ fetchDriverRetirement),\n/* harmony export */   fetchDrivers: () => (/* binding */ fetchDrivers),\n/* harmony export */   fetchDriversPerYear: () => (/* binding */ fetchDriversPerYear),\n/* harmony export */   fetchEngines: () => (/* binding */ fetchEngines),\n/* harmony export */   fetchEventsDoneFrom: () => (/* binding */ fetchEventsDoneFrom),\n/* harmony export */   fetchEventsFrom: () => (/* binding */ fetchEventsFrom),\n/* harmony export */   fetchForFutureContract: () => (/* binding */ fetchForFutureContract),\n/* harmony export */   fetchMarketability: () => (/* binding */ fetchMarketability),\n/* harmony export */   fetchMentality: () => (/* binding */ fetchMentality),\n/* harmony export */   fetchNationality: () => (/* binding */ fetchNationality),\n/* harmony export */   fetchOneDriverSeasonResults: () => (/* binding */ fetchOneDriverSeasonResults),\n/* harmony export */   fetchOneTeamSeasonResults: () => (/* binding */ fetchOneTeamSeasonResults),\n/* harmony export */   fetchRaceFormula: () => (/* binding */ fetchRaceFormula),\n/* harmony export */   fetchSeasonResults: () => (/* binding */ fetchSeasonResults),\n/* harmony export */   fetchStaff: () => (/* binding */ fetchStaff),\n/* harmony export */   fetchSuperlicense: () => (/* binding */ fetchSuperlicense),\n/* harmony export */   fetchTeamsStandings: () => (/* binding */ fetchTeamsStandings),\n/* harmony export */   fetchYear: () => (/* binding */ fetchYear),\n/* harmony export */   formatNamesAndFetchStats: () => (/* binding */ formatNamesAndFetchStats),\n/* harmony export */   formatNamesSimple: () => (/* binding */ formatNamesSimple),\n/* harmony export */   formatSeasonResults: () => (/* binding */ formatSeasonResults),\n/* harmony export */   insertDefualtEnginesData: () => (/* binding */ insertDefualtEnginesData),\n/* harmony export */   removeNumber: () => (/* binding */ removeNumber),\n/* harmony export */   updateCustomConfig: () => (/* binding */ updateCustomConfig),\n/* harmony export */   updateCustomEngines: () => (/* binding */ updateCustomEngines),\n/* harmony export */   updateTeamsSuppliedByEngine: () => (/* binding */ updateTeamsSuppliedByEngine)\n/* harmony export */ });\n/* harmony import */ var _countries_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./countries.js */ \"./src/js/backend/scriptUtils/countries.js\");\n/* harmony import */ var _countries_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_countries_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _carConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carConstants.js */ \"./src/js/backend/scriptUtils/carConstants.js\");\n/* harmony import */ var _dbManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dbManager.js */ \"./src/js/backend/dbManager.js\");\n\n\n\n\n/**\r\n * Convierte un color ARGB a hexadecimal.\r\n */\nfunction argbToHex(argb) {\n  const rgb = argb & 0xFFFFFF; // Ignora el canal alfa\n  return `#${rgb.toString(16).padStart(6, '0').toUpperCase()}`;\n}\n\n/**\r\n * Verifica si el archivo de guardado es de un año específico.\r\n * @returns {Array} [ \"23\" o \"24\", TeamName, primaryColor, secondaryColor ]\r\n */\nfunction checkYearSave() {\n  // Ver si existe la tabla Countries_RaceRecord\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT name \n      FROM sqlite_master \n      WHERE type='table' AND name='Countries_RaceRecord'\n    `, 'singleRow');\n  if (!row) {\n    // No existe la tabla -> asumo que es \"23\"\n    return [\"23\", null, null, null];\n  }\n\n  // Si existe, entonces busco TeamNameLocKey del TeamID=32\n  const nameValue = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TeamNameLocKey \n      FROM Teams \n      WHERE TeamID = 32\n    `, 'singleValue');\n  if (!nameValue) {\n    // No hay valor -> devuelvo \"24\" sin datos\n    return [\"24\", null, null, null];\n  }\n\n  // Extraer nombre\n  const match = nameValue.match(/\\[STRING_LITERAL:Value=\\|(.*?)\\|\\]/);\n  let name = null,\n    primaryColor = null,\n    secondaryColor = null;\n  if (match) {\n    name = match[1];\n\n    // Busco los colores\n    const primaryColorRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Colour\n        FROM Teams_Colours\n        WHERE TeamID = 32 AND ColourID = 0\n      `, 'singleRow');\n    const secondaryColorRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Colour\n        FROM Teams_Colours\n        WHERE TeamID = 32 AND ColourID = 1\n      `, 'singleRow');\n    if (primaryColorRow) {\n      primaryColor = argbToHex(primaryColorRow[0]);\n    }\n    if (secondaryColorRow) {\n      secondaryColor = argbToHex(secondaryColorRow[0]);\n    }\n  }\n  return [\"24\", name, primaryColor, secondaryColor];\n}\nfunction fetchNationality(driverID, gameYear) {\n  if (gameYear === \"24\") {\n    const countryID = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT CountryID \n        FROM Staff_BasicData \n        WHERE StaffID = ${driverID}\n      `, 'singleValue');\n    if (!countryID) return \"\";\n    const countryName = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Name \n        FROM Countries \n        WHERE CountryID = ${countryID}\n      `, 'singleValue');\n    if (!countryName) return \"\";\n    const match = countryName.match(/(?<=\\[Nationality_)[^\\]]+/);\n    if (match) {\n      const nat = match[0];\n      const natName = nat.replace(/(?<!^)([A-Z])/g, \" $1\");\n      return (_countries_js__WEBPACK_IMPORTED_MODULE_0___default())[natName] || \"\";\n    }\n    return \"\";\n  } else if (gameYear === \"23\") {\n    const nationality = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Nationality \n        FROM Staff_BasicData \n        WHERE StaffID = ${driverID}\n      `, 'singleValue');\n    if (!nationality) return \"\";\n    const natName = nationality.replace(/(?<!^)([A-Z])/g, \" $1\");\n    return (_countries_js__WEBPACK_IMPORTED_MODULE_0___default())[natName] || \"\";\n  }\n  return \"\";\n}\nfunction fetchForFutureContract(driverID) {\n  const teamID = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TeamID \n      FROM Staff_Contracts \n      WHERE StaffID = ${driverID} \n        AND ContractType = 3\n    `, 'singleValue');\n  return teamID ?? -1;\n}\nfunction fetchEngines() {\n  const statsIds = [6, 10, 11, 12, 14, 15];\n  const enginesList = [];\n  let newEngineIds = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT engineID FROM Custom_Engines_List`, 'allRows');\n  newEngineIds = newEngineIds.map(row => row[0]);\n  let newErsIds = newEngineIds.map(id => id + 1);\n  let newGearboxesIds = newEngineIds.map(id => id + 2);\n  for (let i = 0; i < newEngineIds.length; i++) {\n    let resultDict = {};\n\n    // Obtener valores de stats\n    for (const stat of statsIds) {\n      const statResult = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n                SELECT partStat, unitValue \n                FROM Custom_Engines_Stats \n                WHERE designId = ${newEngineIds[i]} AND partStat = ${stat}\n            `, 'singleRow');\n      if (statResult) {\n        resultDict[statResult[0]] = statResult[1];\n      }\n    }\n\n    // Obtener valor de ERS\n    const ersResult = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n            SELECT UnitValue \n            FROM Custom_Engines_Stats \n            WHERE designId = ${newErsIds[i]} AND partStat = 15\n        `, 'singleValue');\n    if (ersResult !== null) {\n      resultDict[18] = ersResult;\n    }\n\n    // Obtener valor de gearbox\n    const gearboxResult = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n            SELECT UnitValue \n            FROM Custom_Engines_Stats \n            WHERE designId = ${newGearboxesIds[i]} AND partStat = 15\n        `, 'singleValue');\n    if (gearboxResult !== null) {\n      resultDict[19] = gearboxResult;\n    }\n    const engineName = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n          SELECT name \n          FROM Custom_Engines_List\n          WHERE engineID = ${newEngineIds[i]}\n      `, 'singleValue');\n\n    // Añadir la información del motor a la lista\n    enginesList.push([newEngineIds[i], resultDict, engineName]);\n  }\n  const engineAllocations = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT * FROM Custom_Engine_Allocations\n    `, 'allRows');\n  return [enginesList, engineAllocations];\n}\nfunction fetchMentality(staffID) {\n  // Obtengo todas las filas (morale es un array de arrays [[opinion],[opinion], ...])\n  const morale = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Opinion\n      FROM Staff_Mentality_AreaOpinions\n      WHERE StaffID = ${staffID}\n    `, 'allRows');\n\n  // Obtengo un solo valor\n  const globalMentality = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Mentality\n      FROM Staff_State\n      WHERE StaffID = ${staffID}\n    `, 'singleValue');\n  return [morale, globalMentality];\n}\nfunction checkDrivesForTeam32(staffData) {\n  // staffData = [ firstName, lastName, staffID, teamID, posInTeam, minContractType, retired, countContracts ]\n\n  const contractRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TeamID, PosInTeam\n      FROM Staff_Contracts\n      WHERE StaffID = ${staffData[2]} \n        AND ContractType = 0 \n        AND TeamID = 32\n    `, 'singleRow');\n  if (contractRow) {\n    return [staffData[0], staffData[1], staffData[2], 32, contractRow[1], staffData[5], staffData[6], staffData[7]];\n  }\n  return staffData;\n}\nfunction removeNumber(str) {\n  if (str && /\\d$/.test(str)) {\n    return str.slice(0, -1);\n  }\n  return str;\n}\nfunction formatNamesAndFetchStats(nameData, type) {\n  // nameData: [ FirstName, LastName, StaffID, teamId, positionInTeam, minContractType, retired, countContracts ]\n  let firstName = \"\";\n  let lastName = \"\";\n\n  // Extract firstName\n  if (!nameData[0].includes(\"STRING_LITERAL\")) {\n    const m = nameData[0].match(/StaffName_Forename_(?:Male|Female)_(\\w+)/);\n    firstName = m ? removeNumber(m[1]) : \"\";\n  } else {\n    const m = nameData[0].match(/\\|([^|]+)\\|/);\n    firstName = m ? m[1] : \"\";\n  }\n\n  // Extract lastName\n  if (!nameData[1].includes(\"STRING_LITERAL\")) {\n    const m = nameData[1].match(/StaffName_Surname_(\\w+)/);\n    lastName = m ? removeNumber(m[1]) : \"\";\n  } else {\n    const m = nameData[1].match(/\\|([^|]+)\\|/);\n    lastName = m ? m[1] : \"\";\n  }\n  const formattedName = `${firstName} ${lastName}`;\n  let teamId = nameData[3] ?? 0;\n  let positionInTeam = nameData[4] ?? 0;\n\n  // para drivers que tienen minContractType != 0 (p.ej. reservas)\n  if (type === \"driver\" && nameData[5] !== 0) {\n    teamId = 0;\n    positionInTeam = 0;\n  }\n  let baseResult;\n  if (type === \"driver\") {\n    // [nombre, staffID, teamID, posInTeam, retired]\n    baseResult = [formattedName, nameData[2], teamId, positionInTeam, nameData[6]];\n  } else {\n    // staff normal\n    baseResult = [formattedName, nameData[2], teamId, positionInTeam];\n  }\n\n  // Buscamos stats\n  if (type === \"driver\") {\n    const statsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Val\n        FROM Staff_PerformanceStats\n        WHERE StaffID = ${nameData[2]}\n          AND StatID BETWEEN 2 AND 10\n      `, 'allRows');\n    let stats = statsRows;\n    if (!stats || !stats.length) {\n      // si no hay stats, por defecto 50\n      stats = Array(9).fill([50]);\n    }\n    const extraRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Improvability, Aggression\n        FROM Staff_DriverData\n        WHERE StaffID = ${nameData[2]}\n      `, 'singleRow');\n\n    // Concatenamos: baseResult + stats + extraRow\n    // stats es array de arrays: [[val],[val],...]\n    // mapeamos para quedarnos con stats[i][0]\n    return baseResult.concat(stats.map(s => s[0]), extraRow ?? []);\n  }\n\n  // staff normal\n  let statIDs = [];\n  if (type === \"staff1\") {\n    statIDs = [0, 1, 14, 15, 16, 17];\n  } else if (type === \"staff2\") {\n    statIDs = [13, 25, 43];\n  } else if (type === \"staff3\") {\n    statIDs = [19, 20, 26, 27, 28, 29, 30, 31];\n  } else if (type === \"staff4\") {\n    statIDs = [11, 22, 23, 24];\n  }\n  if (statIDs.length) {\n    const statsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Val\n        FROM Staff_PerformanceStats\n        WHERE StaffID = ${nameData[2]}\n          AND StatID IN (${statIDs.join(\",\")})\n      `, 'allRows');\n    return baseResult.concat(statsRows.map(s => s[0]));\n  }\n\n  // Si no entra en esos casos, simplemente devolvemos baseResult\n  return baseResult;\n}\nfunction fetchDriverRetirement(driverID) {\n  const playerRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  let day = 0,\n    currentSeason = 0;\n  if (playerRow) {\n    [day, currentSeason] = playerRow;\n  } else {\n    console.warn(\"No se encontraron datos en Player_State.\");\n  }\n  const retirementAge = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT RetirementAge\n      FROM Staff_GameData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  const dob = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DOB\n      FROM Staff_BasicData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  const age = dob != null ? Math.floor((day - dob) / 365.25) : 0;\n  return [retirementAge, age];\n}\nfunction fetchDriverCode(driverID) {\n  let code = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DriverCode\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  if (!code) return \"\";\n  if (!code.includes(\"STRING_LITERAL\")) {\n    const m = code.match(/\\[DriverCode_(...)\\]/);\n    code = m ? m[1] : \"\";\n  } else {\n    const m = code.match(/\\[STRING_LITERAL:Value=\\|(...)\\|\\]/);\n    code = m ? m[1] : \"\";\n  }\n  return code.toUpperCase();\n}\nfunction fetchYear() {\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!row) {\n    console.warn(\"No data found in Player_State.\");\n    return 0;\n  }\n  // Devolvemos CurrentSeason (row[1])\n  return row[1];\n}\nfunction fetchDriverNumberDetails(driverID) {\n  let currentNumber = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Number\n      FROM Staff_DriverNumbers\n      WHERE CurrentHolder = ${driverID}\n    `, 'singleValue');\n  if (currentNumber == null) {\n    // Si no tiene número, ver si hay libres\n    const available = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Number\n        FROM Staff_DriverNumbers\n        WHERE CurrentHolder IS NULL\n      `, 'allRows');\n    if (!available.length) {\n      currentNumber = 0;\n    } else {\n      // Elige uno aleatorio\n      const randomIdx = Math.floor(Math.random() * available.length);\n      currentNumber = available[randomIdx][0];\n    }\n  }\n\n  // Quiere usar número de campeón?\n  const wantsChampion = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT WantsChampionDriverNumber\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  return [currentNumber, wantsChampion];\n}\nfunction fetchRaceFormula(driverID) {\n  const category = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT MAX(\n        CASE \n          WHEN (TeamID <= 10 OR TeamID = 32) THEN 1\n          WHEN TeamID BETWEEN 11 AND 21 THEN 2\n          WHEN TeamID BETWEEN 22 AND 31 THEN 3\n          ELSE 4\n        END\n      ) AS Cat\n      FROM Staff_Contracts\n      WHERE ContractType = 0 AND StaffID = ${driverID}\n    `, 'singleValue');\n\n  // Por defecto 4 si no existe\n  return category ?? 4;\n}\nfunction fetchMarketability(driverID) {\n  return (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Marketability\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n}\nfunction fetchSuperlicense(driverID) {\n  return (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT HasSuperLicense\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n}\nfunction fetchDrivers(gameYear) {\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DISTINCT \n        bas.FirstName, bas.LastName, bas.StaffID, con.TeamID, con.PosInTeam, \n        MIN(con.ContractType) AS MinContractType, gam.Retired, COUNT(*)\n      FROM Staff_BasicData bas\n      JOIN Staff_DriverData dri ON bas.StaffID = dri.StaffID\n      LEFT JOIN Staff_Contracts con ON dri.StaffID = con.StaffID\n      LEFT JOIN Staff_GameData gam ON dri.StaffID = gam.StaffID\n      GROUP BY gam.StaffID\n      ORDER BY con.TeamID;\n    `, 'allRows');\n  const formattedData = [];\n  for (let driver of rows) {\n    // Si driver[7] > 1 => hay más de un contrato\n    if (driver[7] > 1) {\n      driver = checkDrivesForTeam32(driver);\n    }\n    const driverID = driver[2];\n\n    // Ignoramos placeholders\n    if (driver[0] === \"Placeholder\") {\n      continue;\n    }\n\n    // Format + stats\n    const result = formatNamesAndFetchStats(driver, \"driver\");\n\n    // Extra info\n    const [retirementAge, age] = fetchDriverRetirement(driverID);\n    let raceFormula = fetchRaceFormula(driverID) || 4;\n    const [driverNumber, wants1] = fetchDriverNumberDetails(driverID);\n    const superlicense = fetchSuperlicense(driverID);\n    const futureTeam = fetchForFutureContract(driverID);\n    const driverCode = fetchDriverCode(driverID);\n    const nationality = fetchNationality(driverID, gameYear);\n\n    // result es array, lo convertimos a objeto para mayor claridad\n    const data = {\n      ...result\n    };\n    data.driver_number = driverNumber;\n    data.wants1 = wants1;\n    data.retirement_age = retirementAge;\n    data.age = age;\n    data.superlicense = superlicense;\n    data.race_formula = raceFormula;\n    data.team_future = futureTeam;\n    data.driver_code = driverCode;\n    data.nationality = nationality;\n\n    // Datos específicos para 2024\n    if (gameYear === \"24\") {\n      const [morale, gMentality] = fetchMentality(driverID);\n      data.global_mentality = gMentality ?? null;\n\n      // morale es array de arrays. Ejemplo: [ [op1], [op2], [op3] ]\n      if (morale.length >= 3) {\n        data.mentality0 = morale[0][0];\n        data.mentality1 = morale[1][0];\n        data.mentality2 = morale[2][0];\n      }\n      const market = fetchMarketability(driverID);\n      data.marketability = market ?? 0;\n    }\n    formattedData.push(data);\n  }\n  return formattedData;\n}\nfunction fetchStaff(gameYear) {\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DISTINCT\n        bas.FirstName, \n        bas.LastName, \n        bas.StaffID, \n        con.TeamID, \n        gam.StaffType\n      FROM Staff_GameData gam\n      JOIN Staff_BasicData bas ON gam.StaffID = bas.StaffID\n      LEFT JOIN Staff_Contracts con \n        ON bas.StaffID = con.StaffID \n        AND (con.ContractType = 0 OR con.ContractType IS NULL)\n      WHERE gam.StaffType != 0\n      ORDER BY \n        CASE WHEN con.TeamID IS NULL THEN 1 ELSE 0 END,\n        con.TeamID\n    `, 'allRows');\n  if (!rows.length) {\n    console.warn(\"No staff data found.\");\n    return [];\n  }\n  const formattedData = [];\n  for (let staff of rows) {\n    // staff = [ FirstName, LastName, StaffID, TeamID, StaffType ]\n    if (staff[0] === \"Placeholder\") {\n      continue;\n    }\n    const staffID = staff[2];\n    const staffType = `staff${staff[4]}`;\n    const result = formatNamesAndFetchStats(staff, staffType);\n    const [retirementAge, age] = fetchDriverRetirement(staffID);\n    let raceFormula = fetchRaceFormula(staffID) || 4;\n    const futureTeam = fetchForFutureContract(staffID);\n    const nationality = fetchNationality(staffID, gameYear);\n    const data = {\n      ...result\n    };\n    data.retirement_age = retirementAge;\n    data.age = age;\n    data.race_formula = raceFormula;\n    data.team_future = futureTeam;\n    data.nationality = nationality;\n    if (gameYear === \"24\") {\n      const [morale, gMentality] = fetchMentality(staffID);\n      data.global_mentality = gMentality ?? -1;\n      if (morale.length >= 3) {\n        data.mentality0 = morale[0][0] ?? -1;\n        data.mentality1 = morale[1][0] ?? -1;\n        data.mentality2 = morale[2][0] ?? -1;\n      } else {\n        data.mentality0 = -1;\n        data.mentality1 = -1;\n        data.mentality2 = -1;\n      }\n    }\n    formattedData.push(data);\n  }\n  return formattedData;\n}\nfunction fetchDriversPerYear(year) {\n  // Construimos la consulta SQL\n  const sql = `\n      SELECT \n        bas.FirstName, \n        bas.LastName, \n        res.DriverID, \n        res.TeamID\n      FROM Staff_BasicData bas\n      JOIN Races_Results res \n        ON bas.StaffID = res.DriverID\n      WHERE Season = ${year}\n      GROUP BY \n        bas.FirstName, \n        bas.LastName, \n        bas.StaffID, \n        res.TeamID\n      ORDER BY res.TeamID\n    `;\n\n  // Obtenemos todas las filas (array de objetos o tuplas)\n  const drivers = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(sql, 'allRows') || [];\n\n  // Formateamos cada fila como quieras (equivalente a \"format_names_simple\")\n  const formattedTuples = drivers.map(row => formatNamesSimple(row));\n  return formattedTuples;\n}\nfunction formatNamesSimple(name) {\n  let nombre = \"\";\n  let apellido = \"\";\n\n  // Si no contiene \"STRING_LITERAL\", buscamos \"StaffName_Forename_(Male|Female)_(...)\".\n  if (!name[0].includes(\"STRING_LITERAL\")) {\n    const nombrePattern = /StaffName_Forename_(Male|Female)_(\\w+)/;\n    const match = name[0].match(nombrePattern);\n    if (match) {\n      // Asumiendo que tienes un método removeNumber similar al de Python\n      nombre = removeNumber(match[2]);\n    } else {\n      nombre = \"\";\n    }\n  } else {\n    // De lo contrario, buscamos la parte entre \"| ... |\"\n    const pattern = /\\|([^|]+)\\|/;\n    const match = name[0].match(pattern);\n    if (match) {\n      nombre = match[1];\n    } else {\n      nombre = \"\";\n    }\n  }\n\n  // Repetimos la lógica para el apellido\n  if (!name[1].includes(\"STRING_LITERAL\")) {\n    const apellidoPattern = /StaffName_Surname_(\\w+)/;\n    const match = name[1].match(apellidoPattern);\n    if (match) {\n      apellido = removeNumber(match[1]);\n    } else {\n      apellido = \"\";\n    }\n  } else {\n    const pattern = /\\|([^|]+)\\|/;\n    const match = name[1].match(pattern);\n    if (match) {\n      apellido = match[1];\n    } else {\n      apellido = \"\";\n    }\n  }\n\n  // Construimos el nombre completo\n  const nameFormatted = `${nombre} ${apellido}`.trim();\n\n  // El TeamID (índice 3 en el array). Si es nulo/indefinido, lo ponemos a 0\n  const teamId = name[3] != null ? name[3] : 0;\n\n  // Devolvemos la misma estructura que en Python: (Nombre Formateado, DriverID, TeamID)\n  return [nameFormatted, name[2], teamId];\n}\nfunction fetchSeasonResults(yearSelected) {\n  const drivers = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DriverID\n      FROM Races_DriverStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${yearSelected}\n    `, 'allRows') || [];\n  const seasonResults = [];\n  drivers.forEach(row => {\n    const driverID = row[0];\n    const driverRes = fetchOneDriverSeasonResults([driverID], [yearSelected]);\n    if (driverRes) {\n      seasonResults.push(driverRes);\n    }\n  });\n  return seasonResults;\n}\nfunction fetchTeamsStandings(year) {\n  return (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TeamID, Position\n      FROM Races_TeamStandings\n      WHERE SeasonID = ${year}\n        AND RaceFormula = 1\n    `, 'allRows') || [];\n}\nfunction fetchOneTeamSeasonResults(team, year) {\n  const teamID = team;\n  const season = year;\n  const drivers = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(` SELECT DISTINCT DriverID\n       FROM Races_Results\n       WHERE Season = ${season}\n       AND TeamID = ${teamID} `, 'allRows') || [];\n  const results = [];\n  for (let driver of drivers) {\n    const driverID = driver[0];\n    const driverResults = fetchOneDriverSeasonResults(driverID, season);\n    if (driverResults) {\n      results.push(driverResults);\n    }\n  }\n  return results;\n}\nfunction fetchOneDriverSeasonResults(driver, year) {\n  const driverID = driver;\n  const season = year;\n  const results = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DriverID, TeamID, FinishingPos, Points\n      FROM Races_Results\n      WHERE Season = ${season}\n        AND DriverID = ${driverID}\n    `, 'allRows') || [];\n  if (results.length > 0) {\n    const sprintResults = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT RaceID, FinishingPos, ChampionshipPoints\n        FROM Races_SprintResults\n        WHERE SeasonID = ${season}\n          AND DriverID = ${driverID}\n      `, 'allRows') || [];\n    const teamID = results[0][1];\n    const driverNameRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT FirstName, LastName\n        FROM Staff_BasicData\n        WHERE StaffID = ${driverID}\n      `, 'singleRow');\n    return formatSeasonResults(results, driverNameRow, teamID, driver, year, sprintResults);\n  }\n  return null;\n}\nfunction fetchEventsDoneFrom(year) {\n  const daySeasonRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!daySeasonRow) {\n    return [];\n  }\n  const [currentDay, currentSeason] = daySeasonRow;\n  const seasonIdsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT RaceID\n      FROM Races\n      WHERE SeasonID = ${year}\n        AND Day < ${currentDay}\n    `, 'allRows') || [];\n  const eventsIds = seasonIdsRows.map(row => row[0]);\n  return eventsIds;\n}\nfunction fetchEventsFrom(year) {\n  const seasonEventsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TrackID\n      FROM Races\n      WHERE SeasonID = ${year}\n    `, 'allRows') || [];\n  const seasonIdsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT RaceID\n      FROM Races\n      WHERE SeasonID = ${year}\n    `, 'allRows') || [];\n  const eventsIds = [];\n  for (let i = 0; i < seasonIdsRows.length; i++) {\n    const raceID = seasonIdsRows[i][0];\n    const trackID = seasonEventsRows[i][0];\n    eventsIds.push([raceID, trackID]);\n  }\n  return eventsIds;\n}\nfunction formatSeasonResults(results, driverName, teamID, driver, year, sprints) {\n  // Asumiendo que driver y year son arrays (p.ej. driver=[123], year=[2023]):\n  const driverID = driver;\n  const season = year;\n\n  // -------- 1) Formatear nombre --------\n  let nombre = \"\";\n  let apellido = \"\";\n\n  // driverName podría ser un array [firstName, lastName] o un objeto {FirstName, LastName}.\n  // Aquí asumimos array. Si tu queryDB retorna objetos, ajusta a driverName.FirstName, driverName.LastName.\n  const firstName = driverName ? driverName[0] : \"\";\n  const lastName = driverName ? driverName[1] : \"\";\n\n  // Lógica análoga a Python para \"STRING_LITERAL\"\n  if (!firstName.includes(\"STRING_LITERAL\")) {\n    const nombrePattern = /StaffName_Forename_(Male|Female)_(\\w+)/;\n    const match = firstName.match(nombrePattern);\n    if (match) {\n      nombre = removeNumber(match[2]); // asumiendo que tienes un removeNumber\n    } else {\n      nombre = \"\";\n    }\n  } else {\n    const pattern = /\\|([^|]+)\\|/;\n    const match = firstName.match(pattern);\n    nombre = match ? match[1] : \"\";\n  }\n  if (!lastName.includes(\"STRING_LITERAL\")) {\n    const apellidoPattern = /StaffName_Surname_(\\w+)/;\n    const match = lastName.match(apellidoPattern);\n    if (match) {\n      apellido = removeNumber(match[1]);\n    } else {\n      apellido = \"\";\n    }\n  } else {\n    const pattern = /\\|([^|]+)\\|/;\n    const match = lastName.match(pattern);\n    apellido = match ? match[1] : \"\";\n  }\n  const nameFormatted = `${nombre} ${apellido}`.trim();\n\n  // -------- 2) Obtener todas las carreras que corrió este piloto en la temporada --------\n  const racesParticipated = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT RaceID\n      FROM Races_Results\n      WHERE DriverID = ${driverID}\n        AND Season = ${season}\n    `, 'allRows') || [];\n\n  // results = array con [DriverID, TeamID, FinishingPos, Points]\n  // Queremos convertirlo en algo más detallado. \n  // De Python: formatred_results = [(FinishingPos, Points) for result in results]\n  // Pero necesitamos mapear 1:1 con la lista de RaceIDs, así que iremos uno a uno.\n  let formatredResults = results.map(r => [r[2], r[3]]);\n  // r[2] => FinishingPos, r[3] => Points.\n\n  // Suponiendo que hay la misma cantidad y el mismo orden de carreras \n  // entre \"results\" y \"racesParticipated\". \n  // Si no, necesitarías hacer matching por RaceID. \n  // En tu Python original, tomabas RaceIDs en order y reasignabas. \n  // Asegurémonos de usar el RaceID de 'racesParticipated[i]' igual que Python.\n\n  for (let i = 0; i < racesParticipated.length; i++) {\n    const raceID = racesParticipated[i][0]; // Cada fila es [RaceID]\n\n    // 2.1) Buscamos quién hizo la fastest lap\n    const driverWithFastestLap = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT DriverID\n        FROM Races_Results\n        WHERE FastestLap > 0\n          AND RaceID = ${raceID}\n          AND Season = ${season}\n        ORDER BY FastestLap\n        LIMIT 1\n      `, 'singleValue');\n\n    // 2.2) Checamos si fue DNF\n    const dnfd = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT DNF\n        FROM Races_Results\n        WHERE DriverID = ${driverID}\n          AND Season = ${season}\n          AND RaceID = ${raceID}\n      `, 'singleValue') || 0;\n\n    // Inyectamos RaceID al inicio de la tupla\n    // Python: formatred_results[i] = (raceID,) + formatred_results[i]\n    formatredResults[i] = [raceID, ...formatredResults[i]];\n\n    // Si DNF = 1 => set FinishingPos y Points a -1\n    if (dnfd === 1) {\n      const arr = [...formatredResults[i]];\n      arr[1] = -1; // FinishingPos\n      arr[2] = -1; // Points\n      formatredResults[i] = arr;\n    }\n\n    // Marcar fastest lap\n    if (driverWithFastestLap === driverID) {\n      // le append \"1\"\n      formatredResults[i].push(1);\n    } else {\n      // le append \"0\"\n      formatredResults[i].push(0);\n    }\n\n    // 2.3) Quali Stage & FinishingPos\n    const QStage = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n    const QRes = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID = ${driverID}\n          AND QualifyingStage = ${QStage}\n      `, 'singleValue') || 99;\n\n    // 2.4) Cálculo de diferencias de tiempo (carrera y pole)\n    const timeDifference = calculateTimeDifference(driverID, raceID);\n    const poleDifference = calculateTimeToPole(driverID, raceID);\n\n    // Añadimos QRes, timeDifference y poleDifference\n    formatredResults[i].push(QRes);\n    formatredResults[i].push(timeDifference);\n    formatredResults[i].push(poleDifference);\n  }\n\n  // -------- 3) Añadir datos de sprint al formatredResults --------\n  // En Python: \n  // for tupla1 in sprints:\n  //   for i, tupla2 in enumerate(formatred_results):\n  //     if tupla1[0] == tupla2[0]:\n  //       formatred_results[i] = tupla2 + (tupla1[2], tupla1[1])\n  //\n  // tupla1[0] => RaceID\n  // tupla1[1] => FinishingPos\n  // tupla1[2] => ChampionshipPoints\n\n  for (const sprintRow of sprints) {\n    // sprintRow: [RaceID, FinishingPos, ChampionshipPoints]\n    const [sprintRaceID, sprintPos, sprintPoints] = sprintRow;\n    // Buscamos coincidencia en formatredResults\n    for (let i = 0; i < formatredResults.length; i++) {\n      if (formatredResults[i][0] === sprintRaceID) {\n        // Agregamos ChampionshipPoints y FinishingPos al final\n        // (Ojo: en Python lo agregas en orden (tupla1[2], tupla1[1]) => (ChampPoints, FinishingPos)\n        formatredResults[i] = [...formatredResults[i], sprintPoints, sprintPos];\n        break;\n      }\n    }\n  }\n\n  // -------- 4) Añadir TeamID a cada carrera --------\n  // En Python se hace un for i in range(len(...)):\n  //   team_in_race = ...\n  //   formatred_results[i] += (team_in_race)\n  //   latest_team = ...\n  let latestTeam = null;\n  for (let i = 0; i < formatredResults.length; i++) {\n    const raceID = formatredResults[i][0];\n    const teamInRace = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT TeamID\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n    formatredResults[i].push(teamInRace);\n    latestTeam = teamInRace;\n  }\n\n  // -------- 5) Agregar la posición final en el campeonato al inicio --------\n  const position = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Position\n      FROM Races_Driverstandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${season}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n  formatredResults.unshift(position);\n  formatredResults.unshift(latestTeam);\n  formatredResults.unshift(nameFormatted);\n\n  // Devolvemos el array final\n  return formatredResults;\n}\nfunction calculateTimeToPole(driverID, raceID) {\n  const QStage = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT MAX(QualifyingStage)\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n  const poleTime = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT MIN(FastestLap)\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND QualifyingStage = 3\n        AND FastestLap IS NOT 0\n    `, 'singleValue') || 9999;\n  const driverTime = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT FastestLap\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND QualifyingStage = ${QStage}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 9999;\n  if (driverTime < poleTime) {\n    return \"NR\";\n  } else {\n    const difference = Number((driverTime - poleTime).toFixed(2));\n    return `+${difference}s`;\n  }\n}\nfunction calculateTimeDifference(driverID, raceID) {\n  const totalLaps = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT MAX(Laps)\n      FROM Races_Results\n      WHERE RaceID = ${raceID}\n    `, 'singleValue') || 0;\n  const driverLaps = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Laps\n      FROM Races_Results\n      WHERE RaceID = ${raceID}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n  if (driverLaps < totalLaps) {\n    return `+${totalLaps - driverLaps} L`;\n  } else {\n    const winnerID = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT DriverID\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND FinishingPos = 1\n      `, 'singleValue');\n    const winnerTime = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Time\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${winnerID}\n      `, 'singleValue') || 0;\n    const driverTime = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Time\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n    const timeDiff = Number((driverTime - winnerTime).toFixed(1));\n    return `+${timeDiff}s`;\n  }\n}\nfunction fetchCalendar() {\n  // Saco [ Day, CurrentSeason ] de Player_State\n  const daySeason = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!daySeason) {\n    console.warn(\"No data found in Player_State.\");\n    return [];\n  }\n  const [day, currentSeason] = daySeason;\n\n  // Saco el calendario\n  const calendar = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TrackID, WeatherStatePractice, WeatherStateQualifying, WeatherStateRace, WeekendType, State\n      FROM Races\n      WHERE SeasonID = ${currentSeason}\n    `, 'allRows');\n  return calendar;\n}\nfunction fetchDriverNumbers() {\n  const numbers = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT DISTINCT Number\n       FROM Staff_DriverNumbers dn \n       JOIN Staff_Contracts con \n       ON dn.CurrentHolder = con.StaffID \n       WHERE dn.CurrentHolder IS NULL OR con.PosInTeam > 2`, 'allRows');\n  return numbers.map(n => n[0]);\n}\nfunction fetchDriverContract(id) {\n  // Obtener el contrato actual\n  const currentContract = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Salary, EndSeason, StartingBonus, RaceBonus, RaceBonusTargetPos, TeamID\n        FROM Staff_Contracts\n        WHERE ContractType = 0 AND StaffID = ${id}\n    `, 'singleRow');\n\n  // Obtener el contrato futuro\n  const futureContract = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Salary, EndSeason, StartingBonus, RaceBonus, RaceBonusTargetPos, PosInTeam, TeamID\n        FROM Staff_Contracts\n        WHERE ContractType = 3 AND StaffID = ${id}\n    `, 'singleRow');\n\n  // Obtener el día y la temporada actual\n  const daySeason = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Day, CurrentSeason\n        FROM Player_State\n    `, 'singleRow');\n\n  // Retornar los resultados\n  return [currentContract, futureContract, daySeason ? daySeason[1] : null];\n}\nfunction checkCustomTables(year) {\n  let createdEnginesList = false;\n  let createdEnginesStats = false;\n  let createdEnginesAllocations = false;\n  let createdCustomSaveConfig = false;\n  const tablesToCheck = [{\n    name: 'Custom_Engines_List',\n    createSQL: `\n          CREATE TABLE Custom_Engines_List (\n            engineId INTEGER PRIMARY KEY,\n            name TEXT\n          )\n        `\n  }, {\n    name: 'Custom_Engines_Stats',\n    createSQL: `\n          CREATE TABLE Custom_Engines_Stats (\n            engineId INTEGER,\n            designId INTEGER,\n            partStat INTEGER,\n            unitValue REAL,\n            Value REAL\n          )\n        `\n  }, {\n    name: 'Custom_Save_Config',\n    createSQL: `\n          CREATE TABLE Custom_Save_Config (\n            key TEXT PRIMARY KEY,\n            value TEXT\n          )\n        `\n  }, {\n    name: 'Custom_Engine_Allocations',\n    createSQL: `\n          CREATE TABLE Custom_Engine_Allocations (\n            teamId INTEGER,\n            engineId INTEGER\n            \n          )\n        `\n  }];\n  tablesToCheck.forEach(table => {\n    const tableExists = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT name\n        FROM sqlite_master\n        WHERE type='table'\n          AND name='${table.name}'\n      `, 'singleValue');\n    if (!tableExists) {\n      (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(table.createSQL);\n      console.log(\"TABLE CREATED: \", table.name);\n      if (table.name === 'Custom_Engines_List') {\n        createdEnginesList = true;\n      } else if (table.name === 'Custom_Engines_Stats') {\n        createdEnginesStats = true;\n      } else if (table.name === 'Custom_Engine_Allocations') {\n        createdEnginesAllocations = true;\n      } else if (table.name === 'Custom_Save_Config') {\n        createdCustomSaveConfig = true;\n      }\n    }\n  });\n  insertDefualtEnginesData(createdEnginesList, createdEnginesStats, createdEnginesAllocations, createdCustomSaveConfig, year);\n}\nfunction insertDefualtEnginesData(list, stats, allocations, customSave, year) {\n  const engines = [{\n    id: 1,\n    name: 'Ferrari',\n    stats: [{\n      partStat: 6,\n      value: 500,\n      unitValue: 75,\n      designId: 1\n    }, {\n      partStat: 10,\n      value: 750,\n      unitValue: 95,\n      designId: 1\n    }, {\n      partStat: 11,\n      value: 250,\n      unitValue: 80,\n      designId: 1\n    }, {\n      partStat: 12,\n      value: 500,\n      unitValue: 77.5,\n      designId: 1\n    }, {\n      partStat: 14,\n      value: 400,\n      unitValue: 68,\n      designId: 1\n    }, {\n      partStat: 15,\n      value: 350,\n      unitValue: 57,\n      designId: 2\n    }, {\n      partStat: 15,\n      value: 0,\n      unitValue: 50,\n      designId: 3\n    }]\n  }, {\n    id: 4,\n    name: 'Red Bull',\n    stats: [{\n      partStat: 6,\n      value: 300,\n      unitValue: 65,\n      designId: 4\n    }, {\n      partStat: 10,\n      value: 1000,\n      unitValue: 100,\n      designId: 4\n    }, {\n      partStat: 11,\n      value: 0,\n      unitValue: 85,\n      designId: 4\n    }, {\n      partStat: 12,\n      value: 0,\n      unitValue: 70,\n      designId: 4\n    }, {\n      partStat: 14,\n      value: 0,\n      unitValue: 60,\n      designId: 4\n    }, {\n      partStat: 15,\n      value: 0,\n      unitValue: 50,\n      designId: 5\n    }, {\n      partStat: 15,\n      value: 600,\n      unitValue: 62,\n      designId: 6\n    }]\n  }, {\n    id: 7,\n    name: 'Mercedes',\n    stats: [{\n      partStat: 6,\n      value: 0,\n      unitValue: 50,\n      designId: 7\n    }, {\n      partStat: 10,\n      value: 500,\n      unitValue: 90,\n      designId: 7\n    }, {\n      partStat: 11,\n      value: 1000,\n      unitValue: 65,\n      designId: 7\n    }, {\n      partStat: 12,\n      value: 850,\n      unitValue: 82.75,\n      designId: 7\n    }, {\n      partStat: 14,\n      value: 1000,\n      unitValue: 80,\n      designId: 7\n    }, {\n      partStat: 15,\n      value: 1000,\n      unitValue: 70,\n      designId: 8\n    }, {\n      partStat: 15,\n      value: 1000,\n      unitValue: 70,\n      designId: 9\n    }]\n  }, {\n    id: 10,\n    name: 'Renault',\n    stats: [{\n      partStat: 6,\n      value: 1000,\n      unitValue: 100,\n      designId: 10\n    }, {\n      partStat: 10,\n      value: 0,\n      unitValue: 80,\n      designId: 10\n    }, {\n      partStat: 11,\n      value: 500,\n      unitValue: 75,\n      designId: 10\n    }, {\n      partStat: 12,\n      value: 1000,\n      unitValue: 85,\n      designId: 10\n    }, {\n      partStat: 14,\n      value: 650,\n      unitValue: 73,\n      designId: 10\n    }, {\n      partStat: 15,\n      value: 500,\n      unitValue: 75,\n      designId: 11\n    }, {\n      partStat: 15,\n      value: 1000,\n      unitValue: 100,\n      designId: 12\n    }]\n  }];\n  const teams = {\n    alphatauri: {\n      23: \"alphatauri\",\n      24: \"visarb\"\n    },\n    alfa: {\n      23: \"alfa\",\n      24: \"stake\"\n    },\n    alpine: {\n      23: \"alpine\",\n      24: \"alpine\"\n    }\n  };\n  if (customSave) {\n    for (let key in teams) {\n      const newTeam = teams[key][year];\n      (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Save_Config (key, value) VALUES ('${key}', '${newTeam}')`);\n    }\n  }\n  if (list && stats) {\n    engines.forEach(engine => {\n      (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        INSERT OR REPLACE INTO Custom_Engines_List (engineId, Name)\n        VALUES (${engine.id}, '${engine.name}')\n      `);\n      engine.stats.forEach(stat => {\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n          INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n          VALUES (${engine.id}, ${stat.designId}, ${stat.partStat}, ${stat.value}, ${stat.unitValue})\n        `);\n      });\n    });\n  }\n  if (allocations) {\n    const maxYear = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT MAX(SeasonID) FROM Parts_TeamHistory`, 'singleValue');\n    const actualEngineAllocations = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT th.TeamID, em.EngineDesignID\n      FROM Parts_TeamHistory th\n      JOIN Parts_Enum_EngineManufacturers em\n        ON th.EngineManufacturer = em.Value\n      WHERE SeasonID = ${maxYear}`, 'allRows');\n    actualEngineAllocations.forEach(engine => {\n      (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        INSERT OR REPLACE INTO Custom_Engine_Allocations (teamId, engineId)\n        VALUES (${engine[0]}, ${engine[1]})\n      `);\n    });\n  }\n}\nfunction updateCustomEngines(engineData) {\n  for (let engineId in engineData) {\n    const nameCapitalized = engineData[engineId].name.charAt(0).toUpperCase() + engineData[engineId].name.slice(1);\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_List (engineId, Name) VALUES (${engineId}, '${nameCapitalized}')`);\n    for (let stat in engineData[engineId].stats) {\n      const untiValue = engineData[engineId].stats[stat];\n      const value = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[stat](untiValue);\n      if (parseInt(stat) !== 18 && parseInt(stat) !== 19) {\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${engineId}, ${stat}, ${value}, ${untiValue})`);\n      } else if (parseInt(stat) === 18) {\n        let designId = parseInt(engineId) + 1;\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n      } else if (parseInt(stat) === 19) {\n        let designId = parseInt(engineId) + 2;\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n      }\n    }\n    updateTeamsSuppliedByEngine(engineId, engineData[engineId].stats);\n  }\n}\nfunction editEngines(engineData) {\n  for (let engineId in engineData) {\n    for (let stat in engineData[engineId]) {\n      const untiValue = engineData[engineId][stat];\n      const value = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[stat](untiValue);\n      if (parseInt(stat) !== 18 && parseInt(stat) !== 19) {\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${engineId}, ${stat}, ${value}, ${untiValue})`);\n      } else if (parseInt(stat) === 18) {\n        let designId = parseInt(engineId) + 1;\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n      } else if (parseInt(stat) === 19) {\n        let designId = parseInt(engineId) + 2;\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n      }\n    }\n    updateTeamsSuppliedByEngine(engineId, engineData[engineId]);\n  }\n}\nfunction updateTeamsSuppliedByEngine(engineId, stats) {\n  const teamsSupplied = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT teamID FROM Custom_Engine_Allocations WHERE engineId = ${engineId}`, 'allRows');\n  for (let team in teamsSupplied) {\n    const teamEngineId = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${team} AND PartType = 0`, 'singleValue');\n    const teamERSId = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${team} AND PartType = 1`, 'singleValue');\n    const teamGearboxId = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${team} AND PartType = 2`, 'singleValue');\n    for (let stat in stats) {\n      if (parseInt < 18) {\n        const untiValue = stats[stat];\n        const value = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[stat](untiValue);\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${value}, UnitValue = ${untiValue} WHERE DesignID = ${teamEngineId} AND PartStat = ${stat}`);\n      }\n    }\n    const valueERS = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[18](stats[18]);\n    const unitValueERS = stats[18];\n    const valueGearbox = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[19](stats[19]);\n    const unitValueGearbox = stats[19];\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${valueERS}, UnitValue = ${unitValueERS} WHERE DesignID = ${teamERSId} AND PartStat = ${15}`);\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${valueGearbox}, UnitValue = ${unitValueGearbox} WHERE DesignID = ${teamGearboxId} AND PartStat = ${15}`);\n  }\n}\nfunction updateCustomConfig(data) {\n  console.log(data);\n  const alfaRomeo = data.alfa;\n  const alphaTauri = data.alphatauri;\n  const alpine = data.alpine;\n  const primaryColor = data.primaryColor;\n  const secondaryColor = data.secondaryColor;\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n    INSERT OR REPLACE INTO Custom_Save_Config (key, value)\n    VALUES ('alfa', '${alfaRomeo}')\n  `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n    INSERT OR REPLACE INTO Custom_Save_Config (key, value)\n    VALUES ('alphatauri', '${alphaTauri}')\n  `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n    INSERT OR REPLACE INTO Custom_Save_Config (key, value)\n    VALUES ('alpine', '${alpine}')\n  `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n    INSERT OR REPLACE INTO Custom_Save_Config (key, value)\n    VALUES ('primaryColor', '${primaryColor}')\n  `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n    INSERT OR REPLACE INTO Custom_Save_Config (key, value)\n    VALUES ('secondaryColor', '${secondaryColor}')\n  `);\n}\nfunction fetchCustomConfig() {\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT key, value FROM Custom_Save_Config`, 'allRows') || [];\n  const config = {\n    teams: {},\n    primaryColor: null,\n    secondaryColor: null\n  };\n  rows.forEach(row => {\n    const key = row[0];\n    const value = row[1];\n    if (key === 'alphatauri' || key === 'alpine' || key === 'alfa') {\n      config.teams[key] = value;\n    } else if (key === 'primaryColor') {\n      config.primaryColor = value;\n    } else if (key === 'secondaryColor') {\n      config.secondaryColor = value;\n    }\n  });\n  return config;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/dbUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/editTeamUtils.js":
/*!*****************************************************!*\
  !*** ./src/js/backend/scriptUtils/editTeamUtils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   editTeam: () => (/* binding */ editTeam),\n/* harmony export */   fetchTeamData: () => (/* binding */ fetchTeamData),\n/* harmony export */   manageCostCap: () => (/* binding */ manageCostCap),\n/* harmony export */   manage_engine_change: () => (/* binding */ manage_engine_change)\n/* harmony export */ });\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n\nfunction fetchTeamData(teamID) {\n  const levCon = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT BuildingID, DegradationValue\n        FROM Buildings_HQ\n        WHERE TeamID = ${teamID}\n      `, 'allRows') || [];\n  const data = levCon.map(row => [row[0], parseFloat(Number(row[1]).toFixed(2))]);\n  if (teamID == \"32\") data.push([\"160\", 1]);\n  const daySeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT Day, CurrentSeason\n        FROM Player_State\n      `, 'singleRow');\n  const days = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(Day), MAX(Day)\n        FROM Seasons_Deadlines\n        WHERE SeasonID = ${daySeason[1]}\n      `, 'singleRow');\n  const costCap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT SUM(value) AS Value\n        FROM Finance_Transactions\n        WHERE Day >= ${days[0]}\n          AND Day < ${days[1]}\n          AND AffectsCostCap = 1\n          AND TeamID = ${teamID}\n      `, 'allRows');\n  const teamBalance = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT Balance\n        FROM Finance_TeamBalance\n        WHERE TeamID = ${teamID}\n      `, 'singleRow');\n  const seasonObj = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT TargetPos\n        FROM Board_SeasonObjectives\n        WHERE TeamID = ${teamID}\n          AND SeasonID = ${daySeason[1]}\n      `, 'singleRow');\n  const maxTargetYear = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(TargetEndYear)\n        FROM Board_Objectives\n        WHERE TeamID = ${teamID}\n      `, 'singleRow');\n  const longTermObj = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT Type, TargetEndYear\n        FROM Board_Objectives\n        WHERE TeamID = ${teamID}\n          AND TargetEndYear = ${maxTargetYear[0]}\n      `, 'singleRow');\n  const playerTeam = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT TeamID\n        FROM Player\n      `, 'singleRow');\n  let confidence;\n  if (playerTeam[0] == Number(teamID)) {\n    confidence = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Confidence\n          FROM Board_Confidence\n          WHERE Season = ${daySeason[1]}\n        `, 'singleRow') || [-1];\n  } else {\n    confidence = [-1];\n  }\n  const pitStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT StatID, Val\n        FROM Staff_PitCrew_PerformanceStats\n        WHERE TeamID = ${teamID}\n      `, 'allRows') || [];\n  const pitDict = {};\n  pitStats.forEach(stat => {\n    pitDict[stat[0]] = parseFloat(Number(stat[1]).toFixed(2));\n  });\n  const engineId = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT engineId FROM Custom_Engine_Allocations WHERE teamId = ${teamID}`, 'singleValue');\n  const allEngines = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT * FROM Custom_Engine_Allocations`, 'allRows');\n  console.log(allEngines);\n  data.push(seasonObj, longTermObj, teamBalance, costCap, confidence, daySeason[1], pitDict, engineId);\n  return data;\n}\n\n// manageCostCap(teamID, amount)\nfunction manageCostCap(teamID, amount) {\n  let remaining = parseInt(amount, 10);\n  if (remaining > 0) {\n    while (remaining > 0) {\n      // Obtenemos la transacción negativa más reciente\n      const transaction = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT ROWID, Value, Reference\n        FROM Finance_Transactions\n        WHERE TeamID = ${teamID}\n          AND AffectsCostCap = 1\n          AND Value < 0\n        ORDER BY Day DESC, ROWID DESC\n        LIMIT 1\n      `, 'singleRow');\n      if (!transaction) {\n        break;\n      } else {\n        const rowid = transaction[0];\n        const value = transaction[1];\n        // reference = transaction[2]; // no se usa directamente\n\n        let amountToAdd;\n        if (value + remaining <= 0) {\n          amountToAdd = remaining;\n        } else {\n          amountToAdd = -value;\n        }\n        (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          UPDATE Finance_Transactions\n          SET Value = Value + ${amountToAdd}\n          WHERE ROWID = ${rowid}\n        `);\n        remaining -= amountToAdd;\n      }\n    }\n  }\n  // Si remaining <= 0, insertamos una transacción que incremente el CostCap (o lo modifique negativamente)\n  else {\n    const daySeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      INSERT INTO Finance_Transactions\n      VALUES (${teamID}, ${daySeason[0]}, ${amount}, 9, -1, 1)\n    `);\n  }\n}\nfunction editTeam(info) {\n  const daySeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    SELECT Day, CurrentSeason\n    FROM Player_State\n  `, 'singleRow');\n  const teamID = info.teamID;\n\n  // Actualización de Buildings_HQ\n  info.facilities.forEach(facility => {\n    const id = facility[0].slice(0, -1);\n    // facility[0] podría ser \"160a\", por ejemplo, y con slice(0, -1) quitas el último carácter\n\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Buildings_HQ\n      SET BuildingID = '${facility[0]}',\n          DegradationValue = ${facility[1]}\n      WHERE TeamID = ${teamID}\n        AND BuildingType = ${id}\n    `);\n  });\n\n  // Board_SeasonObjectives\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Board_SeasonObjectives\n    SET TargetPos = ${info.seasonObj}\n    WHERE TeamID = ${teamID}\n      AND SeasonID = ${daySeason[1]}\n  `);\n\n  // Board_Objectives (objetivo a largo plazo)\n  const maxTargetYear = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    SELECT MAX(TargetEndYear)\n    FROM Board_Objectives\n    WHERE TeamID = ${teamID}\n  `, 'singleRow');\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Board_Objectives\n    SET Type = ${info.longTermObj},\n        TargetEndYear = ${info.longTermYear}\n    WHERE TeamID = ${teamID}\n      AND TargetEndYear = ${maxTargetYear[0]}\n  `);\n\n  // Board_Confidence\n  if (info.confidence !== \"-1\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Board_Confidence\n      SET Confidence = ${info.confidence}\n      WHERE Season = ${daySeason[1]}\n    `);\n  }\n\n  // Finance_TeamBalance\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Finance_TeamBalance\n    SET Balance = ${info.teamBudget}\n    WHERE TeamID = ${teamID}\n  `);\n\n  // Ajuste de CostCap\n  manageCostCap(teamID, info.costCapEdit);\n\n  // Actualizar Staff_PitCrew_PerformanceStats\n  Object.keys(info.pitCrew).forEach(statID => {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_PitCrew_PerformanceStats\n      SET Val = ${info.pitCrew[statID]}\n      WHERE TeamID = ${teamID}\n        AND StatID = ${statID}\n    `);\n  });\n\n  // La parte de manage_engine_change la manejas tú\n  manage_engine_change(teamID, info.engine);\n}\nfunction manage_engine_change(teamID, engineId) {\n  const oldEngineId = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${teamID} AND PartType = 0`, 'singleValue');\n  const oldERSId = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${teamID} AND PartType = 1`, 'singleValue');\n  const oldGearboxId = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${teamID} AND PartType = 2`, 'singleValue');\n  const nmewERSId = parseInt(engineId, 10) + 1;\n  const newGearboxId = parseInt(engineId, 10) + 2;\n  const newEngineStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT partStat, unitValue, Value FROM Custom_Engines_Stats WHERE designId = ${engineId}`, 'allRows');\n  const newERSStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT partStat, unitValue, Value FROM Custom_Engines_Stats WHERE designId = ${nmewERSId}`, 'singleRow');\n  const newGearboxStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT partStat, unitValue, Value FROM Custom_Engines_Stats WHERE designId = ${newGearboxId}`, 'singleRow');\n  const engineStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT PartStat FROM Parts_Designs_StatValues WHERE DesignID = ${oldEngineId}`, 'allRows');\n  engineStats.forEach(stat => {\n    const newStat = newEngineStats.find(newStat => newStat[0] === stat[0]);\n    if (newStat) {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${newStat[2]}, UnitValue =  ${newStat[1]} WHERE DesignID = ${oldEngineId} AND PartStat = ${stat[0]}`);\n    }\n  });\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${newERSStats[2]}, UnitValue =  ${newERSStats[1]} WHERE DesignID = ${oldERSId} AND PartStat = 15`);\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${newGearboxStats[2]}, UnitValue =  ${newGearboxStats[1]} WHERE DesignID = ${oldGearboxId} AND PartStat = 15`);\n  if (parseInt(engineId) <= 10) {\n    const year = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT CurrentSeason FROM Player_State`, 'singleValue');\n    const newEngineManufacturer = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT Value FROM Parts_Enum_EngineManufacturers WHERE EngineDesignID = ${engineId}`, 'singleValue');\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Parts_TeamHistory SET EngineManufacturer = ${newEngineManufacturer} WHERE TeamID = ${teamID} AND SeasonID = ${year}`);\n  }\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Custom_Engine_Allocations SET engineId = ${engineId} WHERE teamId = ${teamID}`);\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/editTeamUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/eidtStatsUtils.js":
/*!******************************************************!*\
  !*** ./src/js/backend/scriptUtils/eidtStatsUtils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   changeYearsInExcelDate: () => (/* binding */ changeYearsInExcelDate),\n/* harmony export */   dateToExcel: () => (/* binding */ dateToExcel),\n/* harmony export */   driverStats: () => (/* binding */ driverStats),\n/* harmony export */   editAge: () => (/* binding */ editAge),\n/* harmony export */   editCode: () => (/* binding */ editCode),\n/* harmony export */   editFreezeMentality: () => (/* binding */ editFreezeMentality),\n/* harmony export */   editMarketability: () => (/* binding */ editMarketability),\n/* harmony export */   editMentality: () => (/* binding */ editMentality),\n/* harmony export */   editName: () => (/* binding */ editName),\n/* harmony export */   editRetirement: () => (/* binding */ editRetirement),\n/* harmony export */   editStats: () => (/* binding */ editStats),\n/* harmony export */   editSuperlicense: () => (/* binding */ editSuperlicense),\n/* harmony export */   excelToDate: () => (/* binding */ excelToDate),\n/* harmony export */   mentalityAreas: () => (/* binding */ mentalityAreas),\n/* harmony export */   mentalityEvents: () => (/* binding */ mentalityEvents),\n/* harmony export */   mentalityOpinions: () => (/* binding */ mentalityOpinions),\n/* harmony export */   mentalityOverall: () => (/* binding */ mentalityOverall)\n/* harmony export */ });\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n\n\n// Constantes para referencias en la edición de mentalidad\nconst driverStats = [2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst mentalityAreas = {\n  0: [5, 11, 13, 9],\n  1: [0, 2, 6, 7, 8, 14],\n  2: [1, 3, 4, 12, 10]\n};\nconst mentalityEvents = {\n  0: [1, 7, 10, 13, 15, 19],\n  1: [2, 11, 12, 14, 16, 20, 21],\n  2: [0, 3, 4, 5, 6, 8, 9, 17, 18]\n};\nconst mentalityOpinions = {\n  0: 10,\n  1: 3,\n  2: 0,\n  3: -4,\n  4: -10\n};\nconst mentalityOverall = {\n  0: 95,\n  1: 79,\n  2: 59,\n  3: 24,\n  4: 5\n};\n\n// Editar estadísticas de un Staff (driver o staff general)\nfunction editStats(driverID, type, stats, retirement, driverNum, wants1) {\n  //creat sttasParasm from stats string to an array\n  const statsParams = stats.split(\" \");\n  if (type === \"0\") {\n    const isStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT *\n      FROM Staff_performanceStats\n      WHERE StaffID = ${driverID}\n    `, 'singleRow');\n    if (isStats) {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_performanceStats\n        SET Val = CASE StatID\n          WHEN 2  THEN ${statsParams[0]}\n          WHEN 3  THEN ${statsParams[1]}\n          WHEN 4  THEN ${statsParams[2]}\n          WHEN 5  THEN ${statsParams[3]}\n          WHEN 6  THEN ${statsParams[4]}\n          WHEN 7  THEN ${statsParams[5]}\n          WHEN 8  THEN ${statsParams[6]}\n          WHEN 9  THEN ${statsParams[7]}\n          WHEN 10 THEN ${statsParams[8]}\n          ELSE Val\n        END\n        WHERE StaffID = ${driverID}\n      `);\n    } else {\n      const statsArray = params.slice(2, 11);\n      statsArray.forEach((newStat, i) => {\n        const statID = driverStats[i];\n        (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          INSERT INTO Staff_performanceStats (StaffID, StatID, Val, Max)\n          VALUES (${driverID}, ${statID}, ${newStat}, 100)\n        `);\n      });\n    }\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_DriverData\n      SET Improvability = ${statsParams[9]}, Aggression = ${statsParams[10]}\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${retirement}\n      WHERE StaffID = ${driverID}\n    `);\n    const oldNum = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Number\n      FROM Staff_DriverNumbers\n      WHERE CurrentHolder = ${driverID}\n    `, 'singleValue');\n    if (oldNum) {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_DriverNumbers\n        SET CurrentHolder = NULL\n        WHERE Number = ${oldNum}\n      `);\n    }\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_DriverNumbers\n      SET CurrentHolder = ${driverID}\n      WHERE Number = ${driverNum}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_DriverData\n      SET WantsChampionDriverNumber = ${wants1}\n      WHERE StaffID = ${driverID}\n    `);\n  } else if (type === \"1\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_performanceStats\n      SET Val = CASE StatID\n        WHEN 0  THEN ${statsParams[0]}\n        WHEN 1  THEN ${statsParams[1]}\n        WHEN 14 THEN ${statsParams[2]}\n        WHEN 15 THEN ${statsParams[3]}\n        WHEN 16 THEN ${statsParams[4]}\n        WHEN 17 THEN ${statsParams[5]}\n        ELSE Val\n      END\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${retirement}\n      WHERE StaffID = ${driverID}\n    `);\n  } else if (type === \"2\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_performanceStats\n      SET Val = CASE StatID\n        WHEN 13 THEN ${statsParams[0]}\n        WHEN 25 THEN ${statsParams[1]}\n        WHEN 43 THEN ${statsParams[2]}\n        ELSE Val\n      END\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${retirement}\n      WHERE StaffID = ${driverID}\n    `);\n  } else if (type === \"3\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_performanceStats\n      SET Val = CASE StatID\n        WHEN 19 THEN ${statsParams[0]}\n        WHEN 20 THEN ${statsParams[1]}\n        WHEN 26 THEN ${statsParams[2]}\n        WHEN 27 THEN ${statsParams[3]}\n        WHEN 28 THEN ${statsParams[4]}\n        WHEN 29 THEN ${statsParams[5]}\n        WHEN 30 THEN ${statsParams[6]}\n        WHEN 31 THEN ${statsParams[7]}\n        ELSE Val\n      END\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${retirement}\n      WHERE StaffID = ${driverID}\n    `);\n  } else if (type === \"4\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_performanceStats\n      SET Val = CASE StatID\n        WHEN 11 THEN ${statsParams[0]}\n        WHEN 22 THEN ${statsParams[1]}\n        WHEN 23 THEN ${statsParams[2]}\n        WHEN 24 THEN ${statsParams[3]}\n        ELSE Val\n      END\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${retirement}\n      WHERE StaffID = ${driverID}\n    `);\n  }\n}\nfunction editName(driverID, newName) {\n  const parts = newName.split(\" \");\n  const newFirstName = parts[0];\n  const newLastName = parts.slice(1).join(\" \");\n  const stringLiteralFirstName = `[STRING_LITERAL:Value=|${newFirstName}|]`;\n  const stringLiteralLastName = `[STRING_LITERAL:Value=|${newLastName}|]`;\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_BasicData\n    SET FirstName = '${stringLiteralFirstName}',\n        LastName = '${stringLiteralLastName}'\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editCode(driverID, newCode) {\n  const stringLiteralCode = `[STRING_LITERAL:Value=|${newCode}|]`;\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_DriverData\n    SET DriverCode = '${stringLiteralCode}'\n    WHERE StaffID = ${driverID}\n  `);\n}\n\n// Helpers de fechas\nfunction excelToDate(excelDate) {\n  const baseDate = new Date(1899, 11, 30);\n  const ms = excelDate * 86400000;\n  return new Date(baseDate.getTime() + ms);\n}\nfunction dateToExcel(date) {\n  const baseDate = new Date(1899, 11, 30);\n  const diff = date.getTime() - baseDate.getTime();\n  return Math.floor(diff / 86400000);\n}\nfunction changeYearsInExcelDate(excelDate, years) {\n  const oldDate = excelToDate(excelDate);\n  let newYear = oldDate.getFullYear() + years;\n  let newDate = new Date(oldDate.getTime());\n  newDate.setFullYear(newYear);\n  if (newDate.getMonth() !== oldDate.getMonth()) {\n    newDate = new Date(newYear, 1, 28);\n  }\n  const newExcelDate = dateToExcel(newDate);\n  return {\n    newDate,\n    newExcelDate\n  };\n}\nfunction editAge(driverID, ageGap) {\n  const driverBirthdate = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    SELECT DOB\n    FROM Staff_BasicData\n    WHERE StaffID = ${driverID}\n  `, 'singleValue');\n  const {\n    newDate,\n    newExcelDate\n  } = changeYearsInExcelDate(driverBirthdate, parseInt(ageGap, 10));\n  const y = newDate.getFullYear();\n  const m = newDate.getMonth() + 1;\n  const d = newDate.getDate();\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_BasicData\n    SET DOB = ${newExcelDate},\n        DOB_ISO = '${y}-${m}-${d}'\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editMentality(inputStr) {\n  const [driverID, ...rest] = inputStr.split(\" \");\n  let sum = 0;\n  rest.forEach((value, area) => {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_Mentality_AreaOpinions\n      SET Opinion = ${value}\n      WHERE StaffID = ${driverID}\n        AND Category = ${area}\n    `);\n    const statuses = mentalityAreas[area];\n    const events = mentalityEvents[area];\n    sum += parseInt(value, 10);\n    statuses.forEach(status => {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_Mentality_Statuses\n        SET Opinion = ${value},\n            Value = ${mentalityOpinions[value]}\n        WHERE StaffID = ${driverID}\n          AND Status = ${status}\n      `);\n    });\n    events.forEach(ev => {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_Mentality_Events\n        SET Opinion = ${value},\n            Value = ${mentalityOpinions[value]}\n        WHERE StaffID = ${driverID}\n          AND Event = ${ev}\n      `);\n    });\n  });\n  const average = Math.floor(sum / 3);\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_State\n    SET Mentality = ${mentalityOverall[average]},\n        MentalityOpinion = ${average}\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editRetirement(driverID, value) {\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_GameData\n    SET Retired = ${value}\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editSuperlicense(driverID, value) {\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_DriverData\n    SET HasSuperLicense = ${value},\n        HasRacedEnoughToJoinF1 = ${value}\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editMarketability(driverID, value) {\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_DriverData\n    SET Marketability = ${value}\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editFreezeMentality(state) {\n  if (state === 0) {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS update_Opinion_After_Insert;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS update_Opinion_After_Update;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS clear_Staff_Mentality_Statuses;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS clear_Staff_Mentality_AreaOpinions;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS clear_Staff_Mentality_Events;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS reset_Staff_State;`);\n  } else {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS update_Opinion_After_Insert\n      AFTER INSERT ON Staff_Mentality_AreaOpinions\n      BEGIN\n        UPDATE Staff_Mentality_AreaOpinions\n        SET Opinion = 2\n        WHERE Opinion != 2;\n      END;\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS update_Opinion_After_Update\n      AFTER UPDATE OF Opinion ON Staff_Mentality_AreaOpinions\n      BEGIN\n        UPDATE Staff_Mentality_AreaOpinions\n        SET Opinion = 2\n        WHERE Opinion != 2;\n      END;\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS clear_Staff_Mentality_Statuses\n      AFTER INSERT ON Staff_Mentality_Statuses\n      BEGIN\n        DELETE FROM Staff_Mentality_Statuses;\n      END;\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS clear_Staff_Mentality_Events\n      AFTER INSERT ON Staff_Mentality_Events\n      BEGIN\n        DELETE FROM Staff_Mentality_Events;\n      END;\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS reset_Staff_State\n      AFTER UPDATE ON Staff_State\n      BEGIN\n        UPDATE Staff_State\n        SET Mentality = 50, MentalityOpinion = 2;\n      END;\n    `);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/eidtStatsUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/head2head.js":
/*!*************************************************!*\
  !*** ./src/js/backend/scriptUtils/head2head.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchHead2Head: () => (/* binding */ fetchHead2Head),\n/* harmony export */   fetchHead2HeadTeam: () => (/* binding */ fetchHead2HeadTeam)\n/* harmony export */ });\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n\nfunction fetchHead2Head(driver1ID, driver2ID, year) {\n  // Helpers para estadísticos:\n  const mean = arr => {\n    if (!arr.length) return 0;\n    const total = arr.reduce((acc, n) => acc + n, 0);\n    return total / arr.length;\n  };\n  const median = arr => {\n    if (!arr.length) return 0;\n    const sorted = [...arr].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 === 1 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n  };\n\n  // 1) Obtenemos todas las carreras en las que participaron ambos pilotos\n  const racesBoth = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT RaceID\n      FROM Races_Results\n      WHERE Season = ${year}\n        AND DriverID IN (${driver1ID}, ${driver2ID})\n      GROUP BY RaceID\n      HAVING COUNT(DISTINCT DriverID) = 2\n    `, 'allRows') || [];\n  const raceIDs = racesBoth.map(row => row[0]);\n  const stats = {\n    raceH2H: [0, 0],\n    qualiH2H: [0, 0],\n    dnfH2H: [0, 0],\n    podiumsH2H: [0, 0],\n    polesH2H: [0, 0],\n    winsH2H: [0, 0],\n    sprintWinsH2H: [0, 0],\n    pointsH2H: null,\n    bestRace: null,\n    bestQuali: null,\n    raceDiffs: null,\n    qualiDiffs: null,\n    racePositionsMean: null,\n    racePositionsMedian: null,\n    qualiPositionsMean: null,\n    qualiPositionsMedian: null,\n    driver1: {\n      bestRace: 21,\n      bestQuali: 21,\n      avgPace: [],\n      avgQPace: [],\n      RPositions: [],\n      QPositions: []\n    },\n    driver2: {\n      bestRace: 21,\n      bestQuali: 21,\n      avgPace: [],\n      avgQPace: [],\n      RPositions: [],\n      QPositions: []\n    }\n  };\n\n  // 3) Iteramos en cada carrera en la que compitieron ambos\n  for (const raceID of raceIDs) {\n    const d1_QStage = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver1ID}\n      `, 'singleValue') || 0;\n    const d2_QStage = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver2ID}\n      `, 'singleValue') || 0;\n\n    // --- 3.2) Posición en la fase final que corrieron\n    const d1_QRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver1ID}\n          AND QualifyingStage = ${d1_QStage}\n      `, 'singleValue') || 99;\n    const d2_QRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver2ID}\n          AND QualifyingStage = ${d2_QStage}\n      `, 'singleValue') || 99;\n\n    // --- 3.3) Quién ganó el “duelo” de qualy\n    if (d1_QStage < d2_QStage) {\n      stats.qualiH2H[1] += 1;\n    } else if (d1_QStage > d2_QStage) {\n      stats.qualiH2H[0] += 1;\n    } else {\n      // misma fase de qualy\n      if (d1_QRes < d2_QRes) {\n        stats.qualiH2H[0] += 1;\n      } else if (d1_QRes > d2_QRes) {\n        stats.qualiH2H[1] += 1;\n      }\n    }\n\n    // Guardar posiciones de qualy para estadísticas finales\n    stats.driver1.QPositions.push(d1_QRes);\n    stats.driver2.QPositions.push(d2_QRes);\n\n    // --- 3.4) Lap más rápida comparando la misma fase “mínima”\n    const minStage = Math.min(d1_QStage, d2_QStage);\n    const d1_qLap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FastestLap\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver1ID}\n          AND QualifyingStage = ${minStage}\n      `, 'singleValue') || 0;\n    const d2_qLap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FastestLap\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver2ID}\n          AND QualifyingStage = ${minStage}\n      `, 'singleValue') || 0;\n    if (d1_qLap !== 0 && d2_qLap !== 0) {\n      stats.driver1.avgQPace.push(d1_qLap);\n      stats.driver2.avgQPace.push(d2_qLap);\n    }\n\n    // --- 3.5) Poles: Q3 y posición 1\n    if (d1_QStage === 3 && d1_QRes === 1) {\n      stats.polesH2H[0] += 1;\n    }\n    if (d2_QStage === 3 && d2_QRes === 1) {\n      stats.polesH2H[1] += 1;\n    }\n\n    // Mejor qualifying\n    if (d1_QRes < stats.driver1.bestQuali) {\n      stats.driver1.bestQuali = d1_QRes;\n    }\n    if (d2_QRes < stats.driver2.bestQuali) {\n      stats.driver2.bestQuali = d2_QRes;\n    }\n\n    // --- 3.6) Resultados de carrera\n    const d1_RRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${year}\n          AND DriverID = ${driver1ID}\n      `, 'singleValue') || 99;\n    const d2_RRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${year}\n          AND DriverID = ${driver2ID}\n      `, 'singleValue') || 99;\n\n    // ¿Quién terminó por delante?\n    if (d1_RRes < d2_RRes) {\n      stats.raceH2H[0] += 1;\n    } else if (d1_RRes > d2_RRes) {\n      stats.raceH2H[1] += 1;\n    }\n\n    // Wins\n    if (d1_RRes === 1) stats.winsH2H[0] += 1;\n    if (d2_RRes === 1) stats.winsH2H[1] += 1;\n\n    // Podios\n    if (d1_RRes <= 3) stats.podiumsH2H[0] += 1;\n    if (d2_RRes <= 3) stats.podiumsH2H[1] += 1;\n\n    // Mejor posición en carrera\n    if (d1_RRes < stats.driver1.bestRace) {\n      stats.driver1.bestRace = d1_RRes;\n    }\n    if (d2_RRes < stats.driver2.bestRace) {\n      stats.driver2.bestRace = d2_RRes;\n    }\n\n    // Guardamos posición de carrera\n    stats.driver1.RPositions.push(d1_RRes);\n    stats.driver2.RPositions.push(d2_RRes);\n\n    // --- 3.7) DNFs\n    const d1_RDNF = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT DNF\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${year}\n          AND DriverID = ${driver1ID}\n      `, 'singleValue') || 0;\n    const d2_RDNF = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT DNF\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${year}\n          AND DriverID = ${driver2ID}\n      `, 'singleValue') || 0;\n    if (d1_RDNF === 1) stats.dnfH2H[0] += 1;\n    if (d2_RDNF === 1) stats.dnfH2H[1] += 1;\n\n    // --- 3.8) Ritmo en carrera (avg pace) si ninguno hizo DNF\n    if (d1_RDNF !== 1 && d2_RDNF !== 1) {\n      const d1_time = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Time\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${year}\n            AND DriverID = ${driver1ID}\n        `, 'singleValue') || 0;\n      const d2_time = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Time\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${year}\n            AND DriverID = ${driver2ID}\n        `, 'singleValue') || 0;\n      const d1_laps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Laps\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${year}\n            AND DriverID = ${driver1ID}\n        `, 'singleValue') || 1;\n      const d2_laps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Laps\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${year}\n            AND DriverID = ${driver2ID}\n        `, 'singleValue') || 1;\n      const d1_pace = Number((d1_time / d1_laps).toFixed(3));\n      const d2_pace = Number((d2_time / d2_laps).toFixed(3));\n      stats.driver1.avgPace.push(d1_pace);\n      stats.driver2.avgPace.push(d2_pace);\n    }\n\n    // --- 3.9) SPRINT results\n    const d1_SRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_Sprintresults\n        WHERE RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver1ID}\n      `, 'singleValue');\n    const d2_SRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_Sprintresults\n        WHERE RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver2ID}\n      `, 'singleValue');\n    if (d1_SRes === 1) stats.sprintWinsH2H[0] += 1;\n    if (d2_SRes === 1) stats.sprintWinsH2H[1] += 1;\n  }\n\n  // 4) Puntos totales en el campeonato (no por carrera)\n  const d1_Pts = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Points\n      FROM Races_DriverStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${year}\n        AND DriverID = ${driver1ID}\n    `, 'singleValue') || 0;\n  const d2_Pts = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Points\n      FROM Races_DriverStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${year}\n        AND DriverID = ${driver2ID}\n    `, 'singleValue') || 0;\n  stats.pointsH2H = [d1_Pts, d2_Pts];\n  const meanRd1 = Number(mean(stats.driver1.RPositions).toFixed(1));\n  const meanRd2 = Number(mean(stats.driver2.RPositions).toFixed(1));\n  const medianRd1 = median(stats.driver1.RPositions);\n  const medianRd2 = median(stats.driver2.RPositions);\n  const meanQd1 = Number(mean(stats.driver1.QPositions).toFixed(1));\n  const meanQd2 = Number(mean(stats.driver2.QPositions).toFixed(1));\n  const medianQd1 = median(stats.driver1.QPositions);\n  const medianQd2 = median(stats.driver2.QPositions);\n  const rDifferences = stats.driver1.avgPace.map((val, i) => (stats.driver2.avgPace[i] ?? 0) - val);\n  const avg_racediff = Number(mean(rDifferences).toFixed(3));\n  const qDifferences = stats.driver1.avgQPace.map((val, i) => (stats.driver2.avgQPace[i] ?? 0) - val);\n  const avg_qualidiff = Number(mean(qDifferences).toFixed(3));\n\n  // 3) Armamos el array final en el mismo orden que en tu Python:\n  const resultList = [stats.raceH2H,\n  // 0) (raceH2H)\n  stats.qualiH2H,\n  // 1) (qualiH2H)\n  stats.pointsH2H,\n  // 2) (pointsH2H)\n  stats.podiumsH2H,\n  // 3) (podiumsH2H)\n  [stats.driver1.bestRace, stats.driver2.bestRace],\n  // 4) (bestRace)\n  [stats.driver1.bestQuali, stats.driver2.bestQuali],\n  // 5) (bestQuali)\n  stats.dnfH2H,\n  // 6) (dnfH2H)\n  stats.winsH2H,\n  // 7) (winsH2H)\n  stats.polesH2H,\n  // 8) (polesH2H)\n  stats.sprintWinsH2H,\n  // 9) (sprintWinsH2H)\n  [-avg_racediff, avg_racediff],\n  // 10) (-avg_racediff, avg_racediff)\n  [-avg_qualidiff, avg_qualidiff],\n  // 11) (-avg_qualidiff, avg_qualidiff)\n  [meanRd1, meanRd2],\n  // 12) (meanRd1, meanRd2)\n  [medianRd1, medianRd2],\n  // 13) (medianRd1, medianRd2)\n  [meanQd1, meanQd2],\n  // 14) (meanQd1, meanQd2)\n  [medianQd1, medianQd2] // 15) (medianQd1, medianQd2)\n  ];\n\n  // 4) Retornamos este array en vez de 'stats'\n  return resultList;\n}\nfunction fetchHead2HeadTeam(teamID1, teamID2, year) {\n  const t1 = teamID1[0];\n  const t2 = teamID2[0];\n  const season = year;\n\n  // 1) Obtenemos todas las carreras de la temporada (Distinct RaceID)\n  const races = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT DISTINCT RaceID\n      FROM Races_Results\n      WHERE Season = ${season}\n    `, 'allRows') || [];\n\n  // 2) Inicializamos contadores / arreglos\n  const raceH2H = [0, 0];\n  const qualiH2H = [0, 0];\n  const dnfH2H = [0, 0];\n  const bestRace = [0, 0];\n  const bestQuali = [0, 0];\n  const pointsH2H = [0, 0];\n  const podiumsH2H = [0, 0];\n  const polesH2H = [0, 0];\n  const winsH2H = [0, 0];\n  const sprintWinsH2H = [0, 0];\n  let d1_BestRace = 21;\n  let d2_BestRace = 21;\n  let d1_BestQauli = 21;\n  let d2_BestQauli = 21;\n  const d1_avgPace = [];\n  const d2_avgPace = [];\n  const d1_avgQPace = [];\n  const d2_avgQPace = [];\n\n  // 3) Iteramos por cada carrera encontrada\n  for (const gp of races) {\n    const raceID = gp[0];\n\n    // 3.1) Obtenemos todos los DriverIDs de cada equipo en Quali\n    //      (En Python, se guardan como tuples y luego se hace \"IN (drivers1_str)\").\n    //      En JS, construiremos la string manualmente.\n\n    // Pilotos del team1\n    const drivers1 = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT DISTINCT DriverID\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND TeamID = ${t1}\n      `, 'allRows') || [];\n\n    // Pilotos del team2\n    const drivers2 = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT DISTINCT DriverID\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND TeamID = ${t2}\n      `, 'allRows') || [];\n\n    // Transformamos el array de arrays/tuplas en un array de IDs\n    const drivers1IDs = drivers1.map(d => d[0]);\n    const drivers2IDs = drivers2.map(d => d[0]);\n\n    // Si no hay pilotos, podemos continuar a la siguiente carrera (para evitar queries \"IN ()\")\n    if (!drivers1IDs.length || !drivers2IDs.length) {\n      // Team 1 o Team 2 no participa en esta carrera, saltamos\n      continue;\n    }\n    const drivers1Str = drivers1IDs.join(',');\n    const drivers2Str = drivers2IDs.join(',');\n\n    // 3.2) Fase de Qualy más alta para cada equipo\n    const d1_QStage = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers1Str})\n      `, 'singleValue') || 0;\n    const d2_QStage = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers2Str})\n      `, 'singleValue') || 0;\n\n    // 3.3) Posición mínima en esa fase de Qualy (equivalente a \"SELECT MIN(FinishingPos)\")\n    const d1_QRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers1Str})\n          AND QualifyingStage = ${d1_QStage}\n      `, 'singleValue') || 99;\n    const d2_QRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers2Str})\n          AND QualifyingStage = ${d2_QStage}\n      `, 'singleValue') || 99;\n\n    // 3.4) Comparativa H2H de qualy\n    if (d1_QStage < d2_QStage) {\n      qualiH2H[1] += 1;\n    } else if (d1_QStage > d2_QStage) {\n      qualiH2H[0] += 1;\n    } else {\n      // misma fase de qualy\n      if (d1_QRes < d2_QRes) {\n        qualiH2H[0] += 1;\n      } else if (d1_QRes > d2_QRes) {\n        qualiH2H[1] += 1;\n      }\n    }\n\n    // 3.5) Lap más rápida comparando la misma fase mínima\n    const minQ = Math.min(d1_QStage, d2_QStage);\n    const d1_qLap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FastestLap\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers1Str})\n          AND QualifyingStage = ${minQ}\n      `, 'singleValue') || 0;\n    const d2_qLap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FastestLap\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers2Str})\n          AND QualifyingStage = ${minQ}\n      `, 'singleValue') || 0;\n    if (d1_qLap !== 0 && d2_qLap !== 0) {\n      d1_avgQPace.push(d1_qLap);\n      d2_avgQPace.push(d2_qLap);\n    }\n\n    // Poles: si QStage = 3 y la \"mejor\" posición = 1\n    if (d1_QStage === 3 && d1_QRes === 1) {\n      polesH2H[0] += 1;\n    }\n    if (d2_QStage === 3 && d2_QRes === 1) {\n      polesH2H[1] += 1;\n    }\n\n    // Best Quali\n    if (d1_QRes < d1_BestQauli) {\n      d1_BestQauli = d1_QRes;\n    }\n    if (d2_QRes < d2_BestQauli) {\n      d2_BestQauli = d2_QRes;\n    }\n\n    // 3.6) Resultados de carrera (usamos MIN(FinishingPos))\n    const d1_RRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${season}\n          AND DriverID IN (${drivers1Str})\n      `, 'singleValue') || 99;\n    const d2_RRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${season}\n          AND DriverID IN (${drivers2Str})\n      `, 'singleValue') || 99;\n\n    // Wins\n    if (d1_RRes === 1) winsH2H[0] += 1;\n    if (d2_RRes === 1) winsH2H[1] += 1;\n\n    // Race H2H\n    if (d1_RRes < d2_RRes) {\n      raceH2H[0] += 1;\n    } else if (d1_RRes > d2_RRes) {\n      raceH2H[1] += 1;\n    }\n\n    // Podios\n    if (d1_RRes <= 3) podiumsH2H[0] += 1;\n    if (d2_RRes <= 3) podiumsH2H[1] += 1;\n\n    // Best Race\n    if (d1_RRes < d1_BestRace) {\n      d1_BestRace = d1_RRes;\n    }\n    if (d2_RRes < d2_BestRace) {\n      d2_BestRace = d2_RRes;\n    }\n\n    // 3.7) DNF => sumamos\n    const d1_RDNF = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT SUM(DNF)\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${season}\n          AND DriverID IN (${drivers1Str})\n      `, 'singleValue') || 0;\n    const d2_RDNF = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT SUM(DNF)\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${season}\n          AND DriverID IN (${drivers2Str})\n      `, 'singleValue') || 0;\n    if (d1_RDNF > 0) {\n      dnfH2H[0] += d1_RDNF;\n    }\n    if (d2_RDNF > 0) {\n      dnfH2H[1] += d2_RDNF;\n    }\n\n    // 3.8) Ritmo de carrera, si ambos equipos no sumaron DNFs\n    if (d1_RDNF === 0 && d2_RDNF === 0) {\n      // Tomamos el promedio de \"Time\" y \"Laps\" de los pilotos del equipo\n      const d1_raceTotal = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT AVG(Time)\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${season}\n            AND DriverID IN (${drivers1Str})\n        `, 'singleValue') || 0;\n      const d2_raceTotal = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT AVG(Time)\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${season}\n            AND DriverID IN (${drivers2Str})\n        `, 'singleValue') || 0;\n      const d1_raceLaps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT AVG(Laps)\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${season}\n            AND DriverID IN (${drivers1Str})\n        `, 'singleValue') || 0;\n      const d2_raceLaps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT AVG(Laps)\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${season}\n            AND DriverID IN (${drivers2Str})\n        `, 'singleValue') || 0;\n\n      // Si no son 0, agregamos\n      if (d1_raceLaps && d1_raceTotal) {\n        const pace = Number((d1_raceTotal / d1_raceLaps).toFixed(3));\n        d1_avgPace.push(pace);\n      }\n      if (d2_raceLaps && d2_raceTotal) {\n        const pace = Number((d2_raceTotal / d2_raceLaps).toFixed(3));\n        d2_avgPace.push(pace);\n      }\n    }\n\n    // 3.9) Sprint results (MIN FinishingPos)\n    const d1_SRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_Sprintresults\n        WHERE RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers1Str})\n      `, 'singleValue');\n    const d2_SRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_Sprintresults\n        WHERE RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers2Str})\n      `, 'singleValue');\n    if (d1_SRes === 1) {\n      sprintWinsH2H[0] += 1;\n    }\n    if (d2_SRes === 1) {\n      sprintWinsH2H[1] += 1;\n    }\n  }\n\n  // 4) Puntos de cada equipo en el campeonato (TeamStandings)\n  const d1_Pts = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Points\n      FROM Races_TeamStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${season}\n        AND TeamID = ${t1}\n    `, 'singleValue') || 0;\n  const d2_Pts = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Points\n      FROM Races_TeamStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${season}\n        AND TeamID = ${t2}\n    `, 'singleValue') || 0;\n  pointsH2H[0] = d1_Pts;\n  pointsH2H[1] = d2_Pts;\n  bestRace[0] = d1_BestRace;\n  bestRace[1] = d2_BestRace;\n  bestQuali[0] = d1_BestQauli;\n  bestQuali[1] = d2_BestQauli;\n\n  // 5) Calculamos la diferencia media de ritmo (race y quali).\n  //    rDifferences = (d2_avg - d1_avg) para cada par\n  const rDifferences = d1_avgPace.map((val, i) => {\n    const d2Val = d2_avgPace[i] || 0;\n    return d2Val - val;\n  });\n  const qDifferences = d1_avgQPace.map((val, i) => {\n    const d2Val = d2_avgQPace[i] || 0;\n    return d2Val - val;\n  });\n\n  // Helpers para la media\n  const mean = arr => {\n    if (!arr.length) return 0;\n    const sum = arr.reduce((acc, num) => acc + num, 0);\n    return sum / arr.length;\n  };\n  const avg_racediff = Number(mean(rDifferences).toFixed(3));\n  const avg_qualidiff = Number(mean(qDifferences).toFixed(3));\n\n  // 6) Construimos resultList con los 12 elementos, en el mismo orden que en Python\n  // resultList = [\n  //   raceH2H, qualiH2H, pointsH2H, podiumsH2H,\n  //   bestRace, bestQuali, dnfH2H, winsH2H,\n  //   polesH2H, sprintWinsH2H,\n  //   (-avg_racediff, avg_racediff),\n  //   (-avg_qualidiff, avg_qualidiff)\n  // ]\n  const resultList = [raceH2H, qualiH2H, pointsH2H, podiumsH2H, bestRace, bestQuali, dnfH2H, winsH2H, polesH2H, sprintWinsH2H, [-avg_racediff, avg_racediff], [-avg_qualidiff, avg_qualidiff]];\n\n  // 7) Retornamos el array final\n  return resultList;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/head2head.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/transferUtils.js":
/*!*****************************************************!*\
  !*** ./src/js/backend/scriptUtils/transferUtils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   editContract: () => (/* binding */ editContract),\n/* harmony export */   futureContract: () => (/* binding */ futureContract)\n/* harmony export */ });\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n\nfunction getExcelDate(year) {\n  const excelStartDate = new Date(1900, 0, 1);\n  const targetDate = new Date(year, 0, 1);\n  const msPerDay = 24 * 60 * 60 * 1000;\n  const diffDays = Math.floor((targetDate - excelStartDate) / msPerDay) + 2;\n  return diffDays;\n}\nfunction editContract(driverID, salary, endSeason, startingBonus, raceBonus, raceBonusTargetPos) {\n  const hasContract = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT TeamID\n      FROM Staff_Contracts\n      WHERE StaffID = ${driverID}\n        AND ContractType = 0\n    `, 'singleValue');\n  if (hasContract !== null && hasContract !== undefined) {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_Contracts\n        SET\n          Salary = ${salary},\n          EndSeason = ${endSeason},\n          StartingBonus = ${startingBonus},\n          RaceBonus = ${raceBonus},\n          RaceBonusTargetPos = ${raceBonusTargetPos}\n        WHERE\n          ContractType = 0\n          AND StaffID = ${driverID}\n      `);\n  }\n}\nfunction futureContract(teamID, driverID, salary, endSeason, startingBonus, raceBonus, raceBonusTargetPos, position, year_iteration = \"24\") {\n  if (teamID === \"-1\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        DELETE FROM Staff_Contracts\n        WHERE StaffID = ${driverID}\n          AND ContractType = 3\n      `);\n  } else {\n    let alreadyHasFutureContract = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT TeamID\n        FROM Staff_Contracts\n        WHERE StaffID = ${driverID}\n          AND ContractType = 3\n      `, 'singleValue');\n    if (alreadyHasFutureContract === null || alreadyHasFutureContract === undefined) {\n      alreadyHasFutureContract = -1;\n    }\n    if (parseInt(alreadyHasFutureContract, 10) !== parseInt(teamID, 10)) {\n      const season = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT CurrentSeason\n          FROM Player_State\n        `, 'singleValue');\n      const day = getExcelDate(season + 1);\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          DELETE FROM Staff_Contracts\n          WHERE StaffID = ${driverID}\n            AND ContractType = 3\n        `);\n      if (year_iteration === \"24\") {\n        (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n            INSERT INTO Staff_Contracts\n            VALUES (\n              ${driverID},          \n              3,                 \n              ${teamID},            \n              ${position},        \n              ${day},              \n              ${endSeason},         \n              ${salary},            \n              ${startingBonus},    \n              ${raceBonus},         \n              ${raceBonusTargetPos},\n              0.5,                  \n              0                    \n            )\n          `);\n      } else if (year_iteration === \"23\") {\n        (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n            INSERT INTO Staff_Contracts\n            VALUES (\n              ${driverID},\n              3,\n              1,\n              ${day},\n              1,\n              ${teamID},\n              ${position},\n              1,\n              '[OPINION_STRING_NEUTRAL]',\n              ${day},\n              ${endSeason},\n              1,\n              '[OPINION_STRING_NEUTRAL]',\n              ${salary},\n              1,\n              '[OPINION_STRING_NEUTRAL]',\n              ${startingBonus},\n              1,\n              '[OPINION_STRING_NEUTRAL]',\n              ${raceBonus},\n              1,\n              '[OPINION_STRING_NEUTRAL]',\n              ${raceBonusTargetPos},\n              1,\n              '[OPINION_STRING_NEUTRAL]',\n              0,\n              1,\n              '[OPINION_STRING_NEUTRAL]'\n            )\n          `);\n      }\n    } else {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          UPDATE Staff_Contracts\n          SET\n            PosInTeam = ${position},\n            Salary = ${salary},\n            EndSeason = ${endSeason},\n            StartingBonus = ${startingBonus},\n            RaceBonus = ${raceBonus},\n            RaceBonusTargetPos = ${raceBonusTargetPos}\n          WHERE\n            StaffID = ${driverID}\n            AND TeamID = ${alreadyHasFutureContract}\n            AND ContractType = 3\n        `);\n    }\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/transferUtils.js?");

/***/ }),

/***/ "?8893":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/crypto_(ignored)?");

/***/ }),

/***/ "?5041":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/fs_(ignored)?");

/***/ }),

/***/ "?c8d5":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/path_(ignored)?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_buffer_index_js-node_modules_file-saver_dist_FileSaver_min_js-node_modul-98b9c8"], () => (__webpack_require__("./src/js/backend/commands/worker.js")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = {
/******/ 			"src_js_backend_commands_worker_js": 1
/******/ 		};
/******/ 		
/******/ 		// importScripts chunk loading
/******/ 		var installChunk = (data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			while(chunkIds.length)
/******/ 				installedChunks[chunkIds.pop()] = 1;
/******/ 			parentChunkLoadingFunction(data);
/******/ 		};
/******/ 		__webpack_require__.f.i = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					importScripts(__webpack_require__.p + __webpack_require__.u(chunkId));
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkDatabase_Editor_F1_Manager"] = self["webpackChunkDatabase_Editor_F1_Manager"] || [];
/******/ 		var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);
/******/ 		chunkLoadingGlobal.push = installChunk;
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			return __webpack_require__.e("vendors-node_modules_buffer_index_js-node_modules_file-saver_dist_FileSaver_min_js-node_modul-98b9c8").then(next);
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	
/******/ })()
;