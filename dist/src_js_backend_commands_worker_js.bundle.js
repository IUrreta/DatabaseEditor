/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/backend/commands/worker.js":
/*!*******************************************!*\
  !*** ./src/js/backend/commands/worker.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scriptUtils/dbUtils */ \"./src/js/backend/scriptUtils/dbUtils.js\");\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n/* harmony import */ var sql_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sql.js */ \"./node_modules/sql.js/dist/sql-wasm.js\");\n/* harmony import */ var sql_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sql_js__WEBPACK_IMPORTED_MODULE_2__);\n// worker.js\n\n\n\nself.addEventListener('message', async e => {\n  const {\n    action\n  } = e.data;\n  console.log(\"[Worker] MESSAGE: \", e);\n  if (action === 'loadDB') {\n    const SQL = await sql_js__WEBPACK_IMPORTED_MODULE_2___default()({\n      locateFile: file => 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/sql-wasm.wasm',\n      wasmMemory: new WebAssembly.Memory({\n        initial: 1024\n      })\n    });\n    const workerDB = new SQL.Database(e.data.buffer);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_1__.setDatabase)(workerDB);\n    console.log(\"[Worker] Database loaded in worker\");\n  } else if (action === 'start') {\n    console.log(\"[Worker] Starting worker\");\n    // ahora `db` no es nulo en el contexto del Worker\n    const year = e.data.year;\n    console.log(e);\n    const results = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchSeasonResults)(year);\n    const events = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchEventsFrom)(year);\n    const teams = (0,_scriptUtils_dbUtils__WEBPACK_IMPORTED_MODULE_0__.fetchTeamsStandings)(year);\n\n    // devuelvo datos al hilo principal\n    postMessage({\n      responseMessage: \"Results fetched\",\n      content: [events, results, teams]\n    });\n  }\n});\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/worker.js?");

/***/ }),

/***/ "./src/js/backend/dbManager.js":
/*!*************************************!*\
  !*** ./src/js/backend/dbManager.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDatabase: () => (/* binding */ getDatabase),\n/* harmony export */   getMetadata: () => (/* binding */ getMetadata),\n/* harmony export */   queryDB: () => (/* binding */ queryDB),\n/* harmony export */   setDatabase: () => (/* binding */ setDatabase)\n/* harmony export */ });\nlet db = null;\nlet metadata = null;\nfunction setDatabase(database, meta) {\n  db = database;\n  console.log(\"db: \", db);\n  metadata = meta;\n}\nfunction getDatabase() {\n  return db;\n}\nfunction getMetadata() {\n  return metadata;\n}\n\n/**\r\n * Ejecuta una consulta SQL y devuelve el resultado según 'type'.\r\n * @param {string} query - La consulta a ejecutar.\r\n * @param {\"singleValue\"|\"singleRow\"|\"allRows\"} [type=\"allRows\"] - El tipo de resultado.\r\n * @returns {any} \r\n *    - 'singleValue': un único valor (o null).\r\n *    - 'singleRow': la primera fila (array de valores) o null.\r\n *    - 'allRows': array de filas (cada fila, array de valores), o [] si no hay ninguna.\r\n */\nfunction queryDB(query, type = 'allRows') {\n  const res = db.exec(query); // o tu instancia real de db\n  if (!res.length) {\n    // No hay resultsets\n    return type === 'allRows' ? [] : null;\n  }\n  const rows = res[0].values;\n  if (!rows.length) {\n    // Hay resultset pero 0 filas\n    return type === 'allRows' ? [] : null;\n  }\n  switch (type) {\n    case 'singleValue':\n      // Devuelvo la primera columna de la primera fila\n      return rows[0][0] ?? null;\n    case 'singleRow':\n      // Devuelvo la primera fila entera (array)\n      return rows[0];\n    case 'allRows':\n    default:\n      // Devuelvo todas las filas\n      return rows;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/dbManager.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/carConstants.js":
/*!****************************************************!*\
  !*** ./src/js/backend/scriptUtils/carConstants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceleration_contributors: () => (/* binding */ acceleration_contributors),\n/* harmony export */   airflow_front_factors: () => (/* binding */ airflow_front_factors),\n/* harmony export */   airflow_middle_factors: () => (/* binding */ airflow_middle_factors),\n/* harmony export */   airflow_sensitivity_factors: () => (/* binding */ airflow_sensitivity_factors),\n/* harmony export */   attributesContributions: () => (/* binding */ attributesContributions),\n/* harmony export */   attributesContributions2: () => (/* binding */ attributesContributions2),\n/* harmony export */   attributesContributions3: () => (/* binding */ attributesContributions3),\n/* harmony export */   attributesMinMax: () => (/* binding */ attributesMinMax),\n/* harmony export */   attributesUnits: () => (/* binding */ attributesUnits),\n/* harmony export */   brake_cooling_contributors: () => (/* binding */ brake_cooling_contributors),\n/* harmony export */   brake_cooling_factors: () => (/* binding */ brake_cooling_factors),\n/* harmony export */   carAttributes: () => (/* binding */ carAttributes),\n/* harmony export */   defaultPartsStats: () => (/* binding */ defaultPartsStats),\n/* harmony export */   dirty_air_contributors: () => (/* binding */ dirty_air_contributors),\n/* harmony export */   downforce24UnitValueToValue: () => (/* binding */ downforce24UnitValueToValue),\n/* harmony export */   drag_reduction_factors: () => (/* binding */ drag_reduction_factors),\n/* harmony export */   drs_contributors: () => (/* binding */ drs_contributors),\n/* harmony export */   drs_delta_factors: () => (/* binding */ drs_delta_factors),\n/* harmony export */   engine_cooling_contributors: () => (/* binding */ engine_cooling_contributors),\n/* harmony export */   engine_cooling_factors: () => (/* binding */ engine_cooling_factors),\n/* harmony export */   engine_unitValueToValue: () => (/* binding */ engine_unitValueToValue),\n/* harmony export */   fuel_efficiency_factors: () => (/* binding */ fuel_efficiency_factors),\n/* harmony export */   high_speed_contributors: () => (/* binding */ high_speed_contributors),\n/* harmony export */   high_speed_downforce_factors: () => (/* binding */ high_speed_downforce_factors),\n/* harmony export */   lifespanPartsMinMax: () => (/* binding */ lifespanPartsMinMax),\n/* harmony export */   lifespan_factors: () => (/* binding */ lifespan_factors),\n/* harmony export */   low_speed_contributors: () => (/* binding */ low_speed_contributors),\n/* harmony export */   low_speed_downforce_factors: () => (/* binding */ low_speed_downforce_factors),\n/* harmony export */   medium_speed_contributors: () => (/* binding */ medium_speed_contributors),\n/* harmony export */   medium_speed_downforce_factors: () => (/* binding */ medium_speed_downforce_factors),\n/* harmony export */   minimalWeightPerPart: () => (/* binding */ minimalWeightPerPart),\n/* harmony export */   operational_range_factors: () => (/* binding */ operational_range_factors),\n/* harmony export */   optimalWeightPerPart: () => (/* binding */ optimalWeightPerPart),\n/* harmony export */   parts: () => (/* binding */ parts),\n/* harmony export */   performance_loss_factors: () => (/* binding */ performance_loss_factors),\n/* harmony export */   performance_threshold_factors: () => (/* binding */ performance_threshold_factors),\n/* harmony export */   power_factors: () => (/* binding */ power_factors),\n/* harmony export */   standardBuildworkPerPart: () => (/* binding */ standardBuildworkPerPart),\n/* harmony export */   standardWeightPerPart: () => (/* binding */ standardWeightPerPart),\n/* harmony export */   stats: () => (/* binding */ stats),\n/* harmony export */   statsMinMax: () => (/* binding */ statsMinMax),\n/* harmony export */   top_speed_contributors: () => (/* binding */ top_speed_contributors),\n/* harmony export */   unitValueToValue: () => (/* binding */ unitValueToValue)\n/* harmony export */ });\nconst stats = {\n  0: \"airflow_front\",\n  1: \"airflow_sensitivity\",\n  2: \"brake_cooling\",\n  3: \"drs_delta\",\n  4: \"drag_reduction\",\n  5: \"engine_cooling\",\n  6: \"fuel_efficiency\",\n  7: \"low_speed_downforce\",\n  8: \"medium_speed_downforce\",\n  9: \"high_speed_downforce\",\n  10: \"power\",\n  11: \"performance_loss\",\n  12: \"performance_threshold\",\n  13: \"airflow_middle\",\n  14: \"operational_range\",\n  15: \"lifespan\",\n  16: \"special_weight\"\n};\nconst defaultPartsStats = {\n  3: [3, 4, 5, 13, 15],\n  4: [0, 1, 2, 7, 8, 9, 15],\n  5: [1, 3, 4, 7, 8, 9, 15],\n  6: [0, 4, 5, 13, 15],\n  7: [1, 4, 7, 8, 9, 15],\n  8: [0, 2, 4, 7, 8, 9, 15]\n};\nconst unitValueToValue = {\n  0: x => x * 10,\n  1: x => x * 10,\n  2: x => x * 10,\n  3: x => x * 10,\n  4: x => x * 10,\n  5: x => x * 10,\n  6: x => (x - 90) * 1000 / 10,\n  7: x => (x - 3) / 0.002,\n  8: x => (x - 5) / 0.002,\n  9: x => (x - 7) / 0.001,\n  10: x => (x - 90) * 1000 / 10,\n  11: x => (85 - x) * 1000 / 20,\n  12: x => (x - 70) * 1000 / 15,\n  13: x => x * 10,\n  14: x => (85 - x) * 1000 / 15,\n  15: x => (x - 40) * 1000 / 30,\n  18: x => (x - 40) * 1000 / 30,\n  19: x => (x - 40) * 1000 / 30\n};\nconst engine_unitValueToValue = {\n  6: x => 20 * (x - 50),\n  10: x => 50 * (x - 80),\n  11: x => -50 * (x - 85),\n  12: x => 200 / 3 * (x - 70),\n  14: x => 50 * (x - 60),\n  18: x => 50 * (x - 50),\n  19: x => 50 * (x - 50)\n};\nconst downforce24UnitValueToValue = {\n  7: x => 497.6 * x - 1489.8,\n  8: x => 496.8 * x - 2479.5,\n  9: x => 974.048 * x - 6803.2614\n};\nconst parts = {\n  0: \"engine\",\n  3: \"chassis\",\n  4: \"front_wing\",\n  5: \"rear_wing\",\n  6: \"sidepods\",\n  7: \"underfloor\",\n  8: \"suspension\"\n};\nconst standardWeightPerPart = {\n  3: 5150,\n  4: 2625,\n  5: 3125,\n  6: 4125,\n  7: 3550,\n  8: 2900\n};\nconst standardBuildworkPerPart = {\n  3: 2000,\n  4: 500,\n  5: 500,\n  6: 1500,\n  7: 1500,\n  8: 1500\n};\nconst optimalWeightPerPart = {\n  3: 4070,\n  4: 1525,\n  5: 1945,\n  6: 3025,\n  7: 2390,\n  8: 1940\n};\nconst minimalWeightPerPart = {\n  3: 3800,\n  4: 1250,\n  5: 1650,\n  6: 2750,\n  7: 2100,\n  8: 1700\n};\nconst carAttributes = {\n  0: \"top_speed\",\n  1: \"acceleration\",\n  2: \"drs\",\n  3: \"low_speed\",\n  4: \"medium_speed\",\n  5: \"high_speed\",\n  6: \"dirty_air\",\n  7: \"brake_cooling\",\n  8: \"engine_cooling\"\n};\nconst statsMinMax = {\n  0: [0, 100],\n  1: [0, 100],\n  2: [0, 100],\n  3: [0, 100],\n  4: [0, 100],\n  5: [0, 100],\n  7: [3, 5],\n  8: [5, 7],\n  9: [7, 8],\n  10: [90, 100],\n  13: [0, 100]\n};\nconst lifespanPartsMinMax = {\n  3: [3800, 6500],\n  4: [1250, 4000],\n  5: [1650, 4600],\n  6: [2750, 5500],\n  7: [2100, 5000],\n  8: [1700, 4100]\n};\nconst attributesMinMax = {\n  top_speed: [313.00, 328.00],\n  acceleration: [1.800, 1.900],\n  drs: [0, 100],\n  low_speed: [2.000, 3.000],\n  medium_speed: [3.000, 4.000],\n  high_speed: [4.000, 5.500],\n  dirty_air: [0, 100],\n  brake_cooling: [0, 100],\n  engine_cooling: [0, 100]\n};\nconst attributesUnits = {\n  top_speed: \"km/h\",\n  acceleration: \"G\",\n  drs: \"%\",\n  low_speed: \"G\",\n  medium_speed: \"G\",\n  high_speed: \"G\",\n  dirty_air: \"%\",\n  brake_cooling: \"%\",\n  engine_cooling: \"%\"\n};\nconst attributesContributions = {\n  top_speed: 0.15,\n  acceleration: 0,\n  drs: 0.15,\n  low_speed: 0.1666,\n  medium_speed: 0.1666,\n  high_speed: 0.1666,\n  dirty_air: 0.0666,\n  brake_cooling: 0.0666,\n  engine_cooling: 0.0666\n};\nconst attributesContributions2 = {\n  top_speed: 0.15,\n  acceleration: 0,\n  drs: 0.15,\n  low_speed: 0.2166,\n  medium_speed: 0.2166,\n  high_speed: 0.2166,\n  dirty_air: 0.03,\n  brake_cooling: 0.01,\n  engine_cooling: 0.01\n};\nconst attributesContributions3 = {\n  top_speed: 0.144,\n  acceleration: 0.018,\n  drs: 0.115,\n  low_speed: 0.195,\n  medium_speed: 0.195,\n  high_speed: 0.195,\n  dirty_air: 0.029,\n  brake_cooling: 0.078,\n  engine_cooling: 0.031\n};\nconst fuel_efficiency_factors = {\n  0: 1\n};\nconst power_factors = {\n  0: 1\n};\nconst performance_loss_factors = {\n  0: 1\n};\nconst performance_threshold_factors = {\n  0: 1\n};\nconst operational_range_factors = {\n  0: 1\n};\nconst lifespan_factors = {\n  1: 0,\n  2: 0,\n  3: 5,\n  4: 2,\n  5: 3,\n  6: 5,\n  7: 4,\n  8: 1\n};\nconst drag_reduction_factors = {\n  3: 0.2,\n  5: 0.3,\n  6: 0.2,\n  7: 0.2,\n  8: 0.1\n};\nconst engine_cooling_factors = {\n  3: 0.4,\n  6: 0.6\n};\nconst airflow_middle_factors = {\n  3: 0.6,\n  6: 0.4\n};\nconst airflow_front_factors = {\n  4: 0.4,\n  6: 0.2,\n  8: 0.4\n};\nconst airflow_sensitivity_factors = {\n  4: 0.4,\n  5: 0.4,\n  7: 0.2\n};\nconst brake_cooling_factors = {\n  4: 0.4,\n  8: 0.6\n};\nconst low_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.3,\n  8: 0.3\n};\nconst medium_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.5,\n  8: 0.1\n};\nconst high_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.5,\n  8: 0.1\n};\nconst drs_delta_factors = {\n  5: 0.75,\n  3: 0.25\n};\nconst top_speed_contributors = {\n  4: 1\n};\nconst acceleration_contributors = {\n  10: 0.5,\n  4: 0.5,\n  16: 0.15\n};\nconst drs_contributors = {\n  3: 1\n};\nconst low_speed_contributors = {\n  0: 0.6,\n  7: 1,\n  16: 0.24\n};\nconst medium_speed_contributors = {\n  0: 0.4,\n  13: 0.4,\n  8: 1,\n  16: 0.27\n};\nconst high_speed_contributors = {\n  13: 0.6,\n  9: 1,\n  16: 0.24\n};\nconst dirty_air_contributors = {\n  1: 1\n};\nconst brake_cooling_contributors = {\n  2: 1\n};\nconst engine_cooling_contributors = {\n  5: 1\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/carConstants.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/countries.js":
/*!*************************************************!*\
  !*** ./src/js/backend/scriptUtils/countries.js ***!
  \*************************************************/
/***/ (() => {

eval("countries_abreviations = {\n  \"Andorra\": \"AD\",\n  \"United Arab Emirates\": \"AE\",\n  \"Afghanistan\": \"AF\",\n  \"Antigua and Barbuda\": \"AG\",\n  \"Anguilla\": \"AI\",\n  \"Albania\": \"AL\",\n  \"Armenia\": \"AM\",\n  \"Netherlands Antilles\": \"AN\",\n  \"Angola\": \"AO\",\n  \"Antarctica\": \"AQ\",\n  \"Argentina\": \"AR\",\n  \"American Samoa\": \"AS\",\n  \"Austria\": \"AT\",\n  \"Australia\": \"AU\",\n  \"Aruba\": \"AW\",\n  \"Åland Islands\": \"AX\",\n  \"Azerbaijan\": \"AZ\",\n  \"Bosnia and Herzegovina\": \"BA\",\n  \"Barbados\": \"BB\",\n  \"Bangladesh\": \"BD\",\n  \"Belgium\": \"BE\",\n  \"Burkina Faso\": \"BF\",\n  \"Bulgaria\": \"BG\",\n  \"Bahrain\": \"BH\",\n  \"Burundi\": \"BI\",\n  \"Benin\": \"BJ\",\n  \"Saint Barthélemy\": \"BL\",\n  \"Bermuda\": \"BM\",\n  \"Brunei Darussalam\": \"BN\",\n  \"Bolivia\": \"BO\",\n  \"Brazil\": \"BR\",\n  \"Bahamas\": \"BS\",\n  \"Bhutan\": \"BT\",\n  \"Bouvet Island\": \"BV\",\n  \"Botswana\": \"BW\",\n  \"Belarus\": \"BY\",\n  \"Belize\": \"BZ\",\n  \"Canada\": \"CA\",\n  \"Cocos (Keeling) Islands\": \"CC\",\n  \"Congo, Democratic Republic of the\": \"CD\",\n  \"Central African Republic\": \"CF\",\n  \"Congo, Republic of the\": \"CG\",\n  \"Switzerland\": \"CH\",\n  \"Côte d'Ivoire\": \"CI\",\n  \"Cook Islands\": \"CK\",\n  \"Chile\": \"CL\",\n  \"Cameroon\": \"CM\",\n  \"China\": \"CN\",\n  \"Colombia\": \"CO\",\n  \"Costa Rica\": \"CR\",\n  \"Cuba\": \"CU\",\n  \"Cape Verde\": \"CV\",\n  \"Curaçao\": \"CW\",\n  \"Christmas Island\": \"CX\",\n  \"Cyprus\": \"CY\",\n  \"Czech Republic\": \"CZ\",\n  \"Germany\": \"DE\",\n  \"Djibouti\": \"DJ\",\n  \"Denmark\": \"DK\",\n  \"Dominica\": \"DM\",\n  \"Dominican Republic\": \"DO\",\n  \"Algeria\": \"DZ\",\n  \"Ecuador\": \"EC\",\n  \"Estonia\": \"EE\",\n  \"Egypt\": \"EG\",\n  \"Western Sahara\": \"EH\",\n  \"Eritrea\": \"ER\",\n  \"Spain\": \"ES\",\n  \"Ethiopia\": \"ET\",\n  \"Finland\": \"FI\",\n  \"Fiji\": \"FJ\",\n  \"Falkland Islands (Malvinas)\": \"FK\",\n  \"Micronesia, Federated States of\": \"FM\",\n  \"Faroe Islands\": \"FO\",\n  \"France\": \"FR\",\n  \"Gabon\": \"GA\",\n  \"United Kingdom\": \"GB\",\n  \"Grenada\": \"GD\",\n  \"Georgia\": \"GE\",\n  \"French Guiana\": \"GF\",\n  \"Guernsey\": \"GG\",\n  \"Ghana\": \"GH\",\n  \"Gibraltar\": \"GI\",\n  \"Greenland\": \"GL\",\n  \"Gambia\": \"GM\",\n  \"Guinea\": \"GN\",\n  \"Guadeloupe\": \"GP\",\n  \"Equatorial Guinea\": \"GQ\",\n  \"Greece\": \"GR\",\n  \"South Georgia and the South Sandwich Islands\": \"GS\",\n  \"Guatemala\": \"GT\",\n  \"Guam\": \"GU\",\n  \"Guinea-Bissau\": \"GW\",\n  \"Guyana\": \"GY\",\n  \"Hong Kong\": \"HK\",\n  \"Heard Island and McDonald Islands\": \"HM\",\n  \"Honduras\": \"HN\",\n  \"Croatia\": \"HR\",\n  \"Haiti\": \"HT\",\n  \"Hungary\": \"HU\",\n  \"Indonesia\": \"ID\",\n  \"Ireland\": \"IE\",\n  \"Israel\": \"IL\",\n  \"Isle of Man\": \"IM\",\n  \"India\": \"IN\",\n  \"British Indian Ocean Territory\": \"IO\",\n  \"Iraq\": \"IQ\",\n  \"Iran, Islamic Republic of\": \"IR\",\n  \"Iceland\": \"IS\",\n  \"Italy\": \"IT\",\n  \"Jersey\": \"JE\",\n  \"Jamaica\": \"JM\",\n  \"Jordan\": \"JO\",\n  \"Japan\": \"JP\",\n  \"Kenya\": \"KE\",\n  \"Kyrgyzstan\": \"KG\",\n  \"Cambodia\": \"KH\",\n  \"Kiribati\": \"KI\",\n  \"Comoros\": \"KM\",\n  \"Saint Kitts and Nevis\": \"KN\",\n  \"Korea, Democratic People's Republic of\": \"KP\",\n  \"Korea, Republic of\": \"KR\",\n  \"Kuwait\": \"KW\",\n  \"Cayman Islands\": \"KY\",\n  \"Kazakhstan\": \"KZ\",\n  \"Lao People's Democratic Republic\": \"LA\",\n  \"Lebanon\": \"LB\",\n  \"Saint Lucia\": \"LC\",\n  \"Liechtenstein\": \"LI\",\n  \"Sri Lanka\": \"LK\",\n  \"Liberia\": \"LR\",\n  \"Lesotho\": \"LS\",\n  \"Lithuania\": \"LT\",\n  \"Luxembourg\": \"LU\",\n  \"Latvia\": \"LV\",\n  \"Libya\": \"LY\",\n  \"Morocco\": \"MA\",\n  \"Monaco\": \"MC\",\n  \"Moldova, Republic of\": \"MD\",\n  \"Montenegro\": \"ME\",\n  \"Saint Martin (French part)\": \"MF\",\n  \"Madagascar\": \"MG\",\n  \"Marshall Islands\": \"MH\",\n  \"Macedonia, the Former Yugoslav Republic of\": \"MK\",\n  \"Mali\": \"ML\",\n  \"Myanmar\": \"MM\",\n  \"Mongolia\": \"MN\",\n  \"Macao\": \"MO\",\n  \"Northern Mariana Islands\": \"MP\",\n  \"Martinique\": \"MQ\",\n  \"Mauritania\": \"MR\",\n  \"Montserrat\": \"MS\",\n  \"Malta\": \"MT\",\n  \"Mauritius\": \"MU\",\n  \"Maldives\": \"MV\",\n  \"Malawi\": \"MW\",\n  \"Mexico\": \"MX\",\n  \"Malaysia\": \"MY\",\n  \"Mozambique\": \"MZ\",\n  \"Namibia\": \"NA\",\n  \"New Caledonia\": \"NC\",\n  \"Niger\": \"NE\",\n  \"Norfolk Island\": \"NF\",\n  \"Nigeria\": \"NG\",\n  \"Nicaragua\": \"NI\",\n  \"Netherlands\": \"NL\",\n  \"Norway\": \"NO\",\n  \"Nepal\": \"NP\",\n  \"Nauru\": \"NR\",\n  \"Niue\": \"NU\",\n  \"New Zealand\": \"NZ\",\n  \"Oman\": \"OM\",\n  \"Panama\": \"PA\",\n  \"Peru\": \"PE\",\n  \"French Polynesia\": \"PF\",\n  \"Papua New Guinea\": \"PG\",\n  \"Philippines\": \"PH\",\n  \"Pakistan\": \"PK\",\n  \"Poland\": \"PL\",\n  \"Saint Pierre and Miquelon\": \"PM\",\n  \"Pitcairn\": \"PN\",\n  \"Puerto Rico\": \"PR\",\n  \"Palestine, State of\": \"PS\",\n  \"Portugal\": \"PT\",\n  \"Palau\": \"PW\",\n  \"Paraguay\": \"PY\",\n  \"Qatar\": \"QA\",\n  \"Réunion\": \"RE\",\n  \"Romania\": \"RO\",\n  \"Serbia\": \"RS\",\n  \"Russian\": \"RU\",\n  \"Rwanda\": \"RW\",\n  \"Saudi Arabia\": \"SA\",\n  \"Solomon Islands\": \"SB\",\n  \"Seychelles\": \"SC\",\n  \"Sudan\": \"SD\",\n  \"Sweden\": \"SE\",\n  \"Singapore\": \"SG\",\n  \"Saint Helena, Ascension and Tristan da Cunha\": \"SH\",\n  \"Slovenia\": \"SI\",\n  \"Svalbard and Jan Mayen\": \"SJ\",\n  \"Slovakia\": \"SK\",\n  \"Sierra Leone\": \"SL\",\n  \"San Marino\": \"SM\",\n  \"Senegal\": \"SN\",\n  \"Somalia\": \"SO\",\n  \"Suriname\": \"SR\",\n  \"South Sudan\": \"SS\",\n  \"Sao Tome and Principe\": \"ST\",\n  \"El Salvador\": \"SV\",\n  \"Sint Maarten (Dutch part)\": \"SX\",\n  \"Syrian Arab Republic\": \"SY\",\n  \"Swaziland\": \"SZ\",\n  \"Turks and Caicos Islands\": \"TC\",\n  \"Chad\": \"TD\",\n  \"French Southern Territories\": \"TF\",\n  \"Togo\": \"TG\",\n  \"Thailand\": \"TH\",\n  \"Tajikistan\": \"TJ\",\n  \"Tokelau\": \"TK\",\n  \"Timor-Leste\": \"TL\",\n  \"Turkmenistan\": \"TM\",\n  \"Tunisia\": \"TN\",\n  \"Tonga\": \"TO\",\n  \"Turkey\": \"TR\",\n  \"Trinidad and Tobago\": \"TT\",\n  \"Tuvalu\": \"TV\",\n  \"Taiwan, Province of China\": \"TW\",\n  \"Tanzania, United Republic of\": \"TZ\",\n  \"Ukraine\": \"UA\",\n  \"Uganda\": \"UG\",\n  \"United States Minor Outlying Islands\": \"UM\",\n  \"United States\": \"US\",\n  \"Uruguay\": \"UY\",\n  \"Uzbekistan\": \"UZ\",\n  \"Holy See (Vatican City State)\": \"VA\",\n  \"Saint Vincent and the Grenadines\": \"VC\",\n  \"Venezuela\": \"VE\",\n  \"Virgin Islands, British\": \"VG\",\n  \"Virgin Islands, U.S.\": \"VI\",\n  \"Vietnam\": \"VN\",\n  \"Vanuatu\": \"VU\",\n  \"Wallis and Futuna\": \"WF\",\n  \"Samoa\": \"WS\",\n  \"Yemen\": \"YE\",\n  \"Mayotte\": \"YT\",\n  \"South Africa\": \"ZA\",\n  \"Zambia\": \"ZM\",\n  \"Zimbabwe\": \"ZW\"\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/countries.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/dbUtils.js":
/*!***********************************************!*\
  !*** ./src/js/backend/scriptUtils/dbUtils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   argbToHex: () => (/* binding */ argbToHex),\n/* harmony export */   calculateTimeDifference: () => (/* binding */ calculateTimeDifference),\n/* harmony export */   calculateTimeToPole: () => (/* binding */ calculateTimeToPole),\n/* harmony export */   checkCustomTables: () => (/* binding */ checkCustomTables),\n/* harmony export */   checkDrivesForTeam32: () => (/* binding */ checkDrivesForTeam32),\n/* harmony export */   checkYearSave: () => (/* binding */ checkYearSave),\n/* harmony export */   editEngines: () => (/* binding */ editEngines),\n/* harmony export */   fetchCalendar: () => (/* binding */ fetchCalendar),\n/* harmony export */   fetchDriverCode: () => (/* binding */ fetchDriverCode),\n/* harmony export */   fetchDriverContract: () => (/* binding */ fetchDriverContract),\n/* harmony export */   fetchDriverNumberDetails: () => (/* binding */ fetchDriverNumberDetails),\n/* harmony export */   fetchDriverNumbers: () => (/* binding */ fetchDriverNumbers),\n/* harmony export */   fetchDriverRetirement: () => (/* binding */ fetchDriverRetirement),\n/* harmony export */   fetchDrivers: () => (/* binding */ fetchDrivers),\n/* harmony export */   fetchDriversPerYear: () => (/* binding */ fetchDriversPerYear),\n/* harmony export */   fetchEngines: () => (/* binding */ fetchEngines),\n/* harmony export */   fetchEventsDoneFrom: () => (/* binding */ fetchEventsDoneFrom),\n/* harmony export */   fetchEventsFrom: () => (/* binding */ fetchEventsFrom),\n/* harmony export */   fetchForFutureContract: () => (/* binding */ fetchForFutureContract),\n/* harmony export */   fetchMarketability: () => (/* binding */ fetchMarketability),\n/* harmony export */   fetchMentality: () => (/* binding */ fetchMentality),\n/* harmony export */   fetchNationality: () => (/* binding */ fetchNationality),\n/* harmony export */   fetchOneDriverSeasonResults: () => (/* binding */ fetchOneDriverSeasonResults),\n/* harmony export */   fetchOneTeamSeasonResults: () => (/* binding */ fetchOneTeamSeasonResults),\n/* harmony export */   fetchRaceFormula: () => (/* binding */ fetchRaceFormula),\n/* harmony export */   fetchSeasonResults: () => (/* binding */ fetchSeasonResults),\n/* harmony export */   fetchStaff: () => (/* binding */ fetchStaff),\n/* harmony export */   fetchSuperlicense: () => (/* binding */ fetchSuperlicense),\n/* harmony export */   fetchTeamsStandings: () => (/* binding */ fetchTeamsStandings),\n/* harmony export */   fetchYear: () => (/* binding */ fetchYear),\n/* harmony export */   formatNamesAndFetchStats: () => (/* binding */ formatNamesAndFetchStats),\n/* harmony export */   formatNamesSimple: () => (/* binding */ formatNamesSimple),\n/* harmony export */   formatSeasonResults: () => (/* binding */ formatSeasonResults),\n/* harmony export */   insertDefualtEnginesData: () => (/* binding */ insertDefualtEnginesData),\n/* harmony export */   removeNumber: () => (/* binding */ removeNumber),\n/* harmony export */   updateCustomEngines: () => (/* binding */ updateCustomEngines),\n/* harmony export */   updateTeamsSuppliedByEngine: () => (/* binding */ updateTeamsSuppliedByEngine)\n/* harmony export */ });\n/* harmony import */ var _countries_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./countries.js */ \"./src/js/backend/scriptUtils/countries.js\");\n/* harmony import */ var _countries_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_countries_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _carConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carConstants.js */ \"./src/js/backend/scriptUtils/carConstants.js\");\n/* harmony import */ var _dbManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dbManager.js */ \"./src/js/backend/dbManager.js\");\n\n\n\n\n/**\r\n * Convierte un color ARGB a hexadecimal.\r\n */\nfunction argbToHex(argb) {\n  const rgb = argb & 0xFFFFFF; // Ignora el canal alfa\n  return `#${rgb.toString(16).padStart(6, '0').toUpperCase()}`;\n}\n\n/**\r\n * Verifica si el archivo de guardado es de un año específico.\r\n * @returns {Array} [ \"23\" o \"24\", TeamName, primaryColor, secondaryColor ]\r\n */\nfunction checkYearSave() {\n  // Ver si existe la tabla Countries_RaceRecord\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT name \n      FROM sqlite_master \n      WHERE type='table' AND name='Countries_RaceRecord'\n    `, 'singleRow');\n  if (!row) {\n    // No existe la tabla -> asumo que es \"23\"\n    return [\"23\", null, null, null];\n  }\n\n  // Si existe, entonces busco TeamNameLocKey del TeamID=32\n  const nameValue = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TeamNameLocKey \n      FROM Teams \n      WHERE TeamID = 32\n    `, 'singleValue');\n  if (!nameValue) {\n    // No hay valor -> devuelvo \"24\" sin datos\n    return [\"24\", null, null, null];\n  }\n\n  // Extraer nombre\n  const match = nameValue.match(/\\[STRING_LITERAL:Value=\\|(.*?)\\|\\]/);\n  let name = null,\n    primaryColor = null,\n    secondaryColor = null;\n  if (match) {\n    name = match[1];\n\n    // Busco los colores\n    const primaryColorRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Colour\n        FROM Teams_Colours\n        WHERE TeamID = 32 AND ColourID = 0\n      `, 'singleRow');\n    const secondaryColorRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Colour\n        FROM Teams_Colours\n        WHERE TeamID = 32 AND ColourID = 1\n      `, 'singleRow');\n    if (primaryColorRow) {\n      primaryColor = argbToHex(primaryColorRow[0]);\n    }\n    if (secondaryColorRow) {\n      secondaryColor = argbToHex(secondaryColorRow[0]);\n    }\n  }\n  return [\"24\", name, primaryColor, secondaryColor];\n}\nfunction fetchNationality(driverID, gameYear) {\n  if (gameYear === \"24\") {\n    const countryID = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT CountryID \n        FROM Staff_BasicData \n        WHERE StaffID = ${driverID}\n      `, 'singleValue');\n    if (!countryID) return \"\";\n    const countryName = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Name \n        FROM Countries \n        WHERE CountryID = ${countryID}\n      `, 'singleValue');\n    if (!countryName) return \"\";\n    const match = countryName.match(/(?<=\\[Nationality_)[^\\]]+/);\n    if (match) {\n      const nat = match[0];\n      const natName = nat.replace(/(?<!^)([A-Z])/g, \" $1\");\n      return (_countries_js__WEBPACK_IMPORTED_MODULE_0___default())[natName] || \"\";\n    }\n    return \"\";\n  } else if (gameYear === \"23\") {\n    const nationality = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Nationality \n        FROM Staff_BasicData \n        WHERE StaffID = ${driverID}\n      `, 'singleValue');\n    if (!nationality) return \"\";\n    const natName = nationality.replace(/(?<!^)([A-Z])/g, \" $1\");\n    return (_countries_js__WEBPACK_IMPORTED_MODULE_0___default())[natName] || \"\";\n  }\n  return \"\";\n}\nfunction fetchForFutureContract(driverID) {\n  const teamID = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TeamID \n      FROM Staff_Contracts \n      WHERE StaffID = ${driverID} \n        AND ContractType = 3\n    `, 'singleValue');\n  return teamID ?? -1;\n}\nfunction fetchEngines() {\n  const statsIds = [6, 10, 11, 12, 14, 15];\n  const enginesList = [];\n  let newEngineIds = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT engineID FROM Custom_Engines_List`, 'allRows');\n  newEngineIds = newEngineIds.map(row => row[0]);\n  let newErsIds = newEngineIds.map(id => id + 1);\n  let newGearboxesIds = newEngineIds.map(id => id + 2);\n  for (let i = 0; i < newEngineIds.length; i++) {\n    let resultDict = {};\n\n    // Obtener valores de stats\n    for (const stat of statsIds) {\n      const statResult = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n                SELECT partStat, unitValue \n                FROM Custom_Engines_Stats \n                WHERE designId = ${newEngineIds[i]} AND partStat = ${stat}\n            `, 'singleRow');\n      if (statResult) {\n        resultDict[statResult[0]] = statResult[1];\n      }\n    }\n\n    // Obtener valor de ERS\n    const ersResult = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n            SELECT UnitValue \n            FROM Custom_Engines_Stats \n            WHERE designId = ${newErsIds[i]} AND partStat = 15\n        `, 'singleValue');\n    if (ersResult !== null) {\n      resultDict[18] = ersResult;\n    }\n\n    // Obtener valor de gearbox\n    const gearboxResult = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n            SELECT UnitValue \n            FROM Custom_Engines_Stats \n            WHERE designId = ${newGearboxesIds[i]} AND partStat = 15\n        `, 'singleValue');\n    if (gearboxResult !== null) {\n      resultDict[19] = gearboxResult;\n    }\n    const engineName = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n          SELECT name \n          FROM Custom_Engines_List\n          WHERE engineID = ${newEngineIds[i]}\n      `, 'singleValue');\n\n    // Añadir la información del motor a la lista\n    enginesList.push([newEngineIds[i], resultDict, engineName]);\n  }\n  const engineAllocations = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT * FROM Custom_Engine_Allocations\n    `, 'allRows');\n  return [enginesList, engineAllocations];\n}\nfunction fetchMentality(staffID) {\n  // Obtengo todas las filas (morale es un array de arrays [[opinion],[opinion], ...])\n  const morale = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Opinion\n      FROM Staff_Mentality_AreaOpinions\n      WHERE StaffID = ${staffID}\n    `, 'allRows');\n\n  // Obtengo un solo valor\n  const globalMentality = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Mentality\n      FROM Staff_State\n      WHERE StaffID = ${staffID}\n    `, 'singleValue');\n  return [morale, globalMentality];\n}\nfunction checkDrivesForTeam32(staffData) {\n  // staffData = [ firstName, lastName, staffID, teamID, posInTeam, minContractType, retired, countContracts ]\n\n  const contractRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TeamID, PosInTeam\n      FROM Staff_Contracts\n      WHERE StaffID = ${staffData[2]} \n        AND ContractType = 0 \n        AND TeamID = 32\n    `, 'singleRow');\n  if (contractRow) {\n    return [staffData[0], staffData[1], staffData[2], 32, contractRow[1], staffData[5], staffData[6], staffData[7]];\n  }\n  return staffData;\n}\nfunction removeNumber(str) {\n  if (str && /\\d$/.test(str)) {\n    return str.slice(0, -1);\n  }\n  return str;\n}\nfunction formatNamesAndFetchStats(nameData, type) {\n  // nameData: [ FirstName, LastName, StaffID, teamId, positionInTeam, minContractType, retired, countContracts ]\n  let firstName = \"\";\n  let lastName = \"\";\n\n  // Extract firstName\n  if (!nameData[0].includes(\"STRING_LITERAL\")) {\n    const m = nameData[0].match(/StaffName_Forename_(?:Male|Female)_(\\w+)/);\n    firstName = m ? removeNumber(m[1]) : \"\";\n  } else {\n    const m = nameData[0].match(/\\|([^|]+)\\|/);\n    firstName = m ? m[1] : \"\";\n  }\n\n  // Extract lastName\n  if (!nameData[1].includes(\"STRING_LITERAL\")) {\n    const m = nameData[1].match(/StaffName_Surname_(\\w+)/);\n    lastName = m ? removeNumber(m[1]) : \"\";\n  } else {\n    const m = nameData[1].match(/\\|([^|]+)\\|/);\n    lastName = m ? m[1] : \"\";\n  }\n  const formattedName = `${firstName} ${lastName}`;\n  let teamId = nameData[3] ?? 0;\n  let positionInTeam = nameData[4] ?? 0;\n\n  // para drivers que tienen minContractType != 0 (p.ej. reservas)\n  if (type === \"driver\" && nameData[5] !== 0) {\n    teamId = 0;\n    positionInTeam = 0;\n  }\n  let baseResult;\n  if (type === \"driver\") {\n    // [nombre, staffID, teamID, posInTeam, retired]\n    baseResult = [formattedName, nameData[2], teamId, positionInTeam, nameData[6]];\n  } else {\n    // staff normal\n    baseResult = [formattedName, nameData[2], teamId, positionInTeam];\n  }\n\n  // Buscamos stats\n  if (type === \"driver\") {\n    const statsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Val\n        FROM Staff_PerformanceStats\n        WHERE StaffID = ${nameData[2]}\n          AND StatID BETWEEN 2 AND 10\n      `, 'allRows');\n    let stats = statsRows;\n    if (!stats || !stats.length) {\n      // si no hay stats, por defecto 50\n      stats = Array(9).fill([50]);\n    }\n    const extraRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Improvability, Aggression\n        FROM Staff_DriverData\n        WHERE StaffID = ${nameData[2]}\n      `, 'singleRow');\n\n    // Concatenamos: baseResult + stats + extraRow\n    // stats es array de arrays: [[val],[val],...]\n    // mapeamos para quedarnos con stats[i][0]\n    return baseResult.concat(stats.map(s => s[0]), extraRow ?? []);\n  }\n\n  // staff normal\n  let statIDs = [];\n  if (type === \"staff1\") {\n    statIDs = [0, 1, 14, 15, 16, 17];\n  } else if (type === \"staff2\") {\n    statIDs = [13, 25, 43];\n  } else if (type === \"staff3\") {\n    statIDs = [19, 20, 26, 27, 28, 29, 30, 31];\n  } else if (type === \"staff4\") {\n    statIDs = [11, 22, 23, 24];\n  }\n  if (statIDs.length) {\n    const statsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Val\n        FROM Staff_PerformanceStats\n        WHERE StaffID = ${nameData[2]}\n          AND StatID IN (${statIDs.join(\",\")})\n      `, 'allRows');\n    return baseResult.concat(statsRows.map(s => s[0]));\n  }\n\n  // Si no entra en esos casos, simplemente devolvemos baseResult\n  return baseResult;\n}\nfunction fetchDriverRetirement(driverID) {\n  const playerRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  let day = 0,\n    currentSeason = 0;\n  if (playerRow) {\n    [day, currentSeason] = playerRow;\n  } else {\n    console.warn(\"No se encontraron datos en Player_State.\");\n  }\n  const retirementAge = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT RetirementAge\n      FROM Staff_GameData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  const dob = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DOB\n      FROM Staff_BasicData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  const age = dob != null ? Math.floor((day - dob) / 365.25) : 0;\n  return [retirementAge, age];\n}\nfunction fetchDriverCode(driverID) {\n  let code = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DriverCode\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  if (!code) return \"\";\n  if (!code.includes(\"STRING_LITERAL\")) {\n    const m = code.match(/\\[DriverCode_(...)\\]/);\n    code = m ? m[1] : \"\";\n  } else {\n    const m = code.match(/\\[STRING_LITERAL:Value=\\|(...)\\|\\]/);\n    code = m ? m[1] : \"\";\n  }\n  return code.toUpperCase();\n}\nfunction fetchYear() {\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!row) {\n    console.warn(\"No data found in Player_State.\");\n    return 0;\n  }\n  // Devolvemos CurrentSeason (row[1])\n  return row[1];\n}\nfunction fetchDriverNumberDetails(driverID) {\n  let currentNumber = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Number\n      FROM Staff_DriverNumbers\n      WHERE CurrentHolder = ${driverID}\n    `, 'singleValue');\n  if (currentNumber == null) {\n    // Si no tiene número, ver si hay libres\n    const available = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Number\n        FROM Staff_DriverNumbers\n        WHERE CurrentHolder IS NULL\n      `, 'allRows');\n    if (!available.length) {\n      currentNumber = 0;\n    } else {\n      // Elige uno aleatorio\n      const randomIdx = Math.floor(Math.random() * available.length);\n      currentNumber = available[randomIdx][0];\n    }\n  }\n\n  // Quiere usar número de campeón?\n  const wantsChampion = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT WantsChampionDriverNumber\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  return [currentNumber, wantsChampion];\n}\nfunction fetchRaceFormula(driverID) {\n  const category = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT MAX(\n        CASE \n          WHEN (TeamID <= 10 OR TeamID = 32) THEN 1\n          WHEN TeamID BETWEEN 11 AND 21 THEN 2\n          WHEN TeamID BETWEEN 22 AND 31 THEN 3\n          ELSE 4\n        END\n      ) AS Cat\n      FROM Staff_Contracts\n      WHERE ContractType = 0 AND StaffID = ${driverID}\n    `, 'singleValue');\n\n  // Por defecto 4 si no existe\n  return category ?? 4;\n}\nfunction fetchMarketability(driverID) {\n  return (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Marketability\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n}\nfunction fetchSuperlicense(driverID) {\n  return (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT HasSuperLicense\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n}\nfunction fetchDrivers(gameYear) {\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DISTINCT \n        bas.FirstName, bas.LastName, bas.StaffID, con.TeamID, con.PosInTeam, \n        MIN(con.ContractType) AS MinContractType, gam.Retired, COUNT(*)\n      FROM Staff_BasicData bas\n      JOIN Staff_DriverData dri ON bas.StaffID = dri.StaffID\n      LEFT JOIN Staff_Contracts con ON dri.StaffID = con.StaffID\n      LEFT JOIN Staff_GameData gam ON dri.StaffID = gam.StaffID\n      GROUP BY gam.StaffID\n      ORDER BY con.TeamID;\n    `, 'allRows');\n  const formattedData = [];\n  for (let driver of rows) {\n    // Si driver[7] > 1 => hay más de un contrato\n    if (driver[7] > 1) {\n      driver = checkDrivesForTeam32(driver);\n    }\n    const driverID = driver[2];\n\n    // Ignoramos placeholders\n    if (driver[0] === \"Placeholder\") {\n      continue;\n    }\n\n    // Format + stats\n    const result = formatNamesAndFetchStats(driver, \"driver\");\n\n    // Extra info\n    const [retirementAge, age] = fetchDriverRetirement(driverID);\n    let raceFormula = fetchRaceFormula(driverID) || 4;\n    const [driverNumber, wants1] = fetchDriverNumberDetails(driverID);\n    const superlicense = fetchSuperlicense(driverID);\n    const futureTeam = fetchForFutureContract(driverID);\n    const driverCode = fetchDriverCode(driverID);\n    const nationality = fetchNationality(driverID, gameYear);\n\n    // result es array, lo convertimos a objeto para mayor claridad\n    const data = {\n      ...result\n    };\n    data.driver_number = driverNumber;\n    data.wants1 = wants1;\n    data.retirement_age = retirementAge;\n    data.age = age;\n    data.superlicense = superlicense;\n    data.race_formula = raceFormula;\n    data.team_future = futureTeam;\n    data.driver_code = driverCode;\n    data.nationality = nationality;\n\n    // Datos específicos para 2024\n    if (gameYear === \"24\") {\n      const [morale, gMentality] = fetchMentality(driverID);\n      data.global_mentality = gMentality ?? null;\n\n      // morale es array de arrays. Ejemplo: [ [op1], [op2], [op3] ]\n      if (morale.length >= 3) {\n        data.mentality0 = morale[0][0];\n        data.mentality1 = morale[1][0];\n        data.mentality2 = morale[2][0];\n      }\n      const market = fetchMarketability(driverID);\n      data.marketability = market ?? 0;\n    }\n    formattedData.push(data);\n  }\n  return formattedData;\n}\nfunction fetchStaff(gameYear) {\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DISTINCT\n        bas.FirstName, \n        bas.LastName, \n        bas.StaffID, \n        con.TeamID, \n        gam.StaffType\n      FROM Staff_GameData gam\n      JOIN Staff_BasicData bas ON gam.StaffID = bas.StaffID\n      LEFT JOIN Staff_Contracts con \n        ON bas.StaffID = con.StaffID \n        AND (con.ContractType = 0 OR con.ContractType IS NULL)\n      WHERE gam.StaffType != 0\n      ORDER BY \n        CASE WHEN con.TeamID IS NULL THEN 1 ELSE 0 END,\n        con.TeamID\n    `, 'allRows');\n  if (!rows.length) {\n    console.warn(\"No staff data found.\");\n    return [];\n  }\n  const formattedData = [];\n  for (let staff of rows) {\n    // staff = [ FirstName, LastName, StaffID, TeamID, StaffType ]\n    if (staff[0] === \"Placeholder\") {\n      continue;\n    }\n    const staffID = staff[2];\n    const staffType = `staff${staff[4]}`;\n    const result = formatNamesAndFetchStats(staff, staffType);\n    const [retirementAge, age] = fetchDriverRetirement(staffID);\n    let raceFormula = fetchRaceFormula(staffID) || 4;\n    const futureTeam = fetchForFutureContract(staffID);\n    const nationality = fetchNationality(staffID, gameYear);\n    const data = {\n      ...result\n    };\n    data.retirement_age = retirementAge;\n    data.age = age;\n    data.race_formula = raceFormula;\n    data.team_future = futureTeam;\n    data.nationality = nationality;\n    if (gameYear === \"24\") {\n      const [morale, gMentality] = fetchMentality(staffID);\n      data.global_mentality = gMentality ?? -1;\n      if (morale.length >= 3) {\n        data.mentality0 = morale[0][0] ?? -1;\n        data.mentality1 = morale[1][0] ?? -1;\n        data.mentality2 = morale[2][0] ?? -1;\n      } else {\n        data.mentality0 = -1;\n        data.mentality1 = -1;\n        data.mentality2 = -1;\n      }\n    }\n    formattedData.push(data);\n  }\n  return formattedData;\n}\nfunction fetchDriversPerYear(year) {\n  // Construimos la consulta SQL\n  const sql = `\n      SELECT \n        bas.FirstName, \n        bas.LastName, \n        res.DriverID, \n        res.TeamID\n      FROM Staff_BasicData bas\n      JOIN Races_Results res \n        ON bas.StaffID = res.DriverID\n      WHERE Season = ${year}\n      GROUP BY \n        bas.FirstName, \n        bas.LastName, \n        bas.StaffID, \n        res.TeamID\n      ORDER BY res.TeamID\n    `;\n\n  // Obtenemos todas las filas (array de objetos o tuplas)\n  const drivers = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(sql, 'allRows') || [];\n\n  // Formateamos cada fila como quieras (equivalente a \"format_names_simple\")\n  const formattedTuples = drivers.map(row => formatNamesSimple(row));\n  return formattedTuples;\n}\nfunction formatNamesSimple(name) {\n  let nombre = \"\";\n  let apellido = \"\";\n\n  // Si no contiene \"STRING_LITERAL\", buscamos \"StaffName_Forename_(Male|Female)_(...)\".\n  if (!name[0].includes(\"STRING_LITERAL\")) {\n    const nombrePattern = /StaffName_Forename_(Male|Female)_(\\w+)/;\n    const match = name[0].match(nombrePattern);\n    if (match) {\n      // Asumiendo que tienes un método removeNumber similar al de Python\n      nombre = removeNumber(match[2]);\n    } else {\n      nombre = \"\";\n    }\n  } else {\n    // De lo contrario, buscamos la parte entre \"| ... |\"\n    const pattern = /\\|([^|]+)\\|/;\n    const match = name[0].match(pattern);\n    if (match) {\n      nombre = match[1];\n    } else {\n      nombre = \"\";\n    }\n  }\n\n  // Repetimos la lógica para el apellido\n  if (!name[1].includes(\"STRING_LITERAL\")) {\n    const apellidoPattern = /StaffName_Surname_(\\w+)/;\n    const match = name[1].match(apellidoPattern);\n    if (match) {\n      apellido = removeNumber(match[1]);\n    } else {\n      apellido = \"\";\n    }\n  } else {\n    const pattern = /\\|([^|]+)\\|/;\n    const match = name[1].match(pattern);\n    if (match) {\n      apellido = match[1];\n    } else {\n      apellido = \"\";\n    }\n  }\n\n  // Construimos el nombre completo\n  const nameFormatted = `${nombre} ${apellido}`.trim();\n\n  // El TeamID (índice 3 en el array). Si es nulo/indefinido, lo ponemos a 0\n  const teamId = name[3] != null ? name[3] : 0;\n\n  // Devolvemos la misma estructura que en Python: (Nombre Formateado, DriverID, TeamID)\n  return [nameFormatted, name[2], teamId];\n}\nfunction fetchSeasonResults(yearSelected) {\n  const drivers = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DriverID\n      FROM Races_DriverStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${yearSelected}\n    `, 'allRows') || [];\n  const seasonResults = [];\n  drivers.forEach(row => {\n    const driverID = row[0];\n    const driverRes = fetchOneDriverSeasonResults([driverID], [yearSelected]);\n    if (driverRes) {\n      seasonResults.push(driverRes);\n    }\n  });\n  return seasonResults;\n}\nfunction fetchTeamsStandings(year) {\n  return (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TeamID, Position\n      FROM Races_TeamStandings\n      WHERE SeasonID = ${year}\n        AND RaceFormula = 1\n    `, 'allRows') || [];\n}\nfunction fetchOneTeamSeasonResults(team, year) {\n  const teamID = team;\n  const season = year;\n  const drivers = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(` SELECT DISTINCT DriverID\n       FROM Races_Results\n       WHERE Season = ${season}\n       AND TeamID = ${teamID} `, 'allRows') || [];\n  const results = [];\n  for (let driver of drivers) {\n    const driverID = driver[0];\n    const driverResults = fetchOneDriverSeasonResults(driverID, season);\n    if (driverResults) {\n      results.push(driverResults);\n    }\n  }\n  return results;\n}\nfunction fetchOneDriverSeasonResults(driver, year) {\n  const driverID = driver;\n  const season = year;\n  const results = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT DriverID, TeamID, FinishingPos, Points\n      FROM Races_Results\n      WHERE Season = ${season}\n        AND DriverID = ${driverID}\n    `, 'allRows') || [];\n  if (results.length > 0) {\n    const sprintResults = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT RaceID, FinishingPos, ChampionshipPoints\n        FROM Races_SprintResults\n        WHERE SeasonID = ${season}\n          AND DriverID = ${driverID}\n      `, 'allRows') || [];\n    const teamID = results[0][1];\n    const driverNameRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT FirstName, LastName\n        FROM Staff_BasicData\n        WHERE StaffID = ${driverID}\n      `, 'singleRow');\n    return formatSeasonResults(results, driverNameRow, teamID, driver, year, sprintResults);\n  }\n  return null;\n}\nfunction fetchEventsDoneFrom(year) {\n  const daySeasonRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!daySeasonRow) {\n    return [];\n  }\n  const [currentDay, currentSeason] = daySeasonRow;\n  const seasonIdsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT RaceID\n      FROM Races\n      WHERE SeasonID = ${year}\n        AND Day < ${currentDay}\n    `, 'allRows') || [];\n  const eventsIds = seasonIdsRows.map(row => row[0]);\n  return eventsIds;\n}\nfunction fetchEventsFrom(year) {\n  const seasonEventsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TrackID\n      FROM Races\n      WHERE SeasonID = ${year}\n    `, 'allRows') || [];\n  const seasonIdsRows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT RaceID\n      FROM Races\n      WHERE SeasonID = ${year}\n    `, 'allRows') || [];\n  const eventsIds = [];\n  for (let i = 0; i < seasonIdsRows.length; i++) {\n    const raceID = seasonIdsRows[i][0];\n    const trackID = seasonEventsRows[i][0];\n    eventsIds.push([raceID, trackID]);\n  }\n  return eventsIds;\n}\nfunction formatSeasonResults(results, driverName, teamID, driver, year, sprints) {\n  // Asumiendo que driver y year son arrays (p.ej. driver=[123], year=[2023]):\n  const driverID = driver;\n  const season = year;\n\n  // -------- 1) Formatear nombre --------\n  let nombre = \"\";\n  let apellido = \"\";\n\n  // driverName podría ser un array [firstName, lastName] o un objeto {FirstName, LastName}.\n  // Aquí asumimos array. Si tu queryDB retorna objetos, ajusta a driverName.FirstName, driverName.LastName.\n  const firstName = driverName ? driverName[0] : \"\";\n  const lastName = driverName ? driverName[1] : \"\";\n\n  // Lógica análoga a Python para \"STRING_LITERAL\"\n  if (!firstName.includes(\"STRING_LITERAL\")) {\n    const nombrePattern = /StaffName_Forename_(Male|Female)_(\\w+)/;\n    const match = firstName.match(nombrePattern);\n    if (match) {\n      nombre = removeNumber(match[2]); // asumiendo que tienes un removeNumber\n    } else {\n      nombre = \"\";\n    }\n  } else {\n    const pattern = /\\|([^|]+)\\|/;\n    const match = firstName.match(pattern);\n    nombre = match ? match[1] : \"\";\n  }\n  if (!lastName.includes(\"STRING_LITERAL\")) {\n    const apellidoPattern = /StaffName_Surname_(\\w+)/;\n    const match = lastName.match(apellidoPattern);\n    if (match) {\n      apellido = removeNumber(match[1]);\n    } else {\n      apellido = \"\";\n    }\n  } else {\n    const pattern = /\\|([^|]+)\\|/;\n    const match = lastName.match(pattern);\n    apellido = match ? match[1] : \"\";\n  }\n  const nameFormatted = `${nombre} ${apellido}`.trim();\n\n  // -------- 2) Obtener todas las carreras que corrió este piloto en la temporada --------\n  const racesParticipated = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT RaceID\n      FROM Races_Results\n      WHERE DriverID = ${driverID}\n        AND Season = ${season}\n    `, 'allRows') || [];\n\n  // results = array con [DriverID, TeamID, FinishingPos, Points]\n  // Queremos convertirlo en algo más detallado. \n  // De Python: formatred_results = [(FinishingPos, Points) for result in results]\n  // Pero necesitamos mapear 1:1 con la lista de RaceIDs, así que iremos uno a uno.\n  let formatredResults = results.map(r => [r[2], r[3]]);\n  // r[2] => FinishingPos, r[3] => Points.\n\n  // Suponiendo que hay la misma cantidad y el mismo orden de carreras \n  // entre \"results\" y \"racesParticipated\". \n  // Si no, necesitarías hacer matching por RaceID. \n  // En tu Python original, tomabas RaceIDs en order y reasignabas. \n  // Asegurémonos de usar el RaceID de 'racesParticipated[i]' igual que Python.\n\n  for (let i = 0; i < racesParticipated.length; i++) {\n    const raceID = racesParticipated[i][0]; // Cada fila es [RaceID]\n\n    // 2.1) Buscamos quién hizo la fastest lap\n    const driverWithFastestLap = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT DriverID\n        FROM Races_Results\n        WHERE FastestLap > 0\n          AND RaceID = ${raceID}\n          AND Season = ${season}\n        ORDER BY FastestLap\n        LIMIT 1\n      `, 'singleValue');\n\n    // 2.2) Checamos si fue DNF\n    const dnfd = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT DNF\n        FROM Races_Results\n        WHERE DriverID = ${driverID}\n          AND Season = ${season}\n          AND RaceID = ${raceID}\n      `, 'singleValue') || 0;\n\n    // Inyectamos RaceID al inicio de la tupla\n    // Python: formatred_results[i] = (raceID,) + formatred_results[i]\n    formatredResults[i] = [raceID, ...formatredResults[i]];\n\n    // Si DNF = 1 => set FinishingPos y Points a -1\n    if (dnfd === 1) {\n      const arr = [...formatredResults[i]];\n      arr[1] = -1; // FinishingPos\n      arr[2] = -1; // Points\n      formatredResults[i] = arr;\n    }\n\n    // Marcar fastest lap\n    if (driverWithFastestLap === driverID) {\n      // le append \"1\"\n      formatredResults[i].push(1);\n    } else {\n      // le append \"0\"\n      formatredResults[i].push(0);\n    }\n\n    // 2.3) Quali Stage & FinishingPos\n    const QStage = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n    const QRes = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID = ${driverID}\n          AND QualifyingStage = ${QStage}\n      `, 'singleValue') || 99;\n\n    // 2.4) Cálculo de diferencias de tiempo (carrera y pole)\n    const timeDifference = calculateTimeDifference(driverID, raceID);\n    const poleDifference = calculateTimeToPole(driverID, raceID);\n\n    // Añadimos QRes, timeDifference y poleDifference\n    formatredResults[i].push(QRes);\n    formatredResults[i].push(timeDifference);\n    formatredResults[i].push(poleDifference);\n  }\n\n  // -------- 3) Añadir datos de sprint al formatredResults --------\n  // En Python: \n  // for tupla1 in sprints:\n  //   for i, tupla2 in enumerate(formatred_results):\n  //     if tupla1[0] == tupla2[0]:\n  //       formatred_results[i] = tupla2 + (tupla1[2], tupla1[1])\n  //\n  // tupla1[0] => RaceID\n  // tupla1[1] => FinishingPos\n  // tupla1[2] => ChampionshipPoints\n\n  for (const sprintRow of sprints) {\n    // sprintRow: [RaceID, FinishingPos, ChampionshipPoints]\n    const [sprintRaceID, sprintPos, sprintPoints] = sprintRow;\n    // Buscamos coincidencia en formatredResults\n    for (let i = 0; i < formatredResults.length; i++) {\n      if (formatredResults[i][0] === sprintRaceID) {\n        // Agregamos ChampionshipPoints y FinishingPos al final\n        // (Ojo: en Python lo agregas en orden (tupla1[2], tupla1[1]) => (ChampPoints, FinishingPos)\n        formatredResults[i] = [...formatredResults[i], sprintPoints, sprintPos];\n        break;\n      }\n    }\n  }\n\n  // -------- 4) Añadir TeamID a cada carrera --------\n  // En Python se hace un for i in range(len(...)):\n  //   team_in_race = ...\n  //   formatred_results[i] += (team_in_race)\n  //   latest_team = ...\n  let latestTeam = null;\n  for (let i = 0; i < formatredResults.length; i++) {\n    const raceID = formatredResults[i][0];\n    const teamInRace = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT TeamID\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n    formatredResults[i].push(teamInRace);\n    latestTeam = teamInRace;\n  }\n\n  // -------- 5) Agregar la posición final en el campeonato al inicio --------\n  const position = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Position\n      FROM Races_Driverstandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${season}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n  formatredResults.unshift(position);\n  formatredResults.unshift(latestTeam);\n  formatredResults.unshift(nameFormatted);\n\n  // Devolvemos el array final\n  return formatredResults;\n}\nfunction calculateTimeToPole(driverID, raceID) {\n  const QStage = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT MAX(QualifyingStage)\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n  const poleTime = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT MIN(FastestLap)\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND QualifyingStage = 3\n        AND FastestLap IS NOT 0\n    `, 'singleValue') || 9999;\n  const driverTime = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT FastestLap\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND QualifyingStage = ${QStage}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 9999;\n  if (driverTime < poleTime) {\n    return \"NR\";\n  } else {\n    const difference = Number((driverTime - poleTime).toFixed(2));\n    return `+${difference}s`;\n  }\n}\nfunction calculateTimeDifference(driverID, raceID) {\n  const totalLaps = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT MAX(Laps)\n      FROM Races_Results\n      WHERE RaceID = ${raceID}\n    `, 'singleValue') || 0;\n  const driverLaps = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Laps\n      FROM Races_Results\n      WHERE RaceID = ${raceID}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n  if (driverLaps < totalLaps) {\n    return `+${totalLaps - driverLaps} L`;\n  } else {\n    const winnerID = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT DriverID\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND FinishingPos = 1\n      `, 'singleValue');\n    const winnerTime = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Time\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${winnerID}\n      `, 'singleValue') || 0;\n    const driverTime = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Time\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n    const timeDiff = Number((driverTime - winnerTime).toFixed(1));\n    return `+${timeDiff}s`;\n  }\n}\nfunction fetchCalendar() {\n  // Saco [ Day, CurrentSeason ] de Player_State\n  const daySeason = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!daySeason) {\n    console.warn(\"No data found in Player_State.\");\n    return [];\n  }\n  const [day, currentSeason] = daySeason;\n\n  // Saco el calendario\n  const calendar = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT TrackID, WeatherStatePractice, WeatherStateQualifying, WeatherStateRace, WeekendType, State\n      FROM Races\n      WHERE SeasonID = ${currentSeason}\n    `, 'allRows');\n  return calendar;\n}\nfunction fetchDriverNumbers() {\n  const numbers = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT DISTINCT Number\n       FROM Staff_DriverNumbers dn \n       JOIN Staff_Contracts con \n       ON dn.CurrentHolder = con.StaffID \n       WHERE dn.CurrentHolder IS NULL OR con.PosInTeam > 2`, 'allRows');\n  return numbers.map(n => n[0]);\n}\nfunction fetchDriverContract(id) {\n  // Obtener el contrato actual\n  const currentContract = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Salary, EndSeason, StartingBonus, RaceBonus, RaceBonusTargetPos, TeamID\n        FROM Staff_Contracts\n        WHERE ContractType = 0 AND StaffID = ${id}\n    `, 'singleRow');\n\n  // Obtener el contrato futuro\n  const futureContract = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Salary, EndSeason, StartingBonus, RaceBonus, RaceBonusTargetPos, PosInTeam, TeamID\n        FROM Staff_Contracts\n        WHERE ContractType = 3 AND StaffID = ${id}\n    `, 'singleRow');\n\n  // Obtener el día y la temporada actual\n  const daySeason = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT Day, CurrentSeason\n        FROM Player_State\n    `, 'singleRow');\n\n  // Retornar los resultados\n  return [currentContract, futureContract, daySeason ? daySeason[1] : null];\n}\nfunction checkCustomTables() {\n  let createdEnginesList = false;\n  let createdEnginesStats = false;\n  let createdEnginesAllocations = false;\n  const tablesToCheck = [{\n    name: 'Custom_Engines_List',\n    createSQL: `\n          CREATE TABLE Custom_Engines_List (\n            engineId INTEGER PRIMARY KEY,\n            name TEXT\n          )\n        `\n  }, {\n    name: 'Custom_Engines_Stats',\n    createSQL: `\n          CREATE TABLE Custom_Engines_Stats (\n            engineId INTEGER,\n            designId INTEGER,\n            partStat INTEGER,\n            unitValue REAL,\n            Value REAL\n          )\n        `\n  }, {\n    name: 'Custom_Save_Config',\n    createSQL: `\n          CREATE TABLE Custom_Save_Config (\n            key TEXT PRIMARY KEY,\n            value TEXT\n          )\n        `\n  }, {\n    name: 'Custom_Engine_Allocations',\n    createSQL: `\n          CREATE TABLE Custom_Engine_Allocations (\n            teamId INTEGER,\n            engineId INTEGER\n            \n          )\n        `\n  }];\n  tablesToCheck.forEach(table => {\n    const tableExists = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        SELECT name\n        FROM sqlite_master\n        WHERE type='table'\n          AND name='${table.name}'\n      `, 'singleValue');\n    if (!tableExists) {\n      (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(table.createSQL);\n      console.log(\"TABLE CREATED: \", table.name);\n      if (table.name === 'Custom_Engines_List') {\n        createdEnginesList = true;\n      } else if (table.name === 'Custom_Engines_Stats') {\n        createdEnginesStats = true;\n      } else if (table.name === 'Custom_Engine_Allocations') {\n        createdEnginesAllocations = true;\n      }\n    }\n  });\n  insertDefualtEnginesData(createdEnginesList, createdEnginesStats, createdEnginesAllocations);\n}\nfunction insertDefualtEnginesData(list, stats, allocations) {\n  const engines = [{\n    id: 1,\n    name: 'Ferrari',\n    stats: [{\n      partStat: 6,\n      value: 500,\n      unitValue: 75,\n      designId: 1\n    }, {\n      partStat: 10,\n      value: 750,\n      unitValue: 95,\n      designId: 1\n    }, {\n      partStat: 11,\n      value: 250,\n      unitValue: 80,\n      designId: 1\n    }, {\n      partStat: 12,\n      value: 500,\n      unitValue: 77.5,\n      designId: 1\n    }, {\n      partStat: 14,\n      value: 400,\n      unitValue: 68,\n      designId: 1\n    }, {\n      partStat: 15,\n      value: 350,\n      unitValue: 57,\n      designId: 2\n    }, {\n      partStat: 15,\n      value: 0,\n      unitValue: 50,\n      designId: 3\n    }]\n  }, {\n    id: 4,\n    name: 'Red Bull',\n    stats: [{\n      partStat: 6,\n      value: 300,\n      unitValue: 65,\n      designId: 4\n    }, {\n      partStat: 10,\n      value: 1000,\n      unitValue: 100,\n      designId: 4\n    }, {\n      partStat: 11,\n      value: 0,\n      unitValue: 85,\n      designId: 4\n    }, {\n      partStat: 12,\n      value: 0,\n      unitValue: 70,\n      designId: 4\n    }, {\n      partStat: 14,\n      value: 0,\n      unitValue: 60,\n      designId: 4\n    }, {\n      partStat: 15,\n      value: 0,\n      unitValue: 50,\n      designId: 5\n    }, {\n      partStat: 15,\n      value: 600,\n      unitValue: 62,\n      designId: 6\n    }]\n  }, {\n    id: 7,\n    name: 'Mercedes',\n    stats: [{\n      partStat: 6,\n      value: 0,\n      unitValue: 50,\n      designId: 7\n    }, {\n      partStat: 10,\n      value: 500,\n      unitValue: 90,\n      designId: 7\n    }, {\n      partStat: 11,\n      value: 1000,\n      unitValue: 65,\n      designId: 7\n    }, {\n      partStat: 12,\n      value: 850,\n      unitValue: 82.75,\n      designId: 7\n    }, {\n      partStat: 14,\n      value: 1000,\n      unitValue: 80,\n      designId: 7\n    }, {\n      partStat: 15,\n      value: 1000,\n      unitValue: 70,\n      designId: 8\n    }, {\n      partStat: 15,\n      value: 1000,\n      unitValue: 70,\n      designId: 9\n    }]\n  }, {\n    id: 10,\n    name: 'Renault',\n    stats: [{\n      partStat: 6,\n      value: 1000,\n      unitValue: 100,\n      designId: 10\n    }, {\n      partStat: 10,\n      value: 0,\n      unitValue: 80,\n      designId: 10\n    }, {\n      partStat: 11,\n      value: 500,\n      unitValue: 75,\n      designId: 10\n    }, {\n      partStat: 12,\n      value: 1000,\n      unitValue: 85,\n      designId: 10\n    }, {\n      partStat: 14,\n      value: 650,\n      unitValue: 73,\n      designId: 10\n    }, {\n      partStat: 15,\n      value: 500,\n      unitValue: 75,\n      designId: 11\n    }, {\n      partStat: 15,\n      value: 1000,\n      unitValue: 100,\n      designId: 12\n    }]\n  }];\n  if (list && stats) {\n    engines.forEach(engine => {\n      (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        INSERT OR REPLACE INTO Custom_Engines_List (engineId, Name)\n        VALUES (${engine.id}, '${engine.name}')\n      `);\n      engine.stats.forEach(stat => {\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n          INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n          VALUES (${engine.id}, ${stat.designId}, ${stat.partStat}, ${stat.value}, ${stat.unitValue})\n        `);\n      });\n    });\n  }\n  if (allocations) {\n    const maxYear = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT MAX(SeasonID) FROM Parts_TeamHistory`, 'singleValue');\n    const actualEngineAllocations = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n      SELECT th.TeamID, em.EngineDesignID\n      FROM Parts_TeamHistory th\n      JOIN Parts_Enum_EngineManufacturers em\n        ON th.EngineManufacturer = em.Value\n      WHERE SeasonID = ${maxYear}`, 'allRows');\n    actualEngineAllocations.forEach(engine => {\n      (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`\n        INSERT OR REPLACE INTO Custom_Engine_Allocations (teamId, engineId)\n        VALUES (${engine[0]}, ${engine[1]})\n      `);\n    });\n  }\n}\nfunction updateCustomEngines(engineData) {\n  for (let engineId in engineData) {\n    const nameCapitalized = engineData[engineId].name.charAt(0).toUpperCase() + engineData[engineId].name.slice(1);\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_List (engineId, Name) VALUES (${engineId}, '${nameCapitalized}')`);\n    for (let stat in engineData[engineId].stats) {\n      const untiValue = engineData[engineId].stats[stat];\n      const value = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[stat](untiValue);\n      if (parseInt(stat) !== 18 && parseInt(stat) !== 19) {\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${engineId}, ${stat}, ${value}, ${untiValue})`);\n      } else if (parseInt(stat) === 18) {\n        let designId = parseInt(engineId) + 1;\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n      } else if (parseInt(stat) === 19) {\n        let designId = parseInt(engineId) + 2;\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n      }\n    }\n    updateTeamsSuppliedByEngine(engineId, engineData[engineId].stats);\n  }\n}\nfunction editEngines(engineData) {\n  for (let engineId in engineData) {\n    for (let stat in engineData[engineId]) {\n      const untiValue = engineData[engineId][stat];\n      const value = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[stat](untiValue);\n      if (parseInt(stat) !== 18 && parseInt(stat) !== 19) {\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${engineId}, ${stat}, ${value}, ${untiValue})`);\n      } else if (parseInt(stat) === 18) {\n        let designId = parseInt(engineId) + 1;\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n      } else if (parseInt(stat) === 19) {\n        let designId = parseInt(engineId) + 2;\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n      }\n    }\n    updateTeamsSuppliedByEngine(engineId, engineData[engineId]);\n  }\n}\nfunction updateTeamsSuppliedByEngine(engineId, stats) {\n  const teamsSupplied = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT teamID FROM Custom_Engine_Allocations WHERE engineId = ${engineId}`, 'allRows');\n  for (let team in teamsSupplied) {\n    const teamEngineId = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${team} AND PartType = 0`, 'singleValue');\n    const teamERSId = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${team} AND PartType = 1`, 'singleValue');\n    const teamGearboxId = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${team} AND PartType = 2`, 'singleValue');\n    for (let stat in stats) {\n      if (parseInt < 18) {\n        const untiValue = stats[stat];\n        const value = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[stat](untiValue);\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${value}, UnitValue = ${untiValue} WHERE DesignID = ${teamEngineId} AND PartStat = ${stat}`);\n      }\n    }\n    const valueERS = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[18](stats[18]);\n    const unitValueERS = stats[18];\n    const valueGearbox = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[19](stats[19]);\n    const unitValueGearbox = stats[19];\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${valueERS}, UnitValue = ${unitValueERS} WHERE DesignID = ${teamERSId} AND PartStat = ${15}`);\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_2__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${valueGearbox}, UnitValue = ${unitValueGearbox} WHERE DesignID = ${teamGearboxId} AND PartStat = ${15}`);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/dbUtils.js?");

/***/ }),

/***/ "?8893":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/crypto_(ignored)?");

/***/ }),

/***/ "?5041":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/fs_(ignored)?");

/***/ }),

/***/ "?c8d5":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/path_(ignored)?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_sql_js_dist_sql-wasm_js"], () => (__webpack_require__("./src/js/backend/commands/worker.js")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = {
/******/ 			"src_js_backend_commands_worker_js": 1
/******/ 		};
/******/ 		
/******/ 		// importScripts chunk loading
/******/ 		var installChunk = (data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			while(chunkIds.length)
/******/ 				installedChunks[chunkIds.pop()] = 1;
/******/ 			parentChunkLoadingFunction(data);
/******/ 		};
/******/ 		__webpack_require__.f.i = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					importScripts(__webpack_require__.p + __webpack_require__.u(chunkId));
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkDatabase_Editor_F1_Manager"] = self["webpackChunkDatabase_Editor_F1_Manager"] || [];
/******/ 		var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);
/******/ 		chunkLoadingGlobal.push = installChunk;
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			return __webpack_require__.e("vendors-node_modules_sql_js_dist_sql-wasm_js").then(next);
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	
/******/ })()
;