/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_frontend_calendar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/frontend/calendar.js */ \"./src/js/frontend/calendar.js\");\n/* harmony import */ var _js_frontend_renderer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/frontend/renderer.js */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _js_frontend_transfers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/frontend/transfers.js */ \"./src/js/frontend/transfers.js\");\n/* harmony import */ var _js_frontend_stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/frontend/stats.js */ \"./src/js/frontend/stats.js\");\n/* harmony import */ var _js_frontend_performance_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/frontend/performance.js */ \"./src/js/frontend/performance.js\");\n/* harmony import */ var _js_frontend_seasonViewer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js/frontend/seasonViewer.js */ \"./src/js/frontend/seasonViewer.js\");\n/* harmony import */ var _js_frontend_head2head_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./js/frontend/head2head.js */ \"./src/js/frontend/head2head.js\");\n/* harmony import */ var _js_frontend_teams_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./js/frontend/teams.js */ \"./src/js/frontend/teams.js\");\n/* harmony import */ var _js_frontend_predictions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./js/frontend/predictions.js */ \"./src/js/frontend/predictions.js\");\n/* harmony import */ var _js_frontend_dragFile_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./js/frontend/dragFile.js */ \"./src/js/frontend/dragFile.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/index.js?");

/***/ }),

/***/ "./src/js/backend/UESaveHandler.js":
/*!*****************************************!*\
  !*** ./src/js/backend/UESaveHandler.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeFileToDatabase: () => (/* binding */ analyzeFileToDatabase),\n/* harmony export */   dump: () => (/* binding */ dump),\n/* harmony export */   parseGvasProps: () => (/* binding */ parseGvasProps),\n/* harmony export */   repack: () => (/* binding */ repack)\n/* harmony export */ });\n/* harmony import */ var _UESaveTool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UESaveTool */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _initSql_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./initSql.js */ \"./src/js/backend/initSql.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pako */ \"./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! file-saver */ \"./node_modules/file-saver/dist/FileSaver.min.js\");\n/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\n\nconst parseGvasProps = Properties => {\n  const careerSaveMetadata = {};\n  const metadataProperty = Properties.Properties.filter(x => x.Name === \"MetaData\")[0];\n  const careerSaveMetadataProperty = metadataProperty.Properties[0];\n  careerSaveMetadataProperty.Properties.forEach(prop => {\n    careerSaveMetadata[prop.Name] = prop.Property || prop.Properties;\n  });\n  return {\n    careerSaveMetadata\n  };\n};\nconst analyzeFileToDatabase = async file => {\n  console.log(\"Analyzing file\", file);\n  if (!window.SQL) return;\n  console.log(\"SQL is available\");\n  return new Promise(resolve => {\n    if (file !== undefined) {\n      console.log(\"FILE IS NOT UNDEFINED\");\n      let reader = new FileReader();\n      reader.onload = async e => {\n        const serial = new _UESaveTool__WEBPACK_IMPORTED_MODULE_0__.Serializer(buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(reader.result));\n        const gvasMeta = new _UESaveTool__WEBPACK_IMPORTED_MODULE_0__.Gvas().deserialize(serial);\n        const {\n          Header,\n          Properties\n        } = gvasMeta;\n        const {\n          SaveGameVersion,\n          EngineVersion\n        } = Header;\n        const {\n          BuildId,\n          Build\n        } = EngineVersion;\n        let version = 0,\n          gameVersion,\n          gameVersionWithBuild;\n        switch (SaveGameVersion) {\n          case 2:\n            version = 2;\n            gameVersion = BuildId.substring(BuildId.indexOf(\"22_\") + 3);\n            gameVersionWithBuild = `${gameVersion}.${Build & 0x7fffffff}`;\n            break;\n          case 3:\n            if (BuildId.indexOf(\"volta23\") !== -1) {\n              version = 3;\n              gameVersion = BuildId.substring(BuildId.indexOf(\"23+\") + 3);\n              gameVersionWithBuild = `${gameVersion}.${Build & 0x7fffffff}`;\n            }\n            if (BuildId.indexOf(\"volta24\") !== -1) {\n              version = 4;\n              gameVersion = BuildId.substring(BuildId.indexOf(\"24+\") + 8);\n              gameVersionWithBuild = `${gameVersion}.${Build & 0x7fffffff}`;\n            }\n            break;\n          default:\n            version = 0;\n        }\n        const unk_zero = serial.readInt32();\n        const total_size = serial.readInt32();\n        const size_1 = serial.readInt32();\n        const size_2 = serial.readInt32();\n        const size_3 = serial.readInt32();\n        const compressedData = serial.read(total_size);\n        const output = pako__WEBPACK_IMPORTED_MODULE_2__[\"default\"].inflate(compressedData);\n        console.log(\"Tamaño comprimido:\", compressedData.length);\n        console.log(\"Tamaño descomprimido:\", output.length);\n        const databaseFile = output.slice(0, size_1);\n        console.log(\"Size_1:\", size_1, \"Size_2:\", size_2, \"Size_3:\", size_3);\n        console.log(\"Sum of sizes:\", size_1 + size_2 + size_3, \"Output length:\", output.length);\n        const text = new TextDecoder().decode(databaseFile.slice(0, 16));\n        console.log(\"Encabezado de la DB:\", text);\n\n        // @ts-ignore\n\n        if (window.db) window.db.close();\n        const db = new window.SQL.Database(databaseFile);\n        window.db = db;\n        const metadata = {\n          filename: file.name,\n          // for in-app\n\n          version,\n          fullBuildId: BuildId,\n          gameVersion,\n          gameVersionWithBuild,\n          databaseFile,\n          gvasMeta,\n          gvasHeader: Header,\n          // read-only\n\n          ...parseGvasProps(Properties),\n          otherDatabases: [{\n            size: size_2,\n            file: output.slice(size_1, size_1 + size_2)\n          }, {\n            size: size_3,\n            file: output.slice(size_1 + size_2, size_1 + size_2 + size_3)\n          }]\n        };\n        if (true) {\n          console.log(db, version, gvasMeta, Header, metadata.careerSaveMetadata);\n          // saveAs(new Blob([metadata.chunk0], {type: \"application/binary\"}), \"chunk0\");\n        }\n        resolve({\n          db,\n          metadata\n        });\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  });\n};\nconst repack = (db, metadata, overwrite = false) => {\n  const db_data = db.export();\n  const db_size = db_data.length;\n  const {\n    otherDatabases,\n    gvasMeta\n  } = metadata;\n  const s1 = otherDatabases[0].size;\n  const s2 = otherDatabases[1].size;\n  const compressedData = new buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer(db_size + s1 + s2);\n  compressedData.set(db_data, 0);\n  compressedData.set(otherDatabases[0].file, db_size);\n  compressedData.set(otherDatabases[1].file, db_size + s1);\n  const compressed = pako__WEBPACK_IMPORTED_MODULE_2__[\"default\"].deflate(compressedData);\n  const compressed_size = compressed.length;\n  const serialized = gvasMeta.serialize();\n  const meta_length = serialized.length;\n  const check = new _UESaveTool__WEBPACK_IMPORTED_MODULE_0__.Gvas().deserialize(new _UESaveTool__WEBPACK_IMPORTED_MODULE_0__.Serializer(buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(serialized)));\n  if (JSON.stringify(gvasMeta) === JSON.stringify(check)) {\n    const finalData = new buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer(meta_length + 16 + compressed_size);\n    finalData.set(serialized, 0);\n    finalData.writeInt32LE(compressed_size, meta_length);\n    finalData.writeInt32LE(db_size, meta_length + 4);\n    finalData.writeInt32LE(s1, meta_length + 8);\n    finalData.writeInt32LE(s2, meta_length + 12);\n    finalData.set(compressed, meta_length + 16);\n    (0,file_saver__WEBPACK_IMPORTED_MODULE_3__.saveAs)(new Blob([finalData], {\n      type: \"application/binary\"\n    }), metadata.filename);\n  } else {\n    alert(\"Savefile Serialization Check failed.\");\n  }\n};\nconst dump = (db, metadata) => {\n  (0,file_saver__WEBPACK_IMPORTED_MODULE_3__.saveAs)(new Blob([db.export()], {\n    type: \"application/vnd.sqlite3\"\n  }), metadata.filename + \".db\");\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveHandler.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/Gvas.js":
/*!*******************************************!*\
  !*** ./src/js/backend/UESaveTool/Gvas.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Gvas: () => (/* binding */ Gvas)\n/* harmony export */ });\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var _GvasHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GvasHeader */ \"./src/js/backend/UESaveTool/GvasHeader.js\");\n/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./properties */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\n\n\nclass Gvas {\n  constructor() {\n    this.Header = new _GvasHeader__WEBPACK_IMPORTED_MODULE_1__.GvasHeader();\n    this.Properties = new _properties__WEBPACK_IMPORTED_MODULE_2__.Tuple();\n  }\n  get Size() {\n    let size = this.Header.Size;\n    size += this.Properties.Size;\n    size += 4;\n    return size;\n  }\n  deserialize(serial) {\n    let format = serial.read(4);\n    if (buffer__WEBPACK_IMPORTED_MODULE_5__.Buffer.compare(buffer__WEBPACK_IMPORTED_MODULE_5__.Buffer.from('GVAS'), format) !== 0) throw Error(`Unexpected header, expected 'GVAS`);\n    this.Header.deserialize(serial);\n    this.Properties.Name = this.Header.SaveGameClassName;\n    this.Properties.deserialize(serial);\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_4__.Serializer.alloc(this.Size);\n    serial.write(this.Header.serialize());\n    serial.write(this.Properties.serialize());\n    serial.seek(4);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_3__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let gvas = new Gvas();\n    gvas.Header = _GvasHeader__WEBPACK_IMPORTED_MODULE_1__.GvasHeader.from(obj.Header);\n    gvas.Properties = _factories__WEBPACK_IMPORTED_MODULE_0__.PropertyFactory.create(obj.Properties);\n    return gvas;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/Gvas.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/GvasHeader.js":
/*!*************************************************!*\
  !*** ./src/js/backend/UESaveTool/GvasHeader.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GvasHeader: () => (/* binding */ GvasHeader)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\nclass GvasHeader {\n  constructor() {\n    this.Format = 'GVAS';\n    this.SaveGameVersion = 0;\n    this.PackageVersion = 0;\n    this.PackageFileVersionUE5 = 0;\n    this.EngineVersion = {\n      Major: 0,\n      Minor: 0,\n      Patch: 0,\n      Build: 0,\n      BuildId: \"\"\n    };\n    this.CustomFormatVersion = 0;\n    this.CustomFormatData = {\n      Count: 0,\n      Entries: []\n    };\n    this.SaveGameClassName = \"\";\n  }\n  get Size() {\n    let size = this.Format.length;\n    size += 18;\n    size += this.EngineVersion.BuildId.length + 1 + 4;\n    if (this.EngineVersion.Major >= 5) {\n      size += 4;\n    }\n    size += 8;\n    this.CustomFormatData.Entries.forEach(guid => {\n      size += guid.Size; // 20\n    });\n    size += this.SaveGameClassName.length + 1 + 4;\n    return size;\n  }\n  deserialize(serial) {\n    /* 5.3: https://github.com/EpicGames/UnrealEngine/blob/5.3/Engine/Source/Runtime/Engine/Private/GameplayStatics.cpp#L85 */\n\n    // FileTypeTag: GVAS\n    this.SaveGameVersion = serial.readInt32();\n    this.PackageVersion = serial.readInt32();\n    if (this.SaveGameVersion >= 3) {\n      this.PackageFileVersionUE5 = serial.readInt32();\n      /* this needs to be larger than 1000 */\n    }\n    /*\r\n        3 means PackageFileSummaryVersionChange, rather than F1M 2023\r\n        https://github.com/EpicGames/UnrealEngine/blob/5.3/Engine/Source/Runtime/Engine/Private/GameplayStatics.cpp#L93\r\n    */\n    this.EngineVersion.Major = serial.readUInt16();\n    this.EngineVersion.Minor = serial.readUInt16();\n    this.EngineVersion.Patch = serial.readUInt16();\n    this.EngineVersion.Build = serial.readUInt32();\n    this.EngineVersion.BuildId = serial.readString();\n    this.CustomFormatVersion = serial.readInt32();\n    this.CustomFormatData.Count = serial.readInt32();\n    for (let i = 0; i < this.CustomFormatData.Count; i++) {\n      let guid = _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Type: 'Guid'\n      });\n      this.CustomFormatData.Entries.push(guid.deserialize(serial));\n    }\n    this.SaveGameClassName = serial.readString();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_2__.Serializer.alloc(this.Size);\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(this.Format));\n    serial.writeInt32(this.SaveGameVersion);\n    serial.writeInt32(this.PackageVersion);\n    if (this.SaveGameVersion >= 3) {\n      serial.writeInt32(this.PackageFileVersionUE5);\n    } // UE 5 for F1M 23\n\n    serial.writeUInt16(this.EngineVersion.Major);\n    serial.writeUInt16(this.EngineVersion.Minor);\n    serial.writeUInt16(this.EngineVersion.Patch);\n    serial.writeUInt32(this.EngineVersion.Build);\n    serial.writeString(this.EngineVersion.BuildId);\n    serial.writeInt32(this.CustomFormatVersion);\n    serial.writeInt32(this.CustomFormatData.Count);\n    this.CustomFormatData.Entries.forEach(guid => serial.write(guid.serialize()));\n    serial.writeString(this.SaveGameClassName);\n    if (serial.tell != this.Size) throw new ___WEBPACK_IMPORTED_MODULE_0__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let header = new GvasHeader();\n    header.SaveGameVersion = obj.SaveGameVersion;\n    header.PackageVersion = obj.PackageVersion;\n    header.EngineVersion = obj.EngineVersion;\n    header.CustomFormatVersion = obj.CustomFormatVersion;\n    header.CustomFormatData.Count = obj.CustomFormatData.Count;\n    obj.CustomFormatData.Entries.forEach(guid => {\n      header.CustomFormatData.Entries.push(_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(guid));\n    });\n    header.SaveGameClassName = obj.SaveGameClassName;\n    return header;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/GvasHeader.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/PropertyErrors.js":
/*!*****************************************************!*\
  !*** ./src/js/backend/UESaveTool/PropertyErrors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeserializationError: () => (/* binding */ DeserializationError),\n/* harmony export */   SerializationError: () => (/* binding */ SerializationError),\n/* harmony export */   TypeNotImplementedError: () => (/* binding */ TypeNotImplementedError)\n/* harmony export */ });\nclass SerializationError extends Error {\n  constructor(prop) {\n    super(`Problem occurred during serialization of Property: ${prop.Name}`);\n  }\n}\nclass DeserializationError extends Error {\n  constructor(type, offset) {\n    super(`Problem occurred during deserialization of Property '${type}' at offset 0x${offset.toString(16)}`);\n  }\n}\nclass TypeNotImplementedError extends Error {\n  constructor(type) {\n    super(`No implementation for Property type: '${type}'`);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/PropertyErrors.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/Serializer.js":
/*!*************************************************!*\
  !*** ./src/js/backend/UESaveTool/Serializer.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializer: () => (/* binding */ Serializer)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\nclass Serializer {\n  constructor(buf) {\n    this._data = buf;\n    this._offset = 0;\n  }\n  get Data() {\n    return this._data;\n  }\n  get tell() {\n    return this._offset;\n  }\n  seek(count) {\n    if (this._offset >= this._data.length) throw new Error(`Reached end of Buffer at offset 0x${this.tell.toString(16)}`);\n    return this._offset += count;\n  }\n  read(count) {\n    return this.Data.slice(this.tell, this.seek(count));\n  }\n  readInt32() {\n    let int = this.Data.readInt32LE(this.tell);\n    this.seek(4);\n    return int;\n  }\n  readUInt32() {\n    let int = this.Data.readUInt32LE(this.tell);\n    this.seek(4);\n    return int;\n  }\n  readInt64() {\n    let int1 = this.Data.readUInt32LE(this.tell);\n    this.seek(4);\n    let int2 = this.Data.readInt32LE(this.tell);\n    this.seek(4);\n    const val = (BigInt(int2) << 32n) + BigInt(int1);\n    if (val > 1n << 52n) {\n      return val.toString();\n    }\n    return Number(val);\n  }\n  readInt16() {\n    let int = this.Data.readInt16LE(this.tell);\n    this.seek(2);\n    return int;\n  }\n  readUInt16() {\n    let int = this.Data.readUInt16LE(this.tell);\n    this.seek(2);\n    return int;\n  }\n  readInt8() {\n    let int = this.Data.readInt8(this.tell);\n    this.seek(1);\n    return int;\n  }\n  readUInt8() {\n    let int = this.Data.readUInt8(this.tell);\n    this.seek(1);\n    return int;\n  }\n  readFloat() {\n    let float = this.Data.readFloatLE(this.tell);\n    this.seek(4);\n    return float;\n  }\n  readString() {\n    let length = this.readInt32();\n    let str = this.read(length - 1).toString('latin1');\n    this.read(1);\n    return str;\n  }\n  readUnicodeString() {\n    let length = this.readInt32();\n    if (length < 0) {\n      let str = this.read(-length * 2 - 2).toString('utf16le');\n      this.read(2);\n      return [str, \"utf16le\"];\n    } else {\n      let str = this.read(length - 1).toString('latin1');\n      this.read(1);\n      return [str, \"latin1\"];\n    }\n  }\n  write(buf) {\n    this._offset += buf.copy(this.Data, this.tell);\n  }\n  writeInt64(num) {\n    let bi = BigInt.asIntN(64, BigInt(num));\n    let high = Number(bi >> 32n);\n    let low = Number(bi & (1n << 32n) - 1n);\n    this._offset = this.Data.writeUInt32LE(low, this.tell);\n    this._offset = this.Data.writeInt32LE(high, this.tell);\n    // TODO: this._offset = this.Data.writeBigInt64LE(num, this.tell);\n  }\n  writeUInt32(num) {\n    this._offset = this.Data.writeUInt32LE(num, this.tell);\n  }\n  writeInt32(num) {\n    this._offset = this.Data.writeInt32LE(num, this.tell);\n  }\n  writeUInt16(num) {\n    this._offset = this.Data.writeUInt16LE(num, this.tell);\n  }\n  writeInt16(num) {\n    this._offset = this.Data.writeInt16LE(num, this.tell);\n  }\n  writeUInt8(byte) {\n    this._offset = this.Data.writeUInt8(byte, this.tell);\n  }\n  writeInt8(byte) {\n    this._offset = this.Data.writeInt8(byte, this.tell);\n  }\n  writeFloat(num) {\n    this._offset = this.Data.writeFloatLE(num, this.tell);\n  }\n  writeString(str) {\n    this._offset = this.Data.writeInt32LE(str.length + 1, this.tell);\n    this._offset += this.Data.write(str, this.tell);\n    this._offset = this.Data.writeInt8(0, this.tell);\n  }\n  writeUTF16String(str) {\n    this._offset += this.Data.write(str + \"\\0\", this.tell, \"utf16le\");\n  }\n  writeLatin1String(str) {\n    this._offset += this.Data.write(str + \"\\0\", this.tell, \"latin1\");\n  }\n  append(buf) {\n    this._data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([this.Data, buf]);\n    this._offset += buf.length;\n  }\n  static alloc(size) {\n    return new Serializer(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size));\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/Serializer.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/arrays/IntArray.js":
/*!******************************************************!*\
  !*** ./src/js/backend/UESaveTool/arrays/IntArray.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntArray: () => (/* binding */ IntArray)\n/* harmony export */ });\n/* harmony import */ var _properties___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../properties/ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\n\nclass IntArray extends _properties___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Type = \"IntProperty\";\n    this.Properties = [];\n  }\n  get Size() {\n    let size = this.Properties.length * 4;\n    this.Properties.forEach(int => {\n      size += int.Size;\n    });\n    return size;\n  }\n  get Count() {\n    return this.Properties.length;\n  }\n  deserialize(serial, count) {\n    serial.seek(count * 4);\n    for (let i = 1; i < count; i++) {\n      let Name = serial.readString();\n      let Type = serial.readString();\n      let Size = serial.readInt32();\n      let prop = _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Name,\n        Type\n      });\n      prop.deserialize(serial);\n      this.Properties.push(prop);\n    }\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_3__.Serializer.alloc(this.Size);\n    serial.seek(this.Count * 4);\n    this.Properties.forEach(int => serial.write(int.serialize()));\n    if (serial.tell !== this.Size) throw new ___WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let array = new IntArray();\n    if (obj.Properties !== undefined) obj.Properties.forEach(int => array.Properties.push(_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(int)));\n    return array;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/arrays/IntArray.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/arrays/SoftObjectArray.js":
/*!*************************************************************!*\
  !*** ./src/js/backend/UESaveTool/arrays/SoftObjectArray.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoftObjectArray: () => (/* binding */ SoftObjectArray)\n/* harmony export */ });\n/* harmony import */ var _properties___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../properties/ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\nclass SoftObjectArray extends _properties___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Type = \"SoftObjectProperty\";\n    this.Properties = [];\n  }\n  get Size() {\n    let size = 0;\n    this.Properties.forEach(str => {\n      size += str.length + 1 + 4;\n      size += 4;\n    });\n    return size;\n  }\n  get Count() {\n    return this.Properties.length;\n  }\n  deserialize(serial, count) {\n    for (let i = 0; i < count; i++) {\n      this.Properties.push(serial.readString());\n      serial.seek(4);\n    }\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_2__.Serializer.alloc(this.Size);\n    this.Properties.forEach(str => {\n      serial.writeString(str);\n      serial.seek(4);\n    });\n    if (serial.tell !== this.Size) throw new ___WEBPACK_IMPORTED_MODULE_1__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let array = new SoftObjectArray();\n    if (obj.Properties !== undefined) array.Properties = obj.Properties;\n    return array;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/arrays/SoftObjectArray.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/arrays/StructArray.js":
/*!*********************************************************!*\
  !*** ./src/js/backend/UESaveTool/arrays/StructArray.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StructArray: () => (/* binding */ StructArray)\n/* harmony export */ });\n/* harmony import */ var _properties_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../properties/index.js */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"./src/js/backend/UESaveTool/index.js\");\n\n\nclass StructArray extends _properties_index_js__WEBPACK_IMPORTED_MODULE_0__.StructProperty {\n  deserialize(serial, count) {\n    // console.log(`Deserializing ${this.Name} Count: ${count}`)\n    this.Name = serial.readString();\n    this.Type = serial.readString();\n    let Size = serial.readInt32();\n    serial.seek(4);\n    this.StoredPropertyType = serial.readString();\n    serial.seek(17);\n    let i = 0;\n    while (i < count) {\n      let Name = this.StoredPropertyType;\n      let Type = 'Tuple';\n      let prop = _index_js__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Name,\n        Type\n      });\n      prop.deserialize(serial);\n      this.Properties.push(prop);\n      i++;\n    }\n    // console.log(`Done Deserializing ${this.Name} Offset: ${serial.tell}`)\n    return this;\n  }\n  static from(obj) {\n    let struct = new StructArray();\n    struct.Name = obj.Name;\n    struct.Type = obj.Type;\n    struct.StoredPropertyType = obj.StoredPropertyType;\n    struct.Properties = [];\n    if (obj.Properties !== undefined) obj.Properties.forEach(prop => struct.Properties.push(_index_js__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(prop)));\n    return struct;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/arrays/StructArray.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/arrays/index.js":
/*!***************************************************!*\
  !*** ./src/js/backend/UESaveTool/arrays/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntArray: () => (/* reexport safe */ _IntArray__WEBPACK_IMPORTED_MODULE_0__.IntArray),\n/* harmony export */   SoftObjectArray: () => (/* reexport safe */ _SoftObjectArray__WEBPACK_IMPORTED_MODULE_1__.SoftObjectArray),\n/* harmony export */   StructArray: () => (/* reexport safe */ _arrays_StructArray__WEBPACK_IMPORTED_MODULE_2__.StructArray)\n/* harmony export */ });\n/* harmony import */ var _IntArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IntArray */ \"./src/js/backend/UESaveTool/arrays/IntArray.js\");\n/* harmony import */ var _SoftObjectArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SoftObjectArray */ \"./src/js/backend/UESaveTool/arrays/SoftObjectArray.js\");\n/* harmony import */ var _arrays_StructArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../arrays/StructArray */ \"./src/js/backend/UESaveTool/arrays/StructArray.js\");\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/arrays/index.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/factories.js":
/*!************************************************!*\
  !*** ./src/js/backend/UESaveTool/factories.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PropertyFactory: () => (/* binding */ PropertyFactory)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"./src/js/backend/UESaveTool/index.js\");\n\nclass Factory {\n  constructor() {\n    this.Properties = {};\n    this.Arrays = {};\n  }\n  create(obj) {\n    let type = obj.Type;\n    if (this.Properties[type] === undefined) throw new _index__WEBPACK_IMPORTED_MODULE_0__.TypeNotImplementedError(type);\n    return this.Properties[type].from(obj);\n  }\n  createArray(obj) {\n    let type = obj.Type;\n    if (this.Arrays[type] === undefined) throw new _index__WEBPACK_IMPORTED_MODULE_0__.TypeNotImplementedError(type);\n    return this.Arrays[type].from(obj);\n  }\n}\nconst PropertyFactory = new Factory();\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/factories.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/index.js":
/*!********************************************!*\
  !*** ./src/js/backend/UESaveTool/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.ArrayProperty),\n/* harmony export */   BoolProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.BoolProperty),\n/* harmony export */   DeserializationError: () => (/* reexport safe */ _PropertyErrors__WEBPACK_IMPORTED_MODULE_6__.DeserializationError),\n/* harmony export */   EnumProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.EnumProperty),\n/* harmony export */   FloatProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.FloatProperty),\n/* harmony export */   Guid: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Guid),\n/* harmony export */   Gvas: () => (/* reexport safe */ _Gvas__WEBPACK_IMPORTED_MODULE_3__.Gvas),\n/* harmony export */   GvasHeader: () => (/* reexport safe */ _GvasHeader__WEBPACK_IMPORTED_MODULE_4__.GvasHeader),\n/* harmony export */   Int16Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Int16Property),\n/* harmony export */   Int64Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Int64Property),\n/* harmony export */   Int8Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Int8Property),\n/* harmony export */   IntArray: () => (/* reexport safe */ _arrays__WEBPACK_IMPORTED_MODULE_0__.IntArray),\n/* harmony export */   IntProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.IntProperty),\n/* harmony export */   ObjectProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.ObjectProperty),\n/* harmony export */   Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Property),\n/* harmony export */   PropertyFactory: () => (/* reexport safe */ _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory),\n/* harmony export */   SerializationError: () => (/* reexport safe */ _PropertyErrors__WEBPACK_IMPORTED_MODULE_6__.SerializationError),\n/* harmony export */   Serializer: () => (/* reexport safe */ _Serializer__WEBPACK_IMPORTED_MODULE_5__.Serializer),\n/* harmony export */   SoftObjectArray: () => (/* reexport safe */ _arrays__WEBPACK_IMPORTED_MODULE_0__.SoftObjectArray),\n/* harmony export */   SoftObjectProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.SoftObjectProperty),\n/* harmony export */   StrProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.StrProperty),\n/* harmony export */   StructArray: () => (/* reexport safe */ _arrays__WEBPACK_IMPORTED_MODULE_0__.StructArray),\n/* harmony export */   StructProperty: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.StructProperty),\n/* harmony export */   Tuple: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.Tuple),\n/* harmony export */   TypeNotImplementedError: () => (/* reexport safe */ _PropertyErrors__WEBPACK_IMPORTED_MODULE_6__.TypeNotImplementedError),\n/* harmony export */   UInt32Property: () => (/* reexport safe */ _properties__WEBPACK_IMPORTED_MODULE_2__.UInt32Property)\n/* harmony export */ });\n/* harmony import */ var _arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays */ \"./src/js/backend/UESaveTool/arrays/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./properties */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _Gvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Gvas */ \"./src/js/backend/UESaveTool/Gvas.js\");\n/* harmony import */ var _GvasHeader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GvasHeader */ \"./src/js/backend/UESaveTool/GvasHeader.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['ArrayProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.ArrayProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['BoolProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.BoolProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['EnumProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.EnumProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['FloatProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.FloatProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['IntProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.IntProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['UInt32Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.UInt32Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Int64Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Int64Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['UInt64Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Int64Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Int8Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Int8Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Int16Property'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Int16Property;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['ObjectProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.ObjectProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['SoftObjectProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.SoftObjectProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['StrProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.StrProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['StructProperty'] = _properties__WEBPACK_IMPORTED_MODULE_2__.StructProperty;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Tuple'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Tuple;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Properties['Guid'] = _properties__WEBPACK_IMPORTED_MODULE_2__.Guid;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['IntArray'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.IntArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['SoftObjectArray'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.SoftObjectArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['StructProperty'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.StructArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['IntProperty'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.IntArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['IntProperty'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.IntArray;\n_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.Arrays['SoftObjectProperty'] = _arrays__WEBPACK_IMPORTED_MODULE_0__.SoftObjectArray;\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/index.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/ArrayProperty.js":
/*!***************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/ArrayProperty.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayProperty: () => (/* binding */ ArrayProperty)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\n\n\nclass ArrayProperty extends ___WEBPACK_IMPORTED_MODULE_1__.Property {\n  constructor() {\n    super();\n    this.StoredPropertyType = \"\";\n    this.Property = new ___WEBPACK_IMPORTED_MODULE_1__.Property();\n  }\n  get Size() {\n    let size = 0;\n    size += this.Name.length + 1 + 4;\n    size += this.Type.length + 1 + 4;\n    size += 8; // 4 byte size + 4 byte padding\n    size += this.StoredPropertyType.length + 1 + 4;\n    size += 5; // 1 byte padding + 2 byte int + 2 byte padding\n    size += this.Property.Size;\n    return size;\n  }\n  get HeaderSize() {\n    let size = this.Name.length + 1 + 4;\n    size += this.Type.length + 1 + 4;\n    size += 8;\n    size += this.StoredPropertyType.length + 1 + 4;\n    size += 1;\n    return size;\n  }\n  get ArraySize() {\n    if (this.StoredPropertyType === 'IntProperty') return 12;else return this.Size - this.HeaderSize;\n  }\n  deserialize(serial) {\n    serial.seek(4);\n    this.StoredPropertyType = serial.readString();\n    serial.seek(1);\n    let count = serial.readInt16();\n    serial.seek(2);\n    this.Property = _factories__WEBPACK_IMPORTED_MODULE_2__.PropertyFactory.createArray({\n      Name: this.Name,\n      Type: this.StoredPropertyType\n    });\n    this.Property.deserialize(serial, count);\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_4__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.ArraySize);\n    serial.seek(4);\n    serial.writeString(this.StoredPropertyType);\n    serial.seek(1);\n    serial.writeInt16(this.Property.Count);\n    serial.seek(2);\n    serial.write(this.Property.serialize());\n    if (serial.tell !== this.Size) throw new ___WEBPACK_IMPORTED_MODULE_3__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let array = new ArrayProperty();\n    array.Name = obj.Name;\n    array.Type = obj.Type;\n    array.StoredPropertyType = obj.StoredPropertyType;\n    if (obj.Property !== undefined) array.Property = _factories__WEBPACK_IMPORTED_MODULE_2__.PropertyFactory.createArray(obj.Property);\n    return array;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/ArrayProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/BoolProperty.js":
/*!**************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/BoolProperty.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BoolProperty: () => (/* binding */ BoolProperty)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass BoolProperty extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = false;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 10;\n  }\n  deserialize(serial) {\n    serial.seek(4);\n    this.Property = serial.readUInt8() === 1;\n    serial.seek(1);\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.seek(8);\n    serial.writeUInt8(this.Property === true ? 1 : 0);\n    serial.seek(1);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new BoolProperty();\n    obj.Property = !!obj.Property;\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/BoolProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/EnumProperty.js":
/*!**************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/EnumProperty.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnumProperty: () => (/* binding */ EnumProperty)\n/* harmony export */ });\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! . */ \"./src/js/backend/UESaveTool/properties/index.js\");\n\n\n\nclass EnumProperty extends ___WEBPACK_IMPORTED_MODULE_2__.Property {\n  constructor() {\n    super();\n    this.EnumType = \"\";\n    this.Property = \"\";\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + this.Property.length + 1 + 4 + this.EnumType.length + 1 + 4 + 9;\n  }\n  deserialize(serial) {\n    serial.seek(4);\n    this.EnumType = serial.readString();\n    serial.seek(1);\n    this.Property = serial.readString();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_0__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.Property.length + 1 + 4);\n    serial.seek(4);\n    serial.writeString(this.EnumType);\n    serial.seek(1);\n    serial.writeString(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new EnumProperty();\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/EnumProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/FloatProperty.js":
/*!***************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/FloatProperty.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FloatProperty: () => (/* binding */ FloatProperty)\n/* harmony export */ });\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n\n\n\nclass FloatProperty extends ___WEBPACK_IMPORTED_MODULE_2__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 13;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readFloat();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_0__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeFloat(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new FloatProperty();\n    obj.Property = Number(obj.Property);\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/FloatProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Guid.js":
/*!******************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Guid.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Guid: () => (/* binding */ Guid)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\n\nclass Guid extends ___WEBPACK_IMPORTED_MODULE_1__.Property {\n  constructor() {\n    super();\n    this.Type = 'Guid';\n    this.Id = \"00000000-00-00-00-000000000000\";\n    this.Value = 0;\n  }\n  get Size() {\n    return 20;\n  }\n  deserialize(serial) {\n    this.Id = `${serial.read(4).swap32().toString('hex')}`;\n    this.Id += `-${serial.read(2).swap16().toString('hex')}`;\n    this.Id += `-${serial.read(2).swap16().toString('hex')}`;\n    this.Id += `-${serial.read(2).toString('hex')}`;\n    this.Id += `-${serial.read(6).toString('hex')}`;\n    this.Value = serial.readInt32();\n    return this;\n  }\n  serialize() {\n    let guid = this.Id.split('-');\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_3__.Serializer.alloc(this.Size);\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[0], 'hex').swap32());\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[1], 'hex').swap16());\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[2], 'hex').swap16());\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[3], 'hex'));\n    serial.write(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(guid[4], 'hex'));\n    serial.writeInt32(this.Value);\n    if (serial.tell !== 20) throw new ___WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let guid = new Guid();\n    guid.Id = obj.Id;\n    guid.Value = obj.Value;\n    return guid;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Guid.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Int16Property.js":
/*!***************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Int16Property.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Int16Property: () => (/* binding */ Int16Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass Int16Property extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 2;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readInt16();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeInt16(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new Int16Property();\n    obj.Property = obj.Property || 0;\n    const lb = -1 << 15;\n    const ub = (1 << 15) - 1;\n    if (obj.Property > ub || obj.Property < lb) {\n      throw Error(`${obj.Name} = ${obj.Property} out of range [${lb}, ${ub}]`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Int16Property.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Int64Property.js":
/*!***************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Int64Property.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Int64Property: () => (/* binding */ Int64Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass Int64Property extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0n;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 8;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readInt64();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeInt64(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new Int64Property();\n    let bi = 0n;\n    try {\n      bi = BigInt(obj.Property || 0);\n      const lb = -1n << 64n;\n      const ub = (1n << 63n) - 1n;\n      if (bi > ub || bi < lb) {\n        throw Error(`out of range [${lb}, ${ub}]`);\n      }\n      const doubleVal = Number(obj.Property);\n      if (Math.abs(doubleVal) >= 2 ** 53) {\n        obj.Property = BigInt(obj.Property).toString();\n      } else {\n        obj.Property = Number(obj.Property);\n      }\n    } catch (e) {\n      throw Error(`${obj.Name} = ${obj.Property}: ${e.toString()}`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Int64Property.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Int8Property.js":
/*!**************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Int8Property.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Int8Property: () => (/* binding */ Int8Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass Int8Property extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 1;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readInt8();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeInt8(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new Int8Property();\n    obj.Property = obj.Property || 0;\n    const lb = -128;\n    const ub = 127;\n    if (obj.Property > ub || obj.Property < lb) {\n      throw Error(`${obj.Name} = ${obj.Property} out of range [${lb}, ${ub}]`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Int8Property.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/IntProperty.js":
/*!*************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/IntProperty.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntProperty: () => (/* binding */ IntProperty),\n/* harmony export */   UInt32Property: () => (/* binding */ UInt32Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n\n\n\nclass IntProperty extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 4;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readInt32();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeInt32(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new IntProperty();\n    obj.Property = obj.Property || 0;\n    const lb = -1 << 31;\n    const ub = 0x7fffffff;\n    if (obj.Property > ub || obj.Property < lb) {\n      throw Error(`${obj.Name} = ${obj.Property} out of range [${lb}, ${ub}]`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\nclass UInt32Property extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Property = 0;\n    this.Index = 0;\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + 9 + 4;\n  }\n  deserialize(serial) {\n    this.Index = serial.readInt32();\n    serial.seek(1);\n    this.Property = serial.readUInt32();\n    return this;\n  }\n  serialize() {\n    let serial = ___WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(4);\n    serial.writeInt32(this.Index);\n    serial.seek(1);\n    serial.writeUInt32(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new IntProperty();\n    obj.Property = obj.Property || 0;\n    const lb = 0;\n    const ub = 0xffffffff;\n    if (obj.Property > ub || obj.Property < lb) {\n      throw Error(`${obj.Name} = ${obj.Property} out of range [${lb}, ${ub}]`);\n    }\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/IntProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/ObjectProperty.js":
/*!****************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/ObjectProperty.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectProperty: () => (/* binding */ ObjectProperty)\n/* harmony export */ });\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n\n\n\nclass ObjectProperty extends ___WEBPACK_IMPORTED_MODULE_2__.Property {\n  constructor() {\n    super();\n    this.Property = \"\";\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + this.Property.length + 1 + 4 + 9;\n  }\n  deserialize(serial) {\n    serial.seek(5);\n    this.Property = serial.readString();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_0__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.Property.length + 1 + 4);\n    serial.seek(5);\n    serial.writeString(this.Property);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_1__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new ObjectProperty();\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/ObjectProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Property.js":
/*!**********************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Property.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Property: () => (/* binding */ Property)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ */ \"./src/js/backend/UESaveTool/index.js\");\n\nclass Property {\n  constructor() {\n    this.Name = \"\";\n    this.Type = \"\";\n  }\n  /**\r\n   * Per-property byte size getter\r\n   * @returns {Number} `Size` in bytes of all attributes and properties held by this property to be serialized\r\n   */\n  get Size() {\n    throw new Error(`Size getter not implemented for property: ${this.Type}`);\n  }\n  /**\r\n   * Per-property deserialization function\r\n   * @param {Serializer} serial Serializer instance used to read a buffer\r\n   * @param {Number} size Size in bytes or Count of elements for Arrays\r\n   * @returns {Property} Returns `this` instance\r\n   */\n  deserialize(serial, size) {\n    throw new Error(`Deserialization not implemented for property: ${this.Type}`);\n  }\n  /**\r\n   * Per-property serialization function\r\n   * @returns {Buffer} Returns a `Buffer` of the serialized data\r\n   */\n  serialize() {\n    throw new Error(`Serialization not implemented for property: ${this.Type}`);\n  }\n  /**\r\n   * Factory function for a `Property` type. This should instantiate a `new Property` with default values if not given in the `json`\r\n   * @param {Object} json Template from which to create a new instance of a `Property`\r\n   */\n  static from(json) {\n    throw new Error(`from() not implemented for property: ${this.Type}`);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Property.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/SoftObjectProperty.js":
/*!********************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/SoftObjectProperty.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoftObjectProperty: () => (/* binding */ SoftObjectProperty)\n/* harmony export */ });\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\nclass SoftObjectProperty extends ___WEBPACK_IMPORTED_MODULE_1__.Property {\n  constructor() {\n    super();\n    this.Property = \"\";\n  }\n  get Size() {\n    return this.Name.length + 1 + 4 + this.Type.length + 1 + 4 + this.Property.length + 1 + 4 + 13;\n  }\n  deserialize(serial) {\n    serial.seek(5);\n    this.Property = serial.readString();\n    serial.seek(4);\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_2__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.Property.length + 8);\n    serial.seek(5);\n    serial.writeString(this.Property);\n    serial.seek(4);\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_0__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new SoftObjectProperty();\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/SoftObjectProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/StrProperty.js":
/*!*************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/StrProperty.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StrProperty: () => (/* binding */ StrProperty)\n/* harmony export */ });\n/* harmony import */ var _PropertyErrors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../PropertyErrors */ \"./src/js/backend/UESaveTool/PropertyErrors.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\nconst is8Bit = string => /^[\\x00-\\xFF]*$/.test(string);\nclass StrProperty extends ___WEBPACK_IMPORTED_MODULE_2__.Property {\n  constructor() {\n    super();\n    this.Property = \"\";\n  }\n  get Encoding() {\n    return is8Bit(this.Property) ? \"latin1\" : \"utf16le\";\n  }\n  get StringEncodedLength() {\n    return buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(this.Property + \"\\0\", this.Encoding).length;\n  }\n  get Size() {\n    const baseLength = this.Name.length + 1 + 4 + this.Type.length + 1 + 4;\n    return baseLength + this.StringEncodedLength + 4 + 9;\n  }\n  deserialize(serial) {\n    serial.seek(5);\n    [this.Property] = serial.readUnicodeString();\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_1__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.StringEncodedLength + 4);\n    serial.seek(5);\n    switch (this.Encoding) {\n      case \"latin1\":\n        serial.writeInt32(this.StringEncodedLength);\n        serial.writeLatin1String(this.Property);\n        break;\n      case \"utf16le\":\n        serial.writeInt32(-(this.StringEncodedLength / 2));\n        serial.writeUTF16String(this.Property);\n        break;\n    }\n    if (serial.tell !== this.Size) throw new _PropertyErrors__WEBPACK_IMPORTED_MODULE_0__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let prop = new StrProperty();\n    Object.assign(prop, obj);\n    return prop;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/StrProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/StructProperty.js":
/*!****************************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/StructProperty.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StructProperty: () => (/* binding */ StructProperty)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\nclass StructProperty extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.StoredPropertyType = \"\";\n    this.Properties = [];\n  }\n  get Size() {\n    let size = this.Name.length + 1 + 4;\n    size += this.Type.length + 1 + 4;\n    size += 8; // 4 byte size + 4 byte padding\n    size += this.StoredPropertyType.length + 1 + 4;\n    size += 17; // 17 byte padding\n    for (let i = 0; i < this.Properties.length; i++) {\n      size += this.Properties[i].Size;\n    }\n    return size;\n  }\n  get HeaderSize() {\n    let size = this.Name.length + 1 + 4;\n    size += this.Type.length + 1 + 4;\n    size += 8;\n    size += this.StoredPropertyType.length + 1 + 4;\n    size += 17;\n    return size;\n  }\n  get Count() {\n    return this.Properties.length;\n  }\n  deserialize(serial, size) {\n    // console.log(`Deserializing ${this.Name} Size: ${size}`)\n    serial.seek(4);\n    this.StoredPropertyType = serial.readString();\n    serial.seek(17);\n    let end = serial.tell + size;\n    let i = 0;\n    while (serial.tell < end) {\n      let Name = this.StoredPropertyType;\n      let Type = 'Tuple';\n      let prop = _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Name,\n        Type\n      });\n      prop.deserialize(serial);\n      this.Properties.push(prop);\n      i++;\n    }\n    // console.log(`Done Deserializing ${this.Name} Offset: ${serial.tell}`)\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_2__.Serializer.alloc(this.Size);\n    serial.writeString(this.Name);\n    serial.writeString(this.Type);\n    serial.writeInt32(this.Size - this.HeaderSize);\n    serial.seek(4);\n    serial.writeString(this.StoredPropertyType);\n    serial.seek(17);\n    for (let i = 0; i < this.Properties.length; i++) {\n      serial.write(this.Properties[i].serialize());\n    }\n    if (serial.tell !== this.Size) throw new SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let struct = new StructProperty();\n    struct.Name = obj.Name;\n    struct.Type = obj.Type;\n    struct.StoredPropertyType = obj.StoredPropertyType;\n    struct.Properties = [];\n    if (obj.Properties !== undefined) obj.Properties.forEach(prop => struct.Properties.push(_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(prop)));\n    return struct;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/StructProperty.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/Tuple.js":
/*!*******************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/Tuple.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tuple: () => (/* binding */ Tuple)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ \"./src/js/backend/UESaveTool/properties/index.js\");\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factories */ \"./src/js/backend/UESaveTool/factories.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! .. */ \"./src/js/backend/UESaveTool/index.js\");\n/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Serializer */ \"./src/js/backend/UESaveTool/Serializer.js\");\n\n\n\n\nclass Tuple extends ___WEBPACK_IMPORTED_MODULE_0__.Property {\n  constructor() {\n    super();\n    this.Type = 'Tuple';\n    this.Properties = [];\n  }\n  get Size() {\n    let size = 0;\n    for (let i = 0; i < this.Properties.length; i++) {\n      size += this.Properties[i].Size;\n    }\n    size += 9;\n    return size;\n  }\n  get Count() {\n    return this.Properties.length;\n  }\n  deserialize(serial) {\n    let Name;\n    while ((Name = serial.readString()) !== 'None') {\n      let Type = serial.readString();\n      let Size = serial.readInt32();\n      let prop = _factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create({\n        Name,\n        Type\n      });\n      prop.deserialize(serial, Size);\n      this.Properties.push(prop);\n    }\n    return this;\n  }\n  serialize() {\n    let serial = _Serializer__WEBPACK_IMPORTED_MODULE_3__.Serializer.alloc(this.Size);\n    for (let i = 0; i < this.Properties.length; i++) {\n      serial.write(this.Properties[i].serialize());\n    }\n    serial.writeString('None');\n    if (serial.tell !== this.Size) throw new ___WEBPACK_IMPORTED_MODULE_2__.SerializationError(this);\n    return serial.Data;\n  }\n  static from(obj) {\n    let tuple = new Tuple();\n    tuple.Name = obj.Name;\n    if (obj.Properties !== undefined) obj.Properties.forEach(prop => tuple.Properties.push(_factories__WEBPACK_IMPORTED_MODULE_1__.PropertyFactory.create(prop)));\n    return tuple;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/Tuple.js?");

/***/ }),

/***/ "./src/js/backend/UESaveTool/properties/index.js":
/*!*******************************************************!*\
  !*** ./src/js/backend/UESaveTool/properties/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayProperty: () => (/* reexport safe */ _ArrayProperty__WEBPACK_IMPORTED_MODULE_11__.ArrayProperty),\n/* harmony export */   BoolProperty: () => (/* reexport safe */ _BoolProperty__WEBPACK_IMPORTED_MODULE_1__.BoolProperty),\n/* harmony export */   EnumProperty: () => (/* reexport safe */ _EnumProperty__WEBPACK_IMPORTED_MODULE_12__.EnumProperty),\n/* harmony export */   FloatProperty: () => (/* reexport safe */ _FloatProperty__WEBPACK_IMPORTED_MODULE_6__.FloatProperty),\n/* harmony export */   Guid: () => (/* reexport safe */ _Guid__WEBPACK_IMPORTED_MODULE_14__.Guid),\n/* harmony export */   Int16Property: () => (/* reexport safe */ _Int16Property__WEBPACK_IMPORTED_MODULE_4__.Int16Property),\n/* harmony export */   Int64Property: () => (/* reexport safe */ _Int64Property__WEBPACK_IMPORTED_MODULE_5__.Int64Property),\n/* harmony export */   Int8Property: () => (/* reexport safe */ _Int8Property__WEBPACK_IMPORTED_MODULE_3__.Int8Property),\n/* harmony export */   IntProperty: () => (/* reexport safe */ _IntProperty__WEBPACK_IMPORTED_MODULE_2__.IntProperty),\n/* harmony export */   ObjectProperty: () => (/* reexport safe */ _ObjectProperty__WEBPACK_IMPORTED_MODULE_8__.ObjectProperty),\n/* harmony export */   Property: () => (/* reexport safe */ _Property__WEBPACK_IMPORTED_MODULE_0__.Property),\n/* harmony export */   SoftObjectProperty: () => (/* reexport safe */ _SoftObjectProperty__WEBPACK_IMPORTED_MODULE_9__.SoftObjectProperty),\n/* harmony export */   StrProperty: () => (/* reexport safe */ _StrProperty__WEBPACK_IMPORTED_MODULE_7__.StrProperty),\n/* harmony export */   StructProperty: () => (/* reexport safe */ _StructProperty__WEBPACK_IMPORTED_MODULE_10__.StructProperty),\n/* harmony export */   Tuple: () => (/* reexport safe */ _Tuple__WEBPACK_IMPORTED_MODULE_13__.Tuple),\n/* harmony export */   UInt32Property: () => (/* reexport safe */ _IntProperty__WEBPACK_IMPORTED_MODULE_2__.UInt32Property)\n/* harmony export */ });\n/* harmony import */ var _Property__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Property */ \"./src/js/backend/UESaveTool/properties/Property.js\");\n/* harmony import */ var _BoolProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BoolProperty */ \"./src/js/backend/UESaveTool/properties/BoolProperty.js\");\n/* harmony import */ var _IntProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IntProperty */ \"./src/js/backend/UESaveTool/properties/IntProperty.js\");\n/* harmony import */ var _Int8Property__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Int8Property */ \"./src/js/backend/UESaveTool/properties/Int8Property.js\");\n/* harmony import */ var _Int16Property__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Int16Property */ \"./src/js/backend/UESaveTool/properties/Int16Property.js\");\n/* harmony import */ var _Int64Property__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Int64Property */ \"./src/js/backend/UESaveTool/properties/Int64Property.js\");\n/* harmony import */ var _FloatProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FloatProperty */ \"./src/js/backend/UESaveTool/properties/FloatProperty.js\");\n/* harmony import */ var _StrProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./StrProperty */ \"./src/js/backend/UESaveTool/properties/StrProperty.js\");\n/* harmony import */ var _ObjectProperty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ObjectProperty */ \"./src/js/backend/UESaveTool/properties/ObjectProperty.js\");\n/* harmony import */ var _SoftObjectProperty__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SoftObjectProperty */ \"./src/js/backend/UESaveTool/properties/SoftObjectProperty.js\");\n/* harmony import */ var _StructProperty__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./StructProperty */ \"./src/js/backend/UESaveTool/properties/StructProperty.js\");\n/* harmony import */ var _ArrayProperty__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ArrayProperty */ \"./src/js/backend/UESaveTool/properties/ArrayProperty.js\");\n/* harmony import */ var _EnumProperty__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./EnumProperty */ \"./src/js/backend/UESaveTool/properties/EnumProperty.js\");\n/* harmony import */ var _Tuple__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Tuple */ \"./src/js/backend/UESaveTool/properties/Tuple.js\");\n/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Guid */ \"./src/js/backend/UESaveTool/properties/Guid.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/UESaveTool/properties/index.js?");

/***/ }),

/***/ "./src/js/backend/commandFactory.js":
/*!******************************************!*\
  !*** ./src/js/backend/commandFactory.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandFactory: () => (/* binding */ CommandFactory)\n/* harmony export */ });\n/* harmony import */ var _commands_saveSelected_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commands/saveSelected.js */ \"./src/js/backend/commands/saveSelected.js\");\n/* harmony import */ var _commands_performanceRequest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands/performanceRequest.js */ \"./src/js/backend/commands/performanceRequest.js\");\n/* harmony import */ var _commands_partRequest_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands/partRequest.js */ \"./src/js/backend/commands/partRequest.js\");\n/* harmony import */ var _commands_driverRequest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commands/driverRequest.js */ \"./src/js/backend/commands/driverRequest.js\");\n/* harmony import */ var _commands_editPerformance_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commands/editPerformance.js */ \"./src/js/backend/commands/editPerformance.js\");\n/* harmony import */ var _commands_yearSelectedH2H_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commands/yearSelectedH2H.js */ \"./src/js/backend/commands/yearSelectedH2H.js\");\n/* harmony import */ var _commands_configuredH2H_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commands/configuredH2H.js */ \"./src/js/backend/commands/configuredH2H.js\");\n/* harmony import */ var _commands_customEngines_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commands/customEngines.js */ \"./src/js/backend/commands/customEngines.js\");\n/* harmony import */ var _commands_teamRequest_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commands/teamRequest.js */ \"./src/js/backend/commands/teamRequest.js\");\n/* harmony import */ var _commands_yearSelected_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commands/yearSelected.js */ \"./src/js/backend/commands/yearSelected.js\");\n/* harmony import */ var _commands_editTeam_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commands/editTeam.js */ \"./src/js/backend/commands/editTeam.js\");\n/* harmony import */ var _commands_editStats_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./commands/editStats.js */ \"./src/js/backend/commands/editStats.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nclass CommandFactory {\n  constructor() {\n    this.commandDict = {\n      saveSelected: _commands_saveSelected_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n      driverRequest: _commands_driverRequest_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n      // hire: HireCommand,\n      // fire: FireCommand,\n      // autoContract: AutoContractCommand,\n      // swap: SwapCommand,\n      editStats: _commands_editStats_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n      // calendar: CalendarCommand,\n      // editContract: EditContractCommand,\n      editPerformance: _commands_editPerformance_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n      // editEngine: EditEngineCommand,\n      yearSelected: _commands_yearSelected_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n      yearSelectedH2H: _commands_yearSelectedH2H_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n      configuredH2H: _commands_configuredH2H_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n      teamRequest: _commands_teamRequest_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n      editTeam: _commands_editTeam_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n      // unretireDriver: UnretireCommand,\n      // configUpdate: ConfigUpdateCommand,\n      performanceRequest: _commands_performanceRequest_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n      // fitParts: FitPartsCommand,\n      partRequest: _commands_partRequest_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n      customEngines: _commands_customEngines_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n    };\n  }\n  createCommand(message) {\n    const commandType = message.command;\n    if (commandType in this.commandDict) {\n      return new this.commandDict[commandType](message);\n    } else {\n      throw new Error(\"Unknown command type\");\n    }\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commandFactory.js?");

/***/ }),

/***/ "./src/js/backend/commands/command.js":
/*!********************************************!*\
  !*** ./src/js/backend/commands/command.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Command: () => (/* binding */ Command)\n/* harmony export */ });\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n\n\nclass Command {\n  constructor(message) {\n    this.message = message;\n  }\n  execute() {\n    throw new Error(\"Method not implemented.\");\n  }\n  replaceTeam(originalTeam, newTeam) {\n    _commandGlobals__WEBPACK_IMPORTED_MODULE_0__.teamReplaceDict[originalTeam] = _commandGlobals__WEBPACK_IMPORTED_MODULE_0__.prettyNames[newTeam] || newTeam;\n  }\n  addTeam(originalTeam, newTeam) {\n    _commandGlobals__WEBPACK_IMPORTED_MODULE_0__.teamReplaceDict[originalTeam] = newTeam;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/command.js?");

/***/ }),

/***/ "./src/js/backend/commands/commandGlobals.js":
/*!***************************************************!*\
  !*** ./src/js/backend/commands/commandGlobals.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobals: () => (/* binding */ getGlobals),\n/* harmony export */   prettyNames: () => (/* binding */ prettyNames),\n/* harmony export */   setGlobals: () => (/* binding */ setGlobals),\n/* harmony export */   teamReplaceDict: () => (/* binding */ teamReplaceDict)\n/* harmony export */ });\n// commandGlobals.js\nconst teamReplaceDict = {\n  \"Alpha Tauri\": \"Alpha Tauri\",\n  \"Alpine\": \"Alpine\",\n  \"Alfa Romeo\": \"Alfa Romeo\",\n  \"Aston Martin\": \"Aston Martin\",\n  \"Ferrari\": \"Ferrari\",\n  \"Haas\": \"Haas\",\n  \"McLaren\": \"McLaren\",\n  \"Mercedes\": \"Mercedes\",\n  \"Red Bull\": \"Red Bull\",\n  \"Williams\": \"Williams\",\n  \"Renault\": \"Renault\",\n  \"F2\": \"Formula 2\",\n  \"F3\": \"Formula 3\",\n  \"Custom Team\": \"Custom Team\"\n};\nconst prettyNames = {\n  \"visarb\": \"Visa Cashapp RB\",\n  \"toyota\": \"Toyota\",\n  \"hugo\": \"Hugo Boss\",\n  \"alphatauri\": \"Alpha Tauri\",\n  \"brawn\": \"Brawn GP\",\n  \"porsche\": \"Porsche\",\n  \"alpine\": \"Alpine\",\n  \"renault\": \"Renault\",\n  \"andretti\": \"Andretti\",\n  \"lotus\": \"Lotus\",\n  \"alfa\": \"Alfa Romeo\",\n  \"audi\": \"Audi\",\n  \"sauber\": \"Sauber\",\n  \"stake\": \"Stake Sauber\"\n};\nlet dbUtils = null;\nlet path = null;\nlet yearIteration = null;\nlet isCreateATeam = false;\nfunction setGlobals({\n  db,\n  dbPath,\n  year,\n  createTeam\n}) {\n  dbUtils = db || dbUtils;\n  path = dbPath || path;\n  yearIteration = year || yearIteration;\n  isCreateATeam = createTeam || isCreateATeam;\n}\nfunction getGlobals() {\n  return {\n    dbUtils,\n    path,\n    yearIteration,\n    isCreateATeam\n  };\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/commandGlobals.js?");

/***/ }),

/***/ "./src/js/backend/commands/configuredH2H.js":
/*!**************************************************!*\
  !*** ./src/js/backend/commands/configuredH2H.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ConfiguredH2HCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_head2head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scriptUtils/head2head */ \"./src/js/backend/scriptUtils/head2head.js\");\n\n\n\n\n\nclass ConfiguredH2HCommand extends _command__WEBPACK_IMPORTED_MODULE_2__.Command {\n  execute() {\n    const dbUtils = (0,_frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__.getDBUtils)();\n    if (this.message.data.h2h !== \"-1\") {\n      if (this.message.data.mode === \"driver\") {\n        const h2hRes = (0,_scriptUtils_head2head__WEBPACK_IMPORTED_MODULE_4__.fetchHead2Head)(this.message.data.h2h[0], this.message.data.h2h[1], this.message.data.year);\n        const h2hResponse = {\n          responseMessage: \"H2H fetched\",\n          content: h2hRes\n        };\n        (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(h2hResponse);\n      } else if (this.message.data.mode === \"team\") {\n        const h2hRes = (0,_scriptUtils_head2head__WEBPACK_IMPORTED_MODULE_4__.fetchHead2HeadTeam)(this.message.data.h2h[0], this.message.data.h2h[1], this.message.data.year, \"team\");\n        const h2hResponse = {\n          responseMessage: \"H2H fetched\",\n          content: h2hRes\n        };\n        (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(h2hResponse);\n      }\n    }\n    const h2hDrivers = [];\n    this.message.data.graph.forEach(driver => {\n      if (this.message.data.mode === \"driver\") {\n        const res = dbUtils.fetchOneDriverSeasonResults(driver, this.message.data.year);\n        h2hDrivers.push(res);\n      } else if (this.message.data.mode === \"team\") {\n        const res = dbUtils.fetchOneTeamSeasonResults(driver, this.message.data.year);\n        h2hDrivers.push(res);\n      }\n    });\n    const eventsDone = dbUtils.fetchEventsDoneFrom(this.message.data.year);\n    const allEvents = dbUtils.fetchEventsFrom(this.message.data.year);\n    h2hDrivers.push(eventsDone);\n    h2hDrivers.unshift(allEvents);\n    const h2hResponse = {\n      responseMessage: \"H2HDriver fetched\",\n      content: h2hDrivers\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(h2hResponse);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/configuredH2H.js?");

/***/ }),

/***/ "./src/js/backend/commands/customEngines.js":
/*!**************************************************!*\
  !*** ./src/js/backend/commands/customEngines.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CustomEnginesCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n\n\n\n\nclass CustomEnginesCommand extends _command__WEBPACK_IMPORTED_MODULE_2__.Command {\n  execute() {\n    const dbUtils = (0,_frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__.getDBUtils)();\n    dbUtils.updateCustomEngines(this.message.data.enginesData);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/customEngines.js?");

/***/ }),

/***/ "./src/js/backend/commands/driverRequest.js":
/*!**************************************************!*\
  !*** ./src/js/backend/commands/driverRequest.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DriverRequestCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n\n\n\n\nclass DriverRequestCommand extends _command__WEBPACK_IMPORTED_MODULE_2__.Command {\n  execute() {\n    const dbUtils = (0,_frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__.getDBUtils)();\n    const contract = dbUtils.fetchDriverContract(this.message.data.driverID);\n    const contractResponse = {\n      responseMessage: \"Contract fetched\",\n      content: contract\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(contractResponse);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/driverRequest.js?");

/***/ }),

/***/ "./src/js/backend/commands/editPerformance.js":
/*!****************************************************!*\
  !*** ./src/js/backend/commands/editPerformance.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EditPerformanceCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scriptUtils/carAnalysisUtils */ \"./src/js/backend/scriptUtils/carAnalysisUtils.js\");\n\n\n\n\n\nclass EditPerformanceCommand extends _command__WEBPACK_IMPORTED_MODULE_2__.Command {\n  execute() {\n    let globals = (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_3__.getGlobals)();\n    const dbUtils = (0,_frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__.getDBUtils)();\n    const yearData = dbUtils.checkYearSave();\n    (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.overwritePerformanceTeam)(this.message.data.teamID, this.message.data.parts, globals.isCreateATeam, globals.yearIteration, this.message.data.loadouts);\n    (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.updateItemsForDesignDict)(this.message.data.n_parts_designs, this.message.data.teamID);\n    (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.fitLoadoutsDict)(this.message.data.loadouts, this.message.data.teamID);\n    const [performance, races] = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getPerformanceAllTeamsSeason)(yearData[2]);\n    const performanceResponse = {\n      responseMessage: \"Season performance fetched\",\n      content: [performance, races]\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(performanceResponse);\n    const attibutes = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getAttributesAllTeams)(yearData[2]);\n    const attributesResponse = {\n      responseMessage: \"Performance fetched\",\n      content: [performance[performance.length - 1], attibutes]\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(attributesResponse);\n    const carPerformance = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getPerformanceAllCars)(yearData[2]);\n    const carAttributes = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getAttributesAllCars)(yearData[2]);\n    const carPerformanceResponse = {\n      responseMessage: \"Cars fetched\",\n      content: [carPerformance, carAttributes]\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(carPerformanceResponse);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/editPerformance.js?");

/***/ }),

/***/ "./src/js/backend/commands/editStats.js":
/*!**********************************************!*\
  !*** ./src/js/backend/commands/editStats.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EditStatsCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scriptUtils/eidtStatsUtils */ \"./src/js/backend/scriptUtils/eidtStatsUtils.js\");\n\n\n\n\nclass EditStatsCommand extends _command__WEBPACK_IMPORTED_MODULE_1__.Command {\n  execute() {\n    const globals = (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_2__.getGlobals)();\n    (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_3__.editRetirement)(this.message.data.driverID, this.message.data.isRetired);\n    if (this.message.data.typeStaff === \"0\") {\n      (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_3__.editSuperlicense)(this.message.data.driverID, this.message.data.superLicense);\n      if (globals.yearIteration == \"24\") {\n        (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_3__.editMarketability)(this.message.data.driverID, this.message.data.marketability);\n      }\n    }\n    if (this.message.data.mentality !== \"-1\" && globals.yearIteration == \"24\") {\n      (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_3__.editMentality)(this.message.data.driverID, this.message.data.mentality);\n    }\n    (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_3__.editAge)(this.message.data.driverID, this.message.data.age);\n    if (this.message.newName !== \"-1\") {\n      (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_3__.editName)(this.message.data.driverID, this.message.data.newName);\n    }\n    if (this.message.newCode !== \"-1\") {\n      (0,_scriptUtils_eidtStatsUtils__WEBPACK_IMPORTED_MODULE_3__.editCode)(this.message.data.driverID, this.message.data.newCode);\n    }\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/editStats.js?");

/***/ }),

/***/ "./src/js/backend/commands/editTeam.js":
/*!*********************************************!*\
  !*** ./src/js/backend/commands/editTeam.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EditTeamCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_editTeamUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scriptUtils/editTeamUtils */ \"./src/js/backend/scriptUtils/editTeamUtils.js\");\n\n\n\n\nclass EditTeamCommand extends _command__WEBPACK_IMPORTED_MODULE_1__.Command {\n  execute() {\n    (0,_scriptUtils_editTeamUtils__WEBPACK_IMPORTED_MODULE_3__.editTeam)(this.message.data);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/editTeam.js?");

/***/ }),

/***/ "./src/js/backend/commands/partRequest.js":
/*!************************************************!*\
  !*** ./src/js/backend/commands/partRequest.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PartRequestCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scriptUtils/carAnalysisUtils */ \"./src/js/backend/scriptUtils/carAnalysisUtils.js\");\n\n\n\n\n\nclass PartRequestCommand extends _command__WEBPACK_IMPORTED_MODULE_2__.Command {\n  execute() {\n    const partValues = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getUnitValueFromOnePart)(this.message.data.designID);\n    const partResponse = {\n      responseMessage: \"Part values fetched\",\n      content: partValues\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(partResponse);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/partRequest.js?");

/***/ }),

/***/ "./src/js/backend/commands/performanceRequest.js":
/*!*******************************************************!*\
  !*** ./src/js/backend/commands/performanceRequest.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PerformanceRequestCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scriptUtils/carAnalysisUtils */ \"./src/js/backend/scriptUtils/carAnalysisUtils.js\");\n\n\n\n\n\nclass PerformanceRequestCommand extends _command__WEBPACK_IMPORTED_MODULE_2__.Command {\n  execute() {\n    const designDict = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getPartsFromTeam)(this.message.data.teamID);\n    const unitValues = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getUnitValueFromParts)(designDict);\n    const allParts = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getAllPartsFromTeam)(this.message.data.teamID);\n    const maxDesign = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getMaxDesign)();\n    const designResponse = {\n      responseMessage: \"Parts stats fetched\",\n      content: [unitValues, allParts, maxDesign]\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(designResponse);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/performanceRequest.js?");

/***/ }),

/***/ "./src/js/backend/commands/saveSelected.js":
/*!*************************************************!*\
  !*** ./src/js/backend/commands/saveSelected.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SaveSelectedCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scriptUtils/carAnalysisUtils */ \"./src/js/backend/scriptUtils/carAnalysisUtils.js\");\n\n\n\n\n\nclass SaveSelectedCommand extends _command__WEBPACK_IMPORTED_MODULE_2__.Command {\n  /**\r\n   * Ejecuta el comando de guardar la selección.\r\n   */\n  execute() {\n    const dbUtils = (0,_frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__.getDBUtils)();\n    this.checkCustomTables(dbUtils);\n    const yearData = dbUtils.checkYearSave();\n    if (yearData[1] !== null) {\n      (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_3__.setGlobals)({\n        createTeam: true\n      });\n    } else {\n      (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_3__.setGlobals)({\n        createTeam: false\n      });\n    }\n    this.addTeam(\"Custom Team\", yearData[1]);\n    (0,_commandGlobals__WEBPACK_IMPORTED_MODULE_3__.setGlobals)({\n      year: yearData[0]\n    });\n    const gameYearResponse = {\n      responseMessage: \"Game Year\",\n      content: yearData\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(gameYearResponse);\n    this.updateTeamsFor24(yearData[0]);\n    const drivers = dbUtils.fetchDrivers(yearData[0]);\n    const driversResponse = {\n      responseMessage: \"Save loaded succesfully\",\n      content: drivers\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(driversResponse);\n    const staff = dbUtils.fetchStaff(yearData[0]);\n    const staffResponse = {\n      responseMessage: \"Staff fetched\",\n      content: staff\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(staffResponse);\n    const engines = dbUtils.fetchEngines();\n    const enginesResponse = {\n      responseMessage: \"Engines fetched\",\n      content: engines\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(enginesResponse);\n    const calendar = dbUtils.fetchCalendar();\n    const calendarResponse = {\n      responseMessage: \"Calendar fetched\",\n      content: calendar\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(calendarResponse);\n    const year = dbUtils.fetchYear();\n    const yearResponse = {\n      responseMessage: \"Year fetched\",\n      content: year\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(yearResponse);\n    const numbers = dbUtils.fetchDriverNumbers();\n    const numbersResponse = {\n      responseMessage: \"Numbers fetched\",\n      content: numbers\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(numbersResponse);\n    const [performance, races] = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getPerformanceAllTeamsSeason)(yearData[2]);\n    const performanceResponse = {\n      responseMessage: \"Season performance fetched\",\n      content: [performance, races]\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(performanceResponse);\n    const attibutes = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getAttributesAllTeams)(yearData[2]);\n    const attributesResponse = {\n      responseMessage: \"Performance fetched\",\n      content: [performance[performance.length - 1], attibutes]\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(attributesResponse);\n    const carPerformance = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getPerformanceAllCars)(yearData[2]);\n    const carAttributes = (0,_scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__.getAttributesAllCars)(yearData[2]);\n    const carPerformanceResponse = {\n      responseMessage: \"Cars fetched\",\n      content: [carPerformance, carAttributes]\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(carPerformanceResponse);\n  }\n  updateTeamsFor24(year) {\n    if (year === \"24\") {\n      const data = {\n        teams: {\n          alphatauri: \"visarb\",\n          alpine: \"alpine\",\n          alfa: \"stake\"\n        }\n      };\n      this.replaceTeam(\"Alpha Tauri\", data.teams.alphatauri);\n      this.replaceTeam(\"Alpine\", data.teams.alpine);\n      this.replaceTeam(\"Alfa Romeo\", data.teams.alfa);\n      const yearResponse = {\n        responseMessage: \"24 Year\",\n        content: data\n      };\n      (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(yearResponse);\n    }\n  }\n  checkCustomTables(dbUtils) {\n    dbUtils.checkCustomTables();\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/saveSelected.js?");

/***/ }),

/***/ "./src/js/backend/commands/teamRequest.js":
/*!************************************************!*\
  !*** ./src/js/backend/commands/teamRequest.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TeamRequestCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_editTeamUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scriptUtils/editTeamUtils */ \"./src/js/backend/scriptUtils/editTeamUtils.js\");\n\n\n\n\nclass TeamRequestCommand extends _command__WEBPACK_IMPORTED_MODULE_1__.Command {\n  execute() {\n    const teamID = this.message.data.teamID;\n    const teamData = (0,_scriptUtils_editTeamUtils__WEBPACK_IMPORTED_MODULE_3__.fetchTeamData)(teamID);\n    const teamDataResponse = {\n      responseMessage: \"TeamData fetched\",\n      content: teamData\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_0__.updateFront)(teamDataResponse);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/teamRequest.js?");

/***/ }),

/***/ "./src/js/backend/commands/yearSelected.js":
/*!*************************************************!*\
  !*** ./src/js/backend/commands/yearSelected.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ YearSelectedCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n\n\n\n\nclass YearSelectedCommand extends _command__WEBPACK_IMPORTED_MODULE_1__.Command {\n  execute() {\n    const dbUtils = (0,_frontend_dragFile__WEBPACK_IMPORTED_MODULE_3__.getDBUtils)();\n    const results = dbUtils.fetchSeasonResults(this.message.data.year);\n    const eventsFrom = dbUtils.fetchEventsFrom(this.message.data.year);\n    const teamStandings = dbUtils.fetchTeamsStandings(this.message.data.year);\n    const response = {\n      responseMessage: \"Results fetched\",\n      content: [eventsFrom, results, teamStandings]\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_0__.updateFront)(response);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/yearSelected.js?");

/***/ }),

/***/ "./src/js/backend/commands/yearSelectedH2H.js":
/*!****************************************************!*\
  !*** ./src/js/backend/commands/yearSelectedH2H.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ YearSelectedH2HCommand)\n/* harmony export */ });\n/* harmony import */ var _frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frontend/dragFile */ \"./src/js/frontend/dragFile.js\");\n/* harmony import */ var _frontend_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frontend/renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ \"./src/js/backend/commands/command.js\");\n/* harmony import */ var _commandGlobals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandGlobals */ \"./src/js/backend/commands/commandGlobals.js\");\n/* harmony import */ var _scriptUtils_carAnalysisUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scriptUtils/carAnalysisUtils */ \"./src/js/backend/scriptUtils/carAnalysisUtils.js\");\n\n\n\n\n\nclass YearSelectedH2HCommand extends _command__WEBPACK_IMPORTED_MODULE_2__.Command {\n  execute() {\n    const dbUtils = (0,_frontend_dragFile__WEBPACK_IMPORTED_MODULE_0__.getDBUtils)();\n    const drivers = dbUtils.fetchDriversPerYear(this.message.data.year);\n    const driversResponse = {\n      responseMessage: \"DriversH2H fetched\",\n      content: drivers\n    };\n    (0,_frontend_renderer__WEBPACK_IMPORTED_MODULE_1__.updateFront)(driversResponse);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/commands/yearSelectedH2H.js?");

/***/ }),

/***/ "./src/js/backend/dbManager.js":
/*!*************************************!*\
  !*** ./src/js/backend/dbManager.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDatabase: () => (/* binding */ getDatabase),\n/* harmony export */   getMetadata: () => (/* binding */ getMetadata),\n/* harmony export */   queryDB: () => (/* binding */ queryDB),\n/* harmony export */   setDatabase: () => (/* binding */ setDatabase)\n/* harmony export */ });\nlet db = null;\nlet metadata = null;\nfunction setDatabase(database, meta) {\n  db = database;\n  metadata = meta;\n}\nfunction getDatabase() {\n  return db;\n}\nfunction getMetadata() {\n  return metadata;\n}\n\n/**\r\n * Ejecuta una consulta SQL y devuelve el resultado según 'type'.\r\n * @param {string} query - La consulta a ejecutar.\r\n * @param {\"singleValue\"|\"singleRow\"|\"allRows\"} [type=\"allRows\"] - El tipo de resultado.\r\n * @returns {any} \r\n *    - 'singleValue': un único valor (o null).\r\n *    - 'singleRow': la primera fila (array de valores) o null.\r\n *    - 'allRows': array de filas (cada fila, array de valores), o [] si no hay ninguna.\r\n */\nfunction queryDB(query, type = 'allRows') {\n  const res = db.exec(query); // o tu instancia real de db\n  if (!res.length) {\n    // No hay resultsets\n    return type === 'allRows' ? [] : null;\n  }\n  const rows = res[0].values;\n  if (!rows.length) {\n    // Hay resultset pero 0 filas\n    return type === 'allRows' ? [] : null;\n  }\n  switch (type) {\n    case 'singleValue':\n      // Devuelvo la primera columna de la primera fila\n      return rows[0][0] ?? null;\n    case 'singleRow':\n      // Devuelvo la primera fila entera (array)\n      return rows[0];\n    case 'allRows':\n    default:\n      // Devuelvo todas las filas\n      return rows;\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/dbManager.js?");

/***/ }),

/***/ "./src/js/backend/initSql.js":
/*!***********************************!*\
  !*** ./src/js/backend/initSql.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var sql_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sql.js */ \"./node_modules/sql.js/dist/sql-wasm.js\");\n/* harmony import */ var sql_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sql_js__WEBPACK_IMPORTED_MODULE_0__);\n\n(async () => {\n  // Inicia la instancia de sql.js\n  const SQL = await sql_js__WEBPACK_IMPORTED_MODULE_0___default()({\n    locateFile: file => 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/sql-wasm.wasm',\n    wasmMemory: new WebAssembly.Memory({\n      initial: 1024\n    })\n    // O la ruta local de tu sql-wasm.wasm\n  });\n\n  // Asigna al objeto global 'window'\n  window.SQL = SQL;\n  console.log(\"Se ha asignado SQL a window.SQL\");\n})();\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/initSql.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/carAnalysisUtils.js":
/*!********************************************************!*\
  !*** ./src/js/backend/scriptUtils/carAnalysisUtils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add4Items: () => (/* binding */ add4Items),\n/* harmony export */   addNewDesign: () => (/* binding */ addNewDesign),\n/* harmony export */   addPartToLoadout: () => (/* binding */ addPartToLoadout),\n/* harmony export */   calculateCarAttributes: () => (/* binding */ calculateCarAttributes),\n/* harmony export */   calculateOverallPerformance: () => (/* binding */ calculateOverallPerformance),\n/* harmony export */   changeExpertiseBased: () => (/* binding */ changeExpertiseBased),\n/* harmony export */   convertPercentageToValue: () => (/* binding */ convertPercentageToValue),\n/* harmony export */   copyFromTable: () => (/* binding */ copyFromTable),\n/* harmony export */   createNewItem: () => (/* binding */ createNewItem),\n/* harmony export */   deleteItem: () => (/* binding */ deleteItem),\n/* harmony export */   fitLatestDesignsAllGrid: () => (/* binding */ fitLatestDesignsAllGrid),\n/* harmony export */   fitLatestDesignsOneTeam: () => (/* binding */ fitLatestDesignsOneTeam),\n/* harmony export */   fitLoadoutsDict: () => (/* binding */ fitLoadoutsDict),\n/* harmony export */   getAllPartsFromTeam: () => (/* binding */ getAllPartsFromTeam),\n/* harmony export */   getAllRaces: () => (/* binding */ getAllRaces),\n/* harmony export */   getAttributesAllCars: () => (/* binding */ getAttributesAllCars),\n/* harmony export */   getAttributesAllTeams: () => (/* binding */ getAttributesAllTeams),\n/* harmony export */   getBestParts: () => (/* binding */ getBestParts),\n/* harmony export */   getBestPartsUntil: () => (/* binding */ getBestPartsUntil),\n/* harmony export */   getCarStats: () => (/* binding */ getCarStats),\n/* harmony export */   getContributorsDict: () => (/* binding */ getContributorsDict),\n/* harmony export */   getDriverNumberWithCar: () => (/* binding */ getDriverNumberWithCar),\n/* harmony export */   getFirstDaySeason: () => (/* binding */ getFirstDaySeason),\n/* harmony export */   getFittedDesigns: () => (/* binding */ getFittedDesigns),\n/* harmony export */   getMaxDesign: () => (/* binding */ getMaxDesign),\n/* harmony export */   getPartStatsDict: () => (/* binding */ getPartStatsDict),\n/* harmony export */   getPartsFromTeam: () => (/* binding */ getPartsFromTeam),\n/* harmony export */   getPerformanceAllCars: () => (/* binding */ getPerformanceAllCars),\n/* harmony export */   getPerformanceAllTeams: () => (/* binding */ getPerformanceAllTeams),\n/* harmony export */   getPerformanceAllTeamsSeason: () => (/* binding */ getPerformanceAllTeamsSeason),\n/* harmony export */   getRacesDays: () => (/* binding */ getRacesDays),\n/* harmony export */   getUnitValueFromOnePart: () => (/* binding */ getUnitValueFromOnePart),\n/* harmony export */   getUnitValueFromParts: () => (/* binding */ getUnitValueFromParts),\n/* harmony export */   makeAttributesReadable: () => (/* binding */ makeAttributesReadable),\n/* harmony export */   overwritePerformanceTeam: () => (/* binding */ overwritePerformanceTeam),\n/* harmony export */   updateItemsForDesignDict: () => (/* binding */ updateItemsForDesignDict)\n/* harmony export */ });\n/* harmony import */ var _carConstants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carConstants.js */ \"./src/js/backend/scriptUtils/carConstants.js\");\n/* harmony import */ var _dbManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dbManager.js */ \"./src/js/backend/dbManager.js\");\n\n\n\n/**\r\n * Devuelve las mejores piezas para cada equipo.\r\n * @param {boolean} customTeam - si es true, incluye el equipo 32 además de 1..10\r\n */\nfunction getBestParts(customTeam = false) {\n  const teams = {};\n  // Creamos la lista de equipos\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) // 1..10 y 32\n  : [...Array(10).keys()].map(i => i + 1); // 1..10\n\n  for (const teamId of teamList) {\n    teams[teamId] = getPartsFromTeam(teamId);\n  }\n  return teams;\n}\n\n/**\r\n * Obtiene TODAS las piezas (varias designs) de un equipo\r\n * (Como en Python: get_all_parts_from_team)\r\n */\nfunction getAllPartsFromTeam(teamId) {\n  // Obtenemos Day y Season\n  const [day, currentSeason] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(\"SELECT Day, CurrentSeason FROM Player_State\", \"singleRow\") || [0, 0];\n\n  // Query para extraer las designs del PartType con DayCompleted > 0\n  const query = `\n        SELECT \n          d.DesignID,\n          d.DayCreated,\n          d.DayCompleted, \n          (\n            SELECT r.TrackID \n            FROM Races r \n            WHERE r.Day >= d.DayCompleted \n            ORDER BY r.Day ASC \n            LIMIT 1\n          ) AS TrackID\n        FROM Parts_Designs d\n        WHERE \n          d.PartType = ?\n          AND d.TeamID = ?\n          AND d.ValidFrom = ?\n          AND d.DayCompleted > 0\n      `;\n\n  // En Python se usaba placeholders \"?\", en JS podemos hacer un template\n  // pero si necesitas SQL parametrizado, deberías adaptarlo. Por simplicidad:\n  // haremos un template string con la parte variable:\n  // d.PartType = {j}, d.TeamID = {teamId}, d.ValidFrom = {currentSeason}\n  // y repetimos para cada PartType.\n\n  const partsDict = {};\n\n  // Ej. en Python, PartType iba de 3..8\n  for (let j = 3; j < 9; j++) {\n    const sql = `\n          SELECT \n            d.DesignID,\n            d.DayCreated,\n            d.DayCompleted, \n            (\n              SELECT r.TrackID \n              FROM Races r \n              WHERE r.Day >= d.DayCompleted \n              ORDER BY r.Day ASC \n              LIMIT 1\n            ) AS TrackID\n          FROM Parts_Designs d\n          WHERE \n            d.PartType = ${j}\n            AND d.TeamID = ${teamId}\n            AND d.ValidFrom = ${currentSeason}\n            AND d.DayCompleted > 0\n        `;\n    let designs = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(sql, \"allRows\");\n\n    // Para cada design, agregamos info extra: equipped_1, equipped_2, n_parts\n    designs = designs.map(designRow => {\n      // designRow => [ DesignID, DayCreated, DayCompleted, TrackID ]\n      const [designID, dayCreated, dayCompleted, trackID] = designRow;\n\n      // Vemos si está equipado en loadout 1\n      const equipped1 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT DesignID\n            FROM Parts_CarLoadout\n            WHERE TeamID = ${teamId} \n              AND PartType = ${j} \n              AND LoadoutID = 1\n          `, \"singleValue\");\n      let eq1 = equipped1 === designID ? 1 : 0;\n\n      // Equipado en loadout 2?\n      const equipped2 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT DesignID\n            FROM Parts_CarLoadout\n            WHERE TeamID = ${teamId} \n              AND PartType = ${j} \n              AND LoadoutID = 2\n          `, \"singleValue\");\n      let eq2 = equipped2 === designID ? 1 : 0;\n\n      // Número de partes (items) construidas\n      const nParts = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT COUNT(*)\n            FROM Parts_Items\n            WHERE DesignID = ${designID}\n              AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[j]}\n          `, \"singleValue\") || 0;\n\n      // Devolvemos un nuevo array con toda la info\n      return [designID,\n      // 0\n      dayCreated,\n      // 1\n      dayCompleted,\n      // 2\n      trackID,\n      // 3\n      eq1,\n      // 4\n      eq2,\n      // 5\n      nParts // 6\n      ];\n    });\n\n    // Asignamos a partsDict[ parts[j] ] = designs\n    // Asumiendo que 'parts[j]' existe. Ajusta si es distinto\n    partsDict[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.parts[j]] = designs;\n  }\n  return partsDict;\n}\n\n/**\r\n * Obtiene las piezas \"mejores\" (MAX(DesignID)) para un equipo y su season actual\r\n * (Similar a get_parts_from_team en el Python original)\r\n */\nfunction getPartsFromTeam(teamId) {\n  // Day, Season\n  const [day, season] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(\"SELECT Day, CurrentSeason FROM Player_State\", \"singleRow\") || [0, 0];\n  const designs = {};\n  // En Python, j va de 3..8 => motor = 0\n  for (let j = 3; j < 9; j++) {\n    const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n          SELECT MAX(DesignID)\n          FROM Parts_Designs\n          WHERE PartType = ${j}\n            AND TeamID = ${teamId}\n            AND ValidFrom = ${season}\n            AND (DayCompleted > 0 OR DayCreated < 0)\n        `, \"allRows\");\n    designs[j] = row;\n  }\n\n  // engine:\n  const engine = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(DesignID)\n        FROM Parts_Designs\n        WHERE PartType = 0\n          AND TeamID = ${teamId}\n      `, \"allRows\");\n  designs[0] = engine;\n  return designs;\n}\n\n/**\r\n * Obtiene las mejores piezas hasta un día concreto (versión con day param)\r\n * (Similar a get_best_parts_until en el Python original)\r\n */\nfunction getBestPartsUntil(day, customTeam = false) {\n  // Day, season\n  const [dayCur, season] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Day, CurrentSeason \n        FROM Player_State\n      `, \"singleRow\") || [0, 0];\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  const teams = {};\n  for (const t of teamList) {\n    const designs = {};\n    for (let j = 3; j < 9; j++) {\n      const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT MAX(DesignID)\n            FROM Parts_Designs\n            WHERE PartType = ${j}\n              AND TeamID = ${t}\n              AND ValidFrom = ${season}\n              AND ((DayCompleted > 0 AND DayCompleted <= ${day}) OR DayCreated < 0)\n          `, \"allRows\");\n      designs[j] = row;\n    }\n    // engine\n    const engine = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n          SELECT MAX(DesignID)\n          FROM Parts_Designs\n          WHERE PartType = 0\n            AND TeamID = ${t}\n        `, \"allRows\");\n    designs[0] = engine;\n    teams[t] = designs;\n  }\n  return teams;\n}\n\n/**\r\n * Devuelve un diccionario con los valores de stats (PartStat -> Value)\r\n * de cada parte (partType).\r\n * (get_car_stats en el Python original)\r\n */\nfunction getCarStats(designDict) {\n  const statsValues = {};\n  for (const part in designDict) {\n    // designDict[part] es algo como [[DesignID], ...] en el Python original\n    // asumiendo designDict[part][0][0] sea el designID\n    // Ojo: si no hay array, chequear que exista\n    const designInfo = designDict[part][0];\n    const designID = designInfo && designInfo.length ? designInfo[0] : null;\n    if (designID !== null) {\n      const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT PartStat, Value\n            FROM Parts_Designs_StatValues\n            WHERE DesignID = ${designID}\n          `, \"allRows\");\n      // rows => [ [PartStat, Value], [PartStat, Value], ... ]\n      const tmp = {};\n      for (const [stat, val] of rows) {\n        tmp[stat] = Math.round(val * 1000) / 1000; // round to 3 decimals\n      }\n      statsValues[part] = tmp;\n    } else {\n      // Si no hay design -> pon stats 0\n      // En Python: stats_values[part] = { stat: 0 for stat in default_parts_stats[part] }\n      // Asumimos default_parts_stats[part] es un array de stats\n      const zeroStats = {};\n      for (const stat of _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.defaultPartsStats[part]) {\n        zeroStats[stat] = 0;\n      }\n      statsValues[part] = zeroStats;\n    }\n  }\n  return statsValues;\n}\n\n/**\r\n * Devuelve el UnitValue de cada stat de un dict de diseños\r\n * (En Python: get_unitvalue_from_parts)\r\n */\nfunction getUnitValueFromParts(designDict) {\n  const statsValues = {};\n  for (const part in designDict) {\n    const designID = designDict[part][0][0];\n    const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n          SELECT PartStat, UnitValue\n          FROM Parts_Designs_StatValues\n          WHERE DesignID = ${designID}\n        `, 'allRows');\n    const tmp = {};\n    for (const [stat, unitVal] of rows) {\n      tmp[stat] = unitVal;\n    }\n    statsValues[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.parts[part]] = tmp;\n  }\n  return statsValues;\n}\n\n/**\r\n * UnitValue de un solo diseño\r\n * (get_unitvalue_from_one_part en Python)\r\n */\nfunction getUnitValueFromOnePart(designId) {\n  console.log(\"DesignID:\", designId);\n  const partType = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT PartType\n            FROM Parts_Designs\n            WHERE DesignID = ${designId}\n        `, 'singleValue');\n  console.log(\"PART type:\", partType);\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            SELECT PartStat, UnitValue\n            FROM Parts_Designs_StatValues\n            WHERE DesignID = ${designId}\n        `, 'allRows');\n  console.log(\"ROWS:\", rows);\n  const statsValues = {};\n  for (const [stat, uv] of rows) {\n    statsValues[stat] = uv;\n  }\n  const partValues = {};\n  partValues[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.parts[partType]] = statsValues;\n  return partValues;\n}\n\n/**\r\n * Simple helper: convierte un porcentaje a valor físico según min/max\r\n * (convert_percentage_to_value en Python)\r\n */\nfunction convertPercentageToValue(attribute, percentage, minMax) {\n  // minMax[attribute] = [min_value, max_value]\n  const [minValue, maxValue] = minMax[attribute];\n  return minValue + (maxValue - minValue) * (percentage / 100.0);\n}\n\n/**\r\n * Pasa todos los atributos a rango human-readable\r\n * (make_attributes_readable en Python)\r\n */\nfunction makeAttributesReadable(attributes) {\n  for (const attribute in attributes) {\n    attributes[attribute] = convertPercentageToValue(attribute, attributes[attribute], _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.attributesMinMax);\n    // redondea a 3 dec\n    attributes[attribute] = Math.round(attributes[attribute] * 1000) / 1000;\n    attributes[attribute] = `${attributes[attribute]} ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.attributesUnits[attribute]}`;\n  }\n  return attributes;\n}\n\n/**\r\n * Calcula la performance global sumando (valorStat * contribución)\r\n * (calculate_overall_performance en Python)\r\n */\nfunction calculateOverallPerformance(attributes) {\n  let ovr = 0;\n  for (const attr in attributes) {\n    ovr += attributes[attr] * _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.attributesContributions[attr];\n  }\n  return Math.round(ovr * 100) / 100;\n}\n\n/**\r\n * Devuelve un diccionario con las contribuciones\r\n * (get_contributors_dict en Python)\r\n */\nfunction getContributorsDict() {\n  // Lógica similar a Python\n  const contributorsValues = {};\n  const totalValues = {};\n  for (const attribute in _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes) {\n    totalValues[attribute] = 0;\n    const referenceDict = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__[`${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes[attribute]}_contributors`];\n    // O donde sea que esté definido\n    for (const stat in referenceDict) {\n      totalValues[attribute] += referenceDict[stat];\n    }\n  }\n  for (const attribute in _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes) {\n    const referenceDict = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__[`${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes[attribute]}_contributors`];\n    contributorsValues[attribute] = {};\n    for (const stat in referenceDict) {\n      contributorsValues[attribute][stat] = Math.round(referenceDict[stat] / totalValues[attribute] * 1000) / 1000;\n    }\n  }\n  return contributorsValues;\n}\n\n/**\r\n * Suma los factores de cada stat de cada parte\r\n * (get_part_stats_dict en Python)\r\n */\nfunction getPartStatsDict(carDict) {\n  const partStats = {};\n  for (const part in carDict) {\n    for (const stat in carDict[part]) {\n      const factor = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__[`${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.stats[stat]}_factors`][part];\n      if (!partStats[stat]) {\n        partStats[stat] = 0;\n      }\n      partStats[stat] += carDict[part][stat] * factor;\n    }\n  }\n  return partStats;\n}\n\n/**\r\n * Calcula los atributos finales sumando (contribución * partStats[stat]) / 10\r\n * (calculate_car_attributes en Python)\r\n */\nfunction calculateCarAttributes(contributors, partsStats) {\n  const attributesDict = {};\n  // Ajuste: partsStats[16] = (20000 - partsStats[15]) / 20  (como en el .py)\n  partsStats[16] = (20000 - partsStats[15]) / 20;\n  for (const attribute in contributors) {\n    attributesDict[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes[attribute]] = 0;\n    for (const stat in contributors[attribute]) {\n      attributesDict[_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.carAttributes[attribute]] += contributors[attribute][stat] * partsStats[stat] / 10;\n    }\n  }\n  return attributesDict;\n}\n\n/**\r\n * Obtiene días de carreras\r\n * (get_races_days en Python)\r\n */\nfunction getRacesDays() {\n  const [day, season] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Day, CurrentSeason \n        FROM Player_State\n      `, 'singleRow') || [0, 0];\n\n  // state=2 => completadas, state=0 => no comenzadas\n  const races = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT RaceID, Day, TrackID\n        FROM Races\n        WHERE SeasonID = ${season}\n          AND State = 2\n      `, 'allRows');\n\n  // first_race_state_0 => la primera no iniciada\n  const firstRaceState0 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT RaceID, Day, TrackID\n        FROM Races\n        WHERE SeasonID = ${season}\n          AND State = 0\n        ORDER BY Day ASC\n        LIMIT 1\n      `, 'singleRow');\n  if (firstRaceState0) {\n    races.push(firstRaceState0);\n  }\n  return races;\n}\nfunction getAllRaces() {\n  const [day, season] = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Day, CurrentSeason\n        FROM Player_State\n      `, 'singleRow') || [0, 0];\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT RaceID, Day, TrackID\n        FROM Races\n        WHERE SeasonID = ${season}\n      `, 'allRows');\n  return rows;\n}\n\n/**\r\n * Devuelve la performance de todos los equipos en un día dado (o actual)\r\n * (get_performance_all_teams en Python)\r\n */\nfunction getPerformanceAllTeams(day = null, previous = null, customTeam = false) {\n  const teams = {};\n  const contributors = getContributorsDict();\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  let parts;\n  if (day == null) {\n    // Usamos getBestParts\n    parts = getBestParts(customTeam);\n  } else {\n    parts = getBestPartsUntil(day, customTeam);\n  }\n  for (const teamId of teamList) {\n    const dict = getCarStats(parts[teamId]);\n    const partStats = getPartStatsDict(dict);\n    const attributes = calculateCarAttributes(contributors, partStats);\n    const ovr = calculateOverallPerformance(attributes);\n    teams[teamId] = ovr;\n  }\n  return teams;\n}\n\n/**\r\n * Devuelve la performance de todos los coches (car1 y car2) de cada equipo\r\n * (get_performance_all_cars en Python)\r\n */\nfunction getPerformanceAllCars(customTeam = false) {\n  const cars = {};\n  const contributors = getContributorsDict();\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n\n  // Este método en Python usaba \"get_fitted_designs(custom_team=custom_team)\"\n  const carsParts = getFittedDesigns(customTeam);\n  for (const teamId of Object.keys(carsParts)) {\n    cars[teamId] = {};\n    for (const carId of Object.keys(carsParts[teamId])) {\n      const dict = getCarStats(carsParts[teamId][carId]);\n      // Falta ver si hay partes sin design\n      const missingParts = [];\n      for (const part in carsParts[teamId][carId]) {\n        if (carsParts[teamId][carId][part][0][0] == null) {\n          missingParts.push(part);\n        }\n      }\n      const partStats = getPartStatsDict(dict);\n      const attributes = calculateCarAttributes(contributors, partStats);\n      const ovr = calculateOverallPerformance(attributes);\n      const driverNumber = getDriverNumberWithCar(teamId, carId);\n      cars[teamId][carId] = [ovr, driverNumber, missingParts];\n    }\n  }\n  return cars;\n}\n\n/**\r\n * Devuelve los atributos de todos los coches\r\n * (get_attributes_all_cars en Python)\r\n */\nfunction getAttributesAllCars(customTeam = false) {\n  const cars = {};\n  const contributors = getContributorsDict();\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  const carsParts = getFittedDesigns(customTeam);\n  for (const teamId of Object.keys(carsParts)) {\n    cars[teamId] = {};\n    for (const carId of Object.keys(carsParts[teamId])) {\n      const dict = getCarStats(carsParts[teamId][carId]);\n      const partStats = getPartStatsDict(dict);\n      const attributes = calculateCarAttributes(contributors, partStats);\n      // (En Python, se dejaba la opción de \"make_attributes_readable\")\n      // attributes = makeAttributesReadable(attributes);\n      cars[teamId][carId] = attributes;\n    }\n  }\n  return cars;\n}\n\n/**\r\n * Devuelve el número del driver que conduce un coche concreto\r\n * (get_driver_number_with_car en Python)\r\n */\nfunction getDriverNumberWithCar(teamId, carId) {\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT con.StaffID\n        FROM Staff_Contracts con\n        JOIN Staff_GameData gam ON con.StaffID = gam.StaffID\n        WHERE con.TeamID = ${teamId}\n          AND gam.StaffType = 0\n          AND con.ContractType = 0\n          AND con.PosInTeam = ${carId}\n      `, 'singleRow');\n  if (!row) {\n    return null;\n  }\n  const driverId = row[0];\n  const number = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Number\n        FROM Staff_DriverNumbers\n        WHERE CurrentHolder = ${driverId}\n      `, 'singleValue');\n  return number ?? null;\n}\n\n/**\r\n * Obtiene los diseños equipados en cada coche (loadout 1 y 2) de cada equipo\r\n * (get_fitted_designs en Python)\r\n */\nfunction getFittedDesigns(customTeam = false) {\n  const teams = {};\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  for (const t of teamList) {\n    teams[t] = {};\n    // loadout => 1 o 2\n    for (let loadout = 1; loadout <= 2; loadout++) {\n      const designs = {};\n      for (let part = 3; part < 9; part++) {\n        const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                    SELECT DesignID\n                    FROM Parts_CarLoadout\n                    WHERE TeamID = ${t}\n                        AND PartType = ${part}\n                        AND LoadoutID = ${loadout}\n                    `, 'allRows');\n        designs[part] = row;\n      }\n      // engine\n      const engine = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                    SELECT MAX(DesignID)\n                    FROM Parts_Designs\n                    WHERE PartType = 0\n                    AND TeamID = ${t}\n                `, 'allRows');\n      designs[0] = engine;\n      teams[t][loadout] = designs;\n    }\n  }\n  return teams;\n}\n\n// Asumiendo que tu clase CarAnalysisUtils ya tiene otros métodos traducidos\n// Añadimos/completamos con estos métodos:\n\nfunction fitLatestDesignsAllGrid(customTeam = false) {\n  // SELECT Day, CurrentSeason FROM Player_State\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Day, CurrentSeason \n        FROM Player_State\n        `, \"singleRow\");\n  if (!row) {\n    console.warn(\"No Player_State data found.\");\n    return;\n  }\n  const [day, season] = row;\n  // Obtenemos las mejores piezas hasta 'day'\n  const bestParts = getBestPartsUntil(day, customTeam);\n\n  // Para cada equipo en bestParts\n  for (const team of Object.keys(bestParts)) {\n    fitLatestDesignsOneTeam(team, bestParts[team]);\n  }\n\n  // conn.commit() (en SQL.js no es necesario típicamente)\n}\nfunction fitLatestDesignsOneTeam(teamId, parts) {\n  // Recorremos loadout = 1 y 2\n  for (let loadout = 1; loadout <= 2; loadout++) {\n    // Para cada 'part' en el objeto parts\n    for (const partKey of Object.keys(parts)) {\n      const part = Number(partKey);\n      if (part !== 0) {\n        // En Python, parts[part] = [[designId], ...], asumiendo la estructura\n        const design = parts[part][0][0]; // -> designID\n        // fitted_design actual\n        const fittedRow = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT DesignID \n                        FROM Parts_CarLoadout\n                        WHERE TeamID = ${teamId}\n                        AND PartType = ${part}\n                        AND LoadoutID = ${loadout}\n                    `, \"singleRow\");\n        if (!fittedRow) {\n          console.warn(`No fittedRow found for TeamID=${teamId}, part=${part}, loadout=${loadout}`);\n          continue;\n        }\n        const fittedDesign = fittedRow[0];\n        if (design !== fittedDesign) {\n          // Buscamos items disponibles\n          const partsAvailable = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID\n                        FROM Parts_Items\n                        WHERE DesignID = ${design}\n                            AND AssociatedCar IS NULL\n                        `, \"allRows\");\n          if (!partsAvailable.length) {\n            // no hay items disponibles => creamos uno nuevo\n            const item = createNewItem(design, part);\n            addPartToLoadout(design, part, teamId, loadout, item);\n          } else {\n            const item = partsAvailable[0][0]; // primer item\n            addPartToLoadout(design, part, teamId, loadout, item);\n          }\n        } else {\n          // design ya está equipado en este loadout\n          // Miramos si loadout 1 y 2 comparten item\n          const otherLoadout = loadout === 2 ? 1 : 2;\n          const fittedItemOther = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID \n                        FROM Parts_CarLoadout\n                        WHERE TeamID = ${teamId}\n                            AND PartType = ${part}\n                            AND LoadoutID = ${otherLoadout}\n                        `, \"singleRow\");\n          const fittedItem = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID \n                        FROM Parts_CarLoadout\n                        WHERE TeamID = ${teamId}\n                            AND PartType = ${part}\n                            AND LoadoutID = ${loadout}\n                        `, \"singleRow\");\n          if (fittedItemOther && fittedItem && fittedItemOther[0] === fittedItem[0]) {\n            // Ambos loadouts tienen el mismo item => creamos uno nuevo\n            const item = createNewItem(design, part);\n            addPartToLoadout(design, part, teamId, loadout, item);\n          }\n        }\n      }\n    }\n  }\n\n  // commit\n  // (en SQL.js no es necesario, pero podrías hacer db.run(\"BEGIN/COMMIT\") si fuera el caso)\n}\nfunction updateItemsForDesignDict(designDict, teamId) {\n  for (const designKey of Object.keys(designDict)) {\n    const design = Number(designKey);\n    const nParts = parseInt(designDict[designKey], 10);\n\n    // SELECT PartType FROM Parts_Designs WHERE DesignID = {design}\n    const partType = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT PartType\n        FROM Parts_Designs\n        WHERE DesignID = ${design}\n      `, \"singleValue\");\n\n    // SELECT COUNT(*) FROM Parts_Items WHERE DesignID = {design} AND BuildWork = X\n    let actualParts = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT COUNT(*)\n        FROM Parts_Items\n        WHERE DesignID = ${design}\n          AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[partType]}\n      `, \"singleValue\");\n    if (actualParts == null) actualParts = 0;\n    let diff = nParts - actualParts;\n    if (diff > 0) {\n      while (diff > 0) {\n        createNewItem(design, partType);\n        diff--;\n      }\n    } else if (diff < 0) {\n      while (diff < 0) {\n        deleteItem(design);\n        diff++;\n      }\n    }\n  }\n\n  // commit\n}\nfunction fitLoadoutsDict(loadoutsDict, teamId) {\n  for (const partKey of Object.keys(loadoutsDict)) {\n    const part = Number(partKey);\n    const design1 = loadoutsDict[part][0];\n    const design2 = loadoutsDict[part][1];\n\n    // SELECT DesignID, ItemID FROM Parts_CarLoadout ...\n    let fittedDesign1 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                SELECT DesignID, ItemID\n                FROM Parts_CarLoadout\n                WHERE TeamID = ${teamId}\n                AND PartType = ${part}\n                AND LoadoutID = 1\n            `, \"singleRow\");\n    if (design1 != null) {\n      if (fittedDesign1 && fittedDesign1[0] != null && fittedDesign1[1] != null) {\n        // \"UPDATE Parts_Items SET AssociatedCar = NULL WHERE ItemID = ?\"\n        const itemId = fittedDesign1[1];\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        UPDATE Parts_Items\n                        SET AssociatedCar = NULL\n                        WHERE ItemID = ${itemId}\n                    `);\n        // fittedDesign1 = fittedDesign1[0]\n        fittedDesign1 = [fittedDesign1[0], itemId]; // si necesitas retenerlo\n      }\n\n      // Si la design1 actual es distinta...\n      if (!fittedDesign1 || fittedDesign1[0] !== design1) {\n        // SELECT ItemID FROM Parts_Items WHERE ...\n        const items1 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID\n                        FROM Parts_Items\n                        WHERE DesignID = ${design1}\n                        AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[part]}\n                        AND AssociatedCar IS NULL\n                    `, \"allRows\");\n        let item1;\n        if (!items1.length) {\n          item1 = createNewItem(design1, part);\n        } else {\n          item1 = items1[0][0];\n        }\n        addPartToLoadout(design1, part, teamId, 1, item1);\n      }\n    }\n\n    // Ahora loadout 2\n    let fittedDesign2 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                SELECT DesignID, ItemID\n                FROM Parts_CarLoadout\n                WHERE TeamID = ${teamId}\n                AND PartType = ${part}\n                AND LoadoutID = 2\n            `, \"singleRow\");\n    if (design2 != null) {\n      if (fittedDesign2 && fittedDesign2[0] != null && fittedDesign2[1] != null) {\n        const itemId2 = fittedDesign2[1];\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        UPDATE Parts_Items\n                        SET AssociatedCar = NULL\n                        WHERE ItemID = ${itemId2}\n                    `);\n        fittedDesign2 = [fittedDesign2[0], itemId2];\n      }\n      if (!fittedDesign2 || fittedDesign2[0] !== design2) {\n        const items2 = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT ItemID\n                        FROM Parts_Items\n                        WHERE DesignID = ${design2}\n                        AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[part]}\n                        AND AssociatedCar IS NULL\n                    `, \"allRows\");\n        let item2;\n        if (!items2.length) {\n          item2 = createNewItem(design2, part);\n        } else {\n          item2 = items2[0][0];\n        }\n        addPartToLoadout(design2, part, teamId, 2, item2);\n      }\n    }\n  }\n\n  // commit\n}\n\n// En Python: create_new_item(design_id, part)\nfunction createNewItem(designId, part) {\n  // SELECT MAX(ItemID) FROM Parts_Items\n  let maxItem = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(ItemID)\n        FROM Parts_Items\n        `, \"singleValue\");\n  const newItem = maxItem + 1;\n  const numberOfManufactures = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT ManufactureCount\n        FROM Parts_Designs\n        WHERE DesignID = ${designId}\n        `, \"singleValue\");\n  const newNManufactures = numberOfManufactures + 1;\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        INSERT INTO Parts_Items\n        VALUES (\n            ${newItem}, \n            ${designId},\n            ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[part]},\n            1,\n            ${newNManufactures},\n            NULL,\n            NULL,\n            0,\n            NULL\n        )\n        `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            UPDATE Parts_Designs\n            SET ManufactureCount = ${newNManufactures}\n            WHERE DesignID = ${designId}\n            `);\n  return newItem;\n}\nfunction deleteItem(designId) {\n  // SELECT PartType FROM Parts_Designs WHERE DesignID = {designId}\n  const partType = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT PartType\n      FROM Parts_Designs\n      WHERE DesignID = ${designId}\n    `, \"singleValue\");\n\n  // SELECT ItemID FROM Parts_Items WHERE DesignID = {designId} AND BuildWork = ...\n  const item = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT ItemID\n      FROM Parts_Items\n      WHERE DesignID = ${designId}\n        AND BuildWork = ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[partType]}\n    `, \"singleValue\");\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      DELETE FROM Parts_Items\n      WHERE ItemID = ${item}\n    `);\n}\nfunction addNewDesign(part, teamId, day, season, latestDesignPartFromTeam, newDesignId) {\n  const maxDesignFromPart = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT MAX(DesignNumber)\n      FROM Parts_Designs\n      WHERE PartType = ${part}\n        AND TeamID = ${teamId}\n    `, \"singleValue\");\n  const newMaxDesign = maxDesignFromPart + 1;\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        UPDATE Parts_Designs_TeamData\n        SET NewDesignsThisSeason = ${newMaxDesign}\n        WHERE TeamID = ${teamId}\n            AND PartType = ${part}\n        `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        INSERT INTO Parts_Designs\n        VALUES (\n            ${newDesignId}, \n            ${part}, \n            6720, \n            6600, \n            ${day - 1}, \n            ${day}, \n            NULL,\n            5,\n            1,\n            0,\n            0,\n            1500,\n            ${season},\n            0,\n            0,\n            4,\n            ${newMaxDesign},\n            1,\n            ${teamId},\n            1\n        )\n        `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        INSERT INTO Parts_DesignHistoryData\n        VALUES (\n            ${newDesignId}, \n            0,\n            0,\n            0,\n            0\n        )\n        `);\n  copyFromTable(\"building\", latestDesignPartFromTeam, newDesignId);\n  copyFromTable(\"staff\", latestDesignPartFromTeam, newDesignId);\n  add4Items(newDesignId, part, teamId);\n}\nfunction copyFromTable(table, latestDesignId, newDesignId) {\n  let tableName = \"\";\n  if (table === \"building\") {\n    tableName = \"Parts_Designs_BuildingEffects\";\n  } else if (table === \"staff\") {\n    tableName = \"Parts_Designs_StaffEffects\";\n  }\n  const rows = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT *\n        FROM ${tableName}\n        WHERE DesignID = ${latestDesignId}\n        `, \"allRows\");\n  for (const row of rows) {\n    // row => [DesignID, col1, col2, ...]\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                INSERT INTO ${tableName}\n                VALUES (${newDesignId}, ${row[1]}, ${row[2]}, 0)\n            `);\n  }\n}\nfunction add4Items(newDesignId, part, teamId) {\n  let maxItem = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(ItemID)\n        FROM Parts_Items\n        `, \"singleValue\");\n  for (let i = 1; i <= 4; i++) {\n    maxItem += 1;\n    (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        INSERT INTO Parts_Items\n        VALUES (\n          ${maxItem},\n          ${newDesignId},\n          ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardBuildworkPerPart[part]},\n          1,\n          ${i},\n          NULL,\n          NULL,\n          0,\n          NULL\n        )\n      `);\n\n    // Para loadout 1 y 2\n    if (i <= 2) {\n      const loadoutId = i;\n      addPartToLoadout(newDesignId, part, teamId, loadoutId, maxItem);\n    }\n  }\n}\nfunction addPartToLoadout(designId, part, teamId, loadoutId, itemId) {\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            UPDATE Parts_CarLoadout\n            SET DesignID = ${designId}, ItemID = ${itemId}\n            WHERE TeamID = ${teamId}\n                AND PartType = ${part}\n                AND LoadoutID = ${loadoutId}\n        `);\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            UPDATE Parts_Items\n            SET AssociatedCar = ${loadoutId}, LastEquippedCar = ${loadoutId}\n            WHERE ItemID = ${itemId}\n        `);\n}\n\n// overwrite_performance_team(...)\nfunction overwritePerformanceTeam(teamId, performance, customTeam = null, yearIteration = null, loadoutDict = null) {\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!row) {\n    console.warn(\"Player_State not found\");\n    return;\n  }\n  const [day, season] = row;\n  const bestParts = getBestPartsUntil(day, customTeam);\n  const teamParts = bestParts[Number(teamId)];\n  for (const partKey of Object.keys(teamParts)) {\n    const part = Number(partKey);\n    if (part !== 0) {\n      const design = teamParts[part][0][0]; // design actual\n      const partName = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.parts[part]; // \"Suspension\", \"Wing\", etc.\n      const newDesign = performance[partName][\"designEditing\"];\n      delete performance[partName][\"designEditing\"];\n      let finalDesign = design;\n      if (Number(newDesign) === -1) {\n        // new part\n        const maxDesign = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT MAX(DesignID)\n                        FROM Parts_Designs\n                    `, 'singleValue');\n        const latestDesignPartFromTeam = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n                        SELECT MAX(DesignID)\n                        FROM Parts_Designs\n                        WHERE PartType = ${part}\n                        AND TeamID = ${teamId}\n                    `, 'singleValue');\n        const newDesignId = loadoutDict[String(part)][0];\n        addNewDesign(part, Number(teamId), day, season, latestDesignPartFromTeam, newDesignId);\n        finalDesign = newDesignId;\n      } else {\n        finalDesign = Number(newDesign);\n      }\n      const statsObj = performance[partName];\n      for (const statKey of Object.keys(statsObj)) {\n        const statNum = parseFloat(statsObj[statKey]);\n        let value;\n        if (yearIteration === \"24\" && Number(statKey) >= 7 && Number(statKey) <= 9) {\n          value = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.downforce24UnitValueToValue[statKey](statNum);\n        } else {\n          value = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.unitValueToValue[statKey](statNum);\n        }\n        if (Number(newDesign) !== -1) {\n          // update\n          changeExpertiseBased(part, statKey, value, Number(teamId));\n          (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n              UPDATE Parts_Designs_StatValues\n              SET UnitValue = ${statsObj[statKey]}\n              WHERE DesignID = ${finalDesign}\n                AND PartStat = ${statKey}\n            `);\n          (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n              UPDATE Parts_Designs_StatValues\n              SET Value = ${value}\n              WHERE DesignID = ${finalDesign}\n                AND PartStat = ${statKey}\n            `);\n        } else {\n          // insert\n          (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n              INSERT INTO Parts_Designs_StatValues\n              VALUES (\n                ${finalDesign}, \n                ${statKey}, \n                ${value}, \n                ${statsObj[statKey]}, \n                0.5, \n                1, \n                0.1\n              )\n            `);\n        }\n      }\n\n      // si newDesign == -1 => insertamos el peso standard\n      if (Number(newDesign) === -1) {\n        (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n            INSERT INTO Parts_Designs_StatValues\n            VALUES (\n              ${finalDesign},\n              15,\n              500,\n              ${_carConstants_js__WEBPACK_IMPORTED_MODULE_0__.standardWeightPerPart[part]},\n              0.5,\n              0,\n              0\n            )\n          `);\n\n        // Tras insertar stats, cambiamos expertise\n        for (const statKey of Object.keys(statsObj)) {\n          const statNum = parseFloat(statsObj[statKey]);\n          let value;\n          if (yearIteration === \"24\" && Number(statKey) >= 7 && Number(statKey) <= 9) {\n            value = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.downforce24UnitValueToValue[statKey](statNum);\n          } else {\n            value = _carConstants_js__WEBPACK_IMPORTED_MODULE_0__.unitValueToValue[statKey](statNum);\n          }\n          changeExpertiseBased(part, statKey, value, Number(teamId), \"new\", latestDesignPartFromTeam);\n        }\n      }\n    }\n  }\n\n  // commit\n}\nfunction changeExpertiseBased(part, stat, newValue, teamId, type = \"existing\", oldDesign = null) {\n  // SELECT Day, CurrentSeason FROM Player_State\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n  if (!row) {\n    console.warn(\"No Player_State found to do expertise changes\");\n    return;\n  }\n  const [day, curSeason] = row;\n  let currentValue = null;\n  if (type === \"existing\") {\n    // SELECT MAX(Value) FROM Parts_Designs_StatValues ...\n    currentValue = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(Value)\n        FROM Parts_Designs_StatValues\n        WHERE PartStat = ${stat}\n          AND DesignID IN (\n            SELECT MAX(DesignID)\n            FROM Parts_Designs\n            WHERE PartType = ${part}\n              AND TeamID = ${teamId}\n              AND ValidFrom = ${curSeason}\n          )\n      `, 'singleValue');\n  } else if (type === \"new\") {\n    // SELECT Value FROM Parts_Designs_StatValues ...\n    currentValue = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT Value\n        FROM Parts_Designs_StatValues\n        WHERE PartStat = ${stat}\n          AND DesignID = ${oldDesign}\n      `, 'singleValue');\n  }\n  if (!currentValue) {\n    currentValue = 1; // si no hay valor\n  }\n  if (currentValue === 0) {\n    currentValue = 1;\n  }\n\n  // en Python se hacía un cálculo con \"current_expertise\" (combinado),\n  // pero aquí se ve que en el final pones:\n  // new_expertise = current_value / 0.8\n  // => Hardcodeado. Ajusta si corresponde a tu lógica real.\n  const newExpertise = currentValue / 0.8;\n  (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        UPDATE Parts_TeamExpertise\n        SET Expertise = ${newExpertise}\n        WHERE TeamID = ${teamId}\n            AND PartType = ${part}\n            AND PartStat = ${stat}\n        `);\n}\n\n// get_performance_all_teams_season(...) => ya lo tienes, o lo traduces igual\n\nfunction getPerformanceAllTeamsSeason(customTeam = false) {\n  const races = getRacesDays();\n  const firstDay = getFirstDaySeason();\n  // Insertamos al principio (0, firstDay, 0)\n  races.unshift([0, firstDay, 0]); // similar a insert(0, first_tuple)\n\n  const racesPerformances = [];\n  let previous = null;\n  for (const raceDay of races) {\n    // raceDay => [RaceID, Day, TrackID], en python pilla el day en [1]\n    const day = raceDay[1];\n    const performances = getPerformanceAllTeams(day, previous, customTeam);\n    racesPerformances.push(performances);\n    previous = performances;\n  }\n  const allRaces = getAllRaces();\n  return [racesPerformances, allRaces];\n}\nfunction getFirstDaySeason() {\n  const query = `\n        SELECT Number, COUNT(*) as Occurrences\n        FROM (\n            SELECT DayCreated as Number FROM Parts_Designs\n            UNION ALL\n            SELECT DayCompleted as Number FROM Parts_Designs\n        ) Combined\n        GROUP BY Number\n        ORDER BY Occurrences DESC\n        LIMIT 1;\n        `;\n  const row = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(query, 'singleRow');\n  if (!row) {\n    console.warn(\"No firstDay found\");\n    return 0;\n  }\n  const firstDay = row[0];\n  return firstDay;\n}\nfunction getAttributesAllTeams(customTeam = false) {\n  const teams = {};\n  const contributors = getContributorsDict();\n  const bestParts = getBestParts(customTeam);\n  const teamList = customTeam ? [...Array(10).keys()].map(i => i + 1).concat(32) : [...Array(10).keys()].map(i => i + 1);\n  for (const i of teamList) {\n    const dict = getCarStats(bestParts[i]);\n    const partStats = getPartStatsDict(dict);\n    const attributes = calculateCarAttributes(contributors, partStats);\n    teams[i] = attributes;\n  }\n  return teams;\n}\nfunction getMaxDesign() {\n  const val = (0,_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB)(`\n        SELECT MAX(DesignID)\n        FROM Parts_Designs\n        `, 'singleValue');\n  return val;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/carAnalysisUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/carConstants.js":
/*!****************************************************!*\
  !*** ./src/js/backend/scriptUtils/carConstants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceleration_contributors: () => (/* binding */ acceleration_contributors),\n/* harmony export */   airflow_front_factors: () => (/* binding */ airflow_front_factors),\n/* harmony export */   airflow_middle_factors: () => (/* binding */ airflow_middle_factors),\n/* harmony export */   airflow_sensitivity_factors: () => (/* binding */ airflow_sensitivity_factors),\n/* harmony export */   attributesContributions: () => (/* binding */ attributesContributions),\n/* harmony export */   attributesContributions2: () => (/* binding */ attributesContributions2),\n/* harmony export */   attributesContributions3: () => (/* binding */ attributesContributions3),\n/* harmony export */   attributesMinMax: () => (/* binding */ attributesMinMax),\n/* harmony export */   attributesUnits: () => (/* binding */ attributesUnits),\n/* harmony export */   brake_cooling_contributors: () => (/* binding */ brake_cooling_contributors),\n/* harmony export */   brake_cooling_factors: () => (/* binding */ brake_cooling_factors),\n/* harmony export */   carAttributes: () => (/* binding */ carAttributes),\n/* harmony export */   defaultPartsStats: () => (/* binding */ defaultPartsStats),\n/* harmony export */   dirty_air_contributors: () => (/* binding */ dirty_air_contributors),\n/* harmony export */   downforce24UnitValueToValue: () => (/* binding */ downforce24UnitValueToValue),\n/* harmony export */   drag_reduction_factors: () => (/* binding */ drag_reduction_factors),\n/* harmony export */   drs_contributors: () => (/* binding */ drs_contributors),\n/* harmony export */   drs_delta_factors: () => (/* binding */ drs_delta_factors),\n/* harmony export */   engine_cooling_contributors: () => (/* binding */ engine_cooling_contributors),\n/* harmony export */   engine_cooling_factors: () => (/* binding */ engine_cooling_factors),\n/* harmony export */   engine_unitValueToValue: () => (/* binding */ engine_unitValueToValue),\n/* harmony export */   fuel_efficiency_factors: () => (/* binding */ fuel_efficiency_factors),\n/* harmony export */   high_speed_contributors: () => (/* binding */ high_speed_contributors),\n/* harmony export */   high_speed_downforce_factors: () => (/* binding */ high_speed_downforce_factors),\n/* harmony export */   lifespanPartsMinMax: () => (/* binding */ lifespanPartsMinMax),\n/* harmony export */   lifespan_factors: () => (/* binding */ lifespan_factors),\n/* harmony export */   low_speed_contributors: () => (/* binding */ low_speed_contributors),\n/* harmony export */   low_speed_downforce_factors: () => (/* binding */ low_speed_downforce_factors),\n/* harmony export */   medium_speed_contributors: () => (/* binding */ medium_speed_contributors),\n/* harmony export */   medium_speed_downforce_factors: () => (/* binding */ medium_speed_downforce_factors),\n/* harmony export */   minimalWeightPerPart: () => (/* binding */ minimalWeightPerPart),\n/* harmony export */   operational_range_factors: () => (/* binding */ operational_range_factors),\n/* harmony export */   optimalWeightPerPart: () => (/* binding */ optimalWeightPerPart),\n/* harmony export */   parts: () => (/* binding */ parts),\n/* harmony export */   performance_loss_factors: () => (/* binding */ performance_loss_factors),\n/* harmony export */   performance_threshold_factors: () => (/* binding */ performance_threshold_factors),\n/* harmony export */   power_factors: () => (/* binding */ power_factors),\n/* harmony export */   standardBuildworkPerPart: () => (/* binding */ standardBuildworkPerPart),\n/* harmony export */   standardWeightPerPart: () => (/* binding */ standardWeightPerPart),\n/* harmony export */   stats: () => (/* binding */ stats),\n/* harmony export */   statsMinMax: () => (/* binding */ statsMinMax),\n/* harmony export */   top_speed_contributors: () => (/* binding */ top_speed_contributors),\n/* harmony export */   unitValueToValue: () => (/* binding */ unitValueToValue)\n/* harmony export */ });\nconst stats = {\n  0: \"airflow_front\",\n  1: \"airflow_sensitivity\",\n  2: \"brake_cooling\",\n  3: \"drs_delta\",\n  4: \"drag_reduction\",\n  5: \"engine_cooling\",\n  6: \"fuel_efficiency\",\n  7: \"low_speed_downforce\",\n  8: \"medium_speed_downforce\",\n  9: \"high_speed_downforce\",\n  10: \"power\",\n  11: \"performance_loss\",\n  12: \"performance_threshold\",\n  13: \"airflow_middle\",\n  14: \"operational_range\",\n  15: \"lifespan\",\n  16: \"special_weight\"\n};\nconst defaultPartsStats = {\n  3: [3, 4, 5, 13, 15],\n  4: [0, 1, 2, 7, 8, 9, 15],\n  5: [1, 3, 4, 7, 8, 9, 15],\n  6: [0, 4, 5, 13, 15],\n  7: [1, 4, 7, 8, 9, 15],\n  8: [0, 2, 4, 7, 8, 9, 15]\n};\nconst unitValueToValue = {\n  0: x => x * 10,\n  1: x => x * 10,\n  2: x => x * 10,\n  3: x => x * 10,\n  4: x => x * 10,\n  5: x => x * 10,\n  6: x => (x - 90) * 1000 / 10,\n  7: x => (x - 3) / 0.002,\n  8: x => (x - 5) / 0.002,\n  9: x => (x - 7) / 0.001,\n  10: x => (x - 90) * 1000 / 10,\n  11: x => (85 - x) * 1000 / 20,\n  12: x => (x - 70) * 1000 / 15,\n  13: x => x * 10,\n  14: x => (85 - x) * 1000 / 15,\n  15: x => (x - 40) * 1000 / 30,\n  18: x => (x - 40) * 1000 / 30,\n  19: x => (x - 40) * 1000 / 30\n};\nconst engine_unitValueToValue = {\n  6: x => 20 * (x - 50),\n  10: x => 50 * (x - 80),\n  11: x => -50 * (x - 85),\n  12: x => 200 / 3 * (x - 70),\n  14: x => 50 * (x - 60),\n  18: x => 50 * (x - 50),\n  19: x => 50 * (x - 50)\n};\nconst downforce24UnitValueToValue = {\n  7: x => 497.6 * x - 1489.8,\n  8: x => 496.8 * x - 2479.5,\n  9: x => 974.048 * x - 6803.2614\n};\nconst parts = {\n  0: \"engine\",\n  3: \"chassis\",\n  4: \"front_wing\",\n  5: \"rear_wing\",\n  6: \"sidepods\",\n  7: \"underfloor\",\n  8: \"suspension\"\n};\nconst standardWeightPerPart = {\n  3: 5150,\n  4: 2625,\n  5: 3125,\n  6: 4125,\n  7: 3550,\n  8: 2900\n};\nconst standardBuildworkPerPart = {\n  3: 2000,\n  4: 500,\n  5: 500,\n  6: 1500,\n  7: 1500,\n  8: 1500\n};\nconst optimalWeightPerPart = {\n  3: 4070,\n  4: 1525,\n  5: 1945,\n  6: 3025,\n  7: 2390,\n  8: 1940\n};\nconst minimalWeightPerPart = {\n  3: 3800,\n  4: 1250,\n  5: 1650,\n  6: 2750,\n  7: 2100,\n  8: 1700\n};\nconst carAttributes = {\n  0: \"top_speed\",\n  1: \"acceleration\",\n  2: \"drs\",\n  3: \"low_speed\",\n  4: \"medium_speed\",\n  5: \"high_speed\",\n  6: \"dirty_air\",\n  7: \"brake_cooling\",\n  8: \"engine_cooling\"\n};\nconst statsMinMax = {\n  0: [0, 100],\n  1: [0, 100],\n  2: [0, 100],\n  3: [0, 100],\n  4: [0, 100],\n  5: [0, 100],\n  7: [3, 5],\n  8: [5, 7],\n  9: [7, 8],\n  10: [90, 100],\n  13: [0, 100]\n};\nconst lifespanPartsMinMax = {\n  3: [3800, 6500],\n  4: [1250, 4000],\n  5: [1650, 4600],\n  6: [2750, 5500],\n  7: [2100, 5000],\n  8: [1700, 4100]\n};\nconst attributesMinMax = {\n  top_speed: [313.00, 328.00],\n  acceleration: [1.800, 1.900],\n  drs: [0, 100],\n  low_speed: [2.000, 3.000],\n  medium_speed: [3.000, 4.000],\n  high_speed: [4.000, 5.500],\n  dirty_air: [0, 100],\n  brake_cooling: [0, 100],\n  engine_cooling: [0, 100]\n};\nconst attributesUnits = {\n  top_speed: \"km/h\",\n  acceleration: \"G\",\n  drs: \"%\",\n  low_speed: \"G\",\n  medium_speed: \"G\",\n  high_speed: \"G\",\n  dirty_air: \"%\",\n  brake_cooling: \"%\",\n  engine_cooling: \"%\"\n};\nconst attributesContributions = {\n  top_speed: 0.15,\n  acceleration: 0,\n  drs: 0.15,\n  low_speed: 0.1666,\n  medium_speed: 0.1666,\n  high_speed: 0.1666,\n  dirty_air: 0.0666,\n  brake_cooling: 0.0666,\n  engine_cooling: 0.0666\n};\nconst attributesContributions2 = {\n  top_speed: 0.15,\n  acceleration: 0,\n  drs: 0.15,\n  low_speed: 0.2166,\n  medium_speed: 0.2166,\n  high_speed: 0.2166,\n  dirty_air: 0.03,\n  brake_cooling: 0.01,\n  engine_cooling: 0.01\n};\nconst attributesContributions3 = {\n  top_speed: 0.144,\n  acceleration: 0.018,\n  drs: 0.115,\n  low_speed: 0.195,\n  medium_speed: 0.195,\n  high_speed: 0.195,\n  dirty_air: 0.029,\n  brake_cooling: 0.078,\n  engine_cooling: 0.031\n};\nconst fuel_efficiency_factors = {\n  0: 1\n};\nconst power_factors = {\n  0: 1\n};\nconst performance_loss_factors = {\n  0: 1\n};\nconst performance_threshold_factors = {\n  0: 1\n};\nconst operational_range_factors = {\n  0: 1\n};\nconst lifespan_factors = {\n  1: 0,\n  2: 0,\n  3: 5,\n  4: 2,\n  5: 3,\n  6: 5,\n  7: 4,\n  8: 1\n};\nconst drag_reduction_factors = {\n  3: 0.2,\n  5: 0.3,\n  6: 0.2,\n  7: 0.2,\n  8: 0.1\n};\nconst engine_cooling_factors = {\n  3: 0.4,\n  6: 0.6\n};\nconst airflow_middle_factors = {\n  3: 0.6,\n  6: 0.4\n};\nconst airflow_front_factors = {\n  4: 0.4,\n  6: 0.2,\n  8: 0.4\n};\nconst airflow_sensitivity_factors = {\n  4: 0.4,\n  5: 0.4,\n  7: 0.2\n};\nconst brake_cooling_factors = {\n  4: 0.4,\n  8: 0.6\n};\nconst low_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.3,\n  8: 0.3\n};\nconst medium_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.5,\n  8: 0.1\n};\nconst high_speed_downforce_factors = {\n  4: 0.2,\n  5: 0.2,\n  7: 0.5,\n  8: 0.1\n};\nconst drs_delta_factors = {\n  5: 0.75,\n  3: 0.25\n};\nconst top_speed_contributors = {\n  4: 1\n};\nconst acceleration_contributors = {\n  10: 0.5,\n  4: 0.5,\n  16: 0.15\n};\nconst drs_contributors = {\n  3: 1\n};\nconst low_speed_contributors = {\n  0: 0.6,\n  7: 1,\n  16: 0.24\n};\nconst medium_speed_contributors = {\n  0: 0.4,\n  13: 0.4,\n  8: 1,\n  16: 0.27\n};\nconst high_speed_contributors = {\n  13: 0.6,\n  9: 1,\n  16: 0.24\n};\nconst dirty_air_contributors = {\n  1: 1\n};\nconst brake_cooling_contributors = {\n  2: 1\n};\nconst engine_cooling_contributors = {\n  5: 1\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/carConstants.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/countries.js":
/*!*************************************************!*\
  !*** ./src/js/backend/scriptUtils/countries.js ***!
  \*************************************************/
/***/ (() => {

eval("countries_abreviations = {\n  \"Andorra\": \"AD\",\n  \"United Arab Emirates\": \"AE\",\n  \"Afghanistan\": \"AF\",\n  \"Antigua and Barbuda\": \"AG\",\n  \"Anguilla\": \"AI\",\n  \"Albania\": \"AL\",\n  \"Armenia\": \"AM\",\n  \"Netherlands Antilles\": \"AN\",\n  \"Angola\": \"AO\",\n  \"Antarctica\": \"AQ\",\n  \"Argentina\": \"AR\",\n  \"American Samoa\": \"AS\",\n  \"Austria\": \"AT\",\n  \"Australia\": \"AU\",\n  \"Aruba\": \"AW\",\n  \"Åland Islands\": \"AX\",\n  \"Azerbaijan\": \"AZ\",\n  \"Bosnia and Herzegovina\": \"BA\",\n  \"Barbados\": \"BB\",\n  \"Bangladesh\": \"BD\",\n  \"Belgium\": \"BE\",\n  \"Burkina Faso\": \"BF\",\n  \"Bulgaria\": \"BG\",\n  \"Bahrain\": \"BH\",\n  \"Burundi\": \"BI\",\n  \"Benin\": \"BJ\",\n  \"Saint Barthélemy\": \"BL\",\n  \"Bermuda\": \"BM\",\n  \"Brunei Darussalam\": \"BN\",\n  \"Bolivia\": \"BO\",\n  \"Brazil\": \"BR\",\n  \"Bahamas\": \"BS\",\n  \"Bhutan\": \"BT\",\n  \"Bouvet Island\": \"BV\",\n  \"Botswana\": \"BW\",\n  \"Belarus\": \"BY\",\n  \"Belize\": \"BZ\",\n  \"Canada\": \"CA\",\n  \"Cocos (Keeling) Islands\": \"CC\",\n  \"Congo, Democratic Republic of the\": \"CD\",\n  \"Central African Republic\": \"CF\",\n  \"Congo, Republic of the\": \"CG\",\n  \"Switzerland\": \"CH\",\n  \"Côte d'Ivoire\": \"CI\",\n  \"Cook Islands\": \"CK\",\n  \"Chile\": \"CL\",\n  \"Cameroon\": \"CM\",\n  \"China\": \"CN\",\n  \"Colombia\": \"CO\",\n  \"Costa Rica\": \"CR\",\n  \"Cuba\": \"CU\",\n  \"Cape Verde\": \"CV\",\n  \"Curaçao\": \"CW\",\n  \"Christmas Island\": \"CX\",\n  \"Cyprus\": \"CY\",\n  \"Czech Republic\": \"CZ\",\n  \"Germany\": \"DE\",\n  \"Djibouti\": \"DJ\",\n  \"Denmark\": \"DK\",\n  \"Dominica\": \"DM\",\n  \"Dominican Republic\": \"DO\",\n  \"Algeria\": \"DZ\",\n  \"Ecuador\": \"EC\",\n  \"Estonia\": \"EE\",\n  \"Egypt\": \"EG\",\n  \"Western Sahara\": \"EH\",\n  \"Eritrea\": \"ER\",\n  \"Spain\": \"ES\",\n  \"Ethiopia\": \"ET\",\n  \"Finland\": \"FI\",\n  \"Fiji\": \"FJ\",\n  \"Falkland Islands (Malvinas)\": \"FK\",\n  \"Micronesia, Federated States of\": \"FM\",\n  \"Faroe Islands\": \"FO\",\n  \"France\": \"FR\",\n  \"Gabon\": \"GA\",\n  \"United Kingdom\": \"GB\",\n  \"Grenada\": \"GD\",\n  \"Georgia\": \"GE\",\n  \"French Guiana\": \"GF\",\n  \"Guernsey\": \"GG\",\n  \"Ghana\": \"GH\",\n  \"Gibraltar\": \"GI\",\n  \"Greenland\": \"GL\",\n  \"Gambia\": \"GM\",\n  \"Guinea\": \"GN\",\n  \"Guadeloupe\": \"GP\",\n  \"Equatorial Guinea\": \"GQ\",\n  \"Greece\": \"GR\",\n  \"South Georgia and the South Sandwich Islands\": \"GS\",\n  \"Guatemala\": \"GT\",\n  \"Guam\": \"GU\",\n  \"Guinea-Bissau\": \"GW\",\n  \"Guyana\": \"GY\",\n  \"Hong Kong\": \"HK\",\n  \"Heard Island and McDonald Islands\": \"HM\",\n  \"Honduras\": \"HN\",\n  \"Croatia\": \"HR\",\n  \"Haiti\": \"HT\",\n  \"Hungary\": \"HU\",\n  \"Indonesia\": \"ID\",\n  \"Ireland\": \"IE\",\n  \"Israel\": \"IL\",\n  \"Isle of Man\": \"IM\",\n  \"India\": \"IN\",\n  \"British Indian Ocean Territory\": \"IO\",\n  \"Iraq\": \"IQ\",\n  \"Iran, Islamic Republic of\": \"IR\",\n  \"Iceland\": \"IS\",\n  \"Italy\": \"IT\",\n  \"Jersey\": \"JE\",\n  \"Jamaica\": \"JM\",\n  \"Jordan\": \"JO\",\n  \"Japan\": \"JP\",\n  \"Kenya\": \"KE\",\n  \"Kyrgyzstan\": \"KG\",\n  \"Cambodia\": \"KH\",\n  \"Kiribati\": \"KI\",\n  \"Comoros\": \"KM\",\n  \"Saint Kitts and Nevis\": \"KN\",\n  \"Korea, Democratic People's Republic of\": \"KP\",\n  \"Korea, Republic of\": \"KR\",\n  \"Kuwait\": \"KW\",\n  \"Cayman Islands\": \"KY\",\n  \"Kazakhstan\": \"KZ\",\n  \"Lao People's Democratic Republic\": \"LA\",\n  \"Lebanon\": \"LB\",\n  \"Saint Lucia\": \"LC\",\n  \"Liechtenstein\": \"LI\",\n  \"Sri Lanka\": \"LK\",\n  \"Liberia\": \"LR\",\n  \"Lesotho\": \"LS\",\n  \"Lithuania\": \"LT\",\n  \"Luxembourg\": \"LU\",\n  \"Latvia\": \"LV\",\n  \"Libya\": \"LY\",\n  \"Morocco\": \"MA\",\n  \"Monaco\": \"MC\",\n  \"Moldova, Republic of\": \"MD\",\n  \"Montenegro\": \"ME\",\n  \"Saint Martin (French part)\": \"MF\",\n  \"Madagascar\": \"MG\",\n  \"Marshall Islands\": \"MH\",\n  \"Macedonia, the Former Yugoslav Republic of\": \"MK\",\n  \"Mali\": \"ML\",\n  \"Myanmar\": \"MM\",\n  \"Mongolia\": \"MN\",\n  \"Macao\": \"MO\",\n  \"Northern Mariana Islands\": \"MP\",\n  \"Martinique\": \"MQ\",\n  \"Mauritania\": \"MR\",\n  \"Montserrat\": \"MS\",\n  \"Malta\": \"MT\",\n  \"Mauritius\": \"MU\",\n  \"Maldives\": \"MV\",\n  \"Malawi\": \"MW\",\n  \"Mexico\": \"MX\",\n  \"Malaysia\": \"MY\",\n  \"Mozambique\": \"MZ\",\n  \"Namibia\": \"NA\",\n  \"New Caledonia\": \"NC\",\n  \"Niger\": \"NE\",\n  \"Norfolk Island\": \"NF\",\n  \"Nigeria\": \"NG\",\n  \"Nicaragua\": \"NI\",\n  \"Netherlands\": \"NL\",\n  \"Norway\": \"NO\",\n  \"Nepal\": \"NP\",\n  \"Nauru\": \"NR\",\n  \"Niue\": \"NU\",\n  \"New Zealand\": \"NZ\",\n  \"Oman\": \"OM\",\n  \"Panama\": \"PA\",\n  \"Peru\": \"PE\",\n  \"French Polynesia\": \"PF\",\n  \"Papua New Guinea\": \"PG\",\n  \"Philippines\": \"PH\",\n  \"Pakistan\": \"PK\",\n  \"Poland\": \"PL\",\n  \"Saint Pierre and Miquelon\": \"PM\",\n  \"Pitcairn\": \"PN\",\n  \"Puerto Rico\": \"PR\",\n  \"Palestine, State of\": \"PS\",\n  \"Portugal\": \"PT\",\n  \"Palau\": \"PW\",\n  \"Paraguay\": \"PY\",\n  \"Qatar\": \"QA\",\n  \"Réunion\": \"RE\",\n  \"Romania\": \"RO\",\n  \"Serbia\": \"RS\",\n  \"Russian\": \"RU\",\n  \"Rwanda\": \"RW\",\n  \"Saudi Arabia\": \"SA\",\n  \"Solomon Islands\": \"SB\",\n  \"Seychelles\": \"SC\",\n  \"Sudan\": \"SD\",\n  \"Sweden\": \"SE\",\n  \"Singapore\": \"SG\",\n  \"Saint Helena, Ascension and Tristan da Cunha\": \"SH\",\n  \"Slovenia\": \"SI\",\n  \"Svalbard and Jan Mayen\": \"SJ\",\n  \"Slovakia\": \"SK\",\n  \"Sierra Leone\": \"SL\",\n  \"San Marino\": \"SM\",\n  \"Senegal\": \"SN\",\n  \"Somalia\": \"SO\",\n  \"Suriname\": \"SR\",\n  \"South Sudan\": \"SS\",\n  \"Sao Tome and Principe\": \"ST\",\n  \"El Salvador\": \"SV\",\n  \"Sint Maarten (Dutch part)\": \"SX\",\n  \"Syrian Arab Republic\": \"SY\",\n  \"Swaziland\": \"SZ\",\n  \"Turks and Caicos Islands\": \"TC\",\n  \"Chad\": \"TD\",\n  \"French Southern Territories\": \"TF\",\n  \"Togo\": \"TG\",\n  \"Thailand\": \"TH\",\n  \"Tajikistan\": \"TJ\",\n  \"Tokelau\": \"TK\",\n  \"Timor-Leste\": \"TL\",\n  \"Turkmenistan\": \"TM\",\n  \"Tunisia\": \"TN\",\n  \"Tonga\": \"TO\",\n  \"Turkey\": \"TR\",\n  \"Trinidad and Tobago\": \"TT\",\n  \"Tuvalu\": \"TV\",\n  \"Taiwan, Province of China\": \"TW\",\n  \"Tanzania, United Republic of\": \"TZ\",\n  \"Ukraine\": \"UA\",\n  \"Uganda\": \"UG\",\n  \"United States Minor Outlying Islands\": \"UM\",\n  \"United States\": \"US\",\n  \"Uruguay\": \"UY\",\n  \"Uzbekistan\": \"UZ\",\n  \"Holy See (Vatican City State)\": \"VA\",\n  \"Saint Vincent and the Grenadines\": \"VC\",\n  \"Venezuela\": \"VE\",\n  \"Virgin Islands, British\": \"VG\",\n  \"Virgin Islands, U.S.\": \"VI\",\n  \"Vietnam\": \"VN\",\n  \"Vanuatu\": \"VU\",\n  \"Wallis and Futuna\": \"WF\",\n  \"Samoa\": \"WS\",\n  \"Yemen\": \"YE\",\n  \"Mayotte\": \"YT\",\n  \"South Africa\": \"ZA\",\n  \"Zambia\": \"ZM\",\n  \"Zimbabwe\": \"ZW\"\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/countries.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/dbUtils.js":
/*!***********************************************!*\
  !*** ./src/js/backend/scriptUtils/dbUtils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DBUtils)\n/* harmony export */ });\n/* harmony import */ var _countries_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./countries.js */ \"./src/js/backend/scriptUtils/countries.js\");\n/* harmony import */ var _countries_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_countries_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _carConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carConstants.js */ \"./src/js/backend/scriptUtils/carConstants.js\");\n\n\nclass DBUtils {\n  /**\r\n   * @param {Function} queryDBFn - Función para ejecutar queries (queryDB).\r\n   * @param {Object} metadata - Objeto de metadatos (si lo necesitas).\r\n   */\n  constructor(queryDBFn, metadata) {\n    this.queryDB = queryDBFn;\n    this.metadata = metadata;\n  }\n\n  /**\r\n   * Convierte un color ARGB a hexadecimal.\r\n   */\n  argbToHex(argb) {\n    const rgb = argb & 0xFFFFFF; // Ignora el canal alfa\n    return `#${rgb.toString(16).padStart(6, '0').toUpperCase()}`;\n  }\n\n  /**\r\n   * Verifica si el archivo de guardado es de un año específico.\r\n   * @returns {Array} [ \"23\" o \"24\", TeamName, primaryColor, secondaryColor ]\r\n   */\n  checkYearSave() {\n    // Ver si existe la tabla Countries_RaceRecord\n    const row = this.queryDB(`\n      SELECT name \n      FROM sqlite_master \n      WHERE type='table' AND name='Countries_RaceRecord'\n    `, 'singleRow');\n    if (!row) {\n      // No existe la tabla -> asumo que es \"23\"\n      return [\"23\", null, null, null];\n    }\n\n    // Si existe, entonces busco TeamNameLocKey del TeamID=32\n    const nameValue = this.queryDB(`\n      SELECT TeamNameLocKey \n      FROM Teams \n      WHERE TeamID = 32\n    `, 'singleValue');\n    if (!nameValue) {\n      // No hay valor -> devuelvo \"24\" sin datos\n      return [\"24\", null, null, null];\n    }\n\n    // Extraer nombre\n    const match = nameValue.match(/\\[STRING_LITERAL:Value=\\|(.*?)\\|\\]/);\n    let name = null,\n      primaryColor = null,\n      secondaryColor = null;\n    if (match) {\n      name = match[1];\n\n      // Busco los colores\n      const primaryColorRow = this.queryDB(`\n        SELECT Colour\n        FROM Teams_Colours\n        WHERE TeamID = 32 AND ColourID = 0\n      `, 'singleRow');\n      const secondaryColorRow = this.queryDB(`\n        SELECT Colour\n        FROM Teams_Colours\n        WHERE TeamID = 32 AND ColourID = 1\n      `, 'singleRow');\n      if (primaryColorRow) {\n        primaryColor = this.argbToHex(primaryColorRow[0]);\n      }\n      if (secondaryColorRow) {\n        secondaryColor = this.argbToHex(secondaryColorRow[0]);\n      }\n    }\n    return [\"24\", name, primaryColor, secondaryColor];\n  }\n  fetchNationality(driverID, gameYear) {\n    if (gameYear === \"24\") {\n      const countryID = this.queryDB(`\n        SELECT CountryID \n        FROM Staff_BasicData \n        WHERE StaffID = ${driverID}\n      `, 'singleValue');\n      if (!countryID) return \"\";\n      const countryName = this.queryDB(`\n        SELECT Name \n        FROM Countries \n        WHERE CountryID = ${countryID}\n      `, 'singleValue');\n      if (!countryName) return \"\";\n      const match = countryName.match(/(?<=\\[Nationality_)[^\\]]+/);\n      if (match) {\n        const nat = match[0];\n        const natName = nat.replace(/(?<!^)([A-Z])/g, \" $1\");\n        return (_countries_js__WEBPACK_IMPORTED_MODULE_0___default())[natName] || \"\";\n      }\n      return \"\";\n    } else if (gameYear === \"23\") {\n      const nationality = this.queryDB(`\n        SELECT Nationality \n        FROM Staff_BasicData \n        WHERE StaffID = ${driverID}\n      `, 'singleValue');\n      if (!nationality) return \"\";\n      const natName = nationality.replace(/(?<!^)([A-Z])/g, \" $1\");\n      return (_countries_js__WEBPACK_IMPORTED_MODULE_0___default())[natName] || \"\";\n    }\n    return \"\";\n  }\n  fetchForFutureContract(driverID) {\n    const teamID = this.queryDB(`\n      SELECT TeamID \n      FROM Staff_Contracts \n      WHERE StaffID = ${driverID} \n        AND ContractType = 3\n    `, 'singleValue');\n    return teamID ?? -1;\n  }\n  fetchEngines() {\n    const statsIds = [6, 10, 11, 12, 14, 15];\n    const enginesList = [];\n    console.log(\"Fetching engines...\");\n    let newEngineIds = this.queryDB(`\n      SELECT engineID FROM Custom_Engines_List`, 'allRows');\n    newEngineIds = newEngineIds.map(row => row[0]);\n    let newErsIds = newEngineIds.map(id => id + 1);\n    let newGearboxesIds = newEngineIds.map(id => id + 2);\n    for (let i = 0; i < newEngineIds.length; i++) {\n      let resultDict = {};\n\n      // Obtener valores de stats\n      for (const stat of statsIds) {\n        const statResult = this.queryDB(`\n                SELECT partStat, unitValue \n                FROM Custom_Engines_Stats \n                WHERE designId = ${newEngineIds[i]} AND partStat = ${stat}\n            `, 'singleRow');\n        if (statResult) {\n          resultDict[statResult[0]] = statResult[1];\n        }\n      }\n      console.log(\"ResultDict:\", resultDict);\n\n      // Obtener valor de ERS\n      const ersResult = this.queryDB(`\n            SELECT UnitValue \n            FROM Custom_Engines_Stats \n            WHERE designId = ${newErsIds[i]} AND partStat = 15\n        `, 'singleValue');\n      if (ersResult !== null) {\n        resultDict[18] = ersResult;\n      }\n\n      // Obtener valor de gearbox\n      const gearboxResult = this.queryDB(`\n            SELECT UnitValue \n            FROM Custom_Engines_Stats \n            WHERE designId = ${newGearboxesIds[i]} AND partStat = 15\n        `, 'singleValue');\n      if (gearboxResult !== null) {\n        resultDict[19] = gearboxResult;\n      }\n      const engineName = this.queryDB(`\n          SELECT name \n          FROM Custom_Engines_List\n          WHERE engineID = ${newEngineIds[i]}\n      `, 'singleValue');\n\n      // Añadir la información del motor a la lista\n      enginesList.push([newEngineIds[i], resultDict, engineName]);\n    }\n    const engineAllocations = this.queryDB(`\n      SELECT * FROM Custom_Engine_Allocations\n    `, 'allRows');\n    return [enginesList, engineAllocations];\n  }\n  fetchMentality(staffID) {\n    // Obtengo todas las filas (morale es un array de arrays [[opinion],[opinion], ...])\n    const morale = this.queryDB(`\n      SELECT Opinion\n      FROM Staff_Mentality_AreaOpinions\n      WHERE StaffID = ${staffID}\n    `, 'allRows');\n\n    // Obtengo un solo valor\n    const globalMentality = this.queryDB(`\n      SELECT Mentality\n      FROM Staff_State\n      WHERE StaffID = ${staffID}\n    `, 'singleValue');\n    return [morale, globalMentality];\n  }\n  checkDrivesForTeam32(staffData) {\n    // staffData = [ firstName, lastName, staffID, teamID, posInTeam, minContractType, retired, countContracts ]\n\n    const contractRow = this.queryDB(`\n      SELECT TeamID, PosInTeam\n      FROM Staff_Contracts\n      WHERE StaffID = ${staffData[2]} \n        AND ContractType = 0 \n        AND TeamID = 32\n    `, 'singleRow');\n    if (contractRow) {\n      return [staffData[0], staffData[1], staffData[2], 32, contractRow[1], staffData[5], staffData[6], staffData[7]];\n    }\n    return staffData;\n  }\n  removeNumber(str) {\n    if (str && /\\d$/.test(str)) {\n      return str.slice(0, -1);\n    }\n    return str;\n  }\n  formatNamesAndFetchStats(nameData, type) {\n    // nameData: [ FirstName, LastName, StaffID, teamId, positionInTeam, minContractType, retired, countContracts ]\n    let firstName = \"\";\n    let lastName = \"\";\n\n    // Extract firstName\n    if (!nameData[0].includes(\"STRING_LITERAL\")) {\n      const m = nameData[0].match(/StaffName_Forename_(?:Male|Female)_(\\w+)/);\n      firstName = m ? this.removeNumber(m[1]) : \"\";\n    } else {\n      const m = nameData[0].match(/\\|([^|]+)\\|/);\n      firstName = m ? m[1] : \"\";\n    }\n\n    // Extract lastName\n    if (!nameData[1].includes(\"STRING_LITERAL\")) {\n      const m = nameData[1].match(/StaffName_Surname_(\\w+)/);\n      lastName = m ? this.removeNumber(m[1]) : \"\";\n    } else {\n      const m = nameData[1].match(/\\|([^|]+)\\|/);\n      lastName = m ? m[1] : \"\";\n    }\n    const formattedName = `${firstName} ${lastName}`;\n    let teamId = nameData[3] ?? 0;\n    let positionInTeam = nameData[4] ?? 0;\n\n    // para drivers que tienen minContractType != 0 (p.ej. reservas)\n    if (type === \"driver\" && nameData[5] !== 0) {\n      teamId = 0;\n      positionInTeam = 0;\n    }\n    let baseResult;\n    if (type === \"driver\") {\n      // [nombre, staffID, teamID, posInTeam, retired]\n      baseResult = [formattedName, nameData[2], teamId, positionInTeam, nameData[6]];\n    } else {\n      // staff normal\n      baseResult = [formattedName, nameData[2], teamId, positionInTeam];\n    }\n\n    // Buscamos stats\n    if (type === \"driver\") {\n      const statsRows = this.queryDB(`\n        SELECT Val\n        FROM Staff_PerformanceStats\n        WHERE StaffID = ${nameData[2]}\n          AND StatID BETWEEN 2 AND 10\n      `, 'allRows');\n      let stats = statsRows;\n      if (!stats || !stats.length) {\n        // si no hay stats, por defecto 50\n        stats = Array(9).fill([50]);\n      }\n      const extraRow = this.queryDB(`\n        SELECT Improvability, Aggression\n        FROM Staff_DriverData\n        WHERE StaffID = ${nameData[2]}\n      `, 'singleRow');\n\n      // Concatenamos: baseResult + stats + extraRow\n      // stats es array de arrays: [[val],[val],...]\n      // mapeamos para quedarnos con stats[i][0]\n      return baseResult.concat(stats.map(s => s[0]), extraRow ?? []);\n    }\n\n    // staff normal\n    let statIDs = [];\n    if (type === \"staff1\") {\n      statIDs = [0, 1, 14, 15, 16, 17];\n    } else if (type === \"staff2\") {\n      statIDs = [13, 25, 43];\n    } else if (type === \"staff3\") {\n      statIDs = [19, 20, 26, 27, 28, 29, 30, 31];\n    } else if (type === \"staff4\") {\n      statIDs = [11, 22, 23, 24];\n    }\n    if (statIDs.length) {\n      const statsRows = this.queryDB(`\n        SELECT Val\n        FROM Staff_PerformanceStats\n        WHERE StaffID = ${nameData[2]}\n          AND StatID IN (${statIDs.join(\",\")})\n      `, 'allRows');\n      return baseResult.concat(statsRows.map(s => s[0]));\n    }\n\n    // Si no entra en esos casos, simplemente devolvemos baseResult\n    return baseResult;\n  }\n  fetchDriverRetirement(driverID) {\n    const playerRow = this.queryDB(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n    let day = 0,\n      currentSeason = 0;\n    if (playerRow) {\n      [day, currentSeason] = playerRow;\n    } else {\n      console.warn(\"No se encontraron datos en Player_State.\");\n    }\n    const retirementAge = this.queryDB(`\n      SELECT RetirementAge\n      FROM Staff_GameData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n    const dob = this.queryDB(`\n      SELECT DOB\n      FROM Staff_BasicData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n    const age = dob != null ? Math.floor((day - dob) / 365.25) : 0;\n    return [retirementAge, age];\n  }\n  fetchDriverCode(driverID) {\n    let code = this.queryDB(`\n      SELECT DriverCode\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n    if (!code) return \"\";\n    if (!code.includes(\"STRING_LITERAL\")) {\n      const m = code.match(/\\[DriverCode_(...)\\]/);\n      code = m ? m[1] : \"\";\n    } else {\n      const m = code.match(/\\[STRING_LITERAL:Value=\\|(...)\\|\\]/);\n      code = m ? m[1] : \"\";\n    }\n    return code.toUpperCase();\n  }\n  fetchYear() {\n    const row = this.queryDB(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n    if (!row) {\n      console.warn(\"No data found in Player_State.\");\n      return 0;\n    }\n    // Devolvemos CurrentSeason (row[1])\n    return row[1];\n  }\n  fetchDriverNumberDetails(driverID) {\n    let currentNumber = this.queryDB(`\n      SELECT Number\n      FROM Staff_DriverNumbers\n      WHERE CurrentHolder = ${driverID}\n    `, 'singleValue');\n    if (currentNumber == null) {\n      // Si no tiene número, ver si hay libres\n      const available = this.queryDB(`\n        SELECT Number\n        FROM Staff_DriverNumbers\n        WHERE CurrentHolder IS NULL\n      `, 'allRows');\n      if (!available.length) {\n        currentNumber = 0;\n      } else {\n        // Elige uno aleatorio\n        const randomIdx = Math.floor(Math.random() * available.length);\n        currentNumber = available[randomIdx][0];\n      }\n    }\n\n    // Quiere usar número de campeón?\n    const wantsChampion = this.queryDB(`\n      SELECT WantsChampionDriverNumber\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n    return [currentNumber, wantsChampion];\n  }\n  fetchRaceFormula(driverID) {\n    const category = this.queryDB(`\n      SELECT MAX(\n        CASE \n          WHEN (TeamID <= 10 OR TeamID = 32) THEN 1\n          WHEN TeamID BETWEEN 11 AND 21 THEN 2\n          WHEN TeamID BETWEEN 22 AND 31 THEN 3\n          ELSE 4\n        END\n      ) AS Cat\n      FROM Staff_Contracts\n      WHERE ContractType = 0 AND StaffID = ${driverID}\n    `, 'singleValue');\n\n    // Por defecto 4 si no existe\n    return category ?? 4;\n  }\n  fetchMarketability(driverID) {\n    return this.queryDB(`\n      SELECT Marketability\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  }\n  fetchSuperlicense(driverID) {\n    return this.queryDB(`\n      SELECT HasSuperLicense\n      FROM Staff_DriverData\n      WHERE StaffID = ${driverID}\n    `, 'singleValue');\n  }\n  fetchDrivers(gameYear) {\n    const rows = this.queryDB(`\n      SELECT DISTINCT \n        bas.FirstName, bas.LastName, bas.StaffID, con.TeamID, con.PosInTeam, \n        MIN(con.ContractType) AS MinContractType, gam.Retired, COUNT(*)\n      FROM Staff_BasicData bas\n      JOIN Staff_DriverData dri ON bas.StaffID = dri.StaffID\n      LEFT JOIN Staff_Contracts con ON dri.StaffID = con.StaffID\n      LEFT JOIN Staff_GameData gam ON dri.StaffID = gam.StaffID\n      GROUP BY gam.StaffID\n      ORDER BY con.TeamID;\n    `, 'allRows');\n    const formattedData = [];\n    for (let driver of rows) {\n      // Si driver[7] > 1 => hay más de un contrato\n      if (driver[7] > 1) {\n        driver = this.checkDrivesForTeam32(driver);\n      }\n      const driverID = driver[2];\n\n      // Ignoramos placeholders\n      if (driver[0] === \"Placeholder\") {\n        continue;\n      }\n\n      // Format + stats\n      const result = this.formatNamesAndFetchStats(driver, \"driver\");\n\n      // Extra info\n      const [retirementAge, age] = this.fetchDriverRetirement(driverID);\n      let raceFormula = this.fetchRaceFormula(driverID) || 4;\n      const [driverNumber, wants1] = this.fetchDriverNumberDetails(driverID);\n      const superlicense = this.fetchSuperlicense(driverID);\n      const futureTeam = this.fetchForFutureContract(driverID);\n      const driverCode = this.fetchDriverCode(driverID);\n      const nationality = this.fetchNationality(driverID, gameYear);\n\n      // result es array, lo convertimos a objeto para mayor claridad\n      const data = {\n        ...result\n      };\n      data.driver_number = driverNumber;\n      data.wants1 = wants1;\n      data.retirement_age = retirementAge;\n      data.age = age;\n      data.superlicense = superlicense;\n      data.race_formula = raceFormula;\n      data.team_future = futureTeam;\n      data.driver_code = driverCode;\n      data.nationality = nationality;\n\n      // Datos específicos para 2024\n      if (gameYear === \"24\") {\n        const [morale, gMentality] = this.fetchMentality(driverID);\n        data.global_mentality = gMentality ?? null;\n\n        // morale es array de arrays. Ejemplo: [ [op1], [op2], [op3] ]\n        if (morale.length >= 3) {\n          data.mentality0 = morale[0][0];\n          data.mentality1 = morale[1][0];\n          data.mentality2 = morale[2][0];\n        }\n        const market = this.fetchMarketability(driverID);\n        data.marketability = market ?? 0;\n      }\n      formattedData.push(data);\n    }\n    return formattedData;\n  }\n  fetchStaff(gameYear) {\n    const rows = this.queryDB(`\n      SELECT DISTINCT\n        bas.FirstName, \n        bas.LastName, \n        bas.StaffID, \n        con.TeamID, \n        gam.StaffType\n      FROM Staff_GameData gam\n      JOIN Staff_BasicData bas ON gam.StaffID = bas.StaffID\n      LEFT JOIN Staff_Contracts con \n        ON bas.StaffID = con.StaffID \n        AND (con.ContractType = 0 OR con.ContractType IS NULL)\n      WHERE gam.StaffType != 0\n      ORDER BY \n        CASE WHEN con.TeamID IS NULL THEN 1 ELSE 0 END,\n        con.TeamID\n    `, 'allRows');\n    if (!rows.length) {\n      console.warn(\"No staff data found.\");\n      return [];\n    }\n    const formattedData = [];\n    for (let staff of rows) {\n      // staff = [ FirstName, LastName, StaffID, TeamID, StaffType ]\n      if (staff[0] === \"Placeholder\") {\n        continue;\n      }\n      const staffID = staff[2];\n      const staffType = `staff${staff[4]}`;\n      const result = this.formatNamesAndFetchStats(staff, staffType);\n      const [retirementAge, age] = this.fetchDriverRetirement(staffID);\n      let raceFormula = this.fetchRaceFormula(staffID) || 4;\n      const futureTeam = this.fetchForFutureContract(staffID);\n      const nationality = this.fetchNationality(staffID, gameYear);\n      const data = {\n        ...result\n      };\n      data.retirement_age = retirementAge;\n      data.age = age;\n      data.race_formula = raceFormula;\n      data.team_future = futureTeam;\n      data.nationality = nationality;\n      if (gameYear === \"24\") {\n        const [morale, gMentality] = this.fetchMentality(staffID);\n        data.global_mentality = gMentality ?? -1;\n        if (morale.length >= 3) {\n          data.mentality0 = morale[0][0] ?? -1;\n          data.mentality1 = morale[1][0] ?? -1;\n          data.mentality2 = morale[2][0] ?? -1;\n        } else {\n          data.mentality0 = -1;\n          data.mentality1 = -1;\n          data.mentality2 = -1;\n        }\n      }\n      formattedData.push(data);\n    }\n    return formattedData;\n  }\n  fetchDriversPerYear(year) {\n    // Construimos la consulta SQL\n    const sql = `\n      SELECT \n        bas.FirstName, \n        bas.LastName, \n        res.DriverID, \n        res.TeamID\n      FROM Staff_BasicData bas\n      JOIN Races_Results res \n        ON bas.StaffID = res.DriverID\n      WHERE Season = ${year}\n      GROUP BY \n        bas.FirstName, \n        bas.LastName, \n        bas.StaffID, \n        res.TeamID\n      ORDER BY res.TeamID\n    `;\n\n    // Obtenemos todas las filas (array de objetos o tuplas)\n    const drivers = this.queryDB(sql, 'allRows') || [];\n\n    // Formateamos cada fila como quieras (equivalente a \"format_names_simple\")\n    const formattedTuples = drivers.map(row => this.formatNamesSimple(row));\n    return formattedTuples;\n  }\n  formatNamesSimple(name) {\n    let nombre = \"\";\n    let apellido = \"\";\n\n    // Si no contiene \"STRING_LITERAL\", buscamos \"StaffName_Forename_(Male|Female)_(...)\".\n    if (!name[0].includes(\"STRING_LITERAL\")) {\n      const nombrePattern = /StaffName_Forename_(Male|Female)_(\\w+)/;\n      const match = name[0].match(nombrePattern);\n      if (match) {\n        // Asumiendo que tienes un método removeNumber similar al de Python\n        nombre = this.removeNumber(match[2]);\n      } else {\n        nombre = \"\";\n      }\n    } else {\n      // De lo contrario, buscamos la parte entre \"| ... |\"\n      const pattern = /\\|([^|]+)\\|/;\n      const match = name[0].match(pattern);\n      if (match) {\n        nombre = match[1];\n      } else {\n        nombre = \"\";\n      }\n    }\n\n    // Repetimos la lógica para el apellido\n    if (!name[1].includes(\"STRING_LITERAL\")) {\n      const apellidoPattern = /StaffName_Surname_(\\w+)/;\n      const match = name[1].match(apellidoPattern);\n      if (match) {\n        apellido = this.removeNumber(match[1]);\n      } else {\n        apellido = \"\";\n      }\n    } else {\n      const pattern = /\\|([^|]+)\\|/;\n      const match = name[1].match(pattern);\n      if (match) {\n        apellido = match[1];\n      } else {\n        apellido = \"\";\n      }\n    }\n\n    // Construimos el nombre completo\n    const nameFormatted = `${nombre} ${apellido}`.trim();\n\n    // El TeamID (índice 3 en el array). Si es nulo/indefinido, lo ponemos a 0\n    const teamId = name[3] != null ? name[3] : 0;\n\n    // Devolvemos la misma estructura que en Python: (Nombre Formateado, DriverID, TeamID)\n    return [nameFormatted, name[2], teamId];\n  }\n  fetchSeasonResults(yearSelected) {\n    const drivers = this.queryDB(`\n      SELECT DriverID\n      FROM Races_DriverStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${yearSelected}\n    `, 'allRows') || [];\n    const seasonResults = [];\n    drivers.forEach(row => {\n      const driverID = row[0];\n      const driverRes = this.fetchOneDriverSeasonResults([driverID], [yearSelected]);\n      if (driverRes) {\n        seasonResults.push(driverRes);\n      }\n    });\n    return seasonResults;\n  }\n  fetchTeamsStandings(year) {\n    return this.queryDB(`\n      SELECT TeamID, Position\n      FROM Races_TeamStandings\n      WHERE SeasonID = ${year}\n        AND RaceFormula = 1\n    `, 'allRows') || [];\n  }\n  fetchOneTeamSeasonResults(team, year) {\n    const teamID = team;\n    const season = year;\n    const drivers = this.queryDB(` SELECT DISTINCT DriverID\n       FROM Races_Results\n       WHERE Season = ${season}\n       AND TeamID = ${teamID} `, 'allRows') || [];\n    const results = [];\n    for (let driver of drivers) {\n      const driverID = driver[0];\n      const driverResults = this.fetchOneDriverSeasonResults(driverID, season);\n      console.log(driverResults);\n      if (driverResults) {\n        results.push(driverResults);\n      }\n    }\n    return results;\n  }\n  fetchOneDriverSeasonResults(driver, year) {\n    const driverID = driver;\n    const season = year;\n    const results = this.queryDB(`\n      SELECT DriverID, TeamID, FinishingPos, Points\n      FROM Races_Results\n      WHERE Season = ${season}\n        AND DriverID = ${driverID}\n    `, 'allRows') || [];\n    if (results.length > 0) {\n      const sprintResults = this.queryDB(`\n        SELECT RaceID, FinishingPos, ChampionshipPoints\n        FROM Races_SprintResults\n        WHERE SeasonID = ${season}\n          AND DriverID = ${driverID}\n      `, 'allRows') || [];\n      const teamID = results[0][1];\n      const driverNameRow = this.queryDB(`\n        SELECT FirstName, LastName\n        FROM Staff_BasicData\n        WHERE StaffID = ${driverID}\n      `, 'singleRow');\n      return this.formatSeasonResults(results, driverNameRow, teamID, driver, year, sprintResults);\n    }\n    return null;\n  }\n  fetchEventsDoneFrom(year) {\n    const daySeasonRow = this.queryDB(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n    if (!daySeasonRow) {\n      return [];\n    }\n    const [currentDay, currentSeason] = daySeasonRow;\n    const seasonIdsRows = this.queryDB(`\n      SELECT RaceID\n      FROM Races\n      WHERE SeasonID = ${year}\n        AND Day < ${currentDay}\n    `, 'allRows') || [];\n    const eventsIds = seasonIdsRows.map(row => row[0]);\n    return eventsIds;\n  }\n  fetchEventsFrom(year) {\n    const seasonEventsRows = this.queryDB(`\n      SELECT TrackID\n      FROM Races\n      WHERE SeasonID = ${year}\n    `, 'allRows') || [];\n    const seasonIdsRows = this.queryDB(`\n      SELECT RaceID\n      FROM Races\n      WHERE SeasonID = ${year}\n    `, 'allRows') || [];\n    const eventsIds = [];\n    for (let i = 0; i < seasonIdsRows.length; i++) {\n      const raceID = seasonIdsRows[i][0];\n      const trackID = seasonEventsRows[i][0];\n      eventsIds.push([raceID, trackID]);\n    }\n    return eventsIds;\n  }\n  formatSeasonResults(results, driverName, teamID, driver, year, sprints) {\n    // Asumiendo que driver y year son arrays (p.ej. driver=[123], year=[2023]):\n    const driverID = driver;\n    const season = year;\n\n    // -------- 1) Formatear nombre --------\n    let nombre = \"\";\n    let apellido = \"\";\n\n    // driverName podría ser un array [firstName, lastName] o un objeto {FirstName, LastName}.\n    // Aquí asumimos array. Si tu queryDB retorna objetos, ajusta a driverName.FirstName, driverName.LastName.\n    const firstName = driverName ? driverName[0] : \"\";\n    const lastName = driverName ? driverName[1] : \"\";\n\n    // Lógica análoga a Python para \"STRING_LITERAL\"\n    if (!firstName.includes(\"STRING_LITERAL\")) {\n      const nombrePattern = /StaffName_Forename_(Male|Female)_(\\w+)/;\n      const match = firstName.match(nombrePattern);\n      if (match) {\n        nombre = this.removeNumber(match[2]); // asumiendo que tienes un removeNumber\n      } else {\n        nombre = \"\";\n      }\n    } else {\n      const pattern = /\\|([^|]+)\\|/;\n      const match = firstName.match(pattern);\n      nombre = match ? match[1] : \"\";\n    }\n    if (!lastName.includes(\"STRING_LITERAL\")) {\n      const apellidoPattern = /StaffName_Surname_(\\w+)/;\n      const match = lastName.match(apellidoPattern);\n      if (match) {\n        apellido = this.removeNumber(match[1]);\n      } else {\n        apellido = \"\";\n      }\n    } else {\n      const pattern = /\\|([^|]+)\\|/;\n      const match = lastName.match(pattern);\n      apellido = match ? match[1] : \"\";\n    }\n    const nameFormatted = `${nombre} ${apellido}`.trim();\n\n    // -------- 2) Obtener todas las carreras que corrió este piloto en la temporada --------\n    const racesParticipated = this.queryDB(`\n      SELECT RaceID\n      FROM Races_Results\n      WHERE DriverID = ${driverID}\n        AND Season = ${season}\n    `, 'allRows') || [];\n\n    // results = array con [DriverID, TeamID, FinishingPos, Points]\n    // Queremos convertirlo en algo más detallado. \n    // De Python: formatred_results = [(FinishingPos, Points) for result in results]\n    // Pero necesitamos mapear 1:1 con la lista de RaceIDs, así que iremos uno a uno.\n    let formatredResults = results.map(r => [r[2], r[3]]);\n    // r[2] => FinishingPos, r[3] => Points.\n\n    // Suponiendo que hay la misma cantidad y el mismo orden de carreras \n    // entre \"results\" y \"racesParticipated\". \n    // Si no, necesitarías hacer matching por RaceID. \n    // En tu Python original, tomabas RaceIDs en order y reasignabas. \n    // Asegurémonos de usar el RaceID de 'racesParticipated[i]' igual que Python.\n\n    for (let i = 0; i < racesParticipated.length; i++) {\n      const raceID = racesParticipated[i][0]; // Cada fila es [RaceID]\n\n      // 2.1) Buscamos quién hizo la fastest lap\n      const driverWithFastestLap = this.queryDB(`\n        SELECT DriverID\n        FROM Races_Results\n        WHERE FastestLap > 0\n          AND RaceID = ${raceID}\n          AND Season = ${season}\n        ORDER BY FastestLap\n        LIMIT 1\n      `, 'singleValue');\n\n      // 2.2) Checamos si fue DNF\n      const dnfd = this.queryDB(`\n        SELECT DNF\n        FROM Races_Results\n        WHERE DriverID = ${driverID}\n          AND Season = ${season}\n          AND RaceID = ${raceID}\n      `, 'singleValue') || 0;\n\n      // Inyectamos RaceID al inicio de la tupla\n      // Python: formatred_results[i] = (raceID,) + formatred_results[i]\n      formatredResults[i] = [raceID, ...formatredResults[i]];\n\n      // Si DNF = 1 => set FinishingPos y Points a -1\n      if (dnfd === 1) {\n        const arr = [...formatredResults[i]];\n        arr[1] = -1; // FinishingPos\n        arr[2] = -1; // Points\n        formatredResults[i] = arr;\n      }\n\n      // Marcar fastest lap\n      if (driverWithFastestLap === driverID) {\n        // le append \"1\"\n        formatredResults[i].push(1);\n      } else {\n        // le append \"0\"\n        formatredResults[i].push(0);\n      }\n\n      // 2.3) Quali Stage & FinishingPos\n      const QStage = this.queryDB(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n      const QRes = this.queryDB(`\n        SELECT FinishingPos\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID = ${driverID}\n          AND QualifyingStage = ${QStage}\n      `, 'singleValue') || 99;\n\n      // 2.4) Cálculo de diferencias de tiempo (carrera y pole)\n      const timeDifference = this.calculateTimeDifference(driverID, raceID);\n      const poleDifference = this.calculateTimeToPole(driverID, raceID);\n\n      // Añadimos QRes, timeDifference y poleDifference\n      formatredResults[i].push(QRes);\n      formatredResults[i].push(timeDifference);\n      formatredResults[i].push(poleDifference);\n    }\n\n    // -------- 3) Añadir datos de sprint al formatredResults --------\n    // En Python: \n    // for tupla1 in sprints:\n    //   for i, tupla2 in enumerate(formatred_results):\n    //     if tupla1[0] == tupla2[0]:\n    //       formatred_results[i] = tupla2 + (tupla1[2], tupla1[1])\n    //\n    // tupla1[0] => RaceID\n    // tupla1[1] => FinishingPos\n    // tupla1[2] => ChampionshipPoints\n\n    for (const sprintRow of sprints) {\n      // sprintRow: [RaceID, FinishingPos, ChampionshipPoints]\n      const [sprintRaceID, sprintPos, sprintPoints] = sprintRow;\n      // Buscamos coincidencia en formatredResults\n      for (let i = 0; i < formatredResults.length; i++) {\n        if (formatredResults[i][0] === sprintRaceID) {\n          // Agregamos ChampionshipPoints y FinishingPos al final\n          // (Ojo: en Python lo agregas en orden (tupla1[2], tupla1[1]) => (ChampPoints, FinishingPos)\n          formatredResults[i] = [...formatredResults[i], sprintPoints, sprintPos];\n          break;\n        }\n      }\n    }\n\n    // -------- 4) Añadir TeamID a cada carrera --------\n    // En Python se hace un for i in range(len(...)):\n    //   team_in_race = ...\n    //   formatred_results[i] += (team_in_race)\n    //   latest_team = ...\n    let latestTeam = null;\n    for (let i = 0; i < formatredResults.length; i++) {\n      const raceID = formatredResults[i][0];\n      const teamInRace = this.queryDB(`\n        SELECT TeamID\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n      formatredResults[i].push(teamInRace);\n      latestTeam = teamInRace;\n    }\n\n    // -------- 5) Agregar la posición final en el campeonato al inicio --------\n    const position = this.queryDB(`\n      SELECT Position\n      FROM Races_Driverstandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${season}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n    formatredResults.unshift(position);\n    formatredResults.unshift(latestTeam);\n    formatredResults.unshift(nameFormatted);\n\n    // Devolvemos el array final\n    return formatredResults;\n  }\n  calculateTimeToPole(driverID, raceID) {\n    const QStage = this.queryDB(`\n      SELECT MAX(QualifyingStage)\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n    const poleTime = this.queryDB(`\n      SELECT MIN(FastestLap)\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND QualifyingStage = 3\n        AND FastestLap IS NOT 0\n    `, 'singleValue') || 9999;\n    const driverTime = this.queryDB(`\n      SELECT FastestLap\n      FROM Races_QualifyingResults\n      WHERE RaceFormula = 1\n        AND RaceID = ${raceID}\n        AND QualifyingStage = ${QStage}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 9999;\n    if (driverTime < poleTime) {\n      return \"NR\";\n    } else {\n      const difference = Number((driverTime - poleTime).toFixed(2));\n      return `+${difference}s`;\n    }\n  }\n  calculateTimeDifference(driverID, raceID) {\n    const totalLaps = this.queryDB(`\n      SELECT MAX(Laps)\n      FROM Races_Results\n      WHERE RaceID = ${raceID}\n    `, 'singleValue') || 0;\n    const driverLaps = this.queryDB(`\n      SELECT Laps\n      FROM Races_Results\n      WHERE RaceID = ${raceID}\n        AND DriverID = ${driverID}\n    `, 'singleValue') || 0;\n    if (driverLaps < totalLaps) {\n      return `+${totalLaps - driverLaps} L`;\n    } else {\n      const winnerID = this.queryDB(`\n        SELECT DriverID\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND FinishingPos = 1\n      `, 'singleValue');\n      const winnerTime = this.queryDB(`\n        SELECT Time\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${winnerID}\n      `, 'singleValue') || 0;\n      const driverTime = this.queryDB(`\n        SELECT Time\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND DriverID = ${driverID}\n      `, 'singleValue') || 0;\n      const timeDiff = Number((driverTime - winnerTime).toFixed(1));\n      return `+${timeDiff}s`;\n    }\n  }\n  fetchCalendar() {\n    // Saco [ Day, CurrentSeason ] de Player_State\n    const daySeason = this.queryDB(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n    if (!daySeason) {\n      console.warn(\"No data found in Player_State.\");\n      return [];\n    }\n    const [day, currentSeason] = daySeason;\n\n    // Saco el calendario\n    const calendar = this.queryDB(`\n      SELECT TrackID, WeatherStatePractice, WeatherStateQualifying, WeatherStateRace, WeekendType, State\n      FROM Races\n      WHERE SeasonID = ${currentSeason}\n    `, 'allRows');\n    return calendar;\n  }\n  fetchDriverNumbers() {\n    const numbers = this.queryDB(`SELECT DISTINCT Number\n       FROM Staff_DriverNumbers dn \n       JOIN Staff_Contracts con \n       ON dn.CurrentHolder = con.StaffID \n       WHERE dn.CurrentHolder IS NULL OR con.PosInTeam > 2`, 'allRows');\n    return numbers.map(n => n[0]);\n  }\n  fetchDriverContract(id) {\n    // Obtener el contrato actual\n    const currentContract = this.queryDB(`\n        SELECT Salary, EndSeason, StartingBonus, RaceBonus, RaceBonusTargetPos, TeamID\n        FROM Staff_Contracts\n        WHERE ContractType = 0 AND StaffID = ${id}\n    `, 'singleRow');\n\n    // Obtener el contrato futuro\n    const futureContract = this.queryDB(`\n        SELECT Salary, EndSeason, StartingBonus, RaceBonus, RaceBonusTargetPos, PosInTeam, TeamID\n        FROM Staff_Contracts\n        WHERE ContractType = 3 AND StaffID = ${id}\n    `, 'singleRow');\n\n    // Obtener el día y la temporada actual\n    const daySeason = this.queryDB(`\n        SELECT Day, CurrentSeason\n        FROM Player_State\n    `, 'singleRow');\n\n    // Retornar los resultados\n    return [currentContract, futureContract, daySeason ? daySeason[1] : null];\n  }\n  checkCustomTables() {\n    let createdEnginesList = false;\n    let createdEnginesStats = false;\n    const tablesToCheck = [{\n      name: 'Custom_Engines_List',\n      createSQL: `\n          CREATE TABLE Custom_Engines_List (\n            engineId INTEGER PRIMARY KEY,\n            name TEXT\n          )\n        `\n    }, {\n      name: 'Custom_Engines_Stats',\n      createSQL: `\n          CREATE TABLE Custom_Engines_Stats (\n            engineId INTEGER,\n            designId INTEGER,\n            partStat INTEGER,\n            unitValue REAL,\n            Value REAL\n          )\n        `\n    }, {\n      name: 'Custom_Save_Config',\n      createSQL: `\n          CREATE TABLE Custom_Save_Config (\n            key TEXT PRIMARY KEY,\n            value TEXT\n          )\n        `\n    }, {\n      name: 'Custom_Engine_Allocations',\n      createSQL: `\n          CREATE TABLE Custom_Engine_Allocations (\n            teamId INTEGER,\n            engineId INTEGER\n            \n          )\n        `\n    }];\n    tablesToCheck.forEach(table => {\n      const tableExists = this.queryDB(`\n        SELECT name\n        FROM sqlite_master\n        WHERE type='table'\n          AND name='${table.name}'\n      `, 'singleValue');\n      if (!tableExists) {\n        this.queryDB(table.createSQL);\n        console.log(\"TABLE CREATED: \", table.name);\n        if (table.name === 'Custom_Engines_List') {\n          createdEnginesList = true;\n        } else if (table.name === 'Custom_Engines_Stats') {\n          createdEnginesStats = true;\n        }\n      }\n    });\n    if (createdEnginesList || createdEnginesStats) {\n      this.insertDefualtEnginesData();\n    }\n  }\n  insertDefualtEnginesData() {\n    const engines = [{\n      id: 1,\n      name: 'Ferrari',\n      stats: [{\n        partStat: 6,\n        value: 500,\n        unitValue: 75,\n        designId: 1\n      }, {\n        partStat: 10,\n        value: 750,\n        unitValue: 95,\n        designId: 1\n      }, {\n        partStat: 11,\n        value: 250,\n        unitValue: 80,\n        designId: 1\n      }, {\n        partStat: 12,\n        value: 500,\n        unitValue: 77.5,\n        designId: 1\n      }, {\n        partStat: 14,\n        value: 400,\n        unitValue: 68,\n        designId: 1\n      }, {\n        partStat: 15,\n        value: 350,\n        unitValue: 57,\n        designId: 2\n      }, {\n        partStat: 15,\n        value: 0,\n        unitValue: 50,\n        designId: 3\n      }]\n    }, {\n      id: 4,\n      name: 'Red Bull',\n      stats: [{\n        partStat: 6,\n        value: 300,\n        unitValue: 65,\n        designId: 4\n      }, {\n        partStat: 10,\n        value: 1000,\n        unitValue: 100,\n        designId: 4\n      }, {\n        partStat: 11,\n        value: 0,\n        unitValue: 85,\n        designId: 4\n      }, {\n        partStat: 12,\n        value: 0,\n        unitValue: 70,\n        designId: 4\n      }, {\n        partStat: 14,\n        value: 0,\n        unitValue: 60,\n        designId: 4\n      }, {\n        partStat: 15,\n        value: 0,\n        unitValue: 50,\n        designId: 5\n      }, {\n        partStat: 15,\n        value: 600,\n        unitValue: 62,\n        designId: 6\n      }]\n    }, {\n      id: 7,\n      name: 'Mercedes',\n      stats: [{\n        partStat: 6,\n        value: 0,\n        unitValue: 50,\n        designId: 7\n      }, {\n        partStat: 10,\n        value: 500,\n        unitValue: 90,\n        designId: 7\n      }, {\n        partStat: 11,\n        value: 1000,\n        unitValue: 65,\n        designId: 7\n      }, {\n        partStat: 12,\n        value: 850,\n        unitValue: 82.75,\n        designId: 7\n      }, {\n        partStat: 14,\n        value: 1000,\n        unitValue: 80,\n        designId: 7\n      }, {\n        partStat: 15,\n        value: 1000,\n        unitValue: 70,\n        designId: 8\n      }, {\n        partStat: 15,\n        value: 1000,\n        unitValue: 70,\n        designId: 9\n      }]\n    }, {\n      id: 10,\n      name: 'Renault',\n      stats: [{\n        partStat: 6,\n        value: 1000,\n        unitValue: 100,\n        designId: 10\n      }, {\n        partStat: 10,\n        value: 0,\n        unitValue: 80,\n        designId: 10\n      }, {\n        partStat: 11,\n        value: 500,\n        unitValue: 75,\n        designId: 10\n      }, {\n        partStat: 12,\n        value: 1000,\n        unitValue: 85,\n        designId: 10\n      }, {\n        partStat: 14,\n        value: 650,\n        unitValue: 73,\n        designId: 10\n      }, {\n        partStat: 15,\n        value: 500,\n        unitValue: 75,\n        designId: 11\n      }, {\n        partStat: 15,\n        value: 1000,\n        unitValue: 100,\n        designId: 12\n      }]\n    }];\n    engines.forEach(engine => {\n      this.queryDB(`\n        INSERT OR REPLACE INTO Custom_Engines_List (engineId, Name)\n        VALUES (${engine.id}, '${engine.name}')\n      `);\n      engine.stats.forEach(stat => {\n        this.queryDB(`\n          INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n          VALUES (${engine.id}, ${stat.designId}, ${stat.partStat}, ${stat.value}, ${stat.unitValue})\n        `);\n      });\n    });\n    const maxYear = this.queryDB(`SELECT MAX(SeasonID) FROM Parts_TeamHistory`, 'singleValue');\n    const actualEngineAllocations = this.queryDB(`\n      SELECT th.TeamID, em.EngineDesignID\n      FROM Parts_TeamHistory th\n      JOIN Parts_Enum_EngineManufacturers em\n        ON th.EngineManufacturer = em.Value\n      WHERE SeasonID = ${maxYear}`, 'allRows');\n    actualEngineAllocations.forEach(engine => {\n      this.queryDB(`\n        INSERT OR REPLACE INTO Custom_Engine_Allocations (teamId, engineId)\n        VALUES (${engine[0]}, ${engine[1]})\n      `);\n    });\n  }\n  updateCustomEngines(engineData) {\n    console.log(\"ENGINES DATA: \", engineData);\n    for (let engineId in engineData) {\n      const nameCapitalized = engineData[engineId].name.charAt(0).toUpperCase() + engineData[engineId].name.slice(1);\n      this.queryDB(`INSERT OR REPLACE INTO Custom_Engines_List (engineId, Name) VALUES (${engineId}, '${nameCapitalized}')`);\n      for (let stat in engineData[engineId].stats) {\n        const untiValue = engineData[engineId].stats[stat];\n        const value = _carConstants_js__WEBPACK_IMPORTED_MODULE_1__.engine_unitValueToValue[stat](untiValue);\n        if (parseInt(stat) !== 18 && parseInt(stat) !== 19) {\n          this.queryDB(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${engineId}, ${stat}, ${value}, ${untiValue})`);\n        } else if (parseInt(stat) === 18) {\n          console.log(engineId);\n          let designId = parseInt(engineId) + 1;\n          this.queryDB(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n        } else if (parseInt(stat) === 19) {\n          console.log(engineId);\n          let designId = parseInt(engineId) + 2;\n          this.queryDB(`INSERT OR REPLACE INTO Custom_Engines_Stats (engineId, designId, partStat, Value, unitValue)\n            VALUES (${engineId}, ${designId}, ${15}, ${value}, ${untiValue})`);\n        }\n      }\n    }\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/dbUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/editTeamUtils.js":
/*!*****************************************************!*\
  !*** ./src/js/backend/scriptUtils/editTeamUtils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   editTeam: () => (/* binding */ editTeam),\n/* harmony export */   fetchTeamData: () => (/* binding */ fetchTeamData),\n/* harmony export */   manageCostCap: () => (/* binding */ manageCostCap),\n/* harmony export */   manage_engine_change: () => (/* binding */ manage_engine_change)\n/* harmony export */ });\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n\nfunction fetchTeamData(teamID) {\n  console.log(teamID);\n  const levCon = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT BuildingID, DegradationValue\n        FROM Buildings_HQ\n        WHERE TeamID = ${teamID}\n      `, 'allRows') || [];\n  console.log(levCon);\n  const data = levCon.map(row => [row[0], parseFloat(Number(row[1]).toFixed(2))]);\n  if (teamID == \"32\") data.push([\"160\", 1]);\n  const daySeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT Day, CurrentSeason\n        FROM Player_State\n      `, 'singleRow');\n  const days = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(Day), MAX(Day)\n        FROM Seasons_Deadlines\n        WHERE SeasonID = ${daySeason[1]}\n      `, 'singleRow');\n  const costCap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT SUM(value) AS Value\n        FROM Finance_Transactions\n        WHERE Day >= ${days[0]}\n          AND Day < ${days[1]}\n          AND AffectsCostCap = 1\n          AND TeamID = ${teamID}\n      `, 'allRows');\n  const teamBalance = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT Balance\n        FROM Finance_TeamBalance\n        WHERE TeamID = ${teamID}\n      `, 'singleRow');\n  const seasonObj = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT TargetPos\n        FROM Board_SeasonObjectives\n        WHERE TeamID = ${teamID}\n          AND SeasonID = ${daySeason[1]}\n      `, 'singleRow');\n  const maxTargetYear = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(TargetEndYear)\n        FROM Board_Objectives\n        WHERE TeamID = ${teamID}\n      `, 'singleRow');\n  const longTermObj = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT Type, TargetEndYear\n        FROM Board_Objectives\n        WHERE TeamID = ${teamID}\n          AND TargetEndYear = ${maxTargetYear[0]}\n      `, 'singleRow');\n  const playerTeam = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT TeamID\n        FROM Player\n      `, 'singleRow');\n  let confidence;\n  if (playerTeam[0] == Number(teamID)) {\n    confidence = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Confidence\n          FROM Board_Confidence\n          WHERE Season = ${daySeason[1]}\n        `, 'singleRow') || [-1];\n  } else {\n    confidence = [-1];\n  }\n  const pitStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT StatID, Val\n        FROM Staff_PitCrew_PerformanceStats\n        WHERE TeamID = ${teamID}\n      `, 'allRows') || [];\n  const pitDict = {};\n  pitStats.forEach(stat => {\n    pitDict[stat[0]] = parseFloat(Number(stat[1]).toFixed(2));\n  });\n  const engineId = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT engineId FROM Custom_Engine_Allocations WHERE teamId = ${teamID}`, 'singleValue');\n  data.push(seasonObj, longTermObj, teamBalance, costCap, confidence, daySeason[1], pitDict, engineId);\n  return data;\n}\n\n// manageCostCap(teamID, amount)\nfunction manageCostCap(teamID, amount) {\n  let remaining = parseInt(amount, 10);\n  if (remaining > 0) {\n    while (remaining > 0) {\n      // Obtenemos la transacción negativa más reciente\n      const transaction = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT ROWID, Value, Reference\n        FROM Finance_Transactions\n        WHERE TeamID = ${teamID}\n          AND AffectsCostCap = 1\n          AND Value < 0\n        ORDER BY Day DESC, ROWID DESC\n        LIMIT 1\n      `, 'singleRow');\n      if (!transaction) {\n        break;\n      } else {\n        const rowid = transaction[0];\n        const value = transaction[1];\n        // reference = transaction[2]; // no se usa directamente\n\n        let amountToAdd;\n        if (value + remaining <= 0) {\n          amountToAdd = remaining;\n        } else {\n          amountToAdd = -value;\n        }\n        (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          UPDATE Finance_Transactions\n          SET Value = Value + ${amountToAdd}\n          WHERE ROWID = ${rowid}\n        `);\n        remaining -= amountToAdd;\n      }\n    }\n  }\n  // Si remaining <= 0, insertamos una transacción que incremente el CostCap (o lo modifique negativamente)\n  else {\n    const daySeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Day, CurrentSeason\n      FROM Player_State\n    `, 'singleRow');\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      INSERT INTO Finance_Transactions\n      VALUES (${teamID}, ${daySeason[0]}, ${amount}, 9, -1, 1)\n    `);\n  }\n}\nfunction editTeam(info) {\n  console.log(\"EDITING TEAM\");\n  console.log(info);\n  const daySeason = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    SELECT Day, CurrentSeason\n    FROM Player_State\n  `, 'singleRow');\n  const teamID = info.teamID;\n\n  // Actualización de Buildings_HQ\n  info.facilities.forEach(facility => {\n    const id = facility[0].slice(0, -1);\n    // facility[0] podría ser \"160a\", por ejemplo, y con slice(0, -1) quitas el último carácter\n\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Buildings_HQ\n      SET BuildingID = '${facility[0]}',\n          DegradationValue = ${facility[1]}\n      WHERE TeamID = ${teamID}\n        AND BuildingType = ${id}\n    `);\n  });\n\n  // Board_SeasonObjectives\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Board_SeasonObjectives\n    SET TargetPos = ${info.seasonObj}\n    WHERE TeamID = ${teamID}\n      AND SeasonID = ${daySeason[1]}\n  `);\n\n  // Board_Objectives (objetivo a largo plazo)\n  const maxTargetYear = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    SELECT MAX(TargetEndYear)\n    FROM Board_Objectives\n    WHERE TeamID = ${teamID}\n  `, 'singleRow');\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Board_Objectives\n    SET Type = ${info.longTermObj},\n        TargetEndYear = ${info.longTermYear}\n    WHERE TeamID = ${teamID}\n      AND TargetEndYear = ${maxTargetYear[0]}\n  `);\n\n  // Board_Confidence\n  if (info.confidence !== \"-1\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Board_Confidence\n      SET Confidence = ${info.confidence}\n      WHERE Season = ${daySeason[1]}\n    `);\n  }\n\n  // Finance_TeamBalance\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Finance_TeamBalance\n    SET Balance = ${info.teamBudget}\n    WHERE TeamID = ${teamID}\n  `);\n\n  // Ajuste de CostCap\n  manageCostCap(teamID, info.costCapEdit);\n\n  // Actualizar Staff_PitCrew_PerformanceStats\n  Object.keys(info.pitCrew).forEach(statID => {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_PitCrew_PerformanceStats\n      SET Val = ${info.pitCrew[statID]}\n      WHERE TeamID = ${teamID}\n        AND StatID = ${statID}\n    `);\n  });\n\n  // La parte de manage_engine_change la manejas tú\n  manage_engine_change(teamID, info.engine);\n}\nfunction manage_engine_change(teamID, engineId) {\n  const oldEngineId = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${teamID} AND PartType = 0`, 'singleValue');\n  const oldERSId = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${teamID} AND PartType = 1`, 'singleValue');\n  const oldGearboxId = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT DesignID FROM Parts_Designs WHERE TeamID = ${teamID} AND PartType = 2`, 'singleValue');\n  const nmewERSId = parseInt(engineId, 10) + 1;\n  const newGearboxId = parseInt(engineId, 10) + 2;\n  const newEngineStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT partStat, unitValue, Value FROM Custom_Engines_Stats WHERE designId = ${engineId}`, 'allRows');\n  const newERSStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT partStat, unitValue, Value FROM Custom_Engines_Stats WHERE designId = ${nmewERSId}`, 'singleRow');\n  const newGearboxStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT partStat, unitValue, Value FROM Custom_Engines_Stats WHERE designId = ${newGearboxId}`, 'singleRow');\n  const engineStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT PartStat FROM Parts_Designs_StatValues WHERE DesignID = ${oldEngineId}`, 'allRows');\n  engineStats.forEach(stat => {\n    const newStat = newEngineStats.find(newStat => newStat[0] === stat[0]);\n    if (newStat) {\n      console.log(\"updating stat \" + stat[0] + \" to \" + newStat[2]);\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${newStat[2]}, UnitValue =  ${newStat[1]} WHERE DesignID = ${oldEngineId} AND PartStat = ${stat[0]}`);\n    }\n  });\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${newERSStats[2]}, UnitValue =  ${newERSStats[1]} WHERE DesignID = ${oldERSId} AND PartStat = 15`);\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Parts_Designs_StatValues SET Value = ${newGearboxStats[2]}, UnitValue =  ${newGearboxStats[1]} WHERE DesignID = ${oldGearboxId} AND PartStat = 15`);\n  if (parseInt(engineId) <= 10) {\n    const year = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT CurrentSeason FROM Player_State`, 'singleValue');\n    const newEngineManufacturer = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`SELECT Value FROM Parts_Enum_EngineManufacturers WHERE EngineDesignID = ${engineId}`, 'singleValue');\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Parts_TeamHistory SET EngineManufacturer = ${newEngineManufacturer} WHERE TeamID = ${teamID} AND Season = ${year}`);\n  }\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`UPDATE Custom_Engine_Allocations SET engineId = ${engineId} WHERE teamId = ${teamID}`);\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/editTeamUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/eidtStatsUtils.js":
/*!******************************************************!*\
  !*** ./src/js/backend/scriptUtils/eidtStatsUtils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   changeYearsInExcelDate: () => (/* binding */ changeYearsInExcelDate),\n/* harmony export */   dateToExcel: () => (/* binding */ dateToExcel),\n/* harmony export */   driverStats: () => (/* binding */ driverStats),\n/* harmony export */   editAge: () => (/* binding */ editAge),\n/* harmony export */   editCode: () => (/* binding */ editCode),\n/* harmony export */   editFreezeMentality: () => (/* binding */ editFreezeMentality),\n/* harmony export */   editMarketability: () => (/* binding */ editMarketability),\n/* harmony export */   editMentality: () => (/* binding */ editMentality),\n/* harmony export */   editName: () => (/* binding */ editName),\n/* harmony export */   editRetirement: () => (/* binding */ editRetirement),\n/* harmony export */   editStats: () => (/* binding */ editStats),\n/* harmony export */   editSuperlicense: () => (/* binding */ editSuperlicense),\n/* harmony export */   excelToDate: () => (/* binding */ excelToDate),\n/* harmony export */   mentalityAreas: () => (/* binding */ mentalityAreas),\n/* harmony export */   mentalityEvents: () => (/* binding */ mentalityEvents),\n/* harmony export */   mentalityOpinions: () => (/* binding */ mentalityOpinions),\n/* harmony export */   mentalityOverall: () => (/* binding */ mentalityOverall)\n/* harmony export */ });\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n\n\n// Constantes para referencias en la edición de mentalidad\nconst driverStats = [2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst mentalityAreas = {\n  0: [5, 11, 13, 9],\n  1: [0, 2, 6, 7, 8, 14],\n  2: [1, 3, 4, 12, 10]\n};\nconst mentalityEvents = {\n  0: [1, 7, 10, 13, 15, 19],\n  1: [2, 11, 12, 14, 16, 20, 21],\n  2: [0, 3, 4, 5, 6, 8, 9, 17, 18]\n};\nconst mentalityOpinions = {\n  0: 10,\n  1: 3,\n  2: 0,\n  3: -4,\n  4: -10\n};\nconst mentalityOverall = {\n  0: 95,\n  1: 79,\n  2: 59,\n  3: 24,\n  4: 5\n};\n\n// Editar estadísticas de un Staff (driver o staff general)\nfunction editStats(driverID, type, stats) {\n  if (type === \"0\") {\n    const isStats = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT *\n      FROM Staff_performanceStats\n      WHERE StaffID = ${driverID}\n    `, 'singleRow');\n    if (isStats) {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_performanceStats\n        SET Val = CASE StatID\n          WHEN 2  THEN ${params[2]}\n          WHEN 3  THEN ${params[3]}\n          WHEN 4  THEN ${params[4]}\n          WHEN 5  THEN ${params[5]}\n          WHEN 6  THEN ${params[6]}\n          WHEN 7  THEN ${params[7]}\n          WHEN 8  THEN ${params[8]}\n          WHEN 9  THEN ${params[9]}\n          WHEN 10 THEN ${params[10]}\n          ELSE Val\n        END\n        WHERE StaffID = ${driverID}\n      `);\n    } else {\n      const statsArray = params.slice(2, 11);\n      statsArray.forEach((newStat, i) => {\n        const statID = driverStats[i];\n        (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          INSERT INTO Staff_performanceStats (StaffID, StatID, Val, Max)\n          VALUES (${driverID}, ${statID}, ${newStat}, 100)\n        `);\n      });\n    }\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_DriverData\n      SET Improvability = ${params[11]}, Aggression = ${params[12]}\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${params[13]}\n      WHERE StaffID = ${driverID}\n    `);\n    const oldNum = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Number\n      FROM Staff_DriverNumbers\n      WHERE CurrentHolder = ${driverID}\n    `, 'singleValue');\n    if (oldNum) {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_DriverNumbers\n        SET CurrentHolder = NULL\n        WHERE Number = ${oldNum}\n      `);\n    }\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_DriverNumbers\n      SET CurrentHolder = ${driverID}\n      WHERE Number = ${params[14]}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_DriverData\n      SET WantsChampionDriverNumber = ${params[15]}\n      WHERE StaffID = ${driverID}\n    `);\n  } else if (type === \"1\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_performanceStats\n      SET Val = CASE StatID\n        WHEN 0  THEN ${params[2]}\n        WHEN 1  THEN ${params[3]}\n        WHEN 14 THEN ${params[4]}\n        WHEN 15 THEN ${params[5]}\n        WHEN 16 THEN ${params[6]}\n        WHEN 17 THEN ${params[7]}\n        ELSE Val\n      END\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${params[params.length - 1]}\n      WHERE StaffID = ${driverID}\n    `);\n  } else if (type === \"2\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_performanceStats\n      SET Val = CASE StatID\n        WHEN 13 THEN ${params[2]}\n        WHEN 25 THEN ${params[3]}\n        WHEN 43 THEN ${params[4]}\n        ELSE Val\n      END\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${params[params.length - 1]}\n      WHERE StaffID = ${driverID}\n    `);\n  } else if (type === \"3\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_performanceStats\n      SET Val = CASE StatID\n        WHEN 19 THEN ${params[2]}\n        WHEN 20 THEN ${params[3]}\n        WHEN 26 THEN ${params[4]}\n        WHEN 27 THEN ${params[5]}\n        WHEN 28 THEN ${params[6]}\n        WHEN 29 THEN ${params[7]}\n        WHEN 30 THEN ${params[8]}\n        WHEN 31 THEN ${params[9]}\n        ELSE Val\n      END\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${params[params.length - 1]}\n      WHERE StaffID = ${driverID}\n    `);\n  } else if (type === \"4\") {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_performanceStats\n      SET Val = CASE StatID\n        WHEN 11 THEN ${params[2]}\n        WHEN 22 THEN ${params[3]}\n        WHEN 23 THEN ${params[4]}\n        WHEN 24 THEN ${params[5]}\n        ELSE Val\n      END\n      WHERE StaffID = ${driverID}\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_GameData\n      SET RetirementAge = ${params[params.length - 1]}\n      WHERE StaffID = ${driverID}\n    `);\n  }\n}\nfunction editName(driverID, newName) {\n  const parts = newName.split(\" \");\n  const newFirstName = parts[0];\n  const newLastName = parts.slice(1).join(\" \");\n  const stringLiteralFirstName = `[STRING_LITERAL:Value=|${newFirstName}|]`;\n  const stringLiteralLastName = `[STRING_LITERAL:Value=|${newLastName}|]`;\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_BasicData\n    SET FirstName = '${stringLiteralFirstName}',\n        LastName = '${stringLiteralLastName}'\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editCode(driverID, newCode) {\n  const stringLiteralCode = `[STRING_LITERAL:Value=|${newCode}|]`;\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_DriverData\n    SET DriverCode = '${stringLiteralCode}'\n    WHERE StaffID = ${driverID}\n  `);\n}\n\n// Helpers de fechas\nfunction excelToDate(excelDate) {\n  const baseDate = new Date(1899, 11, 30);\n  const ms = excelDate * 86400000;\n  return new Date(baseDate.getTime() + ms);\n}\nfunction dateToExcel(date) {\n  const baseDate = new Date(1899, 11, 30);\n  const diff = date.getTime() - baseDate.getTime();\n  return Math.floor(diff / 86400000);\n}\nfunction changeYearsInExcelDate(excelDate, years) {\n  const oldDate = excelToDate(excelDate);\n  let newYear = oldDate.getFullYear() + years;\n  let newDate = new Date(oldDate.getTime());\n  newDate.setFullYear(newYear);\n  if (newDate.getMonth() !== oldDate.getMonth()) {\n    newDate = new Date(newYear, 1, 28);\n  }\n  const newExcelDate = dateToExcel(newDate);\n  return {\n    newDate,\n    newExcelDate\n  };\n}\nfunction editAge(driverID, ageGap) {\n  const driverBirthdate = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    SELECT DOB\n    FROM Staff_BasicData\n    WHERE StaffID = ${driverID}\n  `, 'singleValue');\n  const {\n    newDate,\n    newExcelDate\n  } = changeYearsInExcelDate(driverBirthdate, parseInt(ageGap, 10));\n  const y = newDate.getFullYear();\n  const m = newDate.getMonth() + 1;\n  const d = newDate.getDate();\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_BasicData\n    SET DOB = ${newExcelDate},\n        DOB_ISO = '${y}-${m}-${d}'\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editMentality(inputStr) {\n  const [driverID, ...rest] = inputStr.split(\" \");\n  let sum = 0;\n  rest.forEach((value, area) => {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      UPDATE Staff_Mentality_AreaOpinions\n      SET Opinion = ${value}\n      WHERE StaffID = ${driverID}\n        AND Category = ${area}\n    `);\n    const statuses = mentalityAreas[area];\n    const events = mentalityEvents[area];\n    sum += parseInt(value, 10);\n    statuses.forEach(status => {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_Mentality_Statuses\n        SET Opinion = ${value},\n            Value = ${mentalityOpinions[value]}\n        WHERE StaffID = ${driverID}\n          AND Status = ${status}\n      `);\n    });\n    events.forEach(ev => {\n      (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        UPDATE Staff_Mentality_Events\n        SET Opinion = ${value},\n            Value = ${mentalityOpinions[value]}\n        WHERE StaffID = ${driverID}\n          AND Event = ${ev}\n      `);\n    });\n  });\n  const average = Math.floor(sum / 3);\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_State\n    SET Mentality = ${mentalityOverall[average]},\n        MentalityOpinion = ${average}\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editRetirement(driverID, value) {\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_GameData\n    SET Retired = ${value}\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editSuperlicense(driverID, value) {\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_DriverData\n    SET HasSuperLicense = ${value},\n        HasRacedEnoughToJoinF1 = ${value}\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editMarketability(driverID, value) {\n  (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n    UPDATE Staff_DriverData\n    SET Marketability = ${value}\n    WHERE StaffID = ${driverID}\n  `);\n}\nfunction editFreezeMentality(state) {\n  if (state === 0) {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS update_Opinion_After_Insert;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS update_Opinion_After_Update;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS clear_Staff_Mentality_Statuses;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS clear_Staff_Mentality_AreaOpinions;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS clear_Staff_Mentality_Events;`);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`DROP TRIGGER IF EXISTS reset_Staff_State;`);\n  } else {\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS update_Opinion_After_Insert\n      AFTER INSERT ON Staff_Mentality_AreaOpinions\n      BEGIN\n        UPDATE Staff_Mentality_AreaOpinions\n        SET Opinion = 2\n        WHERE Opinion != 2;\n      END;\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS update_Opinion_After_Update\n      AFTER UPDATE OF Opinion ON Staff_Mentality_AreaOpinions\n      BEGIN\n        UPDATE Staff_Mentality_AreaOpinions\n        SET Opinion = 2\n        WHERE Opinion != 2;\n      END;\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS clear_Staff_Mentality_Statuses\n      AFTER INSERT ON Staff_Mentality_Statuses\n      BEGIN\n        DELETE FROM Staff_Mentality_Statuses;\n      END;\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS clear_Staff_Mentality_Events\n      AFTER INSERT ON Staff_Mentality_Events\n      BEGIN\n        DELETE FROM Staff_Mentality_Events;\n      END;\n    `);\n    (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      CREATE TRIGGER IF NOT EXISTS reset_Staff_State\n      AFTER UPDATE ON Staff_State\n      BEGIN\n        UPDATE Staff_State\n        SET Mentality = 50, MentalityOpinion = 2;\n      END;\n    `);\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/eidtStatsUtils.js?");

/***/ }),

/***/ "./src/js/backend/scriptUtils/head2head.js":
/*!*************************************************!*\
  !*** ./src/js/backend/scriptUtils/head2head.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchHead2Head: () => (/* binding */ fetchHead2Head),\n/* harmony export */   fetchHead2HeadTeam: () => (/* binding */ fetchHead2HeadTeam)\n/* harmony export */ });\n/* harmony import */ var _dbManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dbManager */ \"./src/js/backend/dbManager.js\");\n\nfunction fetchHead2Head(driver1ID, driver2ID, year) {\n  console.log(driver1ID, driver2ID, year);\n\n  // Helpers para estadísticos:\n  const mean = arr => {\n    if (!arr.length) return 0;\n    const total = arr.reduce((acc, n) => acc + n, 0);\n    return total / arr.length;\n  };\n  const median = arr => {\n    if (!arr.length) return 0;\n    const sorted = [...arr].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 === 1 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n  };\n\n  // 1) Obtenemos todas las carreras en las que participaron ambos pilotos\n  const racesBoth = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT RaceID\n      FROM Races_Results\n      WHERE Season = ${year}\n        AND DriverID IN (${driver1ID}, ${driver2ID})\n      GROUP BY RaceID\n      HAVING COUNT(DISTINCT DriverID) = 2\n    `, 'allRows') || [];\n  console.log(racesBoth);\n  const raceIDs = racesBoth.map(row => row[0]);\n  const stats = {\n    raceH2H: [0, 0],\n    qualiH2H: [0, 0],\n    dnfH2H: [0, 0],\n    podiumsH2H: [0, 0],\n    polesH2H: [0, 0],\n    winsH2H: [0, 0],\n    sprintWinsH2H: [0, 0],\n    pointsH2H: null,\n    bestRace: null,\n    bestQuali: null,\n    raceDiffs: null,\n    qualiDiffs: null,\n    racePositionsMean: null,\n    racePositionsMedian: null,\n    qualiPositionsMean: null,\n    qualiPositionsMedian: null,\n    driver1: {\n      bestRace: 21,\n      bestQuali: 21,\n      avgPace: [],\n      avgQPace: [],\n      RPositions: [],\n      QPositions: []\n    },\n    driver2: {\n      bestRace: 21,\n      bestQuali: 21,\n      avgPace: [],\n      avgQPace: [],\n      RPositions: [],\n      QPositions: []\n    }\n  };\n\n  // 3) Iteramos en cada carrera en la que compitieron ambos\n  for (const raceID of raceIDs) {\n    console.log(raceID, year, driver1ID, driver2ID);\n    const d1_QStage = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver1ID}\n      `, 'singleValue') || 0;\n    const d2_QStage = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver2ID}\n      `, 'singleValue') || 0;\n\n    // --- 3.2) Posición en la fase final que corrieron\n    const d1_QRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver1ID}\n          AND QualifyingStage = ${d1_QStage}\n      `, 'singleValue') || 99;\n    const d2_QRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver2ID}\n          AND QualifyingStage = ${d2_QStage}\n      `, 'singleValue') || 99;\n\n    // --- 3.3) Quién ganó el “duelo” de qualy\n    if (d1_QStage < d2_QStage) {\n      stats.qualiH2H[1] += 1;\n    } else if (d1_QStage > d2_QStage) {\n      stats.qualiH2H[0] += 1;\n    } else {\n      // misma fase de qualy\n      if (d1_QRes < d2_QRes) {\n        stats.qualiH2H[0] += 1;\n      } else if (d1_QRes > d2_QRes) {\n        stats.qualiH2H[1] += 1;\n      }\n    }\n\n    // Guardar posiciones de qualy para estadísticas finales\n    stats.driver1.QPositions.push(d1_QRes);\n    stats.driver2.QPositions.push(d2_QRes);\n\n    // --- 3.4) Lap más rápida comparando la misma fase “mínima”\n    const minStage = Math.min(d1_QStage, d2_QStage);\n    const d1_qLap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FastestLap\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver1ID}\n          AND QualifyingStage = ${minStage}\n      `, 'singleValue') || 0;\n    const d2_qLap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FastestLap\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver2ID}\n          AND QualifyingStage = ${minStage}\n      `, 'singleValue') || 0;\n    if (d1_qLap !== 0 && d2_qLap !== 0) {\n      stats.driver1.avgQPace.push(d1_qLap);\n      stats.driver2.avgQPace.push(d2_qLap);\n    }\n\n    // --- 3.5) Poles: Q3 y posición 1\n    if (d1_QStage === 3 && d1_QRes === 1) {\n      stats.polesH2H[0] += 1;\n    }\n    if (d2_QStage === 3 && d2_QRes === 1) {\n      stats.polesH2H[1] += 1;\n    }\n\n    // Mejor qualifying\n    if (d1_QRes < stats.driver1.bestQuali) {\n      stats.driver1.bestQuali = d1_QRes;\n    }\n    if (d2_QRes < stats.driver2.bestQuali) {\n      stats.driver2.bestQuali = d2_QRes;\n    }\n\n    // --- 3.6) Resultados de carrera\n    const d1_RRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${year}\n          AND DriverID = ${driver1ID}\n      `, 'singleValue') || 99;\n    const d2_RRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${year}\n          AND DriverID = ${driver2ID}\n      `, 'singleValue') || 99;\n\n    // ¿Quién terminó por delante?\n    if (d1_RRes < d2_RRes) {\n      stats.raceH2H[0] += 1;\n    } else if (d1_RRes > d2_RRes) {\n      stats.raceH2H[1] += 1;\n    }\n\n    // Wins\n    if (d1_RRes === 1) stats.winsH2H[0] += 1;\n    if (d2_RRes === 1) stats.winsH2H[1] += 1;\n\n    // Podios\n    if (d1_RRes <= 3) stats.podiumsH2H[0] += 1;\n    if (d2_RRes <= 3) stats.podiumsH2H[1] += 1;\n\n    // Mejor posición en carrera\n    if (d1_RRes < stats.driver1.bestRace) {\n      stats.driver1.bestRace = d1_RRes;\n    }\n    if (d2_RRes < stats.driver2.bestRace) {\n      stats.driver2.bestRace = d2_RRes;\n    }\n\n    // Guardamos posición de carrera\n    stats.driver1.RPositions.push(d1_RRes);\n    stats.driver2.RPositions.push(d2_RRes);\n\n    // --- 3.7) DNFs\n    const d1_RDNF = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT DNF\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${year}\n          AND DriverID = ${driver1ID}\n      `, 'singleValue') || 0;\n    const d2_RDNF = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT DNF\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${year}\n          AND DriverID = ${driver2ID}\n      `, 'singleValue') || 0;\n    if (d1_RDNF === 1) stats.dnfH2H[0] += 1;\n    if (d2_RDNF === 1) stats.dnfH2H[1] += 1;\n\n    // --- 3.8) Ritmo en carrera (avg pace) si ninguno hizo DNF\n    if (d1_RDNF !== 1 && d2_RDNF !== 1) {\n      const d1_time = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Time\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${year}\n            AND DriverID = ${driver1ID}\n        `, 'singleValue') || 0;\n      const d2_time = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Time\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${year}\n            AND DriverID = ${driver2ID}\n        `, 'singleValue') || 0;\n      const d1_laps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Laps\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${year}\n            AND DriverID = ${driver1ID}\n        `, 'singleValue') || 1;\n      const d2_laps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT Laps\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${year}\n            AND DriverID = ${driver2ID}\n        `, 'singleValue') || 1;\n      const d1_pace = Number((d1_time / d1_laps).toFixed(3));\n      const d2_pace = Number((d2_time / d2_laps).toFixed(3));\n      stats.driver1.avgPace.push(d1_pace);\n      stats.driver2.avgPace.push(d2_pace);\n    }\n\n    // --- 3.9) SPRINT results\n    const d1_SRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_Sprintresults\n        WHERE RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver1ID}\n      `, 'singleValue');\n    const d2_SRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FinishingPos\n        FROM Races_Sprintresults\n        WHERE RaceID = ${raceID}\n          AND SeasonID = ${year}\n          AND DriverID = ${driver2ID}\n      `, 'singleValue');\n    if (d1_SRes === 1) stats.sprintWinsH2H[0] += 1;\n    if (d2_SRes === 1) stats.sprintWinsH2H[1] += 1;\n  }\n\n  // 4) Puntos totales en el campeonato (no por carrera)\n  const d1_Pts = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Points\n      FROM Races_DriverStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${year}\n        AND DriverID = ${driver1ID}\n    `, 'singleValue') || 0;\n  const d2_Pts = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Points\n      FROM Races_DriverStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${year}\n        AND DriverID = ${driver2ID}\n    `, 'singleValue') || 0;\n  stats.pointsH2H = [d1_Pts, d2_Pts];\n  const meanRd1 = Number(mean(stats.driver1.RPositions).toFixed(1));\n  const meanRd2 = Number(mean(stats.driver2.RPositions).toFixed(1));\n  const medianRd1 = median(stats.driver1.RPositions);\n  const medianRd2 = median(stats.driver2.RPositions);\n  const meanQd1 = Number(mean(stats.driver1.QPositions).toFixed(1));\n  const meanQd2 = Number(mean(stats.driver2.QPositions).toFixed(1));\n  const medianQd1 = median(stats.driver1.QPositions);\n  const medianQd2 = median(stats.driver2.QPositions);\n  const rDifferences = stats.driver1.avgPace.map((val, i) => (stats.driver2.avgPace[i] ?? 0) - val);\n  const avg_racediff = Number(mean(rDifferences).toFixed(3));\n  const qDifferences = stats.driver1.avgQPace.map((val, i) => (stats.driver2.avgQPace[i] ?? 0) - val);\n  const avg_qualidiff = Number(mean(qDifferences).toFixed(3));\n\n  // 3) Armamos el array final en el mismo orden que en tu Python:\n  const resultList = [stats.raceH2H,\n  // 0) (raceH2H)\n  stats.qualiH2H,\n  // 1) (qualiH2H)\n  stats.pointsH2H,\n  // 2) (pointsH2H)\n  stats.podiumsH2H,\n  // 3) (podiumsH2H)\n  [stats.driver1.bestRace, stats.driver2.bestRace],\n  // 4) (bestRace)\n  [stats.driver1.bestQuali, stats.driver2.bestQuali],\n  // 5) (bestQuali)\n  stats.dnfH2H,\n  // 6) (dnfH2H)\n  stats.winsH2H,\n  // 7) (winsH2H)\n  stats.polesH2H,\n  // 8) (polesH2H)\n  stats.sprintWinsH2H,\n  // 9) (sprintWinsH2H)\n  [-avg_racediff, avg_racediff],\n  // 10) (-avg_racediff, avg_racediff)\n  [-avg_qualidiff, avg_qualidiff],\n  // 11) (-avg_qualidiff, avg_qualidiff)\n  [meanRd1, meanRd2],\n  // 12) (meanRd1, meanRd2)\n  [medianRd1, medianRd2],\n  // 13) (medianRd1, medianRd2)\n  [meanQd1, meanQd2],\n  // 14) (meanQd1, meanQd2)\n  [medianQd1, medianQd2] // 15) (medianQd1, medianQd2)\n  ];\n\n  // 4) Retornamos este array en vez de 'stats'\n  return resultList;\n}\nfunction fetchHead2HeadTeam(teamID1, teamID2, year) {\n  const t1 = teamID1[0];\n  const t2 = teamID2[0];\n  const season = year;\n  console.log(t1, t2, season);\n\n  // 1) Obtenemos todas las carreras de la temporada (Distinct RaceID)\n  const races = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT DISTINCT RaceID\n      FROM Races_Results\n      WHERE Season = ${season}\n    `, 'allRows') || [];\n\n  // 2) Inicializamos contadores / arreglos\n  const raceH2H = [0, 0];\n  const qualiH2H = [0, 0];\n  const dnfH2H = [0, 0];\n  const bestRace = [0, 0];\n  const bestQuali = [0, 0];\n  const pointsH2H = [0, 0];\n  const podiumsH2H = [0, 0];\n  const polesH2H = [0, 0];\n  const winsH2H = [0, 0];\n  const sprintWinsH2H = [0, 0];\n  let d1_BestRace = 21;\n  let d2_BestRace = 21;\n  let d1_BestQauli = 21;\n  let d2_BestQauli = 21;\n  const d1_avgPace = [];\n  const d2_avgPace = [];\n  const d1_avgQPace = [];\n  const d2_avgQPace = [];\n\n  // 3) Iteramos por cada carrera encontrada\n  for (const gp of races) {\n    const raceID = gp[0];\n\n    // 3.1) Obtenemos todos los DriverIDs de cada equipo en Quali\n    //      (En Python, se guardan como tuples y luego se hace \"IN (drivers1_str)\").\n    //      En JS, construiremos la string manualmente.\n\n    // Pilotos del team1\n    const drivers1 = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT DISTINCT DriverID\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND TeamID = ${t1}\n      `, 'allRows') || [];\n\n    // Pilotos del team2\n    const drivers2 = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT DISTINCT DriverID\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND TeamID = ${t2}\n      `, 'allRows') || [];\n\n    // Transformamos el array de arrays/tuplas en un array de IDs\n    const drivers1IDs = drivers1.map(d => d[0]);\n    const drivers2IDs = drivers2.map(d => d[0]);\n\n    // Si no hay pilotos, podemos continuar a la siguiente carrera (para evitar queries \"IN ()\")\n    if (!drivers1IDs.length || !drivers2IDs.length) {\n      // Team 1 o Team 2 no participa en esta carrera, saltamos\n      continue;\n    }\n    const drivers1Str = drivers1IDs.join(',');\n    const drivers2Str = drivers2IDs.join(',');\n\n    // 3.2) Fase de Qualy más alta para cada equipo\n    const d1_QStage = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers1Str})\n      `, 'singleValue') || 0;\n    const d2_QStage = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MAX(QualifyingStage)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers2Str})\n      `, 'singleValue') || 0;\n\n    // 3.3) Posición mínima en esa fase de Qualy (equivalente a \"SELECT MIN(FinishingPos)\")\n    const d1_QRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers1Str})\n          AND QualifyingStage = ${d1_QStage}\n      `, 'singleValue') || 99;\n    const d2_QRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers2Str})\n          AND QualifyingStage = ${d2_QStage}\n      `, 'singleValue') || 99;\n\n    // 3.4) Comparativa H2H de qualy\n    if (d1_QStage < d2_QStage) {\n      qualiH2H[1] += 1;\n    } else if (d1_QStage > d2_QStage) {\n      qualiH2H[0] += 1;\n    } else {\n      // misma fase de qualy\n      if (d1_QRes < d2_QRes) {\n        qualiH2H[0] += 1;\n      } else if (d1_QRes > d2_QRes) {\n        qualiH2H[1] += 1;\n      }\n    }\n\n    // 3.5) Lap más rápida comparando la misma fase mínima\n    const minQ = Math.min(d1_QStage, d2_QStage);\n    const d1_qLap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FastestLap\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers1Str})\n          AND QualifyingStage = ${minQ}\n      `, 'singleValue') || 0;\n    const d2_qLap = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT FastestLap\n        FROM Races_QualifyingResults\n        WHERE RaceFormula = 1\n          AND RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers2Str})\n          AND QualifyingStage = ${minQ}\n      `, 'singleValue') || 0;\n    if (d1_qLap !== 0 && d2_qLap !== 0) {\n      d1_avgQPace.push(d1_qLap);\n      d2_avgQPace.push(d2_qLap);\n    }\n\n    // Poles: si QStage = 3 y la \"mejor\" posición = 1\n    if (d1_QStage === 3 && d1_QRes === 1) {\n      polesH2H[0] += 1;\n    }\n    if (d2_QStage === 3 && d2_QRes === 1) {\n      polesH2H[1] += 1;\n    }\n\n    // Best Quali\n    if (d1_QRes < d1_BestQauli) {\n      d1_BestQauli = d1_QRes;\n    }\n    if (d2_QRes < d2_BestQauli) {\n      d2_BestQauli = d2_QRes;\n    }\n\n    // 3.6) Resultados de carrera (usamos MIN(FinishingPos))\n    const d1_RRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${season}\n          AND DriverID IN (${drivers1Str})\n      `, 'singleValue') || 99;\n    const d2_RRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${season}\n          AND DriverID IN (${drivers2Str})\n      `, 'singleValue') || 99;\n\n    // Wins\n    if (d1_RRes === 1) winsH2H[0] += 1;\n    if (d2_RRes === 1) winsH2H[1] += 1;\n\n    // Race H2H\n    if (d1_RRes < d2_RRes) {\n      raceH2H[0] += 1;\n    } else if (d1_RRes > d2_RRes) {\n      raceH2H[1] += 1;\n    }\n\n    // Podios\n    if (d1_RRes <= 3) podiumsH2H[0] += 1;\n    if (d2_RRes <= 3) podiumsH2H[1] += 1;\n\n    // Best Race\n    if (d1_RRes < d1_BestRace) {\n      d1_BestRace = d1_RRes;\n    }\n    if (d2_RRes < d2_BestRace) {\n      d2_BestRace = d2_RRes;\n    }\n\n    // 3.7) DNF => sumamos\n    const d1_RDNF = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT SUM(DNF)\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${season}\n          AND DriverID IN (${drivers1Str})\n      `, 'singleValue') || 0;\n    const d2_RDNF = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT SUM(DNF)\n        FROM Races_Results\n        WHERE RaceID = ${raceID}\n          AND Season = ${season}\n          AND DriverID IN (${drivers2Str})\n      `, 'singleValue') || 0;\n    if (d1_RDNF > 0) {\n      dnfH2H[0] += d1_RDNF;\n    }\n    if (d2_RDNF > 0) {\n      dnfH2H[1] += d2_RDNF;\n    }\n\n    // 3.8) Ritmo de carrera, si ambos equipos no sumaron DNFs\n    if (d1_RDNF === 0 && d2_RDNF === 0) {\n      // Tomamos el promedio de \"Time\" y \"Laps\" de los pilotos del equipo\n      const d1_raceTotal = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT AVG(Time)\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${season}\n            AND DriverID IN (${drivers1Str})\n        `, 'singleValue') || 0;\n      const d2_raceTotal = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT AVG(Time)\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${season}\n            AND DriverID IN (${drivers2Str})\n        `, 'singleValue') || 0;\n      const d1_raceLaps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT AVG(Laps)\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${season}\n            AND DriverID IN (${drivers1Str})\n        `, 'singleValue') || 0;\n      const d2_raceLaps = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n          SELECT AVG(Laps)\n          FROM Races_Results\n          WHERE RaceID = ${raceID}\n            AND Season = ${season}\n            AND DriverID IN (${drivers2Str})\n        `, 'singleValue') || 0;\n\n      // Si no son 0, agregamos\n      if (d1_raceLaps && d1_raceTotal) {\n        const pace = Number((d1_raceTotal / d1_raceLaps).toFixed(3));\n        d1_avgPace.push(pace);\n      }\n      if (d2_raceLaps && d2_raceTotal) {\n        const pace = Number((d2_raceTotal / d2_raceLaps).toFixed(3));\n        d2_avgPace.push(pace);\n      }\n    }\n\n    // 3.9) Sprint results (MIN FinishingPos)\n    const d1_SRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_Sprintresults\n        WHERE RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers1Str})\n      `, 'singleValue');\n    const d2_SRes = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n        SELECT MIN(FinishingPos)\n        FROM Races_Sprintresults\n        WHERE RaceID = ${raceID}\n          AND SeasonID = ${season}\n          AND DriverID IN (${drivers2Str})\n      `, 'singleValue');\n    if (d1_SRes === 1) {\n      sprintWinsH2H[0] += 1;\n    }\n    if (d2_SRes === 1) {\n      sprintWinsH2H[1] += 1;\n    }\n  }\n\n  // 4) Puntos de cada equipo en el campeonato (TeamStandings)\n  const d1_Pts = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Points\n      FROM Races_TeamStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${season}\n        AND TeamID = ${t1}\n    `, 'singleValue') || 0;\n  const d2_Pts = (0,_dbManager__WEBPACK_IMPORTED_MODULE_0__.queryDB)(`\n      SELECT Points\n      FROM Races_TeamStandings\n      WHERE RaceFormula = 1\n        AND SeasonID = ${season}\n        AND TeamID = ${t2}\n    `, 'singleValue') || 0;\n  pointsH2H[0] = d1_Pts;\n  pointsH2H[1] = d2_Pts;\n  bestRace[0] = d1_BestRace;\n  bestRace[1] = d2_BestRace;\n  bestQuali[0] = d1_BestQauli;\n  bestQuali[1] = d2_BestQauli;\n\n  // 5) Calculamos la diferencia media de ritmo (race y quali).\n  //    rDifferences = (d2_avg - d1_avg) para cada par\n  const rDifferences = d1_avgPace.map((val, i) => {\n    const d2Val = d2_avgPace[i] || 0;\n    return d2Val - val;\n  });\n  const qDifferences = d1_avgQPace.map((val, i) => {\n    const d2Val = d2_avgQPace[i] || 0;\n    return d2Val - val;\n  });\n\n  // Helpers para la media\n  const mean = arr => {\n    if (!arr.length) return 0;\n    const sum = arr.reduce((acc, num) => acc + num, 0);\n    return sum / arr.length;\n  };\n  const avg_racediff = Number(mean(rDifferences).toFixed(3));\n  const avg_qualidiff = Number(mean(qDifferences).toFixed(3));\n\n  // 6) Construimos resultList con los 12 elementos, en el mismo orden que en Python\n  // resultList = [\n  //   raceH2H, qualiH2H, pointsH2H, podiumsH2H,\n  //   bestRace, bestQuali, dnfH2H, winsH2H,\n  //   polesH2H, sprintWinsH2H,\n  //   (-avg_racediff, avg_racediff),\n  //   (-avg_qualidiff, avg_qualidiff)\n  // ]\n  const resultList = [raceH2H, qualiH2H, pointsH2H, podiumsH2H, bestRace, bestQuali, dnfH2H, winsH2H, polesH2H, sprintWinsH2H, [-avg_racediff, avg_racediff], [-avg_qualidiff, avg_qualidiff]];\n\n  // 7) Retornamos el array final\n  return resultList;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/backend/scriptUtils/head2head.js?");

/***/ }),

/***/ "./src/js/frontend/calendar.js":
/*!*************************************!*\
  !*** ./src/js/frontend/calendar.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   load_calendar: () => (/* binding */ load_calendar)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _predictions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./predictions */ \"./src/js/frontend/predictions.js\");\n\n\n\nlet deleting = false;\nlet deleted = false;\n\n/**\r\n * Positions both the div the user's moving and the one he has moved it into\r\n * @param {div} div0 The div the user is moving\r\n * @param {div} div1 The div the user has moved div0 into\r\n * @param {string} beforeAfter If the user has moved div0 before or after div1\r\n */\nfunction reubicate(div0, div1, beforeAfter) {\n  const parentDiv = document.querySelector('.main-calendar-section');\n  parentDiv.removeChild(div0);\n  if (beforeAfter === 'before') {\n    parentDiv.insertBefore(div0, div1);\n  } else if (beforeAfter === 'after') {\n    parentDiv.insertBefore(div0, div1.nextSibling);\n  }\n}\n\n/**\r\n * Adds a race in the calendar div\r\n * @param {string} code Code from the race\r\n */\nfunction addRace(code, rainP, rainQ, rainR, type, trackID, state) {\n  let imageUrl = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[code];\n  let div = document.createElement('div');\n  let leftDiv = document.createElement('div');\n  let numberDiv = document.createElement('div');\n  numberDiv.className = \"race-calendar-number bold-font\";\n  leftDiv.className = \"left-race\";\n  let rightDiv = document.createElement('div');\n  rightDiv.className = \"right-race\";\n  div.classList.add('race-calendar');\n  div.dataset.trackid = trackID;\n  div.dataset.rainQ = rainQ;\n  div.dataset.rainR = rainR;\n  div.dataset.rainP = rainP;\n  div.dataset.type = type;\n  div.dataset.state = state;\n  if (state === 2) {\n    div.classList.add(\"completed\");\n    let compDiv = document.createElement('div');\n    compDiv.classList.add('complete-div');\n    let divText = document.createElement('div');\n    divText.innerHTML = \"Completed\";\n    divText.className = \"bold-font\";\n    divText.style.fontSize = \"18px\";\n    compDiv.appendChild(divText);\n    div.appendChild(compDiv);\n  }\n  let upperDiv = document.createElement('div');\n  upperDiv.className = \"upper-text-and-flag\";\n  let textDiv = document.createElement('div');\n  textDiv.classList.add('upper-race', 'bold-font');\n  textDiv.textContent = code.slice(0, -1).toUpperCase();\n  const img = document.createElement('img');\n  img.src = imageUrl;\n  img.classList.add('flag');\n  upperDiv.appendChild(textDiv);\n  upperDiv.appendChild(img);\n  let ATAInput;\n  let lowerDiv = document.createElement('div');\n  lowerDiv.classList.add('lower-race');\n  lowerDiv.innerHTML = \"<div class='form-check form-switch'><input class='form-check-input custom-toggle sprint-input' type='checkbox' role='switch''><label class='form-check-label'>Sprint</label></div>\";\n  if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023) {\n    lowerDiv.innerHTML += \"<div class='form-check form-switch'><input class='form-check-input custom-toggle ata-input' type='checkbox' role='switch'><label class='form-check-label' for='flexSwitchCheckDefault'>ATA Quali</label></div>\";\n    ATAInput = lowerDiv.querySelector(\".ata-input\");\n  }\n  let SprintInput = lowerDiv.querySelector(\".sprint-input\");\n  SprintInput.addEventListener(\"click\", function (event) {\n    if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023) {\n      if (ATAInput.checked) ATAInput.checked = false;\n    }\n    if (SprintInput.checked) div.dataset.type = 1;else div.dataset.type = 0;\n  });\n  if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023) {\n    ATAInput.addEventListener(\"click\", function (event) {\n      if (SprintInput.checked) SprintInput.checked = false;\n      if (ATAInput.checked) div.dataset.type = 2;else div.dataset.type = 0;\n    });\n  }\n  leftDiv.appendChild(upperDiv);\n  leftDiv.appendChild(lowerDiv);\n  if (type === 1) {\n    lowerDiv.children[0].firstChild.click();\n  } else if (type === 2) {\n    lowerDiv.children[1].firstChild.click();\n  }\n  div.appendChild(numberDiv);\n  div.appendChild(leftDiv);\n  let qWeather = document.createElement('div');\n  qWeather.className = \"full-quali-weather\";\n  let qName = document.createElement('div');\n  qName.className = \"session-name bold-font\";\n  qName.innerText = \"Sat\";\n  let wSelector = document.createElement('div');\n  wSelector.className = \"weather-selector\";\n  let leftArrow = document.createElement('i');\n  leftArrow.className = \"bi bi-chevron-left\";\n  let rightArrow = document.createElement('i');\n  rightArrow.className = \"bi bi-chevron-right\";\n  let wVis = document.createElement('div');\n  wVis.className = \"weather-vis\";\n  wVis.dataset.value = Number(rainQ);\n  wSelector.appendChild(leftArrow);\n  wSelector.appendChild(wVis);\n  wSelector.appendChild(rightArrow);\n  qWeather.appendChild(qName);\n  qWeather.appendChild(wSelector);\n  let rWeather = qWeather.cloneNode(true);\n  rWeather.firstChild.innerText = \"Sun\";\n  rWeather.children[1].children[1].dataset.value = Number(rainR);\n  let pWeather = qWeather.cloneNode(true);\n  pWeather.firstChild.innerText = \"Fri\";\n  pWeather.children[1].children[1].dataset.value = Number(rainP);\n  rightDiv.appendChild(pWeather);\n  rightDiv.appendChild(qWeather);\n  rightDiv.appendChild(rWeather);\n  div.appendChild(rightDiv);\n  div.querySelectorAll(\".bi-chevron-left\").forEach(function (elem) {\n    elem.addEventListener(\"click\", function () {\n      let val = elem.parentNode.querySelector(\".weather-vis\").dataset.value;\n      let newVal = Number(val) - 1;\n      if (newVal === -1) {\n        newVal = 5;\n      }\n      elem.parentNode.querySelector(\".weather-vis\").dataset.value = newVal;\n      if (elem.parentNode.parentNode.firstChild.innerText === \"Sat\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainQ = newVal;\n      } else if (elem.parentNode.parentNode.firstChild.innerText === \"Sun\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainR = newVal;\n      } else if (elem.parentNode.parentNode.firstChild.innerText === \"Fri\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainP = newVal;\n      }\n      updateVisualizers();\n    });\n  });\n  div.querySelectorAll(\".bi-chevron-right\").forEach(function (elem) {\n    elem.addEventListener(\"click\", function () {\n      let val = elem.parentNode.querySelector(\".weather-vis\").dataset.value;\n      let newVal = Number(val) + 1;\n      if (newVal === 6) {\n        newVal = 0;\n      }\n      elem.parentNode.querySelector(\".weather-vis\").dataset.value = newVal;\n      if (elem.parentNode.parentNode.firstChild.innerText === \"Sat\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainQ = newVal;\n      } else if (elem.parentNode.parentNode.firstChild.innerText === \"Sun\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainR = newVal;\n      } else if (elem.parentNode.parentNode.firstChild.innerText === \"Fri\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainP = newVal;\n      }\n      updateVisualizers();\n    });\n  });\n  document.querySelector('.main-calendar-section').appendChild(div);\n}\nfunction updateVisualizers() {\n  document.querySelector(\".main-calendar\").querySelectorAll(\".weather-vis\").forEach(function (elem) {\n    elem.innerHTML = \"\";\n    let val = elem.dataset.value;\n    let icon = document.createElement(\"i\");\n    icon.className = _config__WEBPACK_IMPORTED_MODULE_0__.weather_dict[val];\n    elem.appendChild(icon);\n  });\n}\nfunction load_calendar(races) {\n  document.querySelector('.main-calendar-section').innerHTML = \"\";\n  races.forEach(function (elem) {\n    let code = _config__WEBPACK_IMPORTED_MODULE_0__.races_map[elem[0]];\n    addRace(code, transformWeather(elem[1]), transformWeather(elem[2]), transformWeather(elem[3]), elem[4], elem[0], elem[5]);\n  });\n  updateVisualizers();\n  update_numbers();\n  load_addRaces();\n}\nfunction update_numbers() {\n  document.querySelectorAll(\".race-calendar-number\").forEach(function (elem, index) {\n    elem.textContent = index + 1;\n  });\n}\nfunction transformWeather(state) {\n  let realWeather;\n  if (state === 1) {\n    realWeather = 0;\n  } else if (state === 2) {\n    realWeather = 1;\n  } else if (state === 4) {\n    realWeather = 2;\n  } else if (state === 8) {\n    realWeather = 3;\n  } else if (state === 16) {\n    realWeather = 4;\n  } else if (state === 32) {\n    realWeather = 5;\n  }\n  return realWeather;\n}\n\n/**\r\n * Changes the number after the race code to specify the format\r\n * @param {div} div div from the race that's changing format\r\n * @param {string} format code of the format\r\n */\nfunction changeFormat(div, format) {\n  let lastChar = div.dataset.code.charAt(div.dataset.code.length - 1);\n  if (/\\d/.test(lastChar)) {\n    div.dataset.code = div.dataset.code.slice(0, -1) + format;\n  } else {\n    div.dataset.code = div.dataset.code + format;\n  }\n}\n\n/**\r\n * Adds all the races to the addRace menu\r\n */\nfunction load_addRaces() {\n  document.getElementById(\"addTrackMenu\").innerHTML = \"\";\n  for (let dataCode of Object.keys(_config__WEBPACK_IMPORTED_MODULE_0__.codes_dict)) {\n    let elem = _config__WEBPACK_IMPORTED_MODULE_0__.countries_dict[dataCode];\n    let li = document.createElement('li');\n    let a = document.createElement('a');\n    a.classList.add('dropdown-item');\n    a.classList.add('menu-race');\n    a.href = '#';\n    a.textContent = elem;\n    a.dataset.code = dataCode;\n    a.dataset.trackid = _config__WEBPACK_IMPORTED_MODULE_0__.invertedRacesMap[dataCode];\n    let imageUrl = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[dataCode];\n    let img = document.createElement('img');\n    img.src = imageUrl;\n    img.classList.add('menuFlag');\n    a.appendChild(img);\n    li.appendChild(a);\n    document.getElementById(\"addTrackMenu\").appendChild(li);\n  }\n  listenerRaces();\n}\n\n/**\r\n * Adds the listeners to the addRace menu races\r\n */\nfunction listenerRaces() {\n  document.querySelectorAll('#addTrackMenu a').forEach(item => {\n    item.addEventListener(\"click\", function () {\n      if (document.querySelector(\".main-calendar-section\").childElementCount < _predictions__WEBPACK_IMPORTED_MODULE_2__.max_races) {\n        addRace(item.dataset.code, 0, 0, 0, 0, item.dataset.trackid, 0);\n        updateVisualizers();\n        update_numbers();\n      }\n    });\n  });\n}\n\n/**\r\n * Event listeenr for the delete tracks button\r\n */\ndocument.getElementById(\"deleteTracks\").addEventListener(\"click\", function (btn) {\n  if (deleting) {\n    document.querySelectorAll(\".delete-div\").forEach(function (elem) {\n      elem.parentNode.removeChild(elem);\n      update_numbers();\n    });\n    this.className = \"custom-dropdown custom-button bold-font\";\n    document.querySelectorAll(\".race-calendar\").forEach(function (elem) {\n      if (elem.firstChild.className !== \"complete-div\") {\n        elem.classList = \"race-calendar\";\n      }\n    });\n  } else {\n    document.querySelectorAll(\".race-calendar\").forEach(function (elem) {\n      if (elem.firstChild.className !== \"complete-div\") {\n        elem.classList = \"race-calendar deleting\";\n        let div = document.createElement('div');\n        let trashicon = document.createElement('i');\n        let trashandtext = document.createElement('div');\n        let text = document.createElement('span');\n        text.classList = \"bold-font\";\n        text.innerText = \"Delete\";\n        trashandtext.classList.add('trash-and-text');\n        trashicon.className = \"bi bi-trash-fill\";\n        div.classList.add('delete-div');\n        trashandtext.appendChild(trashicon);\n        trashandtext.appendChild(text);\n        div.appendChild(trashandtext);\n        elem.insertBefore(div, elem.firstChild);\n        trashandtext.addEventListener(\"click\", function () {\n          let race = trashandtext.parentNode.parentNode;\n          trashandtext.parentNode.parentNode.parentNode.removeChild(race);\n          deleted = true;\n          if (race.dataset.trackid === \"6\") {\n            update_notifications(\"Why'd you do that?\", \"monaco\");\n          }\n        });\n      }\n    });\n    this.className = \"custom-dropdown custom-button bold-font delete-mode\";\n  }\n  deleting = !deleting;\n});\n\n/**\r\n * Manages the interaction with the race divs\r\n */\ninteract('.race-calendar').draggable({\n  inertia: true,\n  listeners: {\n    start(event) {\n      let target = event.target;\n      let position = target.getBoundingClientRect();\n      let width = target.getBoundingClientRect().width;\n    },\n    move(event) {\n      const target = event.target;\n      const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;\n      const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\n      target.style.transform = `translate(${x}px, ${y}px)`;\n      target.style.opacity = 1;\n      target.style.zIndex = 10;\n      target.setAttribute('data-x', x);\n      target.setAttribute('data-y', y);\n    },\n    end(event) {\n      let target = event.target;\n      const racesEvents = document.querySelectorAll('.race-calendar');\n      racesEvents.forEach(function (element) {\n        let eventRect = element.getBoundingClientRect();\n        let centerHorizontal = (eventRect.left + eventRect.right) / 2;\n        if (target !== element) {\n          if (event.clientX >= eventRect.left && event.clientX <= eventRect.right && event.clientY >= eventRect.top && event.clientY <= eventRect.bottom) {\n            if (event.clientX >= centerHorizontal) {\n              reubicate(target, element, \"after\");\n            } else {\n              reubicate(target, element, \"before\");\n            }\n            update_numbers();\n          }\n        }\n      });\n      target.style.transform = 'none';\n      target.setAttribute('data-x', 0);\n      target.setAttribute('data-y', 0);\n\n      // originalParent = undefined;\n      // destinationParent = undefined;\n      // draggable = undefined;\n    }\n  }\n});\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/calendar.js?");

/***/ }),

/***/ "./src/js/frontend/config.js":
/*!***********************************!*\
  !*** ./src/js/frontend/config.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abreviations_dict: () => (/* binding */ abreviations_dict),\n/* harmony export */   codes_dict: () => (/* binding */ codes_dict),\n/* harmony export */   combined_dict: () => (/* binding */ combined_dict),\n/* harmony export */   countries_dict: () => (/* binding */ countries_dict),\n/* harmony export */   default_dict: () => (/* binding */ default_dict),\n/* harmony export */   default_points: () => (/* binding */ default_points),\n/* harmony export */   difficultyConfig: () => (/* binding */ difficultyConfig),\n/* harmony export */   driversTableLogosDict: () => (/* binding */ driversTableLogosDict),\n/* harmony export */   engine_stats_dict: () => (/* binding */ engine_stats_dict),\n/* harmony export */   f1_teams: () => (/* binding */ f1_teams),\n/* harmony export */   f2_teams: () => (/* binding */ f2_teams),\n/* harmony export */   f3_teams: () => (/* binding */ f3_teams),\n/* harmony export */   invertedRacesMap: () => (/* binding */ invertedRacesMap),\n/* harmony export */   inverted_dict: () => (/* binding */ inverted_dict),\n/* harmony export */   lightColors: () => (/* binding */ lightColors),\n/* harmony export */   logos_disc: () => (/* binding */ logos_disc),\n/* harmony export */   mentalityModifiers: () => (/* binding */ mentalityModifiers),\n/* harmony export */   mentality_bonuses: () => (/* binding */ mentality_bonuses),\n/* harmony export */   mentality_dict: () => (/* binding */ mentality_dict),\n/* harmony export */   mentality_to_global_menatality: () => (/* binding */ mentality_to_global_menatality),\n/* harmony export */   names_full: () => (/* binding */ names_full),\n/* harmony export */   pars_abreviations: () => (/* binding */ pars_abreviations),\n/* harmony export */   part_codes_abreviations: () => (/* binding */ part_codes_abreviations),\n/* harmony export */   points_race: () => (/* binding */ points_race),\n/* harmony export */   points_sprint: () => (/* binding */ points_sprint),\n/* harmony export */   races_map: () => (/* binding */ races_map),\n/* harmony export */   races_names: () => (/* binding */ races_names),\n/* harmony export */   staff_pics: () => (/* binding */ staff_pics),\n/* harmony export */   staff_positions: () => (/* binding */ staff_positions),\n/* harmony export */   teamOrder: () => (/* binding */ teamOrder),\n/* harmony export */   team_dict: () => (/* binding */ team_dict),\n/* harmony export */   teams_full_name_dict: () => (/* binding */ teams_full_name_dict),\n/* harmony export */   typeStaff_dict: () => (/* binding */ typeStaff_dict),\n/* harmony export */   weather_dict: () => (/* binding */ weather_dict)\n/* harmony export */ });\n// calendar\nlet codes_dict = {\n  \"bah0\": \"../assets/images/bahrain.png\",\n  \"sau0\": \"../assets/images/saudi.jpg\",\n  \"aus0\": \"../assets/images/australia.png\",\n  \"aze0\": \"../assets/images/azerbaiyan.png\",\n  \"mia0\": \"../assets/images/usa.png\",\n  \"imo0\": \"../assets/images/italy.png\",\n  \"mon0\": \"../assets/images/monaco.png\",\n  \"spa0\": \"../assets/images/spain.png\",\n  \"can0\": \"../assets/images/canada.png\",\n  \"aut0\": \"../assets/images/austria.png\",\n  \"gbr0\": \"../assets/images/gbr.png\",\n  \"hun0\": \"../assets/images/hungry.png\",\n  \"bel0\": \"../assets/images/balgium.png\",\n  \"ned0\": \"../assets/images/ned.png\",\n  \"ita0\": \"../assets/images/italy.png\",\n  \"jap0\": \"../assets/images/japan.png\",\n  \"sgp0\": \"../assets/images/singapore.png\",\n  \"qat0\": \"../assets/images/qatar.png\",\n  \"usa0\": \"../assets/images/usa.png\",\n  \"mex0\": \"../assets/images/mexico.png\",\n  \"bra0\": \"../assets/images/brazil.png\",\n  \"veg0\": \"../assets/images/usa.png\",\n  \"uae0\": \"../assets/images/uae.png\",\n  \"chi0\": \"../assets/images/china.png\"\n};\nlet countries_dict = {\n  \"bah0\": \"Bahrain\",\n  \"sau0\": \"Saudi Arabia\",\n  \"aus0\": \"Australia\",\n  \"aze0\": \"Azerbaijan\",\n  \"mia0\": \"Miami\",\n  \"imo0\": \"Imola\",\n  \"mon0\": \"Monaco\",\n  \"spa0\": \"Spain\",\n  \"can0\": \"Canada\",\n  \"aut0\": \"Austria\",\n  \"gbr0\": \"United Kingdom\",\n  \"hun0\": \"Hungary\",\n  \"bel0\": \"Belgium\",\n  \"ned0\": \"Netherlands\",\n  \"ita0\": \"Italy\",\n  \"sgp0\": \"Singapore\",\n  \"jap0\": \"Japan\",\n  \"qat0\": \"Qatar\",\n  \"usa0\": \"USA\",\n  \"mex0\": \"Mexico\",\n  \"bra0\": \"Brazil\",\n  \"veg0\": \"Vegas\",\n  \"uae0\": \"Abu Dhbai\",\n  \"chi0\": \"China\"\n};\nlet weather_dict = {\n  0: \"bi bi-sun\",\n  1: \"bi bi-cloud-sun\",\n  2: \"bi bi-cloud\",\n  3: \"bi bi-cloud-drizzle\",\n  4: \"bi bi-cloud-rain\",\n  5: \"bi bi-cloud-rain-heavy\"\n};\n\n//h2h\nconst lightColors = [\"#f1f1f1\", \"#47c7fc\", \"#ffd300\", \"#6CD3BF\", \"#fcfcfc\", \"#37BEDD\", \"#B6BABD\", \"#c3dc00\", \"#d0e610\", \"#fac51c\", \"#b09247\", \"#f7c82f\"];\nconst default_dict = {\n  1: \"Ferrari\",\n  2: \"McLaren\",\n  3: \"Red Bull\",\n  4: \"Mercedes\",\n  5: \"Alpine\",\n  6: \"Williams\",\n  7: \"Haas\",\n  8: \"Alpha Tauri\",\n  9: \"Alfa Romeo\",\n  10: \"Aston Martin\",\n  32: \"Custom Team\"\n};\nlet combined_dict = {\n  1: \"Ferrari\",\n  2: \"McLaren\",\n  3: \"Red Bull\",\n  4: \"Mercedes\",\n  5: \"Alpine\",\n  6: \"Williams\",\n  7: \"Haas\",\n  8: \"Alpha Tauri\",\n  9: \"Alfa Romeo\",\n  10: \"Aston Martin\",\n  11: \"Prema Racing (F2)\",\n  12: \"Virtuosi Racing (F2)\",\n  13: \"Carlin (F2)\",\n  14: \"Hitech GP (F2)\",\n  15: \"ART Grand Prix (F2)\",\n  16: \"MP Motorsport (F2)\",\n  17: \"PHM Racing (F2)\",\n  18: \"DAMS (F2)\",\n  19: \"Campo Racing (F2)\",\n  20: \"VAR Racing (F2)\",\n  21: \"Trident (F2)\",\n  22: \"Prema Racing (F3)\",\n  23: \"Trident (F3)\",\n  24: \"ART Grand Prix (F3)\",\n  25: \"Hitech GP (F3)\",\n  26: \"VAR Racing (F3)\",\n  27: \"MP Motorsport (F3)\",\n  28: \"Campos Racing (F3)\",\n  29: \"Carlin (F3)\",\n  30: \"Jenzzer Motorsport (F3)\",\n  31: \"PHM Racing (F3)\",\n  32: \"Custom Team\"\n};\n\n//performance\nconst pars_abreviations = {\n  \"chassis\": \"C\",\n  \"front_wing\": \"FW\",\n  \"rear_wing\": \"RW\",\n  \"underfloor\": \"UF\",\n  \"sidepods\": \"SP\",\n  \"suspension\": \"S\"\n};\nconst part_codes_abreviations = {\n  3: \"C\",\n  4: \"FW\",\n  5: \"RW\",\n  6: \"UF\",\n  7: \"SP\",\n  8: \"S\"\n};\nlet abreviations_dict = {\n  1: \"FE\",\n  2: \"MC\",\n  3: \"RB\",\n  4: \"MER\",\n  5: \"ALP\",\n  6: \"WIL\",\n  7: \"HA\",\n  8: \"AT\",\n  9: \"ALFA\",\n  10: \"AM\",\n  32: \"CUS\"\n};\nlet engine_stats_dict = new Map([[10, \"Power\"], [6, \"Fuel efficiency\"], [11, \"Performance threshold\"], [12, \"Performance loss\"], [14, \"Engine durability\"], [18, \"ERS durability\"], [19, \"Gearbox durability\"]]);\n\n//predictions\nconst names_full = {\n  \"BAH\": \"Bahrain\",\n  \"AUS\": \"Australia\",\n  \"SAU\": \"Saudi Arabia\",\n  \"IMO\": \"Imola\",\n  \"MIA\": \"Miami\",\n  \"SPA\": \"Spain\",\n  \"MON\": \"Monaco\",\n  \"AZE\": \"Azerbaijan\",\n  \"CAN\": \"Canada\",\n  \"GBR\": \"Great Britain\",\n  \"AUT\": \"Austria\",\n  \"FRA\": \"France\",\n  \"HUN\": \"Hungary\",\n  \"BEL\": \"Belgium\",\n  \"ITA\": \"Italy\",\n  \"SGP\": \"Singapore\",\n  \"JAP\": \"Japan\",\n  \"USA\": \"United States\",\n  \"MEX\": \"Mexico\",\n  \"BRA\": \"Brazil\",\n  \"UAE\": \"Abu Dhabi\",\n  \"NED\": \"Netherlands\",\n  \"VEG\": \"Vegas\",\n  \"QAT\": \"Qatar\",\n  \"CHI\": \"China\"\n};\n\n//seasonViewer\nlet driversTableLogosDict = {\n  \"stake\": \"logo-stake-table\",\n  \"audi\": \"logo-up-down-extra\",\n  \"alfa\": \"logo-merc-table\",\n  \"sauber\": \"logo-williams-table\",\n  \"visarb\": \"logo-visarb-table\",\n  \"hugo\": \"logo-stake-table\",\n  \"brawn\": \"logo-brawn-table\",\n  \"toyota\": \"logo-williams-table\",\n  \"alphatauri\": \"logo-extra-small\",\n  \"porsche\": \"logo-porsche-table\",\n  \"renault\": \"logo-ferrari-table\",\n  \"andretti\": \"logo-ferrari-table\",\n  \"lotus\": \"logo-up-down\",\n  \"alpine\": \"logo-alpine-table\"\n};\nconst races_map = {\n  2: \"bah0\",\n  1: \"aus0\",\n  11: \"sau0\",\n  24: \"imo0\",\n  22: \"mia0\",\n  5: \"spa0\",\n  6: \"mon0\",\n  4: \"aze0\",\n  7: \"can0\",\n  10: \"gbr0\",\n  9: \"aut0\",\n  8: \"fra0\",\n  12: \"hun0\",\n  13: \"bel0\",\n  14: \"ita0\",\n  15: \"sgp0\",\n  17: \"jap0\",\n  19: \"usa0\",\n  18: \"mex0\",\n  20: \"bra0\",\n  21: \"uae0\",\n  23: \"ned0\",\n  25: \"veg0\",\n  26: \"qat0\",\n  3: \"chi0\"\n};\nconst invertedRacesMap = {\n  \"bah0\": 2,\n  \"aus0\": 1,\n  \"sau0\": 11,\n  \"imo0\": 24,\n  \"mia0\": 22,\n  \"spa0\": 5,\n  \"mon0\": 6,\n  \"aze0\": 4,\n  \"can0\": 7,\n  \"gbr0\": 10,\n  \"aut0\": 9,\n  \"fra0\": 8,\n  \"hun0\": 12,\n  \"bel0\": 13,\n  \"ita0\": 14,\n  \"sgp0\": 15,\n  \"jap0\": 17,\n  \"usa0\": 19,\n  \"mex0\": 18,\n  \"bra0\": 20,\n  \"uae0\": 21,\n  \"ned0\": 23,\n  \"veg0\": 25,\n  \"qat0\": 26,\n  \"chi0\": 3\n};\nconst races_names = {\n  2: \"BAH\",\n  1: \"AUS\",\n  11: \"SAU\",\n  24: \"IMO\",\n  22: \"MIA\",\n  5: \"SPA\",\n  6: \"MON\",\n  4: \"AZE\",\n  7: \"CAN\",\n  10: \"GBR\",\n  9: \"AUT\",\n  8: \"FRA\",\n  12: \"HUN\",\n  13: \"BEL\",\n  14: \"ITA\",\n  15: \"SGP\",\n  17: \"JAP\",\n  19: \"USA\",\n  18: \"MEX\",\n  20: \"BRA\",\n  21: \"UAE\",\n  23: \"NED\",\n  25: \"VEG\",\n  26: \"QAT\",\n  3: \"CHI\"\n};\nconst teams_full_name_dict = {\n  'FERRARI': 1,\n  'MCLAREN': 2,\n  'RED BULL': 3,\n  'MERCEDES': 4,\n  'ALPINE': 5,\n  'WILLIAMS': 6,\n  'HAAS': 7,\n  'ALPHA TAURI': 8,\n  'ALFA ROMEO': 9,\n  'ASTON MARTIN': 10\n};\nlet logos_disc = {\n  1: '../assets/images/ferrari.png',\n  2: '../assets/images/mclaren.png',\n  3: '../assets/images/redbull.png',\n  4: '../assets/images/mercedes.png',\n  5: '../assets/images/alpine.png',\n  6: '../assets/images/williams.png',\n  7: '../assets/images/haas.png',\n  8: '../assets/images/alphatauri.png',\n  9: '../assets/images/alfaromeo.png',\n  10: '../assets/images/astonmartin.png',\n  32: '../assets/images/placeholder.png'\n};\nconst points_race = {\n  1: 25,\n  2: 18,\n  3: 15,\n  4: 12,\n  5: 10,\n  6: 8,\n  7: 6,\n  8: 4,\n  9: 2,\n  10: 1,\n  11: 0,\n  12: 0,\n  13: 0,\n  14: 0,\n  15: 0,\n  16: 0,\n  17: 0,\n  18: 0,\n  19: 0,\n  20: 0,\n  \"DNF\": 0\n};\nconst points_sprint = {\n  1: 8,\n  2: 7,\n  3: 6,\n  4: 5,\n  5: 4,\n  6: 3,\n  7: 2,\n  8: 1,\n  9: 0,\n  10: 0,\n  11: 0,\n  12: 0,\n  13: 0,\n  14: 0,\n  15: 0,\n  16: 0,\n  17: 0,\n  18: 0,\n  19: 0,\n  20: 0,\n  \"-1\": 0\n};\nlet default_points = [\"25\", \"18\", \"15\", \"12\", \"10\", \"8\", \"6\", \"4\", \"2\", \"1\", \"DNF\", \"0\", \"\", \"-\"];\n\n//stats\nlet typeStaff_dict = {\n  0: \"fulldriverlist\",\n  1: \"fullTechnicalList\",\n  2: \"fullEngineerList\",\n  3: \"fullAeroList\",\n  4: \"fullDirectorList\"\n};\nlet mentality_dict = {\n  0: \"enthusiastic\",\n  1: \"positive\",\n  2: \"neutral\",\n  3: \"negative\",\n  4: \"demoralized\"\n};\nlet teamOrder = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\nconst mentality_bonuses = {\n  0: 7,\n  1: 4,\n  2: 0,\n  3: -2,\n  4: -6\n};\nconst mentalityModifiers = {\n  5: -8,\n  9: -7,\n  15: -6,\n  20: -5,\n  24: -4,\n  29: -3,\n  35: -2,\n  39: -1,\n  59: 0,\n  63: 1,\n  69: 2,\n  77: 3,\n  79: 4,\n  83: 5,\n  85: 6,\n  96: 7,\n  100: 8\n};\nconst mentality_to_global_menatality = {\n  0: 95,\n  1: 79,\n  2: 59,\n  3: 24,\n  4: 5\n};\n\n//transfers\nconst f1_teams = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32];\nconst f2_teams = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21];\nconst f3_teams = [22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\nconst staff_positions = {\n  1: \"technical-chief\",\n  2: \"race-engineer\",\n  3: \"head-aero\",\n  4: \"sporting-director\"\n};\nconst staff_pics = {\n  1: \"../assets/images/technicalChief.png\",\n  2: \"../assets/images/raceEngineer.png\",\n  3: \"../assets/images/headAero.png\",\n  4: \"../assets/images/sportingDirector.png\"\n};\nlet team_dict = {\n  1: \"fe\",\n  2: \"mc\",\n  3: \"rb\",\n  4: \"me\",\n  5: \"al\",\n  6: \"wi\",\n  7: \"ha\",\n  8: \"at\",\n  9: \"af\",\n  10: \"as\",\n  32: \"ct\",\n  33: \"f2\",\n  34: \"f3\"\n};\nlet inverted_dict = {\n  'ferrari': 1,\n  'mclaren': 2,\n  'redbull': 3,\n  'merc': 4,\n  'alpine': 5,\n  'williams': 6,\n  'haas': 7,\n  'alphatauri': 8,\n  'alfaromeo': 9,\n  'astonmartin': 10,\n  'custom': 32\n};\n\n// renderer\nconst difficultyConfig = {\n  \"default\": {\n    visible: [\"defaultDif\"],\n    lightDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    researchDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    statDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    designTimeDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    factoryDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    buildDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    }\n  },\n  \"reduced weight\": {\n    visible: [\"lightDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    }\n  },\n  \"extra-hard\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Small research boost\"\n    },\n    statDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Stats boost +0.1%\"\n    }\n  },\n  \"brutal\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning brutal\",\n      text: \"Moderate research boost\"\n    },\n    statDif: {\n      className: \"dif-warning brutal\",\n      text: \"Stats boost +0.15%\"\n    },\n    designTimeDif: {\n      className: \"dif-warning brutal\",\n      text: \"Design times reduced 5%\"\n    }\n  },\n  \"unfair\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\", \"factoryDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning unfair\",\n      text: \"Large research boost\"\n    },\n    statDif: {\n      className: \"dif-warning unfair\",\n      text: \"Stats boost +0.3%\"\n    },\n    designTimeDif: {\n      className: \"dif-warning unfair\",\n      text: \"Design times reduced 11%\"\n    },\n    factoryDif: {\n      className: \"dif-warning unfair\",\n      text: \"Factory level 4\"\n    }\n  },\n  \"insane\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\", \"factoryDif\", \"buildDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning insane\",\n      text: \"Huge research boost\"\n    },\n    statDif: {\n      className: \"dif-warning insane\",\n      text: \"Stats boost +0.35%\"\n    },\n    designTimeDif: {\n      className: \"dif-warning insane\",\n      text: \"Design times reduced 16%\"\n    },\n    factoryDif: {\n      className: \"dif-warning unfair\",\n      text: \"Factory level 4\"\n    },\n    buildDif: {\n      className: \"dif-warning insane\",\n      text: \"+1 part when design completed\"\n    }\n  },\n  \"impossible\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\", \"factoryDif\", \"buildDif\"],\n    lightDif: {\n      className: \"dif-warning impossible\",\n      text: \"ULTRA-lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning impossible\",\n      text: \"Massive research boost\"\n    },\n    statDif: {\n      className: \"dif-warning impossible\",\n      text: \"Stats boost +0.48%\"\n    },\n    designTimeDif: {\n      className: \"dif-warning impossible\",\n      text: \"Design times reduced 20%\"\n    },\n    factoryDif: {\n      className: \"dif-warning impossible\",\n      text: \"Factory level 5\"\n    },\n    buildDif: {\n      className: \"dif-warning impossible\",\n      text: \"+2 parts when design completed\"\n    }\n  }\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/config.js?");

/***/ }),

/***/ "./src/js/frontend/dragFile.js":
/*!*************************************!*\
  !*** ./src/js/frontend/dragFile.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDBUtils: () => (/* binding */ getDBUtils)\n/* harmony export */ });\n/* harmony import */ var _backend_UESaveHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../backend/UESaveHandler */ \"./src/js/backend/UESaveHandler.js\");\n/* harmony import */ var _backend_dbManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/dbManager.js */ \"./src/js/backend/dbManager.js\");\n/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer.js */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _backend_scriptUtils_dbUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../backend/scriptUtils/dbUtils.js */ \"./src/js/backend/scriptUtils/dbUtils.js\");\n// dragDrop.js\n\n\n\n\nlet dbUtils = null;\nlet carAnalysisUtils = null;\nconst dropDiv = document.getElementById(\"dropDiv\");\ndropDiv.addEventListener(\"dragenter\", event => {\n  event.preventDefault();\n  dropDiv.classList.add(\"drag-over\");\n});\ndropDiv.addEventListener(\"dragover\", event => {\n  event.preventDefault();\n  event.dataTransfer.dropEffect = \"copy\";\n});\ndropDiv.addEventListener(\"dragleave\", event => {\n  event.preventDefault();\n  dropDiv.classList.remove(\"drag-over\");\n});\ndropDiv.addEventListener(\"drop\", async event => {\n  event.preventDefault();\n  dropDiv.classList.remove(\"drag-over\");\n  const file = event.dataTransfer.files[0];\n  if (!file) return;\n  console.log(\"Leyendo el archivo:\", file.name);\n  const {\n    db,\n    metadata\n  } = await (0,_backend_UESaveHandler__WEBPACK_IMPORTED_MODULE_0__.analyzeFileToDatabase)(file);\n  (0,_backend_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.setDatabase)(db, metadata);\n  dbUtils = new _backend_scriptUtils_dbUtils_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_backend_dbManager_js__WEBPACK_IMPORTED_MODULE_1__.queryDB, metadata);\n  console.log(\"DB y metadata guardados\");\n  console.log(\"¡File readed succesfuly!\", metadata);\n  document.getElementById(\"saveFileDropped\").classList.add(\"completed\");\n  const tables = db.exec(\"SELECT name FROM sqlite_master WHERE type='table'\");\n  console.log(\"All tables:\", tables);\n  const message = {\n    command: 'saveSelected',\n    data: {\n      selectedData: \"Hola\",\n      prueba2: \"Hola mola\"\n    }\n  };\n  const command = _renderer_js__WEBPACK_IMPORTED_MODULE_2__.factory.createCommand(message);\n  console.log(\"Command created:\", command);\n  command.execute();\n});\nfunction getDBUtils() {\n  if (!dbUtils) {\n    throw new Error(\"La base de datos aún no se ha inicializado.\");\n  }\n  return dbUtils;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/dragFile.js?");

/***/ }),

/***/ "./src/js/frontend/head2head.js":
/*!**************************************!*\
  !*** ./src/js/frontend/head2head.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   colors_dict: () => (/* binding */ colors_dict),\n/* harmony export */   hideComp: () => (/* binding */ hideComp),\n/* harmony export */   load_drivers_h2h: () => (/* binding */ load_drivers_h2h),\n/* harmony export */   load_labels_initialize_graphs: () => (/* binding */ load_labels_initialize_graphs),\n/* harmony export */   manage_h2h_bars: () => (/* binding */ manage_h2h_bars),\n/* harmony export */   qualiPaceListener: () => (/* binding */ qualiPaceListener),\n/* harmony export */   racePaceListener: () => (/* binding */ racePaceListener),\n/* harmony export */   resetH2H: () => (/* binding */ resetH2H),\n/* harmony export */   sprintsListeners: () => (/* binding */ sprintsListeners)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transfers */ \"./src/js/frontend/transfers.js\");\n/* harmony import */ var _predictions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./predictions */ \"./src/js/frontend/predictions.js\");\n\n\n\n\nlet driver1_selected = false;\nlet driver2_selected = false;\nlet driver1Sel;\nlet driver2Sel;\nlet pos_dict = {\n  1: \"1st\",\n  2: \"2nd\",\n  3: \"3rd\"\n};\nlet d1_team;\nlet d2_team;\nlet wins = false;\nlet poles = false;\nlet sprints = false;\nlet race = 0;\nlet quali = 0;\nlet menuLength = 4;\nlet driverGraph;\nlet pointsGraph;\nlet qualiGraph;\nlet gapWinnerGraph;\nlet gapPoleGraph;\nlet compData;\nlet annotationsToggle = true;\nlet h2hCount = 0;\nlet graphCount = 0;\nlet h2hList = [];\nlet graphList = [];\nlet h2hTeamList = [];\nlet graphTeamList = [];\nlet mode = \"driver\";\nlet colors_dict = {\n  \"10\": \"#F91536\",\n  \"11\": \"#f1f1f1\",\n  \"20\": \"#F58020\",\n  \"21\": \"#47c7fc\",\n  \"30\": \"#3671C6\",\n  \"31\": \"#ffd300\",\n  \"40\": \"#6CD3BF\",\n  \"41\": \"#fcfcfc\",\n  \"50\": \"#2293D1\",\n  \"51\": \"#fd48c7\",\n  \"60\": \"#37BEDD\",\n  \"61\": \"#f1f1f1\",\n  \"70\": \"#B6BABD\",\n  \"71\": \"#f62039\",\n  \"80\": \"#5E8FAA\",\n  \"81\": \"#f1f1f1\",\n  \"90\": \"#C92D4B\",\n  \"91\": \"#f1f1f1\",\n  \"100\": \"#358C75\",\n  \"101\": \"#c3dc00\",\n  \"320\": \"#ffffff\",\n  \"321\": \"#000000\"\n};\n//changed as the ct colors changes, so it stays\n\nChart.register(ChartDataLabels);\n\n/**\r\n * Puts the bars of the head to head with the correct width for the drivers selected\r\n * @param {object} data object with all the info of the comparision between both drivers\r\n */\nfunction manage_h2h_bars(data) {\n  let relValue;\n  let d1_width;\n  let d2_width;\n  compData = data;\n  if (data[7].some(elem => elem >= 2)) {\n    data[4] = data[7];\n    document.getElementById(\"bestrh2h\").querySelector(\".only-name\").textContent = \"WINS\";\n    wins = true;\n  } else {\n    document.getElementById(\"bestrh2h\").querySelector(\".only-name\").textContent = \"BEST RACE\";\n    wins = false;\n  }\n  if (data[8].some(elem => elem >= 2)) {\n    data[5] = data[8];\n    document.getElementById(\"bestqh2h\").querySelector(\".only-name\").textContent = \"POLES\";\n    poles = true;\n  } else {\n    document.getElementById(\"bestqh2h\").querySelector(\".only-name\").textContent = \"BEST QUALI\";\n    poles = false;\n  }\n  if (data[9].some(elem => elem >= 1)) {\n    document.getElementById(\"bestrh2h\").querySelector(\".name-H2H\").style.justifyContent = \"space-between\";\n    document.getElementById(\"bestrh2h\").querySelectorAll(\"i\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    document.getElementById(\"bestrh2h\").querySelector(\".name-H2H\").style.justifyContent = \"center\";\n    document.getElementById(\"bestrh2h\").querySelectorAll(\"i\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n  }\n  document.querySelectorAll(\".one-statH2H\").forEach(function (elem, index) {\n    if (elem.id === \"bestrh2h\" || elem.id === \"bestqh2h\") {\n      if (!wins && elem.id === \"bestrh2h\") {\n        d1_width = 100 - (data[index][0] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n        d2_width = 100 - (data[index][1] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n        if (data[index][0] <= 3) {\n          elem.querySelector(\".driver1-number\").textContent = pos_dict[data[index][0]];\n        } else {\n          elem.querySelector(\".driver1-number\").textContent = data[index][0] + \"th\";\n        }\n        if (data[index][1] <= 3) {\n          elem.querySelector(\".driver2-number\").textContent = pos_dict[data[index][1]];\n        } else {\n          elem.querySelector(\".driver2-number\").textContent = data[index][1] + \"th\";\n        }\n      } else if (wins && elem.id === \"bestrh2h\") {\n        relValue = (100 / (data[index][0] + data[index][1])).toFixed(2);\n        d1_width = data[index][0] * relValue;\n        d2_width = data[index][1] * relValue;\n        elem.querySelector(\".driver1-number\").textContent = data[index][0];\n        elem.querySelector(\".driver2-number\").textContent = data[index][1];\n      }\n      if (!poles && elem.id === \"bestqh2h\") {\n        d1_width = 100 - (data[index][0] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n        d2_width = 100 - (data[index][1] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n        if (data[index][0] <= 3) {\n          elem.querySelector(\".driver1-number\").textContent = pos_dict[data[index][0]];\n        } else {\n          elem.querySelector(\".driver1-number\").textContent = data[index][0] + \"th\";\n        }\n        if (data[index][1] <= 3) {\n          elem.querySelector(\".driver2-number\").textContent = pos_dict[data[index][1]];\n        } else {\n          elem.querySelector(\".driver2-number\").textContent = data[index][1] + \"th\";\n        }\n      } else if (poles && elem.id === \"bestqh2h\") {\n        relValue = (100 / (data[index][0] + data[index][1])).toFixed(2);\n        d1_width = data[index][0] * relValue;\n        d2_width = data[index][1] * relValue;\n        elem.querySelector(\".driver1-number\").textContent = data[index][0];\n        elem.querySelector(\".driver2-number\").textContent = data[index][1];\n      }\n    } else {\n      if (elem.id === \"raceh2h\" || elem.id === \"qualih2h\") {\n        let index2;\n        if (elem.id === \"raceh2h\") {\n          index2 = 10;\n        } else {\n          index2 = 11;\n        }\n        let d1Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver1-avg\");\n        d1Num.className = \"driver1-avg bold-font\";\n        let d2Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver2-avg\");\n        d2Num.className = \"driver2-avg bold-font\";\n        let d1 = compData[index2][0];\n        if (compData[index2][0] > 0) {\n          d1 = \"+\" + compData[index2][0];\n          d1Num.classList.add(\"negative\");\n          d2Num.classList.add(\"positive\");\n        }\n        d1Num.innerText = d1;\n        let d2 = compData[index2][1];\n        if (compData[index2][1] > 0) {\n          d2 = \"+\" + compData[index2][1];\n          d1Num.classList.add(\"positive\");\n          d2Num.classList.add(\"negative\");\n        }\n        d2Num.innerText = d2;\n        if (elem.id === \"qualih2h\") {\n          relValue = (100 / (data[0][0] + data[0][1])).toFixed(2);\n          if (relValue == Infinity) {\n            relValue = 0;\n          }\n          d1_width = data[index][0] * relValue;\n          d2_width = data[index][1] * relValue;\n          elem.querySelector(\".driver1-number\").textContent = data[index][0];\n          elem.querySelector(\".driver2-number\").textContent = data[index][1];\n          if (quali === 2) {\n            d1_width = 100 - (data[14][0] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n            d2_width = 100 - (data[14][1] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n            elem.querySelector(\".driver1-number\").textContent = data[14][0];\n            elem.querySelector(\".driver2-number\").textContent = data[14][1];\n          } else if (quali === 3) {\n            d1_width = 100 - (data[15][0] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n            d2_width = 100 - (data[15][1] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n            elem.querySelector(\".driver1-number\").textContent = data[15][0];\n            elem.querySelector(\".driver2-number\").textContent = data[15][1];\n          }\n        }\n        if (elem.id === \"raceh2h\") {\n          relValue = (100 / (data[0][0] + data[0][1])).toFixed(2);\n          if (relValue == Infinity) {\n            relValue = 0;\n          }\n          d1_width = data[index][0] * relValue;\n          d2_width = data[index][1] * relValue;\n          elem.querySelector(\".driver1-number\").textContent = data[index][0];\n          elem.querySelector(\".driver2-number\").textContent = data[index][1];\n          if (race === 2) {\n            d1_width = 100 - (data[12][0] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n            d2_width = 100 - (data[12][1] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n            elem.querySelector(\".driver1-number\").textContent = data[12][0];\n            elem.querySelector(\".driver2-number\").textContent = data[12][1];\n          } else if (race === 3) {\n            d1_width = 100 - (data[13][0] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n            d2_width = 100 - (data[13][1] - 1) * _predictions__WEBPACK_IMPORTED_MODULE_3__.relative_grid;\n            elem.querySelector(\".driver1-number\").textContent = data[13][0];\n            elem.querySelector(\".driver2-number\").textContent = data[13][1];\n          }\n        }\n      } else if (elem.id === \"ptsh2h\") {\n        relValue = 100 / Math.max(data[index][0], data[index][1]);\n        if (relValue == Infinity) {\n          relValue = 0;\n        }\n        d1_width = data[index][0] * relValue;\n        d2_width = data[index][1] * relValue;\n        elem.querySelector(\".driver1-number\").textContent = data[index][0];\n        elem.querySelector(\".driver2-number\").textContent = data[index][1];\n      } else if (elem.id === \"dnfh2h\" || elem.id === \"podiumsh2h\") {\n        relValue = (100 / (data[index][0] + data[index][1])).toFixed(2);\n        if (relValue == Infinity) {\n          relValue = 0;\n        }\n        d1_width = data[index][0] * relValue;\n        d2_width = data[index][1] * relValue;\n        elem.querySelector(\".driver1-number\").textContent = data[index][0];\n        elem.querySelector(\".driver2-number\").textContent = data[index][1];\n      }\n    }\n    if (d1_width > 100) {\n      d1_width = 100;\n    }\n    if (d2_width > 100) {\n      d2_width = 100;\n    }\n    fill_bars(elem, d1_width, d2_width);\n  });\n}\n/**\r\n * Fills the bars for the elem with driver1 and 2 data\r\n * @param {div} elem general bar for the comparision\r\n * @param {Number} d1_width driver 1's width for his bar\r\n * @param {Number} d2_width driver 2's width for his bar\r\n */\nfunction fill_bars(elem, d1_width, d2_width) {\n  elem.querySelector(\".driver1-bar\").className = \"driver1-bar\";\n  elem.querySelector(\".driver2-bar\").className = \"driver2-bar\";\n  document.querySelector(\".driver1-name\").className = \"driver1-name\";\n  document.querySelector(\".driver2-name\").className = \"driver2-name\";\n  elem.querySelector(\".driver1-bar\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[0]] + \"bar-primary\");\n  document.querySelector(\".driver1-name\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[0]] + \"-back-transparent\");\n  if (h2hTeamList[0] === h2hTeamList[1]) {\n    elem.querySelector(\".driver2-bar\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[1]] + \"bar-secondary\");\n    document.querySelector(\".driver2-name\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[1]] + \"-back-transparent-secondary\");\n  } else {\n    elem.querySelector(\".driver2-bar\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[1]] + \"bar-primary\");\n    document.querySelector(\".driver2-name\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[1]] + \"-back-transparent\");\n  }\n  elem.querySelector(\".driver1-bar\").style.width = d1_width + \"%\";\n  elem.querySelector(\".driver2-bar\").style.width = d2_width + \"%\";\n}\n\n/**\r\n * Toggles the sprint wins comparision\r\n */\nfunction toggle_sprints() {\n  let elem = document.querySelector(\"#bestrh2h\");\n  let d1_width;\n  let d2_width;\n  let relValue;\n  if (sprints) {\n    elem.querySelector(\".only-name\").textContent = \"SPRINT WINS\";\n    relValue = (100 / (compData[9][0] + compData[9][1])).toFixed(2);\n    d1_width = compData[9][0] * relValue;\n    d2_width = compData[9][1] * relValue;\n    elem.querySelector(\".driver1-number\").textContent = compData[9][0];\n    elem.querySelector(\".driver2-number\").textContent = compData[9][1];\n  } else {\n    if (wins) {\n      elem.querySelector(\".only-name\").textContent = \"WINS\";\n      relValue = (100 / (compData[4][0] + compData[4][1])).toFixed(2);\n      d1_width = compData[4][0] * relValue;\n      d2_width = compData[4][1] * relValue;\n      elem.querySelector(\".driver1-number\").textContent = compData[4][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[4][1];\n    } else {\n      elem.querySelector(\".only-name\").textContent = \"BEST RACE\";\n      d1_width = 100 - (compData[4][0] - 1) * 5;\n      d2_width = 100 - (compData[4][1] - 1) * 5;\n      if (compData[4][0] <= 3) {\n        elem.querySelector(\".driver1-number\").textContent = pos_dict[compData[4][0]];\n      } else {\n        elem.querySelector(\".driver1-number\").textContent = compData[4][0] + \"th\";\n      }\n      if (compData[4][1] <= 3) {\n        elem.querySelector(\".driver2-number\").textContent = pos_dict[compData[4][1]];\n      } else {\n        elem.querySelector(\".driver2-number\").textContent = compData[4][1] + \"th\";\n      }\n    }\n  }\n  fill_bars(elem, d1_width, d2_width);\n}\nfunction toggle_racePace() {\n  let d1_width;\n  let d2_width;\n  let relValue;\n  let elem = document.querySelector(\"#raceh2h\");\n  if (race === 1) {\n    elem.querySelector(\".only-name\").textContent = \"AVG PACE DIFF (s)\";\n    elem.querySelector(\".bar-space\").classList.add(\"d-none\");\n    elem.querySelector(\".avg-comparison\").classList.remove(\"d-none\");\n    let d1Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver1-avg\");\n    d1Num.className = \"driver1-avg bold-font\";\n    let d2Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver2-avg\");\n    d2Num.className = \"driver2-avg bold-font\";\n    let d1 = compData[10][0];\n    if (compData[10][0] > 0) {\n      d1 = \"+\" + compData[10][0];\n      d1Num.classList.add(\"negative\");\n      d2Num.classList.add(\"positive\");\n    }\n    d1Num.innerText = d1;\n    let d2 = compData[10][1];\n    if (compData[10][1] > 0) {\n      d2 = \"+\" + compData[10][1];\n      d1Num.classList.add(\"positive\");\n      d2Num.classList.add(\"negative\");\n    }\n    d2Num.innerText = d2;\n  } else {\n    elem.querySelector(\".bar-space\").classList.remove(\"d-none\");\n    elem.querySelector(\".avg-comparison\").classList.add(\"d-none\");\n    if (race === 0) {\n      elem.querySelector(\".only-name\").textContent = \"RACE\";\n      relValue = (100 / (compData[0][0] + compData[0][1])).toFixed(2);\n      d1_width = compData[0][0] * relValue;\n      d2_width = compData[0][1] * relValue;\n      elem.querySelector(\".driver1-number\").textContent = compData[0][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[0][1];\n    } else if (race === 2) {\n      elem.querySelector(\".only-name\").textContent = \"AVG RACE\";\n      d1_width = 100 - (compData[12][0] - 1) * 5;\n      d2_width = 100 - (compData[12][1] - 1) * 5;\n      elem.querySelector(\".driver1-number\").textContent = compData[12][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[12][1];\n    } else if (race === 3) {\n      elem.querySelector(\".only-name\").textContent = \"MEDIAN RACE\";\n      d1_width = 100 - (compData[13][0] - 1) * 5;\n      d2_width = 100 - (compData[13][1] - 1) * 5;\n      elem.querySelector(\".driver1-number\").textContent = compData[13][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[13][1];\n    }\n    fill_bars(elem, d1_width, d2_width);\n  }\n}\nfunction toggle_qualiPace() {\n  let elem = document.querySelector(\"#qualih2h\");\n  let d1_width;\n  let d2_width;\n  let relValue;\n  if (quali === 1) {\n    elem.querySelector(\".only-name\").textContent = \"AVG QUALI DIFF (s)\";\n    elem.querySelector(\".bar-space\").classList.add(\"d-none\");\n    elem.querySelector(\".avg-comparison\").classList.remove(\"d-none\");\n    let d1Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver1-avg\");\n    d1Num.className = \"driver1-avg bold-font\";\n    let d2Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver2-avg\");\n    d2Num.className = \"driver2-avg bold-font\";\n    let d1 = compData[11][0];\n    if (compData[11][0] > 0) {\n      d1 = \"+\" + compData[11][0];\n      d1Num.classList.add(\"negative\");\n      d2Num.classList.add(\"positive\");\n    }\n    d1Num.innerText = d1;\n    let d2 = compData[11][1];\n    if (compData[11][1] > 0) {\n      d2 = \"+\" + compData[11][1];\n      d1Num.classList.add(\"positive\");\n      d2Num.classList.add(\"negative\");\n    }\n    d2Num.innerText = d2;\n  } else {\n    elem.querySelector(\".bar-space\").classList.remove(\"d-none\");\n    elem.querySelector(\".avg-comparison\").classList.add(\"d-none\");\n    if (quali === 0) {\n      elem.querySelector(\".only-name\").textContent = \"QUALIFYING\";\n      relValue = (100 / (compData[0][0] + compData[0][1])).toFixed(2);\n      d1_width = compData[1][0] * relValue;\n      d2_width = compData[1][1] * relValue;\n      elem.querySelector(\".driver1-number\").textContent = compData[1][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[1][1];\n    } else if (quali === 2) {\n      elem.querySelector(\".only-name\").textContent = \"AVG QUALI\";\n      d1_width = 100 - (compData[14][0] - 1) * 5;\n      d2_width = 100 - (compData[14][1] - 1) * 5;\n      elem.querySelector(\".driver1-number\").textContent = compData[14][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[14][1];\n    } else if (quali === 3) {\n      elem.querySelector(\".only-name\").textContent = \"MEDIAN QUALI\";\n      d1_width = 100 - (compData[15][0] - 1) * 5;\n      d2_width = 100 - (compData[15][1] - 1) * 5;\n      elem.querySelector(\".driver1-number\").textContent = compData[15][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[15][1];\n    }\n    fill_bars(elem, d1_width, d2_width);\n  }\n}\n\n/**\r\n * Adds listeners for the arrows to change between sprints and races\r\n */\nfunction sprintsListeners() {\n  document.querySelector(\"#bestrh2h\").querySelectorAll(\"i\").forEach(function (elem) {\n    elem.removeEventListener('evento2', change_sprintView);\n    elem.addEventListener(\"click\", change_sprintView);\n  });\n}\n\n/**\r\n * listeners to the race head to head comparison\r\n */\nfunction racePaceListener() {\n  document.querySelector(\"#raceh2h\").querySelectorAll(\".bi-chevron-right\").forEach(function (elem) {\n    elem.removeEventListener('evento5', increase_racePaceView);\n    elem.addEventListener(\"click\", increase_racePaceView);\n  });\n  document.querySelector(\"#raceh2h\").querySelectorAll(\".bi-chevron-left\").forEach(function (elem) {\n    elem.removeEventListener('evento6', decrease_racePaceView);\n    elem.addEventListener(\"click\", decrease_racePaceView);\n  });\n}\n\n/**\r\n * listeners to the qualifying head to head comparison\r\n */\nfunction qualiPaceListener() {\n  document.querySelector(\"#qualih2h\").querySelectorAll(\".bi-chevron-right\").forEach(function (elem) {\n    elem.removeEventListener('evento3', increase_qualiPaceView);\n    elem.addEventListener(\"click\", increase_qualiPaceView);\n  });\n  document.querySelector(\"#qualih2h\").querySelectorAll(\".bi-chevron-left\").forEach(function (elem) {\n    elem.removeEventListener('evento4', decrease_qualiPaceView);\n    elem.addEventListener(\"click\", decrease_qualiPaceView);\n  });\n}\n\n/**\r\n * increases the race comparison showed\r\n */\nfunction increase_racePaceView() {\n  race += 1;\n  race = race % menuLength;\n  toggle_racePace();\n}\n\n/**\r\n * decreases the race comparison showed\r\n */\nfunction decrease_racePaceView() {\n  race -= 1;\n  race = (race + menuLength) % menuLength;\n  toggle_racePace();\n}\n\n/**\r\n * increases the quali comparison showed\r\n */\nfunction increase_qualiPaceView() {\n  quali += 1;\n  quali = quali % menuLength;\n  toggle_qualiPace();\n}\n\n/**\r\n * decreases the quali comparison showed\r\n */\nfunction decrease_qualiPaceView() {\n  quali -= 1;\n  quali = (quali + menuLength) % menuLength;\n  toggle_qualiPace();\n}\n\n/**\r\n * Changes the sprint view\r\n */\nfunction change_sprintView() {\n  sprints = !sprints;\n  toggle_sprints();\n}\n\n/**\r\n * Event listener for the annotatiosn switch\r\n */\ndocument.getElementById(\"annotationsToggle\").addEventListener(\"click\", function () {\n  annotationsToggle = !annotationsToggle;\n  if (typeof driverGraph !== 'undefined' && driverGraph !== null) {\n    driverGraph.options.plugins.annotation.annotations.line1.display = annotationsToggle;\n    driverGraph.options.plugins.annotation.annotations.line2.display = annotationsToggle;\n    driverGraph.options.plugins.annotation.annotations.line3.display = annotationsToggle;\n    driverGraph.options.plugins.annotation.annotations.line4.display = annotationsToggle;\n    driverGraph.update();\n  }\n  if (typeof qualiGraph !== 'undefined' && qualiGraph !== null) {\n    qualiGraph.options.plugins.annotation.annotations.line1.display = annotationsToggle;\n    qualiGraph.options.plugins.annotation.annotations.line2.display = annotationsToggle;\n    qualiGraph.update();\n  }\n});\n\n/**\r\n * hides the comparison\r\n */\nfunction hideComp() {\n  document.querySelector(\".drivers-modal-zone\").innerHTML = \"\";\n  document.querySelector(\"#mainH2h\").classList.add(\"d-none\");\n  document.querySelectorAll(\".modal-team\").forEach(function (elem) {\n    elem.classList.add(\"d-none\");\n  });\n}\n\n/**\r\n * Loads all the drivers into the menus of driver selection\r\n * @param {Object} drivers object with all the driver info\r\n */\nfunction load_drivers_h2h(drivers) {\n  let dest = document.querySelector(\".drivers-modal-zone\");\n  h2hCount = 0;\n  h2hList = [];\n  graphList = [];\n  h2hTeamList = [];\n  graphTeamList = [];\n  dest.innerHTML = \"\";\n  drivers.forEach(function (driver) {\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = \"col modal-driver\";\n    newDiv.dataset.driverid = driver[1];\n    newDiv.dataset.teamid = driver[2];\n    let name = driver[0].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    spanLastName.dataset.teamid = driver[2];\n    newDiv.dataset.teamid = driver[2];\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[2]] + \"-transparent\");\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_2__.format_name)(driver[0], name, spanName, spanLastName);\n    spanLastName.classList.add(\"bold-font\");\n    let h2hBut = document.createElement(\"div\");\n    h2hBut.dataset.driverid = driver[1];\n    h2hBut.dataset.teamid = driver[2];\n    let h2hLabel = document.createElement(\"div\");\n    h2hLabel.innerText = \"H2H\";\n    h2hLabel.className = \"no-pointer pos-relative\";\n    h2hBut.appendChild(h2hLabel);\n    h2hBut.className = \"H2Hradio\";\n    h2hBut.dataset.state = \"unchecked\";\n    h2hBut.addEventListener(\"click\", function () {\n      if (h2hBut.dataset.state === \"unchecked\" && h2hCount < 2) {\n        h2hBut.dataset.state = \"checked\";\n        h2hBut.classList.add(\"activated\");\n        h2hCount += 1;\n        h2hList.push(h2hBut.dataset.driverid);\n        h2hTeamList.push(h2hBut.dataset.teamid);\n      } else if (h2hBut.dataset.state === \"checked\") {\n        h2hBut.dataset.state = \"unchecked\";\n        h2hBut.classList.remove(\"activated\");\n        h2hCount -= 1;\n        let ind = h2hList.indexOf(h2hBut.dataset.driverid);\n        h2hTeamList.splice(ind, 1);\n        h2hList = h2hList.filter(x => x !== h2hBut.dataset.driverid);\n      }\n      let text = document.querySelector(\".H2H-text\").querySelector(\".text-normal\");\n      text.innerText = \"- \" + h2hCount + \"/2 drivers selected\";\n      text.classList.add(\"h2h-highlight\");\n      setTimeout(function () {\n        text.classList.remove(\"h2h-highlight\");\n      }, 400);\n    });\n    let graphBut = document.createElement(\"div\");\n    let graphIcon = document.createElement(\"i\");\n    graphBut.dataset.driverid = driver[1];\n    graphBut.dataset.teamid = driver[2];\n    graphIcon.className = \"bi bi-graph-up no-pointer pos-relative \";\n    graphBut.appendChild(graphIcon);\n    graphBut.className = \"GraphButton\";\n    graphBut.dataset.state = \"unchecked\";\n    graphBut.addEventListener(\"click\", function () {\n      if (graphBut.dataset.state === \"unchecked\") {\n        graphBut.dataset.state = \"checked\";\n        graphBut.classList.add(\"activated\");\n        graphList.push(graphBut.dataset.driverid);\n        graphTeamList.push(graphBut.dataset.teamid);\n        graphCount += 1;\n      } else if (graphBut.dataset.state === \"checked\") {\n        graphBut.dataset.state = \"unchecked\";\n        graphBut.classList.remove(\"activated\");\n        let ind = graphList.indexOf(graphBut.dataset.driverid);\n        graphTeamList.splice(ind, 1);\n        graphList = graphList.filter(x => x !== graphBut.dataset.driverid);\n        graphCount -= 1;\n      }\n      let text = document.querySelector(\".graph-text\").querySelector(\".text-normal\");\n      text.innerText = \"- \" + graphCount + \" drivers selected\";\n      text.classList.add(\"graph-highlight\");\n      setTimeout(function () {\n        text.classList.remove(\"graph-highlight\");\n      }, 400);\n    });\n    let buttons = document.createElement(\"div\");\n    buttons.classList = \"buttons-drivers-modal\";\n    let nameAndSurName = document.createElement(\"div\");\n    nameAndSurName.appendChild(spanName);\n    nameAndSurName.appendChild(spanLastName);\n    buttons.appendChild(h2hBut);\n    buttons.append(graphBut);\n    newDiv.appendChild(nameAndSurName);\n    newDiv.appendChild(buttons);\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_2__.manageColor)(newDiv, spanLastName);\n    dest.appendChild(newDiv);\n  });\n  buttonsListeners();\n}\ndocument.querySelector(\".teams-modal-zone\").querySelectorAll(\".H2Hradio\").forEach(function (h2hBut) {\n  h2hBut.addEventListener(\"click\", function () {\n    if (h2hBut.dataset.state === \"unchecked\" && h2hCount < 2) {\n      h2hBut.dataset.state = \"checked\";\n      h2hBut.classList.add(\"activated\");\n      h2hCount += 1;\n      h2hTeamList.push(h2hBut.dataset.teamid);\n    } else if (h2hBut.dataset.state === \"checked\") {\n      h2hBut.dataset.state = \"unchecked\";\n      h2hBut.classList.remove(\"activated\");\n      h2hCount -= 1;\n      let ind = h2hTeamList.indexOf(h2hBut.dataset.teamid);\n      h2hTeamList.splice(ind, 1);\n    }\n    let text = document.querySelector(\".H2H-text\").querySelector(\".text-normal\");\n    text.innerText = \"- \" + h2hCount + \"/2 teams selected\";\n    text.classList.add(\"h2h-highlight\");\n    setTimeout(function () {\n      text.classList.remove(\"h2h-highlight\");\n    }, 400);\n  });\n});\ndocument.querySelector(\".teams-modal-zone\").querySelectorAll(\".GraphButton\").forEach(function (graphBut) {\n  graphBut.addEventListener(\"click\", function () {\n    if (graphBut.dataset.state === \"unchecked\") {\n      graphBut.dataset.state = \"checked\";\n      graphBut.classList.add(\"activated\");\n      graphTeamList.push(graphBut.dataset.teamid);\n      graphCount += 1;\n    } else if (graphBut.dataset.state === \"checked\") {\n      graphBut.dataset.state = \"unchecked\";\n      graphBut.classList.remove(\"activated\");\n      let ind = graphTeamList.indexOf(graphBut.dataset.teamid);\n      graphTeamList.splice(ind, 1);\n      graphCount -= 1;\n    }\n    let text = document.querySelector(\".graph-text\").querySelector(\".text-normal\");\n    text.innerText = \"- \" + graphCount + \" teams selected\";\n    text.classList.add(\"graph-highlight\");\n    setTimeout(function () {\n      text.classList.remove(\"graph-highlight\");\n    }, 400);\n  });\n});\ndocument.querySelector(\"#driverspillmodal\").addEventListener(\"click\", function () {\n  document.querySelector(\".drivers-modal-section\").classList.remove(\"d-none\");\n  document.querySelector(\".teams-modal-section\").classList.add(\"d-none\");\n  mode = \"driver\";\n  resetH2H();\n});\ndocument.querySelector(\"#teamspillmodal\").addEventListener(\"click\", function () {\n  document.querySelector(\".drivers-modal-section\").classList.add(\"d-none\");\n  document.querySelector(\".teams-modal-section\").classList.remove(\"d-none\");\n  mode = \"team\";\n  resetH2H();\n});\nfunction buttonsListeners() {\n  document.querySelectorAll(\"H2HRadio\").forEach(function (button) {\n    button.addEventListener(\"click\", function () {});\n  });\n}\ndocument.querySelector(\"#confirmComparison\").addEventListener(\"click\", function () {\n  H2HReady();\n  if (h2hCount === 2) {\n    let drivers = document.querySelectorAll(\".H2Hradio.activated\");\n    let d1;\n    let d2;\n    document.querySelectorAll(\".H2Hradio.activated\").forEach(function (elem) {\n      if (mode === \"driver\") {\n        if (elem.dataset.driverid === h2hList[0]) {\n          d1 = elem;\n        } else if (elem.dataset.driverid === h2hList[1]) {\n          d2 = elem;\n        }\n      } else if (mode === \"team\") {\n        if (elem.dataset.teamid === h2hTeamList[0]) {\n          d1 = elem;\n        } else if (elem.dataset.teamid === h2hTeamList[1]) {\n          d2 = elem;\n        }\n      }\n    });\n    nameTitleD1(d1.parentElement.parentElement);\n    nameTitleD2(d2.parentElement.parentElement);\n  }\n  document.querySelector(\"#compConfigContent\").innerText = document.querySelector(\"#yearButtonH2H\").textContent;\n  if (mode === \"driver\") {\n    document.querySelector(\"#qualiForm\").classList.remove(\"d-none\");\n    document.querySelector(\"#raceForm\").classList.remove(\"d-none\");\n    document.querySelector(\"#gapToWinner\").classList.remove(\"d-none\");\n    document.querySelector(\"#gapToPole\").classList.remove(\"d-none\");\n    document.querySelector(\"#raceForm\").click();\n    race = 0;\n    quali = 0;\n    menuLength = 4;\n    document.getElementById(\"qualih2h\").querySelector(\".only-name\").innerText = \"QUALIFYING\";\n    document.getElementById(\"raceh2h\").querySelector(\".only-name\").innerText = \"RACE\";\n    document.getElementById(\"raceh2h\").querySelector(\".bar-space\").classList.remove(\"d-none\");\n    document.getElementById(\"raceh2h\").querySelector(\".avg-comparison\").classList.add(\"d-none\");\n    document.getElementById(\"qualih2h\").querySelector(\".bar-space\").classList.remove(\"d-none\");\n    document.getElementById(\"qualih2h\").querySelector(\".avg-comparison\").classList.add(\"d-none\");\n  } else if (mode === \"team\") {\n    document.querySelector(\"#qualiForm\").classList.add(\"d-none\");\n    document.querySelector(\"#raceForm\").classList.add(\"d-none\");\n    document.querySelector(\"#gapToWinner\").classList.add(\"d-none\");\n    document.querySelector(\"#gapToPole\").classList.add(\"d-none\");\n    document.querySelector(\"#pointsProgression\").click();\n    menuLength = 2;\n    race = 0;\n    quali = 0;\n    document.getElementById(\"qualih2h\").querySelector(\".only-name\").innerText = \"QUALIFYING\";\n    document.getElementById(\"raceh2h\").querySelector(\".only-name\").innerText = \"RACE\";\n    document.getElementById(\"raceh2h\").querySelector(\".bar-space\").classList.remove(\"d-none\");\n    document.getElementById(\"raceh2h\").querySelector(\".avg-comparison\").classList.add(\"d-none\");\n    document.getElementById(\"qualih2h\").querySelector(\".bar-space\").classList.remove(\"d-none\");\n    document.getElementById(\"qualih2h\").querySelector(\".avg-comparison\").classList.add(\"d-none\");\n  }\n});\ndocument.querySelector(\"#clearAll\").addEventListener(\"click\", function () {\n  resetH2H();\n});\nfunction resetH2H() {\n  h2hCount = 0;\n  graphCount = 0;\n  h2hList = [];\n  graphList = [];\n  h2hTeamList = [];\n  graphTeamList = [];\n  let h2htext = document.querySelector(\".H2H-text\").querySelector(\".text-normal\");\n  let graphtext = document.querySelector(\".graph-text\").querySelector(\".text-normal\");\n  if (mode === \"driver\") {\n    h2htext.innerText = \"- \" + h2hCount + \"/2 drivers selected\";\n    graphtext.innerText = \"- \" + graphCount + \" drivers selected\";\n  } else if (mode === \"team\") {\n    h2htext.innerText = \"- \" + h2hCount + \"/2 teams selected\";\n    graphtext.innerText = \"- \" + graphCount + \" teams selected\";\n  }\n  document.querySelector(\".teams-modal-zone\").querySelectorAll(\".H2Hradio\").forEach(function (elem) {\n    elem.classList = \"H2Hradio\";\n    elem.dataset.state = \"unchecked\";\n  });\n  document.querySelector(\".teams-modal-zone\").querySelectorAll(\".GraphButton\").forEach(function (elem) {\n    elem.classList = \"GraphButton\";\n    elem.dataset.state = \"unchecked\";\n  });\n  document.querySelector(\".drivers-modal-zone\").querySelectorAll(\".H2Hradio\").forEach(function (elem) {\n    elem.classList = \"H2Hradio\";\n    elem.dataset.state = \"unchecked\";\n  });\n  document.querySelector(\".drivers-modal-zone\").querySelectorAll(\".GraphButton\").forEach(function (elem) {\n    elem.classList = \"GraphButton\";\n    elem.dataset.state = \"unchecked\";\n  });\n}\n\n/**\r\n * Event listeners for the 3 types of graphs\r\n */\ndocument.querySelector(\"#pointsProgression\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Points progression\";\n  document.querySelector(\"#qualiGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.remove(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#raceForm\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Race form\";\n  document.querySelector(\"#qualiGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.remove(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#qualiForm\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Qualifying form\";\n  document.querySelector(\"#qualiGraph\").classList.remove(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#gapToWinner\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Gap to winner\";\n  document.querySelector(\"#qualiGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.remove(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#gapToPole\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Gap to pole\";\n  document.querySelector(\"#qualiGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.remove(\"d-none\");\n});\n\n/**\r\n * Updates the driver 1 name card with the d1 information stored in aDriver1\r\n * @param {a} aDriver1 clickable element of the driver 1 dropdown\r\n */\nfunction nameTitleD1(aDriver1) {\n  driver1Sel = aDriver1;\n  if (mode === \"driver\") {\n    document.querySelector(\".driver1-first\").classList.remove(\"d-none\");\n    document.querySelector(\".driver1-second\").classList.remove(\"d-none\");\n    document.querySelector(\".team1\").classList.add(\"d-none\");\n    document.querySelector(\".driver1-first\").textContent = driver1Sel.firstChild.children[0].innerText;\n    document.querySelector(\".driver1-second\").textContent = driver1Sel.firstChild.children[1].innerText;\n    document.querySelector(\".driver1-second\").dataset.teamid = driver1Sel.firstChild.children[1].dataset.teamid;\n    d1_team = driver1Sel.firstChild.children[1].dataset.teamid;\n    document.querySelector(\".driver1-second\").className = \"driver1-second bold-font\";\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_2__.manageColor)(document.querySelector(\".driver1-second\"), document.querySelector(\".driver1-second\"));\n  } else if (mode === \"team\") {\n    document.querySelector(\".driver1-first\").classList.add(\"d-none\");\n    document.querySelector(\".driver1-second\").classList.add(\"d-none\");\n    document.querySelector(\".team1\").classList.remove(\"d-none\");\n    document.querySelector(\".team1\").textContent = driver1Sel.children[0].children[1].innerText;\n    document.querySelector(\".team1\").dataset.teamid = driver1Sel.dataset.teamid;\n  }\n}\n\n/**\r\n * Updates the driver 2 name card with the d1 information stored in aDriver2\r\n * @param {a} aDriver2 clickable element of the driver 2 dropdown\r\n */\nfunction nameTitleD2(aDriver2) {\n  driver2Sel = aDriver2;\n  if (mode === \"driver\") {\n    document.querySelector(\".driver2-first\").classList.remove(\"d-none\");\n    document.querySelector(\".driver2-second\").classList.remove(\"d-none\");\n    document.querySelector(\".team2\").classList.add(\"d-none\");\n    document.querySelector(\".driver2-first\").textContent = driver2Sel.firstChild.children[0].innerText;\n    document.querySelector(\".driver2-second\").textContent = driver2Sel.firstChild.children[1].innerText;\n    document.querySelector(\".driver2-second\").dataset.teamid = driver2Sel.firstChild.children[1].dataset.teamid;\n    document.querySelector(\".driver2-second\").className = \"driver2-second bold-font\";\n    d2_team = driver2Sel.firstChild.children[1].dataset.teamid;\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_2__.manageColor)(document.querySelector(\".driver2-second\"), document.querySelector(\".driver2-second\"));\n  } else if (mode === \"team\") {\n    document.querySelector(\".driver2-first\").classList.add(\"d-none\");\n    document.querySelector(\".driver2-second\").classList.add(\"d-none\");\n    document.querySelector(\".team2\").classList.remove(\"d-none\");\n    document.querySelector(\".team2\").textContent = driver2Sel.children[0].children[1].innerText;\n    document.querySelector(\".team2\").dataset.teamid = driver2Sel.dataset.teamid;\n  }\n}\n\n/**\r\n * Sends the message that the H2H is properly configured to fetch results\r\n */\nfunction H2HReady() {\n  document.querySelector(\"#mainH2h\").classList.remove(\"d-none\");\n  let list1, list2;\n  if (mode === \"driver\") {\n    list1 = h2hList;\n    list2 = graphList;\n  } else if (mode === \"team\") {\n    list1 = h2hTeamList;\n    list2 = graphTeamList;\n  }\n  let data = {\n    h2h: h2hCount === 2 ? list1 : -1,\n    graph: list2,\n    year: document.querySelector(\"#yearButtonH2H\").textContent,\n    mode: mode\n  };\n  manageH2hState();\n  const message = {\n    command: 'configuredH2H',\n    data: data\n  };\n  const command = _renderer__WEBPACK_IMPORTED_MODULE_1__.factory.createCommand(message);\n  command.execute();\n}\nfunction manageH2hState() {\n  if (h2hCount === 2) {\n    document.querySelector(\".blocking-h2h\").classList.add(\"d-none\");\n  } else {\n    document.querySelector(\".blocking-h2h\").classList.remove(\"d-none\");\n    document.querySelector(\".driver1-name\").className = \"driver1-name\";\n    document.querySelector(\".driver2-name\").className = \"driver2-name\";\n    document.querySelector(\".driver1-first\").textContent = \"\";\n    document.querySelector(\".driver2-first\").textContent = \"\";\n    document.querySelector(\".driver1-second\").textContent = \"\";\n    document.querySelector(\".driver2-second\").textContent = \"\";\n    document.querySelectorAll(\".driver1-bar\").forEach(function (bar) {\n      bar.className = \"driver1-bar\";\n      bar.style.width = \"0px\";\n    });\n    document.querySelectorAll(\".driver2-bar\").forEach(function (bar) {\n      bar.className = \"driver2-bar\";\n      bar.style.width = \"0px\";\n    });\n    document.querySelectorAll(\".driver1-number\").forEach(function (num) {\n      num.innerText = \"\";\n    });\n    document.querySelectorAll(\".driver2-number\").forEach(function (num) {\n      num.innerText = \"\";\n    });\n  }\n}\nfunction load_labels_initialize_graphs(data) {\n  var labels = [];\n  data[0].forEach(function (elem) {\n    labels.push(_config__WEBPACK_IMPORTED_MODULE_0__.races_names[elem[1]]);\n  });\n  if (typeof driverGraph !== 'undefined' && driverGraph !== null) {\n    driverGraph.destroy();\n  }\n  if (typeof pointsGraph !== 'undefined' && pointsGraph !== null) {\n    pointsGraph.destroy();\n  }\n  if (typeof qualiGraph !== 'undefined' && qualiGraph !== null) {\n    qualiGraph.destroy();\n  }\n  if (typeof gapWinnerGraph !== 'undefined' && gapWinnerGraph !== null) {\n    gapWinnerGraph.destroy();\n  }\n  if (typeof gapPoleGraph !== 'undefined' && gapPoleGraph !== null) {\n    gapPoleGraph.destroy();\n  }\n  createPointsChart(labels);\n  if (mode === \"driver\") {\n    let max = 20;\n    let q2_line = 15;\n    if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024 && _renderer__WEBPACK_IMPORTED_MODULE_1__.custom_team) {\n      max = 22;\n      q2_line = 16;\n    } else {\n      max = 20;\n    }\n    createRaceChart(labels, max);\n    createQualiChart(labels, max, q2_line);\n    createGapCharts(labels);\n    load_graphs_data(data);\n  } else if (mode === \"team\") {\n    load_teams_points_graph(data);\n  }\n}\nfunction load_teams_points_graph(data) {\n  data.forEach(function (team, ind) {\n    if (ind !== 0 && ind !== data.length - 1) {\n      let teamPoints = [];\n      team.forEach(function (driv, index) {\n        let points = get_one_driver_points_format(driv, data);\n        if (teamPoints.length === 0) {\n          teamPoints = [...points];\n        } else {\n          teamPoints = teamPoints.map((point, index) => point + points[index]);\n        }\n      });\n      let team_color = colors_dict[graphTeamList[ind - 1] + \"0\"];\n      pointsGraph.data.datasets.push({\n        label: _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[graphTeamList[ind - 1]],\n        data: teamPoints,\n        borderColor: team_color,\n        pointBackgroundColor: team_color,\n        borderWidth: 2,\n        pointRadius: 0,\n        fill: false,\n        pointHitRadius: 7,\n        datalabels: {\n          color: function () {\n            if (_config__WEBPACK_IMPORTED_MODULE_0__.lightColors.indexOf(team_color) !== -1) {\n              return \"#272727\";\n            } else {\n              return '#eeeef1';\n            }\n          },\n          backgroundColor: team_color,\n          display: function (context) {\n            if (context.dataIndex === findLastNonNaNIndex(context.dataset.data)) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          borderRadius: 5,\n          font: {\n            family: \"Formula1Bold\"\n          }\n        }\n      });\n    }\n  });\n  pointsGraph.update();\n}\nfunction get_one_driver_points_format(driver, data) {\n  let d1_races = [];\n  let d1_points_provisional = [];\n  let d1_points = [0];\n  driver.slice(3).forEach(function (elem) {\n    d1_races.push(elem[0]);\n    let ptsThatRace = elem[2];\n    if (ptsThatRace === -1) {\n      ptsThatRace = 0;\n    }\n    if (elem.length === 10) {\n      d1_points_provisional.push(ptsThatRace + elem[7]);\n    } else {\n      d1_points_provisional.push(ptsThatRace);\n    }\n  });\n  data[0].forEach(function (elem) {\n    let index1 = d1_races.indexOf(elem[0]);\n    if (index1 !== -1) {\n      d1_points.push(d1_points_provisional[index1] + d1_points[d1_points.length - 1]);\n    } else {\n      if (data[data.length - 1].indexOf(elem[0]) !== -1) {\n        d1_points.push(d1_points[d1_points.length - 1]);\n      } else {\n        d1_points.push(NaN);\n      }\n    }\n  });\n  d1_points.shift();\n  return d1_points;\n}\nfunction load_graphs_data(data) {\n  console.log(data);\n  let max_gapPole = 0;\n  let max_gapWinner = 0;\n  data.forEach(function (driv, index) {\n    if (index !== 0 && index !== data.length - 1) {\n      let d1_res = [];\n      let d1_races = [];\n      let d1_provisonal = [];\n      let d1_points_provisional = [];\n      let d1_points = [0];\n      let d1_qualis = [];\n      let d1_provisonal_q = [];\n      let d1_provisional_gapW = [];\n      let d1_provisional_gapP = [];\n      let d1_gapWinner = [];\n      let d1_gapPole = [];\n      let d1_backgroundColors = [];\n      let d1_backgroundColorsPole = [];\n      data[index].slice(3).forEach(function (elem) {\n        d1_races.push(elem[0]);\n        d1_provisonal.push(elem[1]);\n        d1_provisonal_q.push(elem[4]);\n        if (elem[5].slice(-1) !== \"L\") {\n          d1_provisional_gapW.push(elem[5].slice(1, -1));\n        } else {\n          d1_provisional_gapW.push(elem[5]);\n        }\n        if (elem[6] !== \"NR\") {\n          d1_provisional_gapP.push(elem[6].slice(1, -1));\n        } else {\n          d1_provisional_gapP.push(\"NR\");\n        }\n        let ptsThatRace = elem[2];\n        if (ptsThatRace === -1) {\n          ptsThatRace = 0;\n        }\n        if (elem.length === 10) {\n          d1_points_provisional.push(ptsThatRace + elem[7]);\n        } else {\n          d1_points_provisional.push(ptsThatRace);\n        }\n      });\n      let d1Id = graphList[index - 1];\n      let d1pos = graphList.indexOf(d1Id);\n      let d1_color;\n      if (d1pos === graphTeamList.indexOf(driv[1].toString())) {\n        d1_color = colors_dict[data[index][1] + \"0\"];\n      } else {\n        d1_color = colors_dict[data[index][1] + \"1\"];\n      }\n      data[0].forEach(function (elem) {\n        let index1 = d1_races.indexOf(elem[0]);\n        if (index1 !== -1) {\n          if (d1_provisonal[index1] === -1) {\n            d1_res.push(NaN);\n            d1_gapWinner.push(NaN);\n            d1_backgroundColors.push(d1_color + \"50\");\n          } else {\n            d1_res.push(d1_provisonal[index1]);\n            if (d1_provisional_gapW[index1].slice(-1) === \"L\") {\n              d1_gapWinner.push(NaN);\n              d1_backgroundColors.push(d1_color + \"76\");\n            } else {\n              d1_gapWinner.push(d1_provisional_gapW[index1]);\n              if (parseFloat(d1_provisional_gapW[index1]) > max_gapWinner) {\n                max_gapWinner = parseFloat(d1_provisional_gapW[index1]);\n              }\n              d1_backgroundColors.push(d1_color);\n            }\n          }\n          d1_points.push(d1_points_provisional[index1] + d1_points[d1_points.length - 1]);\n          d1_qualis.push(d1_provisonal_q[index1]);\n          if (d1_provisional_gapP[index1] === \"NR\") {\n            d1_gapPole.push(NaN);\n            d1_backgroundColorsPole.push(d1_color + \"60\");\n          } else {\n            d1_gapPole.push(d1_provisional_gapP[index1]);\n            if (parseFloat(d1_provisional_gapP[index1]) > max_gapPole) {\n              max_gapPole = parseFloat(d1_provisional_gapP[index1]);\n            }\n            d1_backgroundColorsPole.push(d1_color);\n          }\n        } else {\n          d1_res.push(NaN);\n          d1_qualis.push(NaN);\n          if (data[data.length - 1].indexOf(elem[0]) !== -1) {\n            d1_points.push(d1_points[d1_points.length - 1]);\n          } else {\n            d1_points.push(NaN);\n          }\n        }\n      });\n      d1_points.shift();\n      d1_gapWinner = d1_gapWinner.map(function (elem) {\n        if (isNaN(elem)) {\n          return max_gapWinner / 2;\n        } else {\n          return elem;\n        }\n      });\n      d1_gapPole = d1_gapPole.map(function (elem) {\n        if (isNaN(elem)) {\n          return max_gapPole / 2;\n        } else {\n          return elem;\n        }\n      });\n      driverGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_res,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        borderWidth: 2,\n        fill: false,\n        pointHitRadius: 7\n      });\n      qualiGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_qualis,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        borderWidth: 2,\n        fill: false,\n        pointHitRadius: 7\n      });\n      pointsGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_points,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        borderWidth: 2,\n        pointRadius: 0,\n        fill: false,\n        pointHitRadius: 7,\n        datalabels: {\n          color: function () {\n            if (_config__WEBPACK_IMPORTED_MODULE_0__.lightColors.indexOf(d1_color) !== -1) {\n              return \"#272727\";\n            } else {\n              return '#eeeef1';\n            }\n          },\n          backgroundColor: d1_color,\n          display: function (context) {\n            if (context.dataIndex === findLastNonNaNIndex(context.dataset.data)) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          borderRadius: 5,\n          font: {\n            family: \"Formula1Bold\"\n          }\n        }\n      });\n      gapWinnerGraph.options.scales.y.max = max_gapWinner;\n      gapPoleGraph.options.scales.y.max = max_gapPole;\n      gapWinnerGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_gapWinner,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        backgroundColor: d1_backgroundColors,\n        borderWidth: 1,\n        fill: true,\n        pointHitRadius: 7\n      });\n      gapPoleGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_gapPole,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        backgroundColor: d1_backgroundColorsPole,\n        borderWidth: 1,\n        fill: true,\n        pointHitRadius: 7\n      });\n    }\n  });\n\n  /*\r\n  \r\n  let d2_color;\r\n    */\n  driverGraph.update();\n  qualiGraph.update();\n  pointsGraph.update();\n  gapWinnerGraph.update();\n  gapPoleGraph.update();\n}\n\n/**\r\n * Finds tha last non NaN element in an array\r\n * @param {Array} arr array in which the function will look\r\n * @returns the indef on which is the last non NaN or -1 if there is none\r\n */\nfunction findLastNonNaNIndex(arr) {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (!isNaN(arr[i])) {\n      return i;\n    }\n  }\n  return -1; // Devuelve -1 si todos los valores son NaN\n}\nfunction updateMaxYAxis(newMax) {\n  driverGraph.options.scales.y.max = newMax;\n  qualiGraph.options.scales.y.max = newMax;\n  driverGraph.update();\n  qualiGraph.update();\n}\n\n/**\r\n * Creates the head to head race chart\r\n * @param {Array} labelsArray array with all the labels for the races\r\n */\nfunction createRaceChart(labelsArray, max) {\n  const dataD = {\n    labels: labelsArray\n  };\n  driverGraph = new Chart(document.getElementById('driverGraph'), {\n    type: 'line',\n    data: dataD,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        mode: 'index'\n      },\n      layout: {\n        padding: {\n          top: 10,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        },\n        y: {\n          reverse: true,\n          min: 1,\n          max: max,\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        }\n      },\n      plugins: {\n        datalabels: {\n          display: false\n        },\n        annotation: {\n          annotations: {\n            line1: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 1,\n              yMax: 1,\n              borderColor: '#FDE06B',\n              borderWidth: 1\n            },\n            line2: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 2,\n              yMax: 2,\n              borderColor: '#AEB2B8',\n              borderWidth: 1\n            },\n            line3: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 3,\n              yMax: 3,\n              borderColor: '#d7985a',\n              borderWidth: 1\n            },\n            line4: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 10,\n              yMax: 10,\n              borderColor: '#dedde6',\n              borderWidth: 1\n            }\n          }\n        },\n        legend: {\n          labels: {\n            boxHeight: 2,\n            boxWidth: 25,\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1\"\n            }\n          }\n        },\n        tooltip: {\n          titleFont: {\n            family: 'Formula1Bold',\n            size: 16\n          },\n          bodyFont: {\n            family: 'Formula1',\n            size: 14\n          }\n        }\n      }\n    }\n  });\n}\n\n/**\r\n * Creates the head to head qualifying chart\r\n * @param {Array} labelsArray array with all the labels for the races\r\n */\nfunction createQualiChart(labelsArray, max, q2_line) {\n  const dataD = {\n    labels: labelsArray\n  };\n  qualiGraph = new Chart(document.getElementById('qualiGraph'), {\n    type: 'line',\n    data: dataD,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        mode: 'index'\n      },\n      layout: {\n        padding: {\n          top: 10,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        },\n        y: {\n          reverse: true,\n          min: 1,\n          max: max,\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        }\n      },\n      plugins: {\n        datalabels: {\n          display: false\n        },\n        annotation: {\n          annotations: {\n            line1: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: q2_line,\n              yMax: q2_line,\n              borderColor: 'red',\n              borderWidth: 1,\n              label: {\n                display: true,\n                color: \"white\",\n                backgroundColor: \"red\",\n                content: 'Q2',\n                position: 'start',\n                font: {\n                  family: \"Formula1Bold\",\n                  size: 12\n                }\n              }\n            },\n            line2: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 10,\n              yMax: 10,\n              borderColor: 'red',\n              borderWidth: 1,\n              label: {\n                color: \"white\",\n                display: true,\n                backgroundColor: \"red\",\n                content: 'Q3',\n                position: 'start',\n                font: {\n                  family: \"Formula1Bold\",\n                  size: 12\n                }\n              }\n            }\n          }\n        },\n        legend: {\n          labels: {\n            boxHeight: 2,\n            boxWidth: 25,\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1\"\n            }\n          }\n        },\n        tooltip: {\n          titleFont: {\n            family: 'Formula1Bold',\n            size: 16\n          },\n          bodyFont: {\n            family: 'Formula1',\n            size: 14\n          }\n        }\n      }\n    }\n  });\n}\n\n/**\r\n * Creates the head to head qualifying chart\r\n * @param {Array} labelsArray array with all the labels for the races\r\n */\nfunction createPointsChart(labelsArray) {\n  const dataD = {\n    labels: labelsArray\n  };\n  pointsGraph = new Chart(document.getElementById('progressionGraph'), {\n    type: 'line',\n    data: dataD,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        mode: 'index'\n      },\n      layout: {\n        padding: {\n          top: 10,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        },\n        y: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          labels: {\n            boxHeight: 2,\n            boxWidth: 25,\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1\"\n            }\n          }\n        },\n        tooltip: {\n          titleFont: {\n            family: 'Formula1Bold',\n            size: 16\n          },\n          bodyFont: {\n            family: 'Formula1',\n            size: 14\n          }\n        }\n      }\n    }\n  });\n}\nfunction createGapCharts(labelsArray, maxGapWinner, maxGapPole) {\n  const dataD1 = {\n    labels: labelsArray\n  };\n  const dataD2 = {\n    labels: labelsArray\n  };\n  let commonOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      mode: 'index'\n    },\n    scales: {\n      x: {\n        grid: {\n          color: '#292929'\n        },\n        ticks: {\n          color: \"#dedde6\",\n          font: {\n            family: \"Formula1Bold\"\n          }\n        }\n      },\n      y: {\n        min: 0,\n        grid: {\n          color: '#292929'\n        },\n        ticks: {\n          color: \"#dedde6\",\n          font: {\n            family: \"Formula1Bold\"\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        display: false\n      },\n      legend: {\n        labels: {\n          boxHeight: 2,\n          boxWidth: 25,\n          color: \"#dedde6\",\n          font: {\n            family: \"Formula1\"\n          }\n        }\n      },\n      tooltip: {\n        titleFont: {\n          family: 'Formula1Bold',\n          size: 16\n        },\n        bodyFont: {\n          family: 'Formula1',\n          size: 14\n        },\n        callbacks: {\n          label: function (tooltipItem) {\n            let dataset = tooltipItem.dataset; // Acceder al dataset actual\n            let index = tooltipItem.dataIndex; // Obtener el índice del dato\n            let color = dataset.backgroundColor[index]; // Obtener el color de fondo del dato actual\n            let result;\n            if (color.endsWith(\"50\")) {\n              result = 'DNF';\n            } else if (color.endsWith(\"60\")) {\n              result = \"Not representative\";\n            } else if (color.endsWith(\"76\")) {\n              result = \"Lapped\";\n            } else {\n              result = `${tooltipItem.raw}s`;\n            }\n\n            // Mostrar el nombre del piloto y el resultado (valor o DNF)\n            return `${dataset.label}: ${result}`;\n          }\n        }\n      }\n    },\n    options: {\n      layout: {\n        padding: {\n          top: 10,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      }\n    }\n  };\n  let gapWinnerOptions = {\n    ...commonOptions,\n    scales: {\n      ...commonOptions.scales,\n      y: {\n        ...commonOptions.scales.y,\n        max: maxGapWinner\n      }\n    },\n    plugins: {\n      ...commonOptions.plugins\n    }\n  };\n  gapWinnerGraph = new Chart(document.getElementById('gapToWinnerGraph'), {\n    type: 'bar',\n    data: dataD1,\n    options: gapWinnerOptions\n  });\n  let gapPoleOptions = {\n    ...commonOptions,\n    scales: {\n      ...commonOptions.scales,\n      y: {\n        ...commonOptions.scales.y,\n        max: 20\n      }\n    },\n    plugins: {\n      ...commonOptions.plugins\n    }\n  };\n  gapPoleGraph = new Chart(document.getElementById('gapToPoleGraph'), {\n    type: 'bar',\n    data: dataD2,\n    options: gapPoleOptions\n  });\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/head2head.js?");

/***/ }),

/***/ "./src/js/frontend/performance.js":
/*!****************************************!*\
  !*** ./src/js/frontend/performance.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   load_attributes: () => (/* binding */ load_attributes),\n/* harmony export */   load_car_attributes: () => (/* binding */ load_car_attributes),\n/* harmony export */   load_cars: () => (/* binding */ load_cars),\n/* harmony export */   load_custom_engines: () => (/* binding */ load_custom_engines),\n/* harmony export */   load_one_part: () => (/* binding */ load_one_part),\n/* harmony export */   load_parts_list: () => (/* binding */ load_parts_list),\n/* harmony export */   load_parts_stats: () => (/* binding */ load_parts_stats),\n/* harmony export */   load_performance: () => (/* binding */ load_performance),\n/* harmony export */   load_performance_graph: () => (/* binding */ load_performance_graph),\n/* harmony export */   manage_engineStats: () => (/* binding */ manage_engineStats),\n/* harmony export */   order_by: () => (/* binding */ order_by),\n/* harmony export */   teamSelected: () => (/* binding */ teamSelected),\n/* harmony export */   teamsEngine: () => (/* binding */ teamsEngine),\n/* harmony export */   update_max_design: () => (/* binding */ update_max_design),\n/* harmony export */   viewingGraph: () => (/* binding */ viewingGraph)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _head2head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./head2head */ \"./src/js/frontend/head2head.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer */ \"./src/js/frontend/renderer.js\");\n\n\n\n\nconst teamsPill = document.getElementById(\"teamsPill\");\nconst enginesPill = document.getElementById(\"enginesPill\");\nconst teamsDiv = document.getElementById(\"teamsDiv\");\nconst enginesDiv = document.getElementById(\"enginesDiv\");\nconst divsTeamsArray = [teamsDiv, enginesDiv];\nlet teamSelected;\nlet engineSelected;\nlet teamEngineSelected;\nlet performanceGraph;\nlet teamsEngine = \"teams\";\nlet viewingGraph = true;\nlet actualMaxDesign = 0;\nlet customEnginesCopy;\nfunction normalizeData(data) {\n  let values = Object.values(data);\n  let min = Math.min(...values);\n  let max = Math.max(...values);\n  let adjustedMin = min - 5;\n  let adjustedMax = max + 5;\n  let normalizedData = {};\n  for (let key in data) {\n    if (data.hasOwnProperty(key)) {\n      normalizedData[key] = (data[key] - adjustedMin) / (adjustedMax - adjustedMin) * 100;\n    }\n  }\n  return normalizedData;\n}\nfunction load_performance(teams) {\n  console.log(teams);\n  // let teams = normalizeData(teams);\n  for (let key in teams) {\n    if (teams.hasOwnProperty(key)) {\n      let teamPerformance = document.querySelector(`#teamsDiv .team-performance[data-teamid='${key}']`);\n      if (teamPerformance) {\n        let performanceBarProgress = teamPerformance.querySelector('.performance-bar-progress');\n        let team_value = teamPerformance.querySelector('.team-title-value');\n        if (performanceBarProgress) {\n          performanceBarProgress.style.width = teams[key] + '%';\n          team_value.innerText = teams[key].toFixed(2) + ' %';\n          performanceBarProgress.dataset.overall = teams[key];\n        }\n      }\n    }\n  }\n}\nfunction load_cars(data) {\n  for (let key in data) {\n    let cars = document.querySelectorAll(`#carsDiv .car[data-teamid='${key}']`);\n    cars.forEach(function (car, index) {\n      let carNumber = parseInt(car.dataset.carnumber);\n      index = index + 1;\n      let bar = car.querySelector('.performance-bar-progress');\n      bar.dataset.overall = data[key][carNumber][0];\n      bar.style.width = data[key][carNumber][0] + '%';\n      let name = car.querySelector('.team-title-name');\n      name.innerText = car.dataset.teamshow + \" \" + carNumber.toString() + \" -  #\" + data[key][carNumber][1];\n      let missing_parts = data[key][carNumber][2];\n      let missing_copntainer = car.querySelector(\".car-missing-parts\");\n      missing_copntainer.innerHTML = \"\";\n      if (missing_parts.length > 0) {\n        let list = document.createElement(\"span\");\n        let string = \"\";\n        missing_parts.forEach(function (part) {\n          let partName = _config__WEBPACK_IMPORTED_MODULE_0__.part_codes_abreviations[part];\n          string += partName + \" \";\n        });\n        list.innerText = string;\n        missing_copntainer.appendChild(list);\n        let icon = document.createElement(\"i\");\n        icon.classList.add(\"bi\", \"bi-exclamation-triangle-fill\");\n        missing_copntainer.appendChild(icon);\n      } else {\n        let icon = document.createElement(\"i\");\n        icon.classList.add(\"bi\", \"bi-check-all\");\n        missing_copntainer.appendChild(icon);\n      }\n      let value = document.createElement(\"span\");\n      value.classList.add(\"value\");\n      value.innerText = data[key][carNumber][0].toFixed(2) + \" %\";\n      missing_copntainer.appendChild(value);\n    });\n  }\n}\nfunction load_attributes(teams) {\n  for (let key in teams) {\n    for (let attribute in teams[key]) {\n      let team = document.querySelector(`#teamsDiv .team-performance[data-teamid='${key}']`);\n      let bar = team.querySelector(`.performance-bar-progress`);\n      let attributeValue = teams[key][attribute];\n      bar.dataset[attribute] = attributeValue.toFixed(3);\n    }\n  }\n}\nfunction load_car_attributes(teams) {\n  for (let key in teams) {\n    for (let car in teams[key]) {\n      let carDiv = document.querySelector(`#carsDiv .car[data-teamid='${key}'][data-carnumber='${car}']`);\n      for (let attribute in teams[key][car]) {\n        let bar = carDiv.querySelector(`.performance-bar-progress`);\n        let attributeValue = teams[key][car][attribute];\n        bar.dataset[attribute] = attributeValue.toFixed(3);\n      }\n    }\n  }\n}\nfunction order_by(criterion) {\n  let teams = document.querySelectorAll(\".team-performance\");\n  let teamsArray = Array.from(teams);\n  teamsArray.sort(function (a, b) {\n    return b.querySelector(\".performance-bar-progress\").dataset[criterion] - a.querySelector(\".performance-bar-progress\").dataset[criterion];\n  });\n  teamsArray.forEach(function (team, index) {\n    document.getElementById(\"teamsDiv\").appendChild(team);\n    let bar = team.querySelector(\".performance-bar-progress\");\n    bar.style.width = bar.dataset[criterion] + \"%\";\n    team.querySelector(\".team-title-value\").innerText = parseFloat(bar.dataset[criterion]).toFixed(2) + \" %\";\n    let number = team.querySelector(\".team-number\");\n    number.innerText = index + 1;\n  });\n  let cars = document.querySelectorAll(\".car-performance\");\n  let carsArray = Array.from(cars);\n  carsArray.sort(function (a, b) {\n    return b.querySelector(\".performance-bar-progress\").dataset[criterion] - a.querySelector(\".performance-bar-progress\").dataset[criterion];\n  });\n  carsArray.forEach(function (car, index) {\n    document.getElementById(\"carsDiv\").appendChild(car);\n    let bar = car.querySelector(\".performance-bar-progress\");\n    bar.style.width = bar.dataset[criterion] + \"%\";\n    let number = car.querySelector(\".performance-number\");\n    let value = car.querySelector(\".car-missing-parts .value\");\n    value.innerText = parseFloat(bar.dataset[criterion]).toFixed(2) + \" %\";\n    number.innerText = index + 1;\n  });\n}\ndocument.getElementById(\"teamsCarsButton\").addEventListener(\"click\", function (elem) {\n  if (event.target.dataset.value === \"teams\") {\n    event.target.dataset.value = \"cars\";\n    event.target.className = \"bi bi-person-fill\";\n    document.getElementById(\"teamsDiv\").classList.add(\"d-none\");\n    document.getElementById(\"carsDiv\").classList.remove(\"d-none\");\n  } else {\n    event.target.dataset.value = \"teams\";\n    event.target.className = \"bi bi-people-fill\";\n    document.getElementById(\"carsDiv\").classList.add(\"d-none\");\n    document.getElementById(\"teamsDiv\").classList.remove(\"d-none\");\n  }\n});\ndocument.querySelector(\"#attributeMenu\").querySelectorAll(\"a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    order_by(elem.dataset.attribute);\n    document.querySelector(\"#attributeButton\").innerText = elem.innerText;\n  });\n});\n\n/**\r\n * Pills that manage engines and teams screens and lists\r\n */\nteamsPill.addEventListener(\"click\", function () {\n  teamsEngine = \"teams\";\n  document.querySelector(\"#enginesPerformance\").classList.add(\"d-none\");\n  document.querySelector(\"#teamsPerformance\").classList.remove(\"d-none\");\n  document.querySelector(\"#carAttributeSelector\").classList.remove(\"d-none\");\n  document.querySelector(\"#customEnginesButtonContainer\").classList.add(\"d-none\");\n  removeSelected();\n  if (viewingGraph) {\n    document.querySelector(\".save-button\").classList.add(\"d-none\");\n  } else {\n    document.querySelector(\".save-button\").classList.remove(\"d-none\");\n    (0,_renderer__WEBPACK_IMPORTED_MODULE_2__.first_show_animation)();\n  }\n});\nenginesPill.addEventListener(\"click\", function () {\n  teamsEngine = \"engines\";\n  document.querySelector(\"#teamsPerformance\").classList.add(\"d-none\");\n  document.querySelector(\"#enginesPerformance\").classList.remove(\"d-none\");\n  document.querySelector(\"#carAttributeSelector\").classList.add(\"d-none\");\n  document.querySelector(\"#customEnginesButtonContainer\").classList.remove(\"d-none\");\n  removeSelected();\n  document.querySelector(\".save-button\").classList.remove(\"d-none\");\n  (0,_renderer__WEBPACK_IMPORTED_MODULE_2__.first_show_animation)();\n});\nfunction gather_engines_data() {\n  let engines = document.querySelectorAll(\".engine-performance\");\n  let enginesData = {};\n  engines.forEach(function (engine) {\n    let engineID = engine.dataset.engineid;\n    let engineStats = {};\n    engine.querySelectorAll(\".engine-performance-stat\").forEach(function (stat) {\n      let attribute = stat.dataset.attribute;\n      let value = stat.querySelector(\".custom-input-number\").value.split(\" \")[0];\n      engineStats[attribute] = value;\n    });\n    enginesData[engineID] = engineStats;\n  });\n  return enginesData;\n}\nfunction update_max_design(data) {\n  actualMaxDesign = parseInt(data) + 1;\n}\n\n/**\r\n * Manages the engine stats for all manufacturers\r\n * @param {Object} engineData engine stats for all manufacturers\r\n */\nfunction manage_engineStats(engineData) {\n  let officialEngines = engineData.filter(function (elem) {\n    return elem[0] <= 10;\n  });\n  let customEngines = engineData.filter(function (elem) {\n    return elem[0] > 10;\n  });\n  console.log(\"official engines\", officialEngines);\n  console.log(\"custom engines\", customEngines);\n  officialEngines.forEach(function (elem) {\n    let engineId = elem[0];\n    let engineStats = elem[1];\n    let engine = document.querySelector(`[data-engineId=\"${engineId}\"]`);\n    for (let key in engineStats) {\n      let value = engineStats[key];\n      let attribute = engine.querySelector(`.engine-performance-stat[data-attribute=\"${key}\"]`);\n      let input = attribute.querySelector(\".custom-input-number\");\n      let bar = attribute.querySelector(\".engine-performance-progress\");\n      input.value = value.toFixed(1) + \" %\";\n      bar.style.width = value + \"%\";\n    }\n  });\n  load_custom_engines(customEngines);\n}\n\n/**\r\n * removes the team or engine selected anc changes the icon if necesssary\r\n */\nfunction removeSelected() {\n  let elemsSelected = document.querySelectorAll('.selected');\n  elemsSelected.forEach(item => {\n    item.classList.remove('selected');\n  });\n}\n\n/**\r\n * eventListeners for all teams and engines\r\n */\ndocument.querySelectorAll(\".team\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    removeSelected();\n    (0,_renderer__WEBPACK_IMPORTED_MODULE_2__.manageSaveButton)(true, \"performance\");\n    document.querySelector(\"#performanceGraphButton\").classList.remove(\"active\");\n    elem.classList.toggle('selected');\n    teamSelected = elem.dataset.teamid;\n    const message = {\n      command: 'performanceRequest',\n      data: {\n        teamID: teamSelected\n      }\n    };\n    const command = _renderer__WEBPACK_IMPORTED_MODULE_2__.factory.createCommand(message);\n    command.execute();\n    document.querySelector(\"#performanceGraph\").classList.add(\"d-none\");\n    document.querySelector(\".teams-show\").classList.remove(\"d-none\");\n    document.querySelector(\".save-button\").classList.remove(\"d-none\");\n    (0,_renderer__WEBPACK_IMPORTED_MODULE_2__.first_show_animation)();\n    viewingGraph = false;\n  });\n});\ndocument.querySelectorAll(\".car\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    removeSelected();\n    (0,_renderer__WEBPACK_IMPORTED_MODULE_2__.manageSaveButton)(true, \"performance\");\n    document.querySelector(\"#performanceGraphButton\").classList.remove(\"active\");\n    elem.classList.toggle('selected');\n    teamSelected = elem.dataset.teamid;\n    const message = {\n      command: 'performanceRequest',\n      data: {\n        teamID: teamSelected\n      }\n    };\n    const command = _renderer__WEBPACK_IMPORTED_MODULE_2__.factory.createCommand(message);\n    command.execute();\n    document.querySelector(\"#performanceGraph\").classList.add(\"d-none\");\n    document.querySelector(\".teams-show\").classList.remove(\"d-none\");\n    document.querySelector(\".save-button\").classList.remove(\"d-none\");\n    (0,_renderer__WEBPACK_IMPORTED_MODULE_2__.first_show_animation)();\n    viewingGraph = false;\n  });\n});\ndocument.querySelectorAll(\".engine\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    removeSelected();\n    elem.classList.toggle('selected');\n    engineSelected = elem.dataset.engineid;\n    teamEngineSelected = elem.dataset.teamengine;\n    document.querySelector(\".engines-show\").classList.remove(\"d-none\");\n    resetBarsEngines(elem);\n  });\n});\nfunction load_parts_stats(data) {\n  for (let key in data) {\n    if (key !== \"engine\") {\n      let part = document.querySelector(`.part-performance[data-part='${key}']`);\n      for (let stat in data[key]) {\n        if (stat !== \"15\") {\n          let stat_input = part.querySelector(`.part-performance-stat[data-attribute='${stat}']`).querySelector(\".custom-input-number\");\n          if (stat === \"7\" || stat === \"8\" || stat === \"9\") {\n            stat_input.value = data[key][stat].toFixed(2) + \" kN\";\n          } else {\n            stat_input.value = data[key][stat].toFixed(2) + \" %\";\n          }\n        }\n      }\n    }\n  }\n}\nfunction load_parts_list(data) {\n  for (let key in data) {\n    let list = document.querySelector(`.part-performance[data-part='${key}'] .parts-list`);\n    let partLoadouts = document.querySelector(`.part-performance[data-part='${key}']`);\n    list.innerHTML = \"\";\n    let index = 1;\n    for (let part in data[key]) {\n      let partElem = document.createElement(\"div\");\n      partElem.classList.add(\"one-part\");\n      if (index === 1) {\n        partElem.classList.add(\"one-part-default\");\n      }\n      let partTitle = document.createElement(\"div\");\n      partTitle.classList.add(\"one-part-title\");\n      let partName = document.createElement(\"div\");\n      partName.dataset.designId = data[key][part][0];\n      partName.classList.add(\"one-part-name\");\n      let partNameText = _config__WEBPACK_IMPORTED_MODULE_0__.abreviations_dict[teamSelected] + \"-\" + _config__WEBPACK_IMPORTED_MODULE_0__.pars_abreviations[key] + \"-\" + index;\n      partName.innerText = partNameText;\n      let subtitle = document.querySelector(`.part-performance[data-part='${key}'] .part-subtitle`);\n      subtitle.innerText = partNameText;\n      subtitle.dataset.editing = data[key][part][0];\n      partTitle.appendChild(partName);\n      add_partName_listener(partName, subtitle);\n      let loadoutContainer = document.createElement(\"div\");\n      loadoutContainer.classList.add(\"fitted-icons\");\n      let n_parts = document.createElement(\"div\");\n      n_parts.classList.add(\"n-parts\");\n      n_parts.innerText = \"x\" + data[key][part][6];\n      loadoutContainer.appendChild(n_parts);\n      add_n_parts_buttons(loadoutContainer);\n      let loadout1 = document.createElement(\"i\");\n      loadout1.classList.add(\"bi\", \"bi-check\", \"loadout-1\");\n      loadoutContainer.appendChild(loadout1);\n      if (data[key][part][4] === 1) {\n        loadout1.classList.add(\"fitted\");\n        let number = document.createElement(\"div\");\n        number.classList.add(\"number\");\n        number.innerText = \"1\";\n        loadout1.appendChild(number);\n        partLoadouts.dataset.loadout1 = data[key][part][0];\n      }\n      loadout_listener(loadout1, \"1\", partLoadouts);\n      let loadout2 = document.createElement(\"i\");\n      loadout2.classList.add(\"bi\", \"bi-check\", \"loadout-2\");\n      loadoutContainer.appendChild(loadout2);\n      if (data[key][part][5] === 1) {\n        loadout2.classList.add(\"fitted\");\n        let number = document.createElement(\"div\");\n        number.classList.add(\"number\");\n        number.innerText = \"2\";\n        loadout2.appendChild(number);\n        partLoadouts.dataset.loadout2 = data[key][part][0];\n      }\n      loadout_listener(loadout2, \"2\", partLoadouts);\n      partTitle.appendChild(loadoutContainer);\n      let posRelative = document.createElement(\"div\");\n      posRelative.classList.add(\"one-part-flag-and-text\");\n      if (data[key][part][1] !== data[key][part][2]) {\n        let flag = document.createElement(\"img\");\n        flag.classList.add(\"one-part-flag\");\n        let code = data[key][part][3];\n        let codeFlag = _config__WEBPACK_IMPORTED_MODULE_0__.races_map[code];\n        let flagSrc = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[codeFlag];\n        flag.src = flagSrc;\n        let flagName = document.createElement(\"div\");\n        flagName.classList.add(\"one-part-flag-title\");\n        flagName.innerText = _config__WEBPACK_IMPORTED_MODULE_0__.races_names[code];\n        posRelative.appendChild(flag);\n        posRelative.appendChild(flagName);\n      } else {\n        posRelative.innerText = \"BASE\";\n      }\n      partElem.appendChild(partTitle);\n      partElem.appendChild(posRelative);\n      partElem.dataset.partid = part;\n      list.appendChild(partElem);\n      if (index === data[key].length) {\n        partName.classList.add(\"editing\");\n      }\n      index++;\n    }\n    add_new_part_button(list);\n    if (list.scrollHeight > list.clientHeight) {\n      list.classList.add(\"list-overflow\");\n    } else {\n      list.classList.remove(\"list-overflow\");\n    }\n  }\n}\nfunction add_new_part_button(list) {\n  let new_part_div = document.createElement(\"div\");\n  new_part_div.classList.add(\"new-part\");\n  let icon = document.createElement(\"i\");\n  let generalPart = list.parentNode;\n  icon.classList.add(\"bi\", \"bi-plus-circle\");\n  icon.textContent = \"Add new part\";\n  new_part_div.appendChild(icon);\n  list.appendChild(new_part_div);\n  icon.addEventListener(\"click\", function () {\n    let previousPart = list.childNodes[list.childNodes.length - 2];\n    let previous_name = previousPart.querySelector(\".one-part-name\").innerText;\n    let new_name = previous_name.split(\"-\")[0] + \"-\" + previous_name.split(\"-\")[1] + \"-\" + (parseInt(previous_name.split(\"-\")[2]) + 1);\n    let part = document.createElement(\"div\");\n    part.classList.add(\"one-part\");\n    let partTitle = document.createElement(\"div\");\n    partTitle.classList.add(\"one-part-title\");\n    let partName = document.createElement(\"div\");\n    partName.dataset.designId = actualMaxDesign;\n    partName.classList.add(\"one-part-name\");\n    partName.innerText = new_name;\n    let subtitle = list.parentNode.querySelector(`.part-subtitle`);\n    subtitle.dataset.editing = \"-1\";\n    actualMaxDesign += 1;\n    subtitle.innerText = new_name;\n    partTitle.appendChild(partName);\n    let parts = list.querySelectorAll(\".one-part\");\n    parts.forEach(function (part) {\n      part.querySelector(\".one-part-name\").classList.remove(\"editing\");\n    });\n    add_partName_listener(partName, subtitle, \"new\");\n    let loadoutContainer = document.createElement(\"div\");\n    loadoutContainer.classList.add(\"fitted-icons\");\n    let n_parts = document.createElement(\"div\");\n    n_parts.classList.add(\"n-parts\");\n    n_parts.innerText = \"x0\";\n    loadoutContainer.appendChild(n_parts);\n    add_n_parts_buttons(loadoutContainer);\n    let loadout1 = document.createElement(\"i\");\n    loadout1.classList.add(\"bi\", \"bi-check\", \"loadout-1\");\n    loadoutContainer.appendChild(loadout1);\n    loadout_listener(loadout1, \"1\", generalPart);\n    let loadout2 = document.createElement(\"i\");\n    loadout2.classList.add(\"bi\", \"bi-check\", \"loadout-2\");\n    loadoutContainer.appendChild(loadout2);\n    loadout_listener(loadout2, \"2\", generalPart);\n    partTitle.appendChild(loadoutContainer);\n    part.appendChild(partTitle);\n    list.insertBefore(part, new_part_div);\n    partName.classList.add(\"editing\");\n    new_part_div.remove();\n  });\n}\nfunction add_n_parts_buttons(loadoutContainer) {\n  let buttonsContainer = document.createElement(\"div\");\n  buttonsContainer.classList.add(\"n-parts-buttons\");\n  let up = document.createElement(\"i\");\n  up.classList.add(\"bi\", \"bi-chevron-up\");\n  let down = document.createElement(\"i\");\n  down.classList.add(\"bi\", \"bi-chevron-down\");\n  buttonsContainer.appendChild(up);\n  buttonsContainer.appendChild(down);\n  up.addEventListener(\"click\", function () {\n    let n_parts = loadoutContainer.querySelector(\".n-parts\");\n    let n = parseInt(n_parts.innerText.split(\"x\")[1]);\n    n += 1;\n    n_parts.innerText = \"x\" + n;\n  });\n  down.addEventListener(\"click\", function () {\n    let fitted_parts = loadoutContainer.parentNode.querySelectorAll(\".fitted\");\n    let fitted_parts_numb = fitted_parts.length;\n    let n_parts = loadoutContainer.querySelector(\".n-parts\");\n    let n = parseInt(n_parts.innerText.split(\"x\")[1]);\n    if (n > fitted_parts_numb) {\n      n -= 1;\n      if (n < 0) {\n        n = 0;\n      }\n      n_parts.innerText = \"x\" + n;\n    } else {\n      fitted_parts.forEach(function (part) {\n        let errorClass = \"\";\n        if (part.classList.contains(\"loadout-1\")) {\n          errorClass = \"loadout-1-error\";\n        } else if (part.classList.contains(\"loadout-2\")) {\n          errorClass = \"loadout-2-error\";\n        }\n        part.classList.add(errorClass);\n        setTimeout(() => {\n          part.classList.remove(errorClass);\n        }, 500);\n      });\n    }\n  });\n  loadoutContainer.appendChild(buttonsContainer);\n}\nfunction load_one_part(data) {\n  console.log(data);\n  let key = Object.keys(data)[0];\n  let part = document.querySelector(`.part-performance[data-part='${key}']`);\n  for (let stat in data[key]) {\n    if (stat !== \"15\") {\n      let stat_input = part.querySelector(`.part-performance-stat[data-attribute='${stat}']`).querySelector(\".custom-input-number\");\n      if (stat === \"7\" || stat === \"8\" || stat === \"9\") {\n        stat_input.value = data[key][stat].toFixed(2) + \" kN\";\n      } else {\n        stat_input.value = data[key][stat].toFixed(2) + \" %\";\n      }\n    }\n  }\n}\nfunction add_partName_listener(div, subtitle, type = \"old\") {\n  div.addEventListener(\"click\", function () {\n    if (type === \"new\") {\n      subtitle.dataset.editing = -1;\n    } else {\n      subtitle.dataset.editing = div.dataset.designId;\n    }\n    subtitle.innerText = div.innerText;\n    let parts = div.parentNode.parentNode.parentNode.querySelectorAll(\".one-part\");\n    parts.forEach(function (part) {\n      part.querySelector(\".one-part-name\").classList.remove(\"editing\");\n    });\n    div.classList.add(\"editing\");\n    if (type === \"old\") {\n      const message = {\n        command: 'partRequest',\n        data: {\n          designID: div.dataset.designId\n        }\n      };\n      const command = _renderer__WEBPACK_IMPORTED_MODULE_2__.factory.createCommand(message);\n      command.execute();\n    }\n  });\n}\nfunction loadout_listener(icon, loadout_n, partTitle) {\n  icon.addEventListener(\"click\", function () {\n    let part_design = icon.parentNode.parentNode.querySelector(\".one-part-name\").dataset.designId;\n    let n_parts_elem = icon.parentNode.querySelector(\".n-parts\");\n    let n_parts = n_parts_elem.innerText.split(\"x\")[1];\n    let parts_fitted = icon.parentNode.parentNode.querySelectorAll(\".fitted\").length;\n    if (parts_fitted < n_parts) {\n      partTitle.dataset[`loadout${loadout_n}`] = part_design;\n      if (loadout_n === \"1\") {\n        let oldFitted = partTitle.querySelector(\".loadout-1.fitted\");\n        if (oldFitted) {\n          oldFitted.classList.remove(\"fitted\");\n          oldFitted.querySelector(\".number\").remove();\n        }\n        icon.classList.toggle(\"fitted\");\n        let number = document.createElement(\"div\");\n        number.classList.add(\"number\");\n        number.innerText = \"1\";\n        icon.appendChild(number);\n      } else {\n        let oldFitted = partTitle.querySelector(\".loadout-2.fitted\");\n        if (oldFitted) {\n          oldFitted.classList.remove(\"fitted\");\n          oldFitted.querySelector(\".number\").remove();\n        }\n        icon.classList.toggle(\"fitted\");\n        let number = document.createElement(\"div\");\n        number.classList.add(\"number\");\n        number.innerText = \"2\";\n        icon.appendChild(number);\n      }\n    } else {\n      n_parts_elem.classList.add(\"n-parts-error\");\n      setTimeout(() => {\n        n_parts_elem.classList.remove(\"n-parts-error\");\n      }, 500);\n    }\n  });\n}\ndocument.querySelector(\"#fitButton\").addEventListener(\"click\", function () {\n  let data = {\n    command: \"fitParts\",\n    teamID: teamSelected\n  };\n  _renderer__WEBPACK_IMPORTED_MODULE_2__.socket.send(JSON.stringify(data));\n});\ndocument.querySelectorAll(\".part-performance-title .bi-caret-down-fill\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    elem.classList.toggle(\"clicked\");\n    let generalPart = elem.parentNode.parentNode;\n    elem.parentNode.querySelector(\".part-buttons\").classList.toggle(\"d-none\");\n    if (elem.classList.contains(\"clicked\")) {\n      generalPart.querySelector(\".part-performance-stats\").style.opacity = 0;\n      generalPart.querySelector(\".part-performance-stats\").style.height = \"0\";\n      generalPart.querySelector(\".part-performance-stats\").style.pointerEvents = \"none\";\n    } else {\n      generalPart.querySelector(\".part-performance-stats\").style.opacity = 1;\n      generalPart.querySelector(\".part-performance-stats\").style.pointerEvents = \"auto\";\n      //wait 0.2s and restore height\n      setTimeout(() => {\n        generalPart.querySelector(\".part-performance-stats\").style.height = \"auto\";\n      }, 200);\n    }\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll(\".part-name-buttons .bi-plus-lg\").forEach(function (elem) {\n  let intervalIds = [];\n  elem.addEventListener(\"mousedown\", function () {\n    let part = elem.parentNode.parentNode.parentNode.parentNode;\n    let inputs = part.querySelectorAll(\".custom-input-number\");\n    inputs.forEach(function (input) {\n      let increment;\n      if (input.max === \"100\") {\n        increment = 0.5;\n      } else {\n        increment = 0.025;\n      }\n      updateValue(input, increment);\n      let intervalId = setInterval(() => {\n        updateValue(input, increment);\n      }, 100);\n      intervalIds.push(intervalId);\n    });\n  });\n  elem.addEventListener(\"mouseup\", function () {\n    intervalIds.forEach(clearInterval);\n    intervalIds = [];\n  });\n  elem.addEventListener(\"mouseleave\", function () {\n    intervalIds.forEach(clearInterval);\n    intervalIds = [];\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll(\".part-name-buttons .bi-dash-lg\").forEach(function (elem) {\n  let intervalIds = [];\n  elem.addEventListener(\"mousedown\", function () {\n    let part = elem.parentNode.parentNode.parentNode.parentNode;\n    let inputs = part.querySelectorAll(\".custom-input-number\");\n    inputs.forEach(function (input) {\n      let increment;\n      if (input.max === \"100\") {\n        increment = -0.5;\n      } else {\n        increment = -0.025;\n      }\n      updateValue(input, increment);\n      let intervalId = setInterval(() => {\n        updateValue(input, increment);\n      }, 100);\n      intervalIds.push(intervalId);\n    });\n  });\n  elem.addEventListener(\"mouseup\", function () {\n    intervalIds.forEach(clearInterval);\n    intervalIds = [];\n  });\n  elem.addEventListener(\"mouseleave\", function () {\n    intervalIds.forEach(clearInterval);\n    intervalIds = [];\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll('.stat-number .bi-plus-lg').forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    const input = this.previousElementSibling;\n    updateValue(input, 0.01);\n    intervalId = setInterval(() => {\n      updateValue(input, 0.01);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".engines-show\").querySelectorAll('.bi-plus-lg').forEach(button => {\n  let intervalId;\n  let bar = button.parentNode.parentNode.querySelector(\".engine-performance-progress\");\n  button.addEventListener('mousedown', function () {\n    const input = this.previousElementSibling;\n    updateValue(input, 0.5);\n    bar.style.width = input.value.split(' ')[0] + \"%\";\n    intervalId = setInterval(() => {\n      updateValue(input, 0.5);\n      bar.style.width = input.value.split(' ')[0] + \"%\";\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll('.stat-number .bi-dash-lg').forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    const input = this.nextElementSibling;\n    updateValue(input, -0.01);\n    intervalId = setInterval(() => {\n      updateValue(input, -0.01);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".engines-show\").querySelectorAll('.bi-dash-lg').forEach(button => {\n  let intervalId;\n  let bar = button.parentNode.parentNode.querySelector(\".engine-performance-progress\");\n  button.addEventListener('mousedown', function () {\n    const input = this.nextElementSibling;\n    updateValue(input, -0.5);\n    bar.style.width = input.value.split(' ')[0] + \"%\";\n    intervalId = setInterval(() => {\n      updateValue(input, -0.5);\n      bar.style.width = input.value.split(' ')[0] + \"%\";\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll(\".new-or-existing-part div\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let parent = elem.parentNode;\n    let options = parent.querySelectorAll(\"div\");\n    options.forEach(function (option) {\n      option.classList.remove(\"active-part\");\n    });\n    elem.classList.add(\"active-part\");\n    parent.parentNode.parentNode.dataset.new = elem.dataset.new;\n  });\n});\nfunction updateValue(input, increment) {\n  let value = input.value.split(' ')[0];\n  let unit = input.value.split(' ')[1];\n  value = (parseFloat(value) + increment).toFixed(2);\n  if (value > parseFloat(input.max)) {\n    value = parseFloat(input.max).toFixed(2);\n  }\n  if (value < parseFloat(input.min)) {\n    value = parseFloat(input.min).toFixed(2);\n  }\n  input.value = value + ' ' + unit;\n}\ndocument.querySelector(\"#performanceGraphButton\").addEventListener(\"click\", function () {\n  if (!viewingGraph) {\n    document.querySelector(\"#performanceGraphButton\").classList.add(\"active\");\n    document.querySelector(\".teams-show\").classList.add(\"d-none\");\n    document.querySelector(\"#performanceGraph\").classList.remove(\"d-none\");\n  }\n  removeSelected();\n  document.querySelector(\".save-button\").classList.add(\"d-none\");\n  viewingGraph = true;\n});\ndocument.querySelectorAll(\".part-performance-title .bi-chevron-up\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let title = elem.parentNode.parentNode;\n    let list = title.parentNode.querySelector(\".parts-list\");\n    let partEditing = list.querySelector('.one-part-name.editing').parentNode.parentNode;\n    let newPart = partEditing.previousElementSibling;\n    if (!newPart) {\n      let lastValidPart = list.lastElementChild;\n      while (lastValidPart && lastValidPart.classList.contains('new-part')) {\n        lastValidPart = lastValidPart.previousElementSibling;\n      }\n      newPart = lastValidPart;\n    }\n    newPart.querySelector(\".one-part-name\").click();\n  });\n});\ndocument.querySelectorAll(\".part-performance-title .bi-chevron-down\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let title = elem.parentNode.parentNode;\n    let list = title.parentNode.querySelector(\".parts-list\");\n    let partEditing = list.querySelector('.one-part-name.editing').parentNode.parentNode;\n    let newPart = partEditing.nextElementSibling;\n\n    // Si el siguiente es 'new-part', nos movemos al primero\n    if (newPart && newPart.classList.contains('new-part')) {\n      newPart = list.firstElementChild;\n    }\n\n    // Simulamos el click en el nuevo elemento encontrado (si es válido)\n    if (newPart) {\n      newPart.querySelector(\".one-part-name\").click();\n    }\n  });\n});\n\n/**\r\n * Puts the bars of the engine to their appropiate values\r\n * @param {div} div element of the dom that contains the stats of the engine\r\n */\nfunction resetBarsEngines(div) {\n  let statsString = div.dataset.stats;\n  var statsArray = statsString.split(' ').map(function (item) {\n    return parseFloat(item, 10) / 10;\n  });\n  document.querySelector(\".engines-show\").querySelectorAll(\".custom-progress\").forEach(function (elem, index) {\n    elem.dataset.progress = statsArray[index];\n    manage_bar(elem, elem.dataset.progress);\n  });\n}\n\n/**\r\n * resets all bars to 0\r\n */\nfunction resetBars() {\n  document.querySelectorAll(\".custom-progress\").forEach(function (elem) {\n    elem.dataset.progress = 0;\n    manage_bar(elem, elem.dataset.progress);\n  });\n}\nfunction add_custom_engine(name, stats) {\n  console.log(name, stats);\n  let generalEngineDiv = document.createElement(\"div\");\n  let engineTitle = document.createElement(\"input\");\n  engineTitle.type = \"text\";\n  if (name !== \"\") {\n    engineTitle.value = name;\n  } else {\n    engineTitle.value = \"New Engine\";\n  }\n  let engineCount = document.querySelectorAll(\".custom-engines-div > div\").length;\n  let engineStatsId = `engineStats${engineCount + 1}`;\n  let engineStats = document.createElement(\"div\");\n  let caret = document.createElement(\"i\");\n  let trash = document.createElement(\"i\");\n  trash.classList.add(\"bi\", \"bi-trash\");\n  caret.classList.add(\"bi\", \"bi-caret-down-fill\", \"clicked\");\n  generalEngineDiv.classList.add(\"engine-performance\");\n  engineTitle.classList.add(\"engine-performance-title\");\n  engineStats.classList.add(\"engine-performance-stats\", \"collapse\", \"show\");\n  engineStats.id = engineStatsId;\n  caret.addEventListener(\"click\", function () {\n    caret.classList.toggle(\"clicked\");\n  });\n  trash.addEventListener(\"click\", function () {\n    generalEngineDiv.remove();\n  });\n  caret.setAttribute(\"data-bs-toggle\", \"collapse\");\n  caret.setAttribute(\"data-bs-target\", `#${engineStatsId}`);\n  for (let [key, value] of _config__WEBPACK_IMPORTED_MODULE_0__.engine_stats_dict) {\n    if (_renderer__WEBPACK_IMPORTED_MODULE_2__.game_version === 2024 && key !== 11 && key !== 12 || _renderer__WEBPACK_IMPORTED_MODULE_2__.game_version === 2023) {\n      let stat = document.createElement(\"div\");\n      stat.classList.add(\"engine-performance-stat\");\n      stat.dataset.attribute = key;\n      let statTitle = document.createElement(\"div\");\n      statTitle.classList.add(\"part-performance-stat-title\");\n      statTitle.innerText = value;\n      let stat_number = document.createElement(\"div\");\n      stat_number.classList.add(\"stat-number\");\n      stat_number.innerHTML = '<i class=\"bi bi-dash-lg\"></i> <input type=\"text\" class=\"custom-input-number\"> <i class=\"bi bi-plus-lg\"></i>';\n      let input = stat_number.querySelector(\".custom-input-number\");\n      let bar = document.createElement(\"div\");\n      bar.classList.add(\"engine-performance-bar\");\n      let bar_progress = document.createElement(\"div\");\n      bar_progress.classList.add(\"engine-performance-progress\");\n      if (stats[key.toString()] !== undefined) {\n        input.value = stats[key] + \" %\";\n        bar_progress.style.width = stats[key] + \"%\";\n      } else {\n        input.value = \"50.0 %\";\n      }\n      stat.appendChild(statTitle);\n      stat.appendChild(stat_number);\n      bar.appendChild(bar_progress);\n      stat.appendChild(bar);\n      engineStats.appendChild(stat);\n      let less = stat_number.querySelector(\".bi-dash-lg\");\n      let intervalId;\n      less.addEventListener('mousedown', function () {\n        const input = this.nextElementSibling;\n        updateValue(input, -0.5);\n        bar_progress.style.width = input.value.split(' ')[0] + \"%\";\n        intervalId = setInterval(() => {\n          updateValue(input, -0.5);\n          bar_progress.style.width = input.value.split(' ')[0] + \"%\";\n        }, 100);\n      });\n      less.addEventListener('mouseup', function () {\n        clearInterval(intervalId);\n      });\n      less.addEventListener('mouseleave', function () {\n        clearInterval(intervalId);\n      });\n      let plus = stat_number.querySelector(\".bi-plus-lg\");\n      plus.addEventListener('mousedown', function () {\n        const input = this.previousElementSibling;\n        updateValue(input, 0.5);\n        bar_progress.style.width = input.value.split(' ')[0] + \"%\";\n        intervalId = setInterval(() => {\n          updateValue(input, 0.5);\n          bar_progress.style.width = input.value.split(' ')[0] + \"%\";\n        }, 100);\n      });\n      plus.addEventListener('mouseup', function () {\n        clearInterval(intervalId);\n      });\n      plus.addEventListener('mouseleave', function () {\n        clearInterval(intervalId);\n      });\n    }\n  }\n  generalEngineDiv.appendChild(engineTitle);\n  generalEngineDiv.appendChild(engineStats);\n  generalEngineDiv.appendChild(caret);\n  generalEngineDiv.appendChild(trash);\n  document.querySelector(\".custom-engines-div\").appendChild(generalEngineDiv);\n}\ndocument.querySelector(\"#addCustomEngineButton\").addEventListener(\"click\", function () {\n  add_custom_engine(\"\", \"\");\n});\ndocument.querySelector(\"#confirmCustomEnginesButton\").addEventListener(\"click\", function () {\n  let engines = document.querySelectorAll(\".custom-engines-div .engine-performance\");\n  let enginesData = {};\n  let unique_id = 1;\n  engines.forEach(function (engine) {\n    //id is title in lowercase\n    let engineID = 13 + unique_id;\n    let engineName = engine.querySelector(\".engine-performance-title\").value.toLowerCase();\n    let engineStats = {};\n    engine.querySelectorAll(\".engine-performance-stat\").forEach(function (stat) {\n      let attribute = stat.dataset.attribute;\n      let value = stat.querySelector(\".custom-input-number\").value.split(\" \")[0];\n      engineStats[attribute] = value;\n    });\n    enginesData[engineID] = {};\n    enginesData[engineID][\"stats\"] = engineStats;\n    enginesData[engineID][\"name\"] = engineName;\n    unique_id += 3;\n  });\n  let data = {\n    enginesData: enginesData\n  };\n  const message = {\n    command: 'customEngines',\n    data: data\n  };\n  const command = _renderer__WEBPACK_IMPORTED_MODULE_2__.factory.createCommand(message);\n  command.execute();\n});\nfunction load_custom_engines(data) {\n  let engines = data;\n  let engineDropdown = document.querySelector(\"#engineMenu\");\n  engineDropdown.querySelectorAll(\"a.custom-engine\").forEach(function (elem) {\n    elem.remove();\n  });\n  document.querySelector(\".custom-engines-div\").innerHTML = \"\";\n  engines.forEach(function (engine) {\n    add_custom_engine(engine[2], engine[1]);\n    let engineOption = document.createElement(\"a\");\n    engineOption.classList.add(\"dropdown-item\", \"custom-engine\");\n    engineOption.innerText = engine[2].charAt(0).toUpperCase() + engine[2].slice(1);\n    engineOption.dataset.engine = engine[0];\n    engineOption.href = \"#\";\n    engineDropdown.appendChild(engineOption);\n    engineOption.addEventListener(\"click\", function () {\n      let engineid = engineOption.dataset.engine;\n      let engine = engineOption.innerText;\n      document.querySelector(\"#engineLabel\").innerText = engine;\n      document.querySelector(\"#engineButton\").dataset.value = engineid;\n    });\n  });\n}\ndocument.querySelector(\"#cancelCustomEnginesButton\").addEventListener(\"click\", function () {\n  load_custom_engines(customEnginesCopy);\n});\n\n/**\r\n * Manages the progression of the bars \r\n * @param {div} bar bar that is about to be edited\r\n * @param {int} progress number that determines the progress of the bar \r\n */\nfunction manage_bar(bar, progress) {\n  if (bar.dataset.type === \"engine\") {\n    let whiteDiv = bar.querySelector(\".white-part\");\n    let newProgress = progress * 10;\n    let newWidth = 0 + newProgress + \"%\";\n    whiteDiv.style.width = newWidth;\n  } else {\n    let grayDiv = bar.querySelector(\".gray-part\");\n    let greenDiv = bar.querySelector(\".green-part\");\n    if (progress == 0) {\n      grayDiv.style.width = \"100%\";\n      greenDiv.style.width = \"0%\";\n      bar.parentNode.querySelector(\".performance-data\").className = \"performance-data bold-font\";\n    } else if (progress > 0) {\n      grayDiv.style.width = \"100%\";\n      let newProgress = progress * 10;\n      let newWidth = 0 + newProgress + \"%\";\n      greenDiv.style.width = newWidth;\n      bar.parentNode.querySelector(\".performance-data\").className = \"performance-data bold-font positive\";\n    } else if (progress < 0) {\n      greenDiv.style.width = \"0%\";\n      let newProgress = progress * 10;\n      let newWidth = 100 + newProgress + \"%\";\n      grayDiv.style.width = newWidth;\n      bar.parentNode.querySelector(\".performance-data\").className = \"performance-data bold-font negative\";\n    }\n  }\n  bar.parentNode.querySelector(\".performance-data\").innerHTML = progress * 10 + \"%\";\n}\nfunction load_performance_graph(data) {\n  let labelsArray = [];\n  data[1].forEach(function (elem) {\n    labelsArray.push(_config__WEBPACK_IMPORTED_MODULE_0__.races_names[elem[2]]);\n  });\n  labelsArray.unshift(\"\");\n  if (typeof performanceGraph !== 'undefined' && performanceGraph !== null) {\n    performanceGraph.destroy();\n  }\n  createPerformanceChart(labelsArray);\n  performanceGraph.update();\n  let teamPerformances = {};\n\n  // Inicializar un array vacío para cada equipo\n  for (let i = 1; i <= 10; i++) {\n    teamPerformances[i] = [];\n  }\n  teamPerformances[32] = [];\n  let minValue = Number.POSITIVE_INFINITY;\n  let maxValue = Number.NEGATIVE_INFINITY;\n  let performances = [...data[0]];\n  performances.forEach(race => {\n    for (let team in race) {\n      let value = race[team];\n      teamPerformances[team].push(value);\n      if (value < minValue) {\n        minValue = value;\n      }\n      if (value > maxValue) {\n        maxValue = value;\n      }\n    }\n  });\n  let yAxisMin = minValue - 5;\n  let yAxisMax = maxValue + 5;\n  for (let team in teamPerformances) {\n    let color = _head2head__WEBPACK_IMPORTED_MODULE_1__.colors_dict[team + \"0\"];\n    let data = teamPerformances[team];\n    performanceGraph.data.datasets.push({\n      label: _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[team],\n      data: data,\n      borderColor: color,\n      backgroundColor: color,\n      pointRadius: 0,\n      fill: false,\n      tension: 0.1,\n      pointHitRadius: 7\n    });\n  }\n  performanceGraph.options.scales.y.min = yAxisMin;\n  performanceGraph.options.scales.y.max = yAxisMax;\n  performanceGraph.update();\n}\n\n/**\r\n * Creates the head to head race chart\r\n * @param {Array} labelsArray array with all the labels for the races\r\n */\nfunction createPerformanceChart(labelsArray) {\n  const dataD = {\n    labels: labelsArray\n  };\n  performanceGraph = new Chart(document.getElementById('performanceGraph'), {\n    type: 'line',\n    data: dataD,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        mode: 'index'\n      },\n      layout: {\n        padding: {\n          top: 25,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        },\n        y: {\n          min: 0,\n          max: 100,\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            },\n            callback: function (value) {\n              return value.toFixed(1); // Mostrar solo un decimal\n            }\n          }\n        }\n      },\n      plugins: {\n        datalabels: {\n          display: false\n        },\n        legend: {\n          labels: {\n            boxHeight: 2,\n            boxWidth: 25,\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1\"\n            }\n          },\n          display: false\n        },\n        tooltip: {\n          titleFont: {\n            family: 'Formula1Bold',\n            size: 16\n          },\n          bodyFont: {\n            family: 'Formula1',\n            size: 14\n          }\n        }\n      }\n    }\n  });\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/performance.js?");

/***/ }),

/***/ "./src/js/frontend/predictions.js":
/*!****************************************!*\
  !*** ./src/js/frontend/predictions.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   max_races: () => (/* binding */ max_races),\n/* harmony export */   mid_grid: () => (/* binding */ mid_grid),\n/* harmony export */   placeRaces: () => (/* binding */ placeRaces),\n/* harmony export */   placeRacesInModal: () => (/* binding */ placeRacesInModal),\n/* harmony export */   relative_grid: () => (/* binding */ relative_grid),\n/* harmony export */   resetPredict: () => (/* binding */ resetPredict),\n/* harmony export */   setMaxRaces: () => (/* binding */ setMaxRaces),\n/* harmony export */   setMidGrid: () => (/* binding */ setMidGrid),\n/* harmony export */   setRelativeGrid: () => (/* binding */ setRelativeGrid)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transfers */ \"./src/js/frontend/transfers.js\");\n\n\nlet yearSel;\nlet yearProbSel;\nlet racePredicted;\nlet raceName;\nlet probRace;\nlet mid_grid = 10;\nlet max_races = 23;\nlet relative_grid = 5;\nfunction setMidGrid(value) {\n  mid_grid = value;\n}\nfunction setMaxRaces(value) {\n  max_races = value;\n}\nfunction setRelativeGrid(value) {\n  relative_grid = value;\n}\nfunction placeRaces(races) {\n  yearSel = races[0];\n  let raceMenu = document.querySelector(\"#raceMenu\");\n  let dropdownRaceMenu = document.querySelector(\"#raceProbMenu\");\n  raceMenu.innerHTML = \"\";\n  races[1].forEach(function (race) {\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = \"race bold-font\";\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.textContent = _config__WEBPACK_IMPORTED_MODULE_0__.names_full[_config__WEBPACK_IMPORTED_MODULE_0__.races_names[race[1]]];\n    newDiv.dataset.raceid = race[0];\n    let img = document.createElement(\"img\");\n    img.setAttribute(\"src\", _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[_config__WEBPACK_IMPORTED_MODULE_0__.races_map[race[1]]]);\n    img.className = \"race-flag front-gradient\";\n    img.style.float = \"right\";\n    newDiv.appendChild(nameDiv);\n    newDiv.appendChild(img);\n    raceMenu.appendChild(newDiv);\n    newDiv.addEventListener(\"click\", function () {\n      racePredicted = newDiv.dataset.raceid;\n      if (raceMenu.querySelector(\".selected\")) {\n        raceMenu.querySelector(\".selected\").classList.remove(\"selected\");\n      }\n      newDiv.classList.add(\"selected\");\n      let data = {\n        // command: \"predictMontecarlo\",\n        command: \"predict\",\n        race: newDiv.dataset.raceid,\n        year: yearSel\n      };\n      socket.send(JSON.stringify(data));\n    });\n  });\n}\nfunction resetPredict() {\n  let raceMenu = document.querySelector(\"#raceMenu\");\n  raceMenu.innerHTML = \"\";\n  let dropdownRaceMenu = document.querySelector(\"#raceProbMenu\");\n  dropdownRaceMenu.innerHTML = \"\";\n  let header = document.querySelector(\".prob-viewer-header\");\n  header.innerHTML = \"\";\n  let driverDiv = document.createElement(\"div\");\n  driverDiv.classList = \"viewer-header-driver bold-font\";\n  driverDiv.innerText = \"Driver\";\n  let PositionDiv = document.createElement(\"div\");\n  PositionDiv.classList = \"viewer-header-position bold-font\";\n  PositionDiv.innerText = \"Pos\";\n  header.appendChild(driverDiv);\n  header.appendChild(PositionDiv);\n  let dataSect = document.querySelector(\".prob-viewer-data\");\n  dataSect.innerHTML = \"\";\n  document.querySelector(\"#predictionFirst\").querySelector(\".prediction-table-data\").innerHTML = \"\";\n  document.querySelector(\"#predictionSecond\").querySelector(\".prediction-table-data\").innerHTML = \"\";\n  document.querySelector(\"#raceProbButton\").innerText = \"Race\";\n  document.querySelector(\"#confirmPredict\").disabled = true;\n}\nfunction placeRacesInModal(races) {\n  yearProbSel = races[0];\n  let raceMenu = document.querySelector(\"#raceMenu\");\n  let dropdownRaceMenu = document.querySelector(\"#raceProbMenu\");\n  dropdownRaceMenu.innerHTML = \"\";\n  races[1].forEach(function (race) {\n    let a = document.createElement('a');\n    a.classList.add('dropdown-item');\n    a.classList.add('menu-race');\n    a.href = '#';\n    a.textContent = _config__WEBPACK_IMPORTED_MODULE_0__.names_full[_config__WEBPACK_IMPORTED_MODULE_0__.races_names[race[1]]];\n    a.dataset.code = race[0];\n    let imageUrl = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[_config__WEBPACK_IMPORTED_MODULE_0__.races_map[race[1]]];\n    let img2 = document.createElement('img');\n    img2.src = imageUrl;\n    img2.classList.add('menuFlag');\n    a.appendChild(img2);\n    a.addEventListener(\"click\", function () {\n      probRace = a.dataset.code;\n      document.querySelector(\"#raceProbButton\").innerText = a.textContent;\n      document.querySelector(\"#confirmPredict\").disabled = false;\n    });\n    dropdownRaceMenu.appendChild(a);\n  });\n}\nfunction manageProgress(prog) {\n  let bar = document.querySelector(\"#predictBar\");\n  let val = \"width: \" + prog[0] + \"% !important;\";\n  bar.setAttribute(\"style\", val);\n  document.querySelector(\".indicator\").innerText = prog[0] + \"%\";\n}\nfunction resetBar() {\n  document.querySelector(\".bar-and-indicator\").style.opacity = 0;\n  let bar = document.querySelector(\"#predictBar\");\n  let val = \"width: 0% !important;\";\n  bar.setAttribute(\"style\", val);\n  document.querySelector(\".indicator\").innerText = \"0%\";\n}\ndocument.querySelector(\"#confirmPredict\").addEventListener(\"click\", function () {\n  let data = {\n    command: \"predictMontecarlo\",\n    race: probRace,\n    year: yearProbSel\n  };\n  socket.send(JSON.stringify(data));\n  document.querySelector(\".bar-and-indicator\").style.opacity = 1;\n  document.querySelector(\"#cancelPredict\").disabled = true;\n  document.querySelector(\"#confirmPredict\").disabled = true;\n});\ndocument.querySelector(\"#predictionpill\").addEventListener(\"click\", function () {\n  document.querySelector(\"#mainPred\").classList.remove(\"d-none\");\n  document.querySelector(\"#mainProb\").classList.add(\"d-none\");\n  document.querySelector(\"#yearPredictionButton\").classList.remove(\"d-none\");\n  document.querySelector(\"#predictButton\").classList.add(\"d-none\");\n  document.querySelector(\"#predictConfigContent\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#probpill\").addEventListener(\"click\", function () {\n  document.querySelector(\"#mainPred\").classList.add(\"d-none\");\n  document.querySelector(\"#mainProb\").classList.remove(\"d-none\");\n  document.querySelector(\"#yearPredictionButton\").classList.add(\"d-none\");\n  document.querySelector(\"#predictButton\").classList.remove(\"d-none\");\n  document.querySelector(\"#predictConfigContent\").classList.remove(\"d-none\");\n});\nfunction loadMontecarlo(data) {\n  let bar = document.querySelector(\"#predictBar\");\n  bar.setAttribute(\"style\", \"width: 100%\");\n  document.querySelector(\".indicator\").innerText = \"100%\";\n  let drivers = data[0];\n  setTimeout(function () {\n    document.querySelector(\"#cancelPredict\").disabled = false;\n    document.querySelector(\"#confirmPredict\").disabled = false;\n    document.querySelector(\"#cancelPredict\").click();\n    resetBar();\n  }, 500);\n  document.querySelector(\"#mainProb\").classList.remove(\"d-none\");\n  document.querySelector(\"#predictConfigContent\").innerText = document.querySelector(\"#yearPredictionModalButton\").textContent + \" \" + document.querySelector(\"#raceProbButton\").textContent;\n  drivers = orderPercent(drivers);\n  let header = document.querySelector(\".prob-viewer-header\");\n  header.innerHTML = \"\";\n  let driverDiv = document.createElement(\"div\");\n  driverDiv.classList = \"viewer-header-driver bold-font\";\n  driverDiv.innerText = \"Driver\";\n  let PositionDiv = document.createElement(\"div\");\n  PositionDiv.classList = \"viewer-header-position bold-font\";\n  PositionDiv.innerText = \"Pos\";\n  header.appendChild(driverDiv);\n  header.appendChild(PositionDiv);\n  let dataSect = document.querySelector(\".prob-viewer-data\");\n  dataSect.innerHTML = \"\";\n  drivers[0].slice(4).forEach(function (elem, index) {\n    let headerPos = document.createElement(\"div\");\n    headerPos.className = \"viewer-header-pos bold-font\";\n    headerPos.innerText = index + 1;\n    header.appendChild(headerPos);\n  });\n  drivers.forEach(function (elem, index) {\n    let row = document.createElement(\"div\");\n    row.classList = \"prob-viewer-row\";\n    if (index % 2 === 0) {\n      row.classList.add(\"prob-row-even\");\n    } else {\n      row.classList.add(\"prob-row-odd\");\n    }\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.classList = \"viewer-header-driver\";\n    let name = elem[1].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    spanLastName.dataset.teamid = elem[2];\n    row.dataset.teamid = elem[2];\n    row.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[elem[2]] + \"-transparent\");\n    spanName.textContent = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    spanLastName.classList.add(\"bold-font\");\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.manageColor)(spanLastName, spanLastName);\n    nameDiv.appendChild(spanName);\n    nameDiv.appendChild(spanLastName);\n    let position = document.createElement(\"div\");\n    position.classList = \"viewer-header-position bold-font\";\n    position.innerText = elem[3];\n    row.appendChild(nameDiv);\n    row.appendChild(position);\n    elem.slice(4).forEach(function (perc) {\n      let percDiv = document.createElement(\"div\");\n      percDiv.className = \"viewer-header-data\";\n      if (perc !== 0) {\n        percDiv.innerText = Number(perc.toFixed(2));\n      }\n      if (perc < 25) {\n        if (perc !== 0) {\n          percDiv.classList.add(\"i0-25\");\n        }\n      } else if (perc < 50) {\n        percDiv.classList.add(\"i25-50\");\n      } else if (perc < 70) {\n        percDiv.classList.add(\"i50-75\");\n      } else {\n        percDiv.classList.add(\"i75-100\");\n      }\n      row.appendChild(percDiv);\n    });\n    dataSect.appendChild(row);\n  });\n}\nfunction orderDrivers(lista, camp) {\n  return lista.sort((a, b) => a[camp] - b[camp]);\n}\nfunction orderPercent(lista) {\n  lista.sort(function (a, b) {\n    return a[3] - b[3];\n  });\n  return lista;\n}\nfunction predictDrivers(drivers) {\n  document.querySelector(\"#predictionFirst\").querySelector(\".prediction-table-data\").innerHTML = \"\";\n  document.querySelector(\"#predictionSecond\").querySelector(\".prediction-table-data\").innerHTML = \"\";\n  let next_race = drivers[0];\n  let list;\n  let nextRace = Number(racePredicted) === Number(next_race[0]);\n  if (nextRace) {\n    list = orderDrivers(drivers[1], \"Prediction\");\n  } else {\n    list = drivers[1];\n  }\n  list.forEach(function (driver) {\n    let mainDiv = document.createElement(\"div\");\n    mainDiv.className = \"driver-info\";\n    let name = driver.Name.split(\" \");\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.classList = \"driver-prediction\";\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    mainDiv.dataset.teamid = driver.Team;\n    mainDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver.Team] + \"-transparent\");\n    spanLastName.dataset.teamid = driver.Team;\n    spanName.textContent = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    spanLastName.classList.add(\"bold-font\");\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.manageColor)(spanLastName, spanLastName);\n    nameDiv.appendChild(spanName);\n    nameDiv.appendChild(spanLastName);\n    mainDiv.appendChild(nameDiv);\n    let positionDiv = document.createElement(\"div\");\n    positionDiv.className = \"position-prediction bold-font\";\n    let provisional = driver.result;\n    let positionNum = document.createElement(\"div\");\n    if (provisional === 1) {\n      provisional = provisional + \"st\";\n      positionNum.style.color = \"#FDE06B\";\n    } else if (provisional === 2) {\n      provisional = provisional + \"nd\";\n      positionNum.style.color = \"#AEB2B8\";\n    } else if (provisional === 3) {\n      provisional = provisional + \"rd\";\n      positionNum.style.color = \"#d7985a\";\n    } else {\n      provisional = provisional + \"th\";\n    }\n    let positionDelta = document.createElement(\"div\");\n    positionNum.textContent = provisional;\n    let delta = driver.Prediction - driver.result;\n    if (delta > 0) {\n      positionDelta.innerText = \"+\" + delta;\n      positionDelta.style.color = \"#5bd999\";\n    } else if (delta < 0) {\n      positionDelta.innerText = delta;\n      positionDelta.style.color = \"#e95656\";\n    } else if (delta === 0) {\n      positionDelta.innerText = \"\\u00A0\" + \" =\";\n    }\n    positionDiv.appendChild(positionNum);\n    positionDiv.appendChild(positionDelta);\n    let predictionDiv = document.createElement(\"div\");\n    predictionDiv.className = \"prediction-prediction bold-font\";\n    provisional = driver.Prediction;\n    if (provisional === 1) {\n      provisional = provisional + \"st\";\n      predictionDiv.style.color = \"#FDE06B\";\n    } else if (provisional === 2) {\n      provisional = provisional + \"nd\";\n      predictionDiv.style.color = \"#AEB2B8\";\n    } else if (provisional === 3) {\n      provisional = provisional + \"rd\";\n      predictionDiv.style.color = \"#d7985a\";\n    } else {\n      provisional = provisional + \"th\";\n    }\n    predictionDiv.textContent = provisional;\n    mainDiv.appendChild(predictionDiv);\n    mainDiv.appendChild(positionDiv);\n    if (nextRace) {\n      if (driver.Prediction <= mid_grid) {\n        document.querySelector(\"#predictionFirst\").querySelector(\".prediction-table-data\").appendChild(mainDiv);\n      } else if (driver.Prediction > mid_grid) {\n        document.querySelector(\"#predictionSecond\").querySelector(\".prediction-table-data\").appendChild(mainDiv);\n      }\n    } else {\n      if (driver.result <= mid_grid && driver.result != 0) {\n        document.querySelector(\"#predictionFirst\").querySelector(\".prediction-table-data\").appendChild(mainDiv);\n      } else if (driver.result > mid_grid && driver.result != 0) {\n        document.querySelector(\"#predictionSecond\").querySelector(\".prediction-table-data\").appendChild(mainDiv);\n      }\n    }\n  });\n  if (nextRace) {\n    document.querySelectorAll(\".position-prediction\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n    document.querySelectorAll(\".driver-prediction\").forEach(function (elem) {\n      elem.style.width = \"75%\";\n    });\n  } else {\n    document.querySelectorAll(\".position-prediction\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    document.querySelectorAll(\".driver-prediction\").forEach(function (elem) {\n      elem.style.width = \"50%\";\n    });\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/predictions.js?");

/***/ }),

/***/ "./src/js/frontend/renderer.js":
/*!*************************************!*\
  !*** ./src/js/frontend/renderer.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   custom_team: () => (/* binding */ custom_team),\n/* harmony export */   factory: () => (/* binding */ factory),\n/* harmony export */   first_show_animation: () => (/* binding */ first_show_animation),\n/* harmony export */   game_version: () => (/* binding */ game_version),\n/* harmony export */   manageSaveButton: () => (/* binding */ manageSaveButton),\n/* harmony export */   socket: () => (/* binding */ socket),\n/* harmony export */   updateFront: () => (/* binding */ updateFront)\n/* harmony export */ });\n/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! marked */ \"./node_modules/marked/lib/marked.esm.js\");\n/* harmony import */ var _teams__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./teams */ \"./src/js/frontend/teams.js\");\n/* harmony import */ var _seasonViewer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./seasonViewer */ \"./src/js/frontend/seasonViewer.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transfers */ \"./src/js/frontend/transfers.js\");\n/* harmony import */ var _calendar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calendar */ \"./src/js/frontend/calendar.js\");\n/* harmony import */ var _performance__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./performance */ \"./src/js/frontend/performance.js\");\n/* harmony import */ var _predictions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./predictions */ \"./src/js/frontend/predictions.js\");\n/* harmony import */ var _stats__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stats */ \"./src/js/frontend/stats.js\");\n/* harmony import */ var _head2head__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./head2head */ \"./src/js/frontend/head2head.js\");\n/* harmony import */ var _backend_commandFactory__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../backend/commandFactory */ \"./src/js/backend/commandFactory.js\");\n/* harmony import */ var _backend_UESaveHandler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../backend/UESaveHandler */ \"./src/js/backend/UESaveHandler.js\");\n/* harmony import */ var _backend_dbManager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../backend/dbManager */ \"./src/js/backend/dbManager.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst names_configs = {\n  \"visarb\": \"VISA CASHAPP RB\",\n  \"toyota\": \"TOYOTA\",\n  \"hugo\": \"HUGO BOSS\",\n  \"alphatauri\": \"ALPHA TAURI\",\n  \"brawn\": \"BRAWN GP\",\n  \"porsche\": \"PORSCHE\",\n  \"alpine\": \"ALPINE\",\n  \"renault\": \"RENAULT\",\n  \"andretti\": \"ANDRETTI\",\n  \"lotus\": \"LOTUS\",\n  \"alfa\": \"ALFA ROMEO\",\n  \"audi\": \"AUDI\",\n  \"sauber\": \"SAUBER\",\n  \"stake\": \"STAKE SAUBER\"\n};\nconst pretty_names = {\n  \"visarb\": \"Visa Cashapp RB\",\n  \"toyota\": \"Toyota\",\n  \"hugo\": \"Hugo Boss\",\n  \"alphatauri\": \"Alpha Tauri\",\n  \"brawn\": \"Brawn GP\",\n  \"porsche\": \"Porsche\",\n  \"alpine\": \"Alpine\",\n  \"renault\": \"Renault\",\n  \"andretti\": \"Andretti\",\n  \"lotus\": \"Lotus\",\n  \"alfa\": \"Alfa Romeo\",\n  \"audi\": \"Audi\",\n  \"sauber\": \"Sauber\",\n  \"stake\": \"Stake Sauber\"\n};\nconst abreviations_for_replacements = {\n  \"visarb\": \"VCARB\",\n  \"toyota\": \"TOY\",\n  \"hugo\": \"HUGO\",\n  \"alphatauri\": \"AT\",\n  \"brawn\": \"BGP\",\n  \"porsche\": \"POR\",\n  \"alpine\": \"ALP\",\n  \"renault\": \"REN\",\n  \"andretti\": \"AND\",\n  \"lotus\": \"LOT\",\n  \"alfa\": \"ALFA\",\n  \"audi\": \"AUDI\",\n  \"sauber\": \"SAU\",\n  \"stake\": \"STK\"\n};\nconst logos_configs = {\n  \"visarb\": \"../assets/images/visarb.png\",\n  \"toyota\": \"../assets/images/toyota.png\",\n  \"hugo\": \"../assets/images/hugoboss.png\",\n  \"alphatauri\": \"../assets/images/alphatauri.png\",\n  \"brawn\": \"../assets/images/brawn.png\",\n  \"porsche\": \"../assets/images/porsche.png\",\n  \"alpine\": \"../assets/images/alpine.png\",\n  \"renault\": \"../assets/images/renault.png\",\n  \"andretti\": \"../assets/images/andretti.png\",\n  \"lotus\": \"../assets/images/lotus.png\",\n  \"alfa\": \"../assets/images/alfaromeo.png\",\n  \"audi\": \"../assets/images/audi.png\",\n  \"sauber\": \"../assets/images/sauber.png\",\n  \"stake\": \"../assets/images/kick.png\"\n};\nconst logos_classes_configs = {\n  \"visarb\": \"visarblogo\",\n  \"toyota\": \"toyotalogo\",\n  \"hugo\": \"hugologo\",\n  \"alphatauri\": \"alphataurilogo\",\n  \"porsche\": \"porschelogo\",\n  \"brawn\": \"brawnlogo\",\n  \"alpine\": \"alpinelogo\",\n  \"renault\": \"ferrarilogo\",\n  \"andretti\": \"andrettilogo\",\n  \"lotus\": \"lotuslogo\",\n  \"alfa\": \"alfalogo\",\n  \"audi\": \"audilogo\",\n  \"sauber\": \"sauberlogo\",\n  \"stake\": \"alfalogo\"\n};\nconst driverTransferPill = document.getElementById(\"transferpill\");\nconst editStatsPill = document.getElementById(\"statspill\");\nconst CalendarPill = document.getElementById(\"calendarpill\");\nconst carPill = document.getElementById(\"carpill\");\nconst viewPill = document.getElementById(\"viewerpill\");\nconst h2hPill = document.getElementById(\"h2hpill\");\nconst constructorsPill = document.getElementById(\"constructorspill\");\nconst predictPill = document.getElementById(\"predictpill\");\nconst editorPill = document.getElementById(\"editorPill\");\nconst gamePill = document.getElementById(\"gamePill\");\nconst driverTransferDiv = document.getElementById(\"driver_transfers\");\nconst editStatsDiv = document.getElementById(\"edit_stats\");\nconst customCalendarDiv = document.getElementById(\"custom_calendar\");\nconst carPerformanceDiv = document.getElementById(\"car_performance\");\nconst viewDiv = document.getElementById(\"season_viewer\");\nconst h2hDiv = document.getElementById(\"head2head_viewer\");\nconst teamsDiv = document.getElementById(\"edit_teams\");\nconst predictDiv = document.getElementById(\"predict_results\");\nconst patchNotesBody = document.getElementById(\"patchNotesBody\");\nconst selectImageButton = document.getElementById('selectImage');\nconst scriptsArray = [predictDiv, h2hDiv, viewDiv, driverTransferDiv, editStatsDiv, customCalendarDiv, carPerformanceDiv, teamsDiv];\nconst dropDownMenu = document.getElementById(\"dropdownMenu\");\nconst notificationPanel = document.getElementById(\"notificationPanel\");\nconst logButton = document.getElementById(\"logFileButton\");\nconst status = document.querySelector(\".status-info\");\nconst updateInfo = document.querySelector(\".update-info\");\nconst noNotifications = [\"Custom Engines fetched\", \"Cars fetched\", \"Part values fetched\", \"Parts stats fetched\", \"24 Year\", \"Game Year\", \"Performance fetched\", \"Season performance fetched\", \"Config\", \"ERROR\", \"Montecarlo fetched\", \"TeamData Fetched\", \"Progress\", \"JIC\", \"Calendar fetched\", \"Contract fetched\", \"Staff Fetched\", \"Engines fetched\", \"Results fetched\", \"Year fetched\", \"Numbers fetched\", \"H2H fetched\", \"DriversH2H fetched\", \"H2HDriver fetched\", \"Retirement fetched\", \"Prediction Fetched\", \"Events to Predict Fetched\", \"Events to Predict Modal Fetched\"];\nlet difficulty_dict = {\n  \"-2\": \"Custom\",\n  0: \"default\",\n  1: \"reduced weight\",\n  2: \"extra-hard\",\n  3: \"brutal\",\n  4: \"unfair\",\n  5: \"insane\",\n  6: \"impossible\"\n};\nlet inverted_difficulty_dict = {\n  \"disabled\": -1,\n  \"default\": 0,\n  \"reduced weight\": 1,\n  \"extra-hard\": 2,\n  \"brutal\": 3,\n  \"unfair\": 4,\n  \"insane\": 5,\n  \"impossible\": 6\n};\nlet difcultyCustom = \"default\";\nlet conn = 0;\nlet game_version = 2023;\nlet custom_team = false;\nlet customIconPath = null;\nlet firstShow = false;\nlet configCopy;\nlet latestTag;\nlet isSaveSelected = 0;\nlet scriptSelected = 0;\nlet divBlocking = 1;\nlet versionNow;\nconst versionPanel = document.querySelector('.version-panel');\nconst parchModalTitle = document.getElementById(\"patchModalTitle\");\nconst repoOwner = 'IUrreta';\nconst repoName = 'DatabaseEditor';\nconst factory = new _backend_commandFactory__WEBPACK_IMPORTED_MODULE_10__.CommandFactory();\nconst socket = new WebSocket('ws://localhost:8765/');\n/**\r\n * When the socket is opened sends a connect message to the backend\r\n */\nsocket.onopen = () => {\n  //console.log('Conexión establecida.');\n  let data = {\n    command: \"connect\"\n  };\n  socket.send(JSON.stringify(data));\n};\n\n/**\r\n * get the patch notes from the actual version fro the github api\r\n */\nasync function getPatchNotes() {\n  try {\n    if (versionNow.slice(-3) !== \"dev\") {\n      let response = await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/releases/tags/${versionNow}`);\n      let data = await response.json();\n      let changes = data.body;\n      let changesHTML = (0,marked__WEBPACK_IMPORTED_MODULE_0__.marked)(changes);\n      patchNotesBody.innerHTML = changesHTML;\n      let h1Elements = patchNotesBody.querySelectorAll(\"h1\");\n      h1Elements.forEach(function (h1Element) {\n        let h4Element = document.createElement(\"h4\");\n        h4Element.textContent = h1Element.textContent;\n        h4Element.classList.add(\"bold-font\");\n        patchNotesBody.replaceChild(h4Element, h1Element);\n      });\n      let h2Elements = patchNotesBody.querySelectorAll(\"h2\");\n      h2Elements.forEach(function (h1Element) {\n        let h4Element = document.createElement(\"h4\");\n        h4Element.textContent = h1Element.textContent;\n        h4Element.classList.add(\"bold-font\");\n        patchNotesBody.replaceChild(h4Element, h1Element);\n      });\n    }\n  } catch {\n    console.log(\"Couldn't find patch notes\");\n  }\n}\n\n/**\r\n * Places and manages the notifications that appear in the tool\r\n * @param {string} noti message of the notification\r\n * @param {bool} error if the notification is an error or not\r\n */\nfunction update_notifications(noti, code) {\n  let newNoti;\n  newNoti = document.createElement('div');\n  newNoti.className = 'notification';\n  newNoti.textContent = noti;\n  let toast = createToast(noti, code);\n  setTimeout(function () {\n    toast.classList.remove(\"myShow\");\n  }, 300);\n  notificationPanel.appendChild(toast);\n  if (code !== \"error\") {\n    setTimeout(function () {\n      toast.classList.add(\"hide\");\n      setTimeout(function () {\n        notificationPanel.removeChild(toast);\n      }, 280);\n    }, 4000);\n  }\n}\n\n/**\r\n * Creates the toast with the message and the error status\r\n * @param {string} msg string with the notification message\r\n * @param {boolean} err if it's an error or not\r\n * @returns \r\n */\nfunction createToast(msg, cod) {\n  let toastFull = document.createElement('div');\n  let toastIcon = document.createElement('div');\n  let toastBodyDiv = document.createElement('div');\n  let generalDiv = document.createElement('div');\n  let icon = document.createElement('i');\n  let cross = document.createElement('i');\n  generalDiv.classList.add('d-flex', \"align-items-center\");\n  // Asignar clases y atributos\n  toastFull.classList.add('toast', \"d-flex\", \"myShow\", \"d-block\", \"custom-toast\");\n  toastFull.style.flexDirection = \"column\";\n  toastFull.setAttribute('role', 'alert');\n  toastFull.setAttribute('aria-live', 'assertive');\n  toastFull.setAttribute('aria-atomic', 'true');\n  toastIcon.classList.add(\"toast-icon\");\n  if (cod === \"ok\") {\n    icon.className = \"bi bi-check-circle\";\n    toastIcon.classList.add(\"success\");\n  } else if (cod === \"error\" || cod === \"lighterror\") {\n    icon.className = \"bi bi-x-circle\";\n    toastIcon.classList.add(\"error\");\n  } else if (cod === \"monaco\") {\n    icon.className = \"bi bi-heartbreak\";\n    toastIcon.classList.add(\"error\");\n  }\n  toastIcon.appendChild(icon);\n  toastBodyDiv.classList.add('d-flex', 'toast-body', \"custom-toast-body\");\n  toastBodyDiv.textContent = msg;\n  toastBodyDiv.style.opacity = \"1\";\n  toastBodyDiv.style.color = \"white\";\n  toastBodyDiv.style.zIndex = \"6\";\n  generalDiv.appendChild(toastIcon);\n  generalDiv.appendChild(toastBodyDiv);\n  toastFull.appendChild(generalDiv);\n  toastFull.appendChild(cross);\n  cross.className = \"bi bi-x custom-toast-cross\";\n  cross.addEventListener(\"click\", function () {\n    toastFull.classList.add(\"hide\");\n    setTimeout(function () {\n      notificationPanel.removeChild(toastFull);\n    }, 280);\n  });\n  return toastFull;\n}\nfunction editModeHandler() {\n  let stats = \"\";\n  document.querySelectorAll(\".elegible\").forEach(function (elem) {\n    stats += elem.value + \" \";\n  });\n  stats = stats.slice(0, -1);\n  let id;\n  if (document.querySelector(\".clicked\").dataset.driverid) {\n    id = document.querySelector(\".clicked\").dataset.driverid;\n  }\n  let driverName = (0,_stats__WEBPACK_IMPORTED_MODULE_8__.getName)(document.querySelector(\".clicked .name-div-edit-stats\"));\n  document.querySelector(\".clicked\").dataset.stats = stats;\n  let globalMentality = 2;\n  let mentality = -1;\n  if (document.querySelector(\".clicked\").dataset.mentality0) {\n    mentality = \"\";\n    document.querySelectorAll(\".mentality-level-indicator\").forEach(function (elem, index) {\n      mentality += elem.dataset.value + \" \";\n      document.querySelector(\".clicked\").dataset[\"mentality\" + index] = elem.dataset.value;\n      globalMentality += parseInt(elem.dataset.value);\n    });\n    globalMentality = Math.floor(globalMentality / 3);\n  }\n  document.querySelector(\".clicked\").dataset.globalMentality = globalMentality;\n  let new_ovr = (0,_stats__WEBPACK_IMPORTED_MODULE_8__.calculateOverall)(stats, _stats__WEBPACK_IMPORTED_MODULE_8__.typeOverall, _config__WEBPACK_IMPORTED_MODULE_3__.mentality_to_global_menatality[globalMentality]);\n  document.querySelector(\".clicked\").childNodes[1].childNodes[0].textContent = \"\";\n  if (new_ovr[1] !== new_ovr[0]) {\n    document.querySelector(\".clicked\").childNodes[1].childNodes[0].textContent = new_ovr[1];\n  }\n  document.querySelector(\".clicked\").childNodes[1].childNodes[1].textContent = new_ovr[0];\n  if (globalMentality < 2) {\n    document.querySelector(\".clicked\").childNodes[1].childNodes[0].className = \"mentality-small-ovr-positive\";\n  } else if (globalMentality > 2) {\n    document.querySelector(\".clicked\").childNodes[1].childNodes[0].className = \"mentality-small-ovr-negative\";\n  }\n  let inputArray = document.querySelectorAll(\".elegible\");\n  inputArray.forEach(function (input, index) {\n    (0,_stats__WEBPACK_IMPORTED_MODULE_8__.manage_mentality_modifiers)(input, _config__WEBPACK_IMPORTED_MODULE_3__.mentality_to_global_menatality[globalMentality]);\n  });\n  let diff = parseInt(new_ovr[1]) - parseInt(new_ovr[0]);\n  let mentalitydiff = document.querySelector(\".mentality-change-ovr\");\n  if (diff > 0) {\n    mentalitydiff.textContent = \"+\" + diff;\n    mentalitydiff.className = \"mentality-change-ovr positive\";\n  } else if (diff < 0) {\n    mentalitydiff.textContent = diff;\n    mentalitydiff.className = \"mentality-change-ovr negative\";\n  } else {\n    mentalitydiff.textContent = \"\";\n    mentalitydiff.className = \"mentality-change-ovr\";\n  }\n  let retirement = document.querySelector(\".actual-retirement\").textContent.split(\" \")[1];\n  let age = document.querySelector(\".actual-age\").textContent.split(\" \")[1];\n  document.querySelector(\".clicked\").dataset.retirement = retirement;\n  let ageGap = parseInt(document.querySelector(\".clicked\").dataset.age - age);\n  document.querySelector(\".clicked\").dataset.age = age;\n  let newName = document.querySelector(\"#driverStatsTitle\").value;\n  if (newName === document.querySelector(\".clicked\").dataset.name) {\n    newName = \"-1\";\n  } else {\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.update_name)(id, newName);\n  }\n  let newCode = document.querySelector(\"#driverCode\").value;\n  if (newCode === document.querySelector(\".clicked\").dataset.code) {\n    newCode = \"-1\";\n  } else {\n    document.querySelector(\".clicked\").dataset.driverCode = newCode;\n  }\n  let driverNum = document.querySelector(\"#numberButton .front-gradient\").textContent;\n  let wants1, superLicense, isRetired;\n  document.querySelector(\".clicked\").dataset.number = driverNum;\n  if (document.querySelector(\"#driverNumber1\").checked) {\n    wants1 = 1;\n    document.querySelector(\".clicked\").dataset.numWC = 1;\n  } else {\n    wants1 = 0;\n    document.querySelector(\".clicked\").dataset.numWC = 0;\n  }\n  if (document.querySelector(\"#retiredInput\").checked) {\n    isRetired = 1;\n    document.querySelector(\".clicked\").dataset.isRetired = 1;\n  } else {\n    isRetired = 0;\n    document.querySelector(\".clicked\").dataset.isRetired = 0;\n  }\n  document.querySelector(\".clicked\").dataset.numWC = wants1;\n  if (document.getElementById(\"superLicense\").checked) {\n    superLicense = 1;\n    document.querySelector(\".clicked\").dataset.superLicense = 1;\n  } else {\n    superLicense = 0;\n    document.querySelector(\".clicked\").dataset.superLicense = 0;\n  }\n  let marketability = document.getElementById(\"marketabilityInput\").value;\n  let dataStats = {\n    driverID: id,\n    driver: driverName,\n    statsArray: stats,\n    typeStaff: _stats__WEBPACK_IMPORTED_MODULE_8__.typeEdit,\n    retirement: retirement,\n    age: ageGap,\n    isRetired: isRetired,\n    driverNum: driverNum,\n    wants1: wants1,\n    mentality: mentality,\n    superLicense: superLicense,\n    marketability: marketability,\n    newName: newName,\n    newCode: newCode\n  };\n  const message = {\n    command: 'editStats',\n    data: dataStats\n  };\n  const command = factory.createCommand(message);\n  command.execute();\n}\nfunction calendarModeHandler() {\n  let dataCodesString = '';\n  document.querySelectorAll(\".race-calendar\").forEach(race => {\n    dataCodesString += race.dataset.trackid.toString() + race.dataset.rainP.toString() + race.dataset.rainQ.toString() + race.dataset.rainR.toString() + race.dataset.type.toString() + race.dataset.state.toString() + ' ';\n  });\n  dataCodesString = dataCodesString.trim();\n  let dataCalendar = {\n    command: \"calendar\",\n    calendarCodes: dataCodesString\n  };\n  socket.send(JSON.stringify(dataCalendar));\n}\nfunction teamsModeHandler() {\n  let seasonObjData = document.querySelector(\"#seasonObjectiveInput\").value;\n  let longTermData = _teams__WEBPACK_IMPORTED_MODULE_1__.longTermObj;\n  let longTermYearData = document.querySelector(\"#longTermInput\").value;\n  let teamBudgetData = document.querySelector(\"#teamBudgetInput\").value.replace(/[$,]/g, \"\");\n  let costCapTransactionData = _teams__WEBPACK_IMPORTED_MODULE_1__.originalCostCap - document.querySelector(\"#costCapInput\").value.replace(/[$,]/g, \"\");\n  let confidenceData = document.querySelector(\"#confidenceInput\").value;\n  let facilitiesData = (0,_teams__WEBPACK_IMPORTED_MODULE_1__.gather_team_data)();\n  let pitCrew = (0,_teams__WEBPACK_IMPORTED_MODULE_1__.gather_pit_crew)();\n  let engine = document.querySelector(\"#engineButton\").dataset.value;\n  let data = {\n    teamID: _teams__WEBPACK_IMPORTED_MODULE_1__.teamCod,\n    facilities: facilitiesData,\n    seasonObj: seasonObjData,\n    longTermObj: longTermData,\n    longTermYear: longTermYearData,\n    teamBudget: teamBudgetData,\n    costCapEdit: costCapTransactionData,\n    confidence: confidenceData,\n    pitCrew: pitCrew,\n    engine: engine,\n    teamName: _config__WEBPACK_IMPORTED_MODULE_3__.default_dict[_teams__WEBPACK_IMPORTED_MODULE_1__.teamCod]\n  };\n  const message = {\n    command: 'editTeam',\n    data: data\n  };\n  const command = factory.createCommand(message);\n  command.execute();\n}\nfunction performanceModeHandler() {\n  let data;\n  if (_performance__WEBPACK_IMPORTED_MODULE_6__.teamsEngine === \"teams\") {\n    let parts = {};\n    let n_parts_designs = {};\n    let loadouts = {};\n    document.querySelectorAll(\".part-performance\").forEach(function (elem) {\n      let part = elem.dataset.part;\n      let partID = elem.dataset.partid;\n      let loadout1 = elem.dataset.loadout1;\n      let loadout2 = elem.dataset.loadout2;\n      let stats = {};\n      elem.querySelectorAll(\".part-performance-stat\").forEach(function (stat) {\n        if (stat.dataset.attribute !== \"-1\") {\n          let statNum = stat.dataset.attribute;\n          let value = stat.querySelector(\"input\").value.split(\" \")[0];\n          stats[statNum] = value;\n        }\n      });\n      stats[\"designEditing\"] = elem.querySelector(\".part-subtitle\").dataset.editing;\n      parts[part] = stats;\n      loadouts[partID] = [loadout1, loadout2];\n    });\n    document.querySelectorAll(\".one-part\").forEach(function (elem) {\n      let designID = elem.querySelector(\".one-part-name\").dataset.designId;\n      let number = elem.querySelector(\".n-parts\").innerText.split(\"x\")[1];\n      n_parts_designs[designID] = number;\n    });\n    data = {\n      teamID: _performance__WEBPACK_IMPORTED_MODULE_6__.teamSelected,\n      parts: parts,\n      n_parts_designs: n_parts_designs,\n      loadouts: loadouts,\n      teamName: document.querySelector(\".selected\").dataset.teamname\n    };\n    const message = {\n      command: 'editPerformance',\n      data: data\n    };\n    const command = factory.createCommand(message);\n    command.execute();\n  } else if (_performance__WEBPACK_IMPORTED_MODULE_6__.teamsEngine === \"engines\") {\n    let engineData = gather_engines_data();\n    data = {\n      command: \"editEngine\",\n      engines: engineData\n    };\n  }\n}\nfunction first_show_animation() {\n  let button = document.querySelector(\".save-button\");\n  if (!firstShow) {\n    firstShow = true;\n    button.classList.add(\"first-show\");\n    setTimeout(function () {\n      button.classList.remove('first-show');\n    }, 3000);\n  }\n}\nfunction manageSaveButton(show, mode) {\n  let button = document.querySelector(\".save-button\");\n  button.removeEventListener(\"click\", editModeHandler);\n  button.removeEventListener(\"click\", calendarModeHandler);\n  button.removeEventListener(\"click\", teamsModeHandler);\n  button.removeEventListener(\"click\", performanceModeHandler);\n  if (!show) {\n    button.classList.add(\"d-none\");\n  } else {\n    button.classList.remove(\"d-none\");\n    first_show_animation();\n  }\n  if (mode === \"stats\") {\n    button.addEventListener(\"click\", editModeHandler);\n  } else if (mode === \"calendar\") {\n    button.addEventListener(\"click\", calendarModeHandler);\n  } else if (mode === \"teams\") {\n    button.addEventListener(\"click\", teamsModeHandler);\n  } else if (mode === \"performance\") {\n    button.addEventListener(\"click\", performanceModeHandler);\n  }\n}\nfunction updateFront(data) {\n  console.log(\"UPDATING FRONT\");\n  console.log(data);\n  let responseTyppe = data.responseMessage;\n  let message = data.content;\n  console.log(message);\n  let handler = messageHandlers[responseTyppe];\n  if (handler) {\n    handler(message);\n  }\n}\nconst messageHandlers = {\n  \"ERROR\": message => {\n    update_notifications(message[1], \"error\");\n  },\n  \"Save loaded succesfully\": message => {\n    isSaveSelected = 1;\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.remove_drivers)();\n    (0,_stats__WEBPACK_IMPORTED_MODULE_8__.removeStatsDrivers)();\n    (0,_stats__WEBPACK_IMPORTED_MODULE_8__.listenersStaffGroups)();\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.place_drivers)(message);\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.sortList)(\"free-drivers\");\n    (0,_stats__WEBPACK_IMPORTED_MODULE_8__.place_drivers_editStats)(message);\n  },\n  \"Staff fetched\": message => {\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.place_staff)(message);\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.sortList)(\"free-staff\");\n    (0,_stats__WEBPACK_IMPORTED_MODULE_8__.place_staff_editStats)(message);\n  },\n  \"Calendar fetched\": message => {\n    (0,_calendar__WEBPACK_IMPORTED_MODULE_5__.load_calendar)(message);\n  },\n  \"Engines fetched\": message => {\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.manage_engineStats)(message[0]);\n    update_engine_allocations(message);\n  },\n  \"Contract fetched\": message => {\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.manage_modal)(message);\n  },\n  \"Year fetched\": message => {\n    (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.generateYearsMenu)(message);\n  },\n  \"Numbers fetched\": message => {\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.loadNumbers)(message);\n  },\n  \"H2H fetched\": message => {\n    (0,_head2head__WEBPACK_IMPORTED_MODULE_9__.sprintsListeners)();\n    (0,_head2head__WEBPACK_IMPORTED_MODULE_9__.racePaceListener)();\n    (0,_head2head__WEBPACK_IMPORTED_MODULE_9__.qualiPaceListener)();\n    (0,_head2head__WEBPACK_IMPORTED_MODULE_9__.manage_h2h_bars)(message);\n  },\n  \"DriversH2H fetched\": message => {\n    (0,_head2head__WEBPACK_IMPORTED_MODULE_9__.load_drivers_h2h)(message);\n  },\n  \"H2HDriver fetched\": message => {\n    (0,_head2head__WEBPACK_IMPORTED_MODULE_9__.load_labels_initialize_graphs)(message);\n  },\n  \"Results fetched\": message => {\n    (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.new_drivers_table)(message[0]);\n    (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.new_load_drivers_table)(message.slice(1));\n    (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.new_teams_table)(message[0]);\n    (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.new_load_teams_table)(message.slice(1));\n  },\n  \"TeamData fetched\": message => {\n    (0,_teams__WEBPACK_IMPORTED_MODULE_1__.fillLevels)(message);\n  },\n  \"Events to Predict Fetched\": message => {\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.placeRaces)(message.slice(1));\n  },\n  \"Events to Predict Modal Fetched\": message => {\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.placeRacesInModal)(message.slice(1));\n  },\n  \"Prediction Fetched\": message => {\n    predictDrivers(message.slice(1));\n  },\n  \"Montecarlo Fetched\": message => {\n    loadMontecarlo(message.slice(1));\n  },\n  \"Progress\": message => {\n    manageProgress(message.slice(1));\n  },\n  \"Config\": message => {\n    manage_config(message.slice(1));\n  },\n  \"24 Year\": message => {\n    console.log(message);\n    manage_config(message, true);\n  },\n  \"Performance fetched\": message => {\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_performance)(message[0]);\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_attributes)(message[1]);\n    //wait 100 ms\n    setTimeout(function () {\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.order_by)(\"overall\");\n    }, 100);\n  },\n  \"Season performance fetched\": message => {\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_performance_graph)(message);\n  },\n  \"Parts stats fetched\": message => {\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_parts_stats)(message[0]);\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_parts_list)(message[1]);\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.update_max_design)(message[2]);\n  },\n  \"Game Year\": message => {\n    manage_game_year(message);\n  },\n  \"Part values fetched\": message => {\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_one_part)(message);\n  },\n  \"Cars fetched\": message => {\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_cars)(message[0]);\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_car_attributes)(message[1]);\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.order_by)(\"overall\");\n  },\n  \"Custom Engines fetched\": message => {\n    (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_custom_engines)(message.slice(1));\n  }\n};\nfunction update_engine_allocations(message) {\n  let engine_map = {};\n  message[1].forEach(function (team) {\n    engine_map[team[0]] = team[1];\n  });\n  (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.setEngineAllocations)(engine_map);\n  for (let key in _seasonViewer__WEBPACK_IMPORTED_MODULE_2__.engine_names) {\n    if (key > 10) {\n      (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.deleteEngineName)(key);\n    }\n  }\n  message[0].forEach(function (engine) {\n    if (engine[0] > 10) {\n      (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.addEngineName)(engine[0], engine[2]);\n    }\n  });\n}\n\n/**\r\n * Handles the receiving end from the messages sent from backend\r\n * @param {string} event the message tha tcomes fro the backend\r\n */\nsocket.onmessage = event => {\n  let message = JSON.parse(event.data);\n  console.log(message); //DEBUG\n  let handler = messageHandlers[message[0]];\n  if (handler) {\n    handler(message);\n  }\n  if (!noNotifications.includes(message[0])) {\n    update_notifications(message[0], \"ok\");\n  }\n};\n\n/**\r\n * Opens the log file\r\n */\nlogButton.addEventListener(\"click\", function () {\n  window.location.href = '../log.txt';\n});\nfunction resizeWindowToHeight(mode) {\n  if (mode === \"11teams\") {\n    document.querySelectorAll(\".main-resizable\").forEach(function (elem) {\n      elem.style.height = \"720.5px\";\n      if (elem.id === \"enginesPerformance\") {\n        elem.style.maxHeight = \"720px\";\n      }\n    });\n    document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n      elem.style.height = \"672px\";\n    });\n    document.querySelectorAll(\".parts-list\").forEach(function (elem) {\n      elem.classList.remove(\"noCustom\");\n    });\n    document.getElementById(\"free-drivers\").style.height = \"672px\";\n    document.getElementById(\"free-staff\").style.height = \"672px\";\n    document.getElementById(\"raceMenu\").style.height = \"686px\";\n  } else if (mode === \"10teams\") {\n    document.querySelectorAll(\".main-resizable\").forEach(function (elem) {\n      elem.style.height = \"660px\";\n      if (elem.id === \"enginesPerformance\") {\n        elem.style.maxHeight = \"660px\";\n      }\n    });\n    document.querySelectorAll(\".parts-list\").forEach(function (elem) {\n      elem.classList.add(\"noCustom\");\n    });\n    document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n      elem.style.height = \"612px\";\n    });\n    document.getElementById(\"free-drivers\").style.height = \"612px\";\n    document.getElementById(\"free-staff\").style.height = \"612px\";\n    document.getElementById(\"raceMenu\").style.height = \"660px\";\n  }\n}\nfunction manage_game_year(info) {\n  let year = info[0];\n  if (year === \"24\") {\n    document.getElementById(\"year23\").classList.remove(\"activated\");\n    document.getElementById(\"year24\").classList.add(\"activated\");\n    document.getElementById(\"drs24\").classList.remove(\"d-none\");\n    document.getElementById(\"drs24\").dataset.attribute = \"3\";\n    game_version = 2024;\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.setMaxRaces)(24);\n    manage_custom_team(info);\n    document.querySelectorAll(\".brake-cooling-replace\").forEach(function (elem) {\n      elem.textContent = \"Tyre preservation\";\n    });\n    document.querySelectorAll(\".engine24\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n    document.querySelector(\".only-mentality\").classList.remove(\"d-none\");\n  } else if (year === \"23\") {\n    resizeWindowToHeight(\"10teams\");\n    document.getElementById(\"year24\").classList.remove(\"activated\");\n    document.getElementById(\"year23\").classList.add(\"activated\");\n    document.getElementById(\"drs24\").classList.add(\"d-none\");\n    document.getElementById(\"drs24\").dataset.attribute = \"-1\";\n    if (\"32\" in _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict) {\n      delete _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[32];\n    }\n    game_version = 2023;\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.setMidGrid)(10);\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.setMaxRaces)(23);\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.setRelativeGrid)(5);\n    manage_custom_team([null, null]);\n    document.querySelectorAll(\".brake-cooling-replace\").forEach(function (elem) {\n      elem.textContent = \"Brake cooling\";\n    });\n    document.querySelectorAll(\".engine24\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    document.querySelector(\".only-mentality\").classList.add(\"d-none\");\n  }\n  replace_modal_teams(game_version);\n}\nfunction manage_custom_team(nameColor) {\n  console.log(\"NAME COLOR: \", nameColor);\n  if (nameColor[1] !== null) {\n    resizeWindowToHeight(\"11teams\");\n    custom_team = true;\n    _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[32] = nameColor[1];\n    _config__WEBPACK_IMPORTED_MODULE_3__.abreviations_dict[32] = nameColor[1].slice(0, 3).toUpperCase();\n    document.querySelectorAll(\".ct-teamname\").forEach(function (elem) {\n      elem.dataset.teamshow = nameColor[1];\n    });\n    document.getElementById(\"customTeamTransfers\").classList.remove(\"d-none\");\n    document.getElementById(\"customTeamPerformance\").classList.remove(\"d-none\");\n    document.getElementById(\"customTeamDropdown\").classList.remove(\"d-none\");\n    document.getElementById(\"customTeamComparison\").classList.remove(\"d-none\");\n    document.getElementById(\"customTeamContract\").classList.remove(\"d-none\");\n    document.getElementById(\"customizeTeam\").classList.remove(\"d-none\");\n    document.querySelectorAll(\".ct-replace\").forEach(function (elem) {\n      elem.textContent = nameColor[1].toUpperCase();\n    });\n    document.querySelectorAll(\".custom-car-performance\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    replace_custom_team_color(nameColor[2], nameColor[3]);\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.setMidGrid)(11);\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.setRelativeGrid)(4.54);\n  } else {\n    resizeWindowToHeight(\"10teams\");\n    custom_team = false;\n    document.getElementById(\"customTeamTransfers\").classList.add(\"d-none\");\n    document.getElementById(\"customTeamPerformance\").classList.add(\"d-none\");\n    document.getElementById(\"customTeamDropdown\").classList.add(\"d-none\");\n    document.getElementById(\"customTeamComparison\").classList.add(\"d-none\");\n    document.getElementById(\"customTeamContract\").classList.add(\"d-none\");\n    document.getElementById(\"customizeTeam\").classList.add(\"d-none\");\n    document.querySelectorAll(\".custom-car-performance\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.setMidGrid)(10);\n    (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.setRelativeGrid)(5);\n    if (\"32\" in _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict) {\n      delete _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[32];\n    }\n  }\n}\nfunction replace_custom_team_color(primary, secondary) {\n  let root = document.documentElement;\n  root.style.setProperty('--custom-team-primary', primary);\n  root.style.setProperty('--custom-team-secondary', secondary);\n  root.style.setProperty('--custom-team-primary-transparent', primary + \"30\");\n  root.style.setProperty('--custom-team-secondary-transparent', secondary + \"30\");\n  _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"320\"] = primary;\n  _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"321\"] = secondary;\n  document.getElementById(\"primarySelector\").value = primary;\n  document.getElementById(\"secondarySelector\").value = secondary;\n  document.getElementById(\"primaryReader\").value = primary.toUpperCase();\n  document.getElementById(\"secondaryReader\").value = secondary.toUpperCase();\n}\nselectImageButton.addEventListener('click', () => {\n  fileInput.click();\n});\n\n// Función para manejar la selección de archivo\nfileInput.addEventListener('change', event => {\n  let file = event.target.files[0];\n  if (file) {\n    customIconPath = `../assets/custom/${file.name}`;\n  }\n  document.querySelector(\".logo-preview\").src = customIconPath;\n});\nfunction replace_custom_team_logo(path) {\n  _config__WEBPACK_IMPORTED_MODULE_3__.logos_disc[32] = path;\n  document.querySelectorAll(\".custom-replace\").forEach(function (elem) {\n    elem.src = path;\n  });\n  document.querySelector(\".logo-preview\").src = path;\n  document.getElementById(\"selectImage\").innerText = path.split(\"/\").pop();\n}\nfunction ajustScrollWrapper() {\n  var windowHeight = window.innerHeight - 80;\n  document.querySelector('.scroll-wrapper').style.height = windowHeight + 'px';\n}\nwindow.addEventListener('resize', ajustScrollWrapper);\nwindow.addEventListener('load', ajustScrollWrapper);\ndocument.querySelector(\".gear-container\").addEventListener(\"click\", function () {\n  let configDetailModal = new bootstrap.Modal(document.getElementById('configDetailModal'), {\n    keyboard: false\n  });\n  configDetailModal.show();\n});\nfunction manage_config(info, year_config = false) {\n  document.querySelector(\".bi-gear\").classList.remove(\"hidden\");\n  configCopy = info;\n  manage_config_content(info, year_config);\n}\nfunction replace_all_teams(info) {\n  let teams = info[\"teams\"];\n  alphaTauriReplace(teams[\"alphatauri\"]);\n  alpineReplace(teams[\"alpine\"]);\n  alfaReplace(teams[\"alfa\"]);\n  (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.update_logo)(\"alpine\", logos_configs[teams[\"alpine\"]], teams[\"alpine\"]);\n  (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.update_logo)(\"alfa\", logos_configs[teams[\"alfa\"]], teams[\"alfa\"]);\n  (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.update_logo)(\"alphatauri\", logos_configs[teams[\"alphatauri\"]], teams[\"alphatauri\"]);\n}\nfunction manage_config_content(info, year_config = false) {\n  replace_all_teams(info);\n  if (!year_config) {\n    if (info[\"icon\"]) {\n      replace_custom_team_logo(info[\"icon\"]);\n      customIconPath = info[\"icon\"];\n    }\n    if (info[\"primaryColor\"]) {\n      replace_custom_team_color(info[\"primaryColor\"], info[\"secondaryColor\"]);\n    }\n    if (info[\"mentalityFrozen\"] === 1) {\n      document.getElementById(\"freezeMentalityToggle\").checked = true;\n    } else {\n      document.getElementById(\"freezeMentalityToggle\").checked = false;\n    }\n    if (info[\"refurbish\"] === 1) {\n      document.getElementById(\"refurbishingToggle\").checked = true;\n    } else {\n      document.getElementById(\"refurbishingToggle\").checked = false;\n    }\n    update_mentality_span(info[\"mentalityFrozen\"]);\n    let difficultySlider = document.getElementById(\"difficultySlider\");\n    difficultySlider.value = info[\"difficulty\"];\n    update_difficulty_span(info[\"difficulty\"]);\n    if (info[\"difficulty\"] === -2) {\n      //custom difficulty\n      load_difficulty_warnings(info[\"triggerList\"]);\n    } else {\n      manage_difficulty_warnings(difficulty_dict[parseInt(info[\"difficulty\"])]);\n    }\n    update_refurbish_span(info[\"refurbish\"]);\n  }\n}\ndocument.querySelectorAll(\".color-picker\").forEach(function (elem) {\n  let reader = elem.parentNode.querySelector(\".color-reader\");\n  elem.addEventListener(\"input\", function () {\n    reader.value = elem.value.toUpperCase();\n  });\n  reader.value = elem.value.toUpperCase();\n});\ndocument.querySelectorAll(\".color-reader\").forEach(function (elem) {\n  elem.addEventListener(\"input\", function () {\n    let picker = elem.parentNode.querySelector(\".color-picker\");\n    picker.value = elem.value.toLowerCase();\n  });\n});\nfunction alphaTauriReplace(info) {\n  document.querySelector(\"#alphaTauriReplaceButton\").querySelector(\"button\").textContent = names_configs[info];\n  document.querySelector(\"#alphaTauriReplaceButton\").querySelector(\"button\").dataset.value = info;\n  _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[8] = pretty_names[info];\n  _config__WEBPACK_IMPORTED_MODULE_3__.abreviations_dict[8] = abreviations_for_replacements[info];\n  document.querySelectorAll(\".at-teamname\").forEach(function (elem) {\n    elem.dataset.teamshow = pretty_names[info];\n  });\n  document.querySelectorAll(\".at-name\").forEach(function (elem) {\n    //if it has the class complete, put names_configs[info], else out VCARB\n    if (info === \"visarb\" && !elem.classList.contains(\"complete\")) {\n      elem.textContent = \"VCARB\";\n    } else {\n      elem.textContent = names_configs[info];\n    }\n  });\n  if (info !== \"alphatauri\") {\n    document.querySelectorAll(\".atlogo-replace\").forEach(function (elem) {\n      if (!elem.classList.contains(\"non-changable\")) {\n        elem.src = logos_configs[info];\n        elem.classList.remove(\"alphataurilogo\");\n        elem.classList.remove(\"toyotalogo\");\n        elem.classList.remove(\"hugologo\");\n        elem.classList.remove(\"visarblogo\");\n        elem.classList.remove(\"ferrarilogo\");\n        elem.classList.remove(\"brawnlogo\");\n        elem.classList.add(logos_classes_configs[info]);\n      }\n      if (elem.classList.contains(\"secondary\")) {\n        if (info !== \"toyota\") {\n          elem.src = elem.src.slice(0, -4) + \"2.png\";\n        }\n      }\n    });\n    let alphaVarName = \"--alphatauri-primary\";\n    let newVarName = \"--\" + info + \"-primary\";\n    change_css_variables(alphaVarName, newVarName);\n    let value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"80\"] = value;\n    alphaVarName = \"--alphatauri-secondary\";\n    newVarName = \"--\" + info + \"-secondary\";\n    change_css_variables(alphaVarName, newVarName);\n    value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"81\"] = value;\n    alphaVarName = \"--alphatauri-primary-transparent\";\n    newVarName = \"--\" + info + \"-primary-transparent\";\n    change_css_variables(alphaVarName, newVarName);\n    alphaVarName = \"--alphatauri-secondary-transparent\";\n    newVarName = \"--\" + info + \"-secondary-transparent\";\n    change_css_variables(alphaVarName, newVarName);\n  } else {\n    document.querySelectorAll(\".atlogo-replace\").forEach(function (elem) {\n      if (!elem.classList.contains(\"non-changable\")) {\n        elem.src = logos_configs[info];\n        elem.classList.remove(\"alphataurilogo\");\n        elem.classList.remove(\"toyotalogo\");\n        elem.classList.remove(\"hugologo\");\n        elem.classList.remove(\"visarblogo\");\n        elem.classList.remove(\"ferrarilogo\");\n        elem.classList.remove(\"brawnlogo\");\n        elem.classList.add(\"alphataurilogo\");\n      }\n      if (elem.classList.contains(\"secondary\")) {\n        elem.src = elem.src.slice(0, -4) + \"2.png\";\n      }\n    });\n    let alphaVarName = \"--alphatauri-primary\";\n    let newVarName = \"--alphatauri-original\";\n    change_css_variables(alphaVarName, newVarName);\n    let value = getComputedStyle(document.documentElement).getPropertyValue(\"--alphatauri-original\").trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"80\"] = value;\n    alphaVarName = \"--alphatauri-secondary\";\n    newVarName = \"--alphatauri-secondary-original\";\n    change_css_variables(alphaVarName, newVarName);\n    value = getComputedStyle(document.documentElement).getPropertyValue(\"--alphatauri-secondary-original\").trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"81\"] = value;\n    alphaVarName = \"--alphatauri-primary-transparent\";\n    newVarName = \"--alphatauri-primary-transparent-original\";\n    change_css_variables(alphaVarName, newVarName);\n    alphaVarName = \"--alphatauri-secondary-transparent\";\n    newVarName = \"--alphatauri-secondary-transparent-original\";\n    change_css_variables(alphaVarName, newVarName);\n  }\n  document.querySelectorAll(\".team-menu-alphatauri-replace\").forEach(function (elem) {\n    let classes = elem.className.split(\" \");\n    classes.forEach(function (cl) {\n      if (cl.includes(\"changable\")) {\n        elem.classList.remove(cl);\n        elem.classList.add(\"changable-team-menu-\" + info);\n      }\n    });\n  });\n}\nfunction alpineReplace(info) {\n  document.querySelector(\"#alpineReplaceButton\").querySelector(\"button\").textContent = names_configs[info];\n  document.querySelector(\"#alpineReplaceButton\").querySelector(\"button\").dataset.value = info;\n  _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[5] = pretty_names[info];\n  _config__WEBPACK_IMPORTED_MODULE_3__.abreviations_dict[5] = abreviations_for_replacements[info];\n  document.querySelectorAll(\".al-teamname\").forEach(function (elem) {\n    elem.dataset.teamshow = pretty_names[info];\n  });\n  document.querySelectorAll(\".alpine-name\").forEach(function (elem) {\n    elem.textContent = names_configs[info];\n  });\n  if (info !== \"alpine\") {\n    document.querySelectorAll(\".alpinelogo-replace\").forEach(function (elem) {\n      if (!elem.classList.contains(\"non-changable\")) {\n        elem.src = logos_configs[info];\n        elem.classList.remove(\"alpinelogo\");\n        elem.classList.remove(\"ferrarilogo\");\n        elem.classList.remove(\"lotuslogo\");\n        elem.classList.add(logos_classes_configs[info]);\n      }\n      if (elem.classList.contains(\"secondary\")) {\n        elem.src = elem.src.slice(0, -4) + \"2.png\";\n      }\n    });\n    let alpineVarName = \"--alpine-primary\";\n    let newVarName = \"--\" + info + \"-primary\";\n    change_css_variables(alpineVarName, newVarName);\n    let value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"50\"] = value;\n    alpineVarName = \"--alpine-secondary\";\n    newVarName = \"--\" + info + \"-secondary\";\n    change_css_variables(alpineVarName, newVarName);\n    value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"51\"] = value;\n    alpineVarName = \"--alpine-primary-transparent\";\n    newVarName = \"--\" + info + \"-primary-transparent\";\n    change_css_variables(alpineVarName, newVarName);\n    alpineVarName = \"--alpine-secondary-transparent\";\n    newVarName = \"--\" + info + \"-secondary-transparent\";\n    change_css_variables(alpineVarName, newVarName);\n  } else {\n    document.querySelectorAll(\".alpinelogo-replace\").forEach(function (elem) {\n      if (!elem.classList.contains(\"non-changable\")) {\n        elem.src = logos_configs[info];\n        elem.classList.remove(\"alpinelogo\");\n        elem.classList.remove(\"ferrarilogo\");\n        elem.classList.remove(\"lotuslogo\");\n        elem.classList.add(\"alpinelogo\");\n      }\n      if (elem.classList.contains(\"secondary\")) {\n        elem.src = elem.src.slice(0, -4) + \"2.png\";\n      }\n    });\n    let alpineVarName = \"--alpine-primary\";\n    let newVarName = \"--alpine-original\";\n    change_css_variables(alpineVarName, newVarName);\n    let value = getComputedStyle(document.documentElement).getPropertyValue(\"--alpine-original\").trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"50\"] = value;\n    alpineVarName = \"--alpine-secondary\";\n    newVarName = \"--alpine-secondary-original\";\n    change_css_variables(alpineVarName, newVarName);\n    value = getComputedStyle(document.documentElement).getPropertyValue(\"--alpine-secondary-original\").trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"51\"] = value;\n    alpineVarName = \"--alpine-primary-transparent\";\n    newVarName = \"--alpine-primary-transparent-original\";\n    change_css_variables(alpineVarName, newVarName);\n    alpineVarName = \"--alpine-secondary-transparent\";\n    newVarName = \"--alpine-secondary-transparent-original\";\n    change_css_variables(alpineVarName, newVarName);\n  }\n  document.querySelectorAll(\".team-menu-alpine-replace\").forEach(function (elem) {\n    let classes = elem.className.split(\" \");\n    classes.forEach(function (cl) {\n      if (cl.includes(\"changable\")) {\n        elem.classList.remove(cl);\n        elem.classList.add(\"changable-team-menu-\" + info);\n      }\n    });\n  });\n}\nfunction alfaReplace(info) {\n  document.querySelector(\"#alfaReplaceButton\").querySelector(\"button\").textContent = names_configs[info];\n  document.querySelector(\"#alfaReplaceButton\").querySelector(\"button\").dataset.value = info;\n  _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[9] = pretty_names[info];\n  _config__WEBPACK_IMPORTED_MODULE_3__.abreviations_dict[9] = abreviations_for_replacements[info];\n  document.querySelectorAll(\".af-teamname\").forEach(function (elem) {\n    elem.dataset.teamshow = pretty_names[info];\n  });\n  document.querySelectorAll(\".alfa-name\").forEach(function (elem) {\n    elem.textContent = names_configs[info];\n  });\n  if (info !== \"alfa\") {\n    document.querySelectorAll(\".alfalogo-replace\").forEach(function (elem) {\n      if (!elem.classList.contains(\"non-changable\")) {\n        elem.src = logos_configs[info];\n        elem.classList.remove(\"alfaromeologo\");\n        elem.classList.remove(\"audilogo\");\n        elem.classList.remove(\"sauberlogo\");\n        elem.classList.add(logos_classes_configs[info]);\n      }\n    });\n    let alfaVarName = \"--alfa-primary\";\n    let newVarName = \"--\" + info + \"-primary\";\n    change_css_variables(alfaVarName, newVarName);\n    let value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"90\"] = value;\n    alfaVarName = \"--alfa-secondary\";\n    newVarName = \"--\" + info + \"-secondary\";\n    change_css_variables(alfaVarName, newVarName);\n    value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"91\"] = value;\n    alfaVarName = \"--alfa-primary-transparent\";\n    newVarName = \"--\" + info + \"-primary-transparent\";\n    change_css_variables(alfaVarName, newVarName);\n    alfaVarName = \"--alfa-secondary-transparent\";\n    newVarName = \"--\" + info + \"-secondary-transparent\";\n    change_css_variables(alfaVarName, newVarName);\n  } else {\n    document.querySelectorAll(\".alfalogo-replace\").forEach(function (elem) {\n      if (!elem.classList.contains(\"non-changable\")) {\n        elem.src = logos_configs[info];\n        elem.className = \"alfalogo-replace alfalogo\";\n      }\n    });\n    let alfaVarName = \"--alfa-primary\";\n    let newVarName = \"--alfa-original\";\n    change_css_variables(alfaVarName, newVarName);\n    let value = getComputedStyle(document.documentElement).getPropertyValue(\"--alfa-original\").trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"90\"] = value;\n    alfaVarName = \"--alfa-secondary\";\n    newVarName = \"--alfa-secondary-original\";\n    change_css_variables(alfaVarName, newVarName);\n    value = getComputedStyle(document.documentElement).getPropertyValue(\"--alfa-secondary-original\").trim();\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"91\"] = value;\n    alfaVarName = \"--alfa-primary-transparent\";\n    newVarName = \"--alfa-primary-transparent-original\";\n    change_css_variables(alfaVarName, newVarName);\n    alfaVarName = \"--alfa-secondary-transparent\";\n    newVarName = \"--alfa-secondary-transparent-original\";\n    change_css_variables(alfaVarName, newVarName);\n  }\n  document.querySelectorAll(\".team-menu-alfa-replace\").forEach(function (elem) {\n    let classes = elem.className.split(\" \");\n    classes.forEach(function (cl) {\n      if (cl.includes(\"changable\")) {\n        elem.classList.remove(cl);\n        elem.classList.add(\"changable-team-menu-\" + info);\n      }\n    });\n  });\n}\nfunction change_css_variables(oldVar, newVar) {\n  let root = document.documentElement;\n  let newVal = getComputedStyle(root).getPropertyValue(newVar).trim();\n  root.style.setProperty(oldVar, newVal);\n}\nfunction replace_modal_teams(version) {\n  if (version === 2024) {\n    document.getElementById(\"alphaModalLogo\").src = logos_configs[\"visarb\"];\n    document.getElementById(\"alphaModalLogo\").className = \"visarblogo non-changable\";\n    document.getElementById(\"alphaModalName\").textContent = pretty_names[\"visarb\"];\n    document.getElementById(\"alfaModalLogo\").src = logos_configs[\"stake\"];\n    document.getElementById(\"alfaModalName\").textContent = pretty_names[\"stake\"];\n  } else if (version === 2023) {\n    document.getElementById(\"alphaModalLogo\").src = logos_configs[\"alphatauri\"];\n    document.getElementById(\"alphaModalLogo\").className = \"alphataurilogo non-changable\";\n    document.getElementById(\"alphaModalName\").textContent = pretty_names[\"alphatauri\"];\n    document.getElementById(\"alfaModalLogo\").src = logos_configs[\"alfa\"];\n    document.getElementById(\"alfaModalName\").textContent = pretty_names[\"alfa\"];\n  }\n}\n\n//select all team-change-button\ndocument.querySelectorAll(\".team-change-button\").forEach(function (elem) {\n  elem.querySelectorAll(\"a\").forEach(function (a) {\n    a.addEventListener(\"click\", function () {\n      elem.querySelector(\"button\").textContent = a.textContent;\n      elem.querySelector(\"button\").dataset.value = a.dataset.value;\n    });\n  });\n});\ndocument.querySelector(\"#configDetailsButton\").addEventListener(\"click\", function () {\n  save = document.querySelector(\"#saveSelector\").textContent;\n  save = save.slice(0, -4);\n  alphatauri = document.querySelector(\"#alphaTauriReplaceButton\").querySelector(\"button\").dataset.value;\n  alpine = document.querySelector(\"#alpineReplaceButton\").querySelector(\"button\").dataset.value;\n  alfa = document.querySelector(\"#alfaReplaceButton\").querySelector(\"button\").dataset.value;\n  let mentalityFrozen = 0;\n  if (document.getElementById(\"freezeMentalityToggle\").checked) {\n    mentalityFrozen = 1;\n  }\n  let refurbish = 0;\n  if (document.getElementById(\"refurbishingToggle\").checked) {\n    refurbish = 1;\n  }\n  let difficulty = 0;\n  let difficultySlider = document.getElementById(\"difficultySlider\");\n  let difficultyValue = document.getElementById(\"difficultySpan\").textContent === \"Custom\" ? -2 : parseInt(difficultySlider.value);\n  let disabledList = {};\n  let triggerList = {};\n  document.querySelectorAll(\".dif-warning:not(.default)\").forEach(function (elem) {\n    let id = elem.id;\n    if (elem.classList.contains(\"disabled\") || elem.classList.contains(\"d-none\")) {\n      disabledList[id] = 1;\n    } else {\n      disabledList[id] = 0;\n    }\n    triggerList[id] = elem.classList && (elem.classList.contains(\"d-none\") || elem.classList.contains(\"disabled\")) ? -1 : inverted_difficulty_dict[elem.className.split(\" \")[1]];\n  });\n  let data = {\n    command: \"configUpdate\",\n    save: save,\n    alphatauri: alphatauri,\n    alpine: alpine,\n    alfa: alfa,\n    mentalityFrozen: mentalityFrozen,\n    difficulty: difficultyValue,\n    refurbish: refurbish,\n    disabled: disabledList,\n    triggerList: triggerList\n  };\n  if (customIconPath !== null) {\n    data[\"icon\"] = customIconPath;\n    replace_custom_team_logo(customIconPath);\n  }\n  if (custom_team) {\n    data[\"primaryColor\"] = document.getElementById(\"primarySelector\").value;\n    data[\"secondaryColor\"] = document.getElementById(\"secondarySelector\").value;\n    replace_custom_team_color(data[\"primaryColor\"], data[\"secondaryColor\"]);\n  }\n  socket.send(JSON.stringify(data));\n  info = {\n    teams: {\n      alphatauri: alphatauri,\n      alpine: alpine,\n      alfa: alfa\n    }\n  };\n  replace_all_teams(info);\n  reloadTables();\n});\ndocument.querySelector(\".bi-file-earmark-arrow-down\").addEventListener(\"click\", function () {\n  const db = (0,_backend_dbManager__WEBPACK_IMPORTED_MODULE_12__.getDatabase)();\n  const metadata = (0,_backend_dbManager__WEBPACK_IMPORTED_MODULE_12__.getMetadata)();\n  (0,_backend_UESaveHandler__WEBPACK_IMPORTED_MODULE_11__.repack)(db, metadata);\n});\n\n/**\r\n * checks if a save and a script have been selected to unlock the tool\r\n */\nfunction check_selected() {\n  if (scriptSelected === 1) {\n    document.getElementById(\"scriptSelected\").classList.add(\"completed\");\n  }\n  setTimeout(function () {\n    if (isSaveSelected == 1 && scriptSelected == 1 && divBlocking == 1) {\n      document.getElementById(\"blockDiv\").classList.add(\"disappear\");\n      divBlocking = 0;\n    }\n  }, 500);\n}\nh2hPill.addEventListener(\"click\", function () {\n  manageScripts(\"hide\", \"show\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\");\n  scriptSelected = 1;\n  check_selected();\n  manageSaveButton(false);\n});\nviewPill.addEventListener(\"click\", function () {\n  manageScripts(\"hide\", \"hide\", \"show\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\");\n  scriptSelected = 1;\n  check_selected();\n  manageSaveButton(false);\n});\ndriverTransferPill.addEventListener(\"click\", function () {\n  manageScripts(\"hide\", \"hide\", \"hide\", \"show\", \"hide\", \"hide\", \"hide\", \"hide\");\n  scriptSelected = 1;\n  check_selected();\n  manageSaveButton(false);\n});\neditStatsPill.addEventListener(\"click\", function () {\n  manageScripts(\"hide\", \"hide\", \"hide\", \"hide\", \"show\", \"hide\", \"hide\", \"hide\");\n  scriptSelected = 1;\n  check_selected();\n  manageSaveButton(true, \"stats\");\n});\nconstructorsPill.addEventListener(\"click\", function () {\n  manageScripts(\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"show\");\n  scriptSelected = 1;\n  check_selected();\n  manageSaveButton(true, \"teams\");\n});\nCalendarPill.addEventListener(\"click\", function () {\n  manageScripts(\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"show\", \"hide\", \"hide\");\n  scriptSelected = 1;\n  check_selected();\n  manageSaveButton(true, \"calendar\");\n});\ncarPill.addEventListener(\"click\", function () {\n  manageScripts(\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"show\", \"hide\");\n  scriptSelected = 1;\n  check_selected();\n  manageSaveButton(!_performance__WEBPACK_IMPORTED_MODULE_6__.viewingGraph, \"performance\");\n});\ngamePill.addEventListener(\"click\", function () {\n  document.querySelector(\"#editorChanges\").classList.add(\"d-none\");\n  document.querySelector(\"#gameChanges\").classList.remove(\"d-none\");\n});\neditorPill.addEventListener(\"click\", function () {\n  document.querySelector(\"#editorChanges\").classList.remove(\"d-none\");\n  document.querySelector(\"#gameChanges\").classList.add(\"d-none\");\n});\ndocument.getElementById(\"difficultySlider\").addEventListener(\"input\", function () {\n  let value = this.value;\n  update_difficulty_span(value);\n  manage_difficulty_warnings(difficulty_dict[parseInt(value)]);\n  difcultyCustom = \"default\";\n  document.getElementById(\"customGearButton\").classList.remove(\"custom\");\n});\nfunction update_difficulty_span(value) {\n  let span = document.querySelector(\"#difficultySpan\");\n  let difficulty = difficulty_dict[parseInt(value)];\n  if (difficulty === \"reduced weight\") {\n    span.className = \"option-state reduced-weight\";\n  } else if (difficulty === \"Custom\") {\n    span.className = \"option-state custom\";\n    document.getElementById(\"customGearButton\").classList.remove(\"custom\");\n    document.getElementById(\"customGearButton\").click();\n  } else {\n    span.className = \"option-state \" + difficulty;\n  }\n  span.textContent = difficulty.charAt(0).toUpperCase() + difficulty.slice(1);\n}\ndocument.getElementById(\"freezeMentalityToggle\").addEventListener(\"change\", function () {\n  let value = this.checked;\n  update_mentality_span(value);\n});\nfunction update_mentality_span(value) {\n  let span = document.querySelector(\"#mentalitySpan\");\n  if (value) {\n    span.className = \"option-state frozen\";\n    span.textContent = \"Frozen\";\n  } else {\n    span.className = \"option-state default\";\n    span.textContent = \"Unfrozen\";\n  }\n}\ndocument.getElementById(\"refurbishingToggle\").addEventListener(\"change\", function () {\n  let value = this.checked;\n  update_refurbish_span(value);\n});\nfunction update_refurbish_span(value) {\n  let span = document.querySelector(\"#refurbishSpan\");\n  if (value) {\n    span.className = \"option-state fixed\";\n    span.textContent = \"Fixed\";\n  } else {\n    span.className = \"option-state default\";\n    span.textContent = \"Default\";\n  }\n}\nfunction manage_difficulty_warnings(level) {\n  const elements = [\"defaultDif\", \"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\", \"factoryDif\", \"buildDif\"];\n  const selectedConfig = _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[level] || _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[\"default\"];\n  elements.forEach(id => {\n    document.getElementById(id).classList.add(\"d-none\");\n  });\n  selectedConfig.visible.forEach(id => {\n    document.getElementById(id).classList.remove(\"d-none\");\n  });\n  elements.forEach(id => {\n    if (selectedConfig[id]) {\n      const elementConfig = selectedConfig[id];\n      const element = document.getElementById(id);\n      element.className = elementConfig.className;\n      element.textContent = elementConfig.text;\n    }\n  });\n}\nfunction load_difficulty_warnings(triggerList) {\n  for (let id in triggerList) {\n    let warn = document.getElementById(id);\n    let difName = difficulty_dict[triggerList[id]];\n    if (triggerList[id] !== -1) {\n      warn.className = _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[difName][id].className;\n      warn.textContent = _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[difName][id].text;\n    } else {\n      warn.classList.add(\"disabled\");\n    }\n  }\n}\ndocument.getElementById(\"customGearButton\").addEventListener(\"click\", function () {\n  this.classList.toggle(\"custom\");\n  if (this.classList.contains(\"custom\")) {\n    difcultyCustom = \"custom\";\n    document.querySelector(\"#difficultySpan\").textContent = \"Custom\";\n    document.querySelector(\"#difficultySpan\").className = \"option-state custom\";\n    document.querySelector(\".custom-description\").textContent = \"cycle through its states\";\n    let warnigs = document.querySelectorAll(\".dif-warning\");\n    warnigs.forEach(function (elem) {\n      if (elem.id !== \"defaultDif\") {\n        for (let level in _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig) {\n          if (_config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[level].visible.includes(elem.id)) {\n            elem.className = _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[level][elem.id]?.className || \"dif-warning\";\n            elem.textContent = _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[level][elem.id]?.text || \"\";\n            break;\n          }\n        }\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  } else {\n    difcultyCustom = \"default\";\n    document.querySelector(\".custom-description\").textContent = \"remove/add it\";\n    actualDifficulty = document.getElementById(\"difficultySlider\").value;\n    manage_difficulty_warnings(difficulty_dict[parseInt(actualDifficulty)]);\n    update_difficulty_span(actualDifficulty);\n  }\n});\nfunction rotateDifficultyLevel(elementId) {\n  const levels = [\"extra-hard\", \"brutal\", \"unfair\", \"insane\", \"impossible\"];\n  const element = document.getElementById(elementId);\n\n  // Detectar si el elemento está en estado \"disabled\" actualmente\n  if (element.classList.contains(\"disabled\")) {\n    let nextConfig;\n    for (let level in _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig) {\n      if (_config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[level].visible.includes(elementId)) {\n        nextConfig = _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[level][elementId];\n        break;\n      }\n    }\n    if (nextConfig) {\n      element.className = nextConfig.className;\n      element.textContent = nextConfig.text;\n    }\n    return;\n  }\n  let currentLevelIndex = levels.findIndex(level => {\n    return _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[level][elementId] && element.classList.contains(_config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[level][elementId].className.split(\" \")[1]);\n  });\n  if (currentLevelIndex === levels.length - 1) {\n    element.className = \"dif-warning disabled\";\n    return;\n  }\n  let nextLevelIndex = (currentLevelIndex + 1) % levels.length;\n  let nextConfig = _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[levels[nextLevelIndex]][elementId];\n  while ((!nextConfig || nextConfig.className === element.className && nextConfig.text === element.textContent || !_config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[levels[nextLevelIndex]].visible.includes(elementId)) && nextLevelIndex !== currentLevelIndex) {\n    nextLevelIndex = (nextLevelIndex + 1) % levels.length;\n    nextConfig = _config__WEBPACK_IMPORTED_MODULE_3__.difficultyConfig[levels[nextLevelIndex]][elementId];\n  }\n  if (nextConfig) {\n    element.className = nextConfig.className;\n    element.textContent = nextConfig.text;\n  }\n}\ndocument.querySelectorAll(\".dif-warning:not(.default)\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    if (difcultyCustom === \"custom\") {\n      rotateDifficultyLevel(elem.id);\n    } else {\n      elem.classList.toggle(\"disabled\");\n    }\n  });\n});\n\n/**\r\n * Manages the stats of the divs associated with the pills\r\n * @param  {Array} divs array of state of the divs\r\n */\nfunction manageScripts(...divs) {\n  scriptsArray.forEach(function (div, index) {\n    if (divs[index] === \"show\") {\n      div.className = \"script-view\";\n    } else {\n      div.className = \"script-view d-none\";\n    }\n  });\n}\ndocument.querySelector(\"#cancelDetailsButton\").addEventListener(\"click\", function () {\n  manage_config_content(configCopy[0], false);\n});\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/renderer.js?");

/***/ }),

/***/ "./src/js/frontend/seasonViewer.js":
/*!*****************************************!*\
  !*** ./src/js/frontend/seasonViewer.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEngineName: () => (/* binding */ addEngineName),\n/* harmony export */   deleteEngineName: () => (/* binding */ deleteEngineName),\n/* harmony export */   engine_allocations: () => (/* binding */ engine_allocations),\n/* harmony export */   engine_names: () => (/* binding */ engine_names),\n/* harmony export */   generateYearsMenu: () => (/* binding */ generateYearsMenu),\n/* harmony export */   new_drivers_table: () => (/* binding */ new_drivers_table),\n/* harmony export */   new_load_drivers_table: () => (/* binding */ new_load_drivers_table),\n/* harmony export */   new_load_teams_table: () => (/* binding */ new_load_teams_table),\n/* harmony export */   new_teams_table: () => (/* binding */ new_teams_table),\n/* harmony export */   resetViewer: () => (/* binding */ resetViewer),\n/* harmony export */   resetYearButtons: () => (/* binding */ resetYearButtons),\n/* harmony export */   setEngineAllocations: () => (/* binding */ setEngineAllocations),\n/* harmony export */   update_logo: () => (/* binding */ update_logo)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _head2head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./head2head */ \"./src/js/frontend/head2head.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transfers */ \"./src/js/frontend/transfers.js\");\n\n\n\n\n\nlet seasonTable;\nlet teamsTable;\nlet races_ids = [];\nlet seasonResults;\nlet calendarData;\nlet pointsOrPos = \"points\";\nlet alphaReplace = \"alphatauri\";\nlet alpineReplace = \"alpine\";\nlet alfaReplace = \"alfa\";\nlet driverOrTeams = \"drivers\";\nlet isYearSelected = false;\nlet engine_allocations;\nlet engine_names = {\n  //this one is changed as the user adds engines, so it will stayhere\n  1: \"Ferrari\",\n  4: \"Rbpt\",\n  7: \"Mercedes\",\n  10: \"Renault\"\n};\nfunction addEngineName(id, name) {\n  engine_names[id] = name;\n}\nfunction deleteEngineName(id) {\n  delete engine_names[id];\n}\nfunction setEngineAllocations(allocations) {\n  engine_allocations = allocations;\n}\nfunction resetViewer() {\n  if (seasonTable) {\n    seasonTable.destroy();\n  }\n  pointsOrPos = \"points\";\n  if (teamsTable) {\n    teamsTable.destroy();\n  }\n}\nfunction resetYearButtons() {\n  document.getElementById(\"yearButton\").textContent = \"Year\";\n  isYearSelected = false;\n  manage_show_tables();\n  document.getElementById(\"yearButtonH2H\").textContent = \"Year\";\n  document.getElementById(\"yearPredictionButton\").textContent = \"Year\";\n  document.getElementById(\"yearPredictionModalButton\").textContent = \"Year\";\n}\n\n/**\r\n * Pills for the drivers and teams tables\r\n */\ndocument.getElementById(\"driverspill\").addEventListener(\"click\", function () {\n  driverOrTeams = \"drivers\";\n  manage_show_tables();\n});\ndocument.getElementById(\"teamspill\").addEventListener(\"click\", function () {\n  driverOrTeams = \"teams\";\n  manage_show_tables();\n});\nfunction manage_show_tables() {\n  if (isYearSelected) {\n    if (driverOrTeams === \"drivers\") {\n      document.querySelector(\".teams-table\").classList.add(\"d-none\");\n      document.querySelector(\".drivers-table\").classList.remove(\"d-none\");\n    } else {\n      document.querySelector(\".teams-table\").classList.remove(\"d-none\");\n      document.querySelector(\".drivers-table\").classList.add(\"d-none\");\n    }\n  } else {\n    document.querySelector(\".teams-table\").classList.add(\"d-none\");\n    document.querySelector(\".drivers-table\").classList.add(\"d-none\");\n  }\n}\ndocument.querySelectorAll(\"#tableTypeDropdown a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    pointsOrPos = elem.dataset.value;\n    change_points_pos_drivers();\n    change_points_pos_teams();\n    document.querySelector(\"#tableTypeButton\").textContent = elem.textContent;\n  });\n});\nfunction change_points_pos_drivers() {\n  let datazone = document.querySelector(\".drivers-table-data\");\n  let rows = datazone.querySelectorAll(\".drivers-table-row\");\n  rows.forEach(function (row, index) {\n    let cells = row.querySelectorAll(\".drivers-table-normal\");\n    cells.forEach(function (cell) {\n      let newCell = manageText(cell);\n      cell.innerText = newCell.innerText;\n    });\n  });\n}\nfunction change_points_pos_teams() {\n  let datazone = document.querySelector(\".teams-table-data\");\n  let rows = datazone.querySelectorAll(\".teams-table-row\");\n  rows.forEach(function (row, index) {\n    let cells = row.querySelectorAll(\".teams-table-normal\");\n    cells.forEach(function (cell) {\n      let newCell = manageTeamsText(cell);\n      cell.innerHTML = newCell.innerHTML;\n    });\n  });\n}\nfunction new_drivers_table(data) {\n  calendarData = data;\n  races_ids = [];\n  let header = document.querySelector(\".drivers-table-header\");\n  header.innerHTML = \"\";\n  let driverDiv = document.createElement(\"div\");\n  driverDiv.classList = \"drivers-table-driver bold-font\";\n  driverDiv.innerText = \"DRIVER\";\n  let PositionDiv = document.createElement(\"div\");\n  PositionDiv.classList = \"drivers-table-position bold-font\";\n  PositionDiv.innerText = \"#\";\n  header.appendChild(PositionDiv);\n  header.appendChild(driverDiv);\n  data.forEach(function (elem) {\n    races_ids.push(elem[0]);\n    let headerPos = document.createElement(\"div\");\n    headerPos.className = \"drivers-table-normal bold-font flag-header\";\n    let headerPosFlag = document.createElement(\"img\");\n    let race = _config__WEBPACK_IMPORTED_MODULE_0__.races_map[elem[1]];\n    let flag_src = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[race];\n    headerPosFlag.src = flag_src;\n    let headerPosDiv = document.createElement(\"div\");\n    headerPosDiv.classList.add(\"text-in-front\");\n    headerPosDiv.classList.add(\"bold-font\");\n    headerPosDiv.innerText = _config__WEBPACK_IMPORTED_MODULE_0__.races_names[elem[1]];\n    headerPos.appendChild(headerPosFlag);\n    headerPos.appendChild(headerPosDiv);\n    header.appendChild(headerPos);\n  });\n  let PointsDiv = document.createElement(\"div\");\n  PointsDiv.classList = \"drivers-table-points bold-font\";\n  PointsDiv.innerText = \"PTS\";\n  header.appendChild(PointsDiv);\n}\nfunction new_teams_table(data) {\n  calendarData = data;\n  races_ids = [];\n  let header = document.querySelector(\".teams-table-header\");\n  header.innerHTML = \"\";\n  let driverDiv = document.createElement(\"div\");\n  driverDiv.classList = \"teams-table-team bold-font\";\n  driverDiv.innerText = \"TEAM\";\n  let PositionDiv = document.createElement(\"div\");\n  PositionDiv.classList = \"teams-table-position bold-font\";\n  PositionDiv.innerText = \"#\";\n  header.appendChild(PositionDiv);\n  header.appendChild(driverDiv);\n  data.forEach(function (elem) {\n    races_ids.push(elem[0]);\n    let headerPos = document.createElement(\"div\");\n    headerPos.className = \"teams-table-normal bold-font flag-header\";\n    let headerPosFlag = document.createElement(\"img\");\n    let race = _config__WEBPACK_IMPORTED_MODULE_0__.races_map[elem[1]];\n    let flag_src = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[race];\n    headerPosFlag.src = flag_src;\n    let headerPosDiv = document.createElement(\"div\");\n    headerPosDiv.classList.add(\"text-in-front\");\n    headerPosDiv.classList.add(\"bold-font\");\n    headerPosDiv.innerText = _config__WEBPACK_IMPORTED_MODULE_0__.races_names[elem[1]];\n    headerPos.appendChild(headerPosFlag);\n    headerPos.appendChild(headerPosDiv);\n    header.appendChild(headerPos);\n  });\n  let PointsDiv = document.createElement(\"div\");\n  PointsDiv.classList = \"teams-table-points bold-font\";\n  PointsDiv.innerText = \"PTS\";\n  header.appendChild(PointsDiv);\n}\nfunction checkscroll() {\n  let datazone = document.querySelector(\".drivers-table-data\");\n  let pointscol = document.querySelector(\".drivers-table-header\").querySelector(\".drivers-table-points\");\n  if (datazone.scrollHeight > datazone.clientHeight) {\n    pointscol.style.width = \"84px\";\n  } else {\n    pointscol.style.width = \"80px\";\n  }\n}\nfunction new_color_drivers_table() {\n  let datazone = document.querySelector(\".drivers-table-data\");\n  let rows = datazone.querySelectorAll(\".drivers-table-row\");\n  rows.forEach(function (row, index) {\n    let cells = row.querySelectorAll(\".drivers-table-normal\");\n    cells.forEach(function (cell) {\n      if (cell.dataset.pos === \"1\") {\n        cell.classList.add(\"first\");\n      } else if (cell.dataset.pos === \"2\") {\n        cell.classList.add(\"second\");\n      } else if (cell.dataset.pos === \"3\") {\n        cell.classList.add(\"third\");\n      }\n      if (cell.dataset.fastlap === \"1\") {\n        cell.classList.add(\"fastest\");\n      }\n      if (cell.dataset.qualy === \"1\") {\n        cell.style.fontFamily = \"Formula1Bold\";\n      }\n    });\n  });\n}\nfunction manage_teams_table_logos() {\n  let logos = document.querySelectorAll(\".teams-table-logo-inner\");\n  logos.forEach(function (logo) {\n    if (logo.dataset.teamid === \"1\") {\n      logo.className = \"teams-table-logo-inner ferrari-team-table-logo\";\n    } else if (logo.dataset.teamid === \"2\") {\n      // logo.className = \"teams-table-logo-inner mclaren-team-table-logo\"\n      logo.src = \"../assets/images/mclaren2.png\";\n    } else if (logo.dataset.teamid === \"3\") {\n      logo.className = \"teams-table-logo-inner redbull-team-table-logo\";\n    } else if (logo.dataset.teamid === \"4\") {\n      logo.className = \"teams-table-logo-inner merc-team-table-logo\";\n    } else if (logo.dataset.teamid === \"5\") {\n      if (alpineReplace === \"alpine\") {\n        logo.className = \"teams-table-logo-inner alpine-team-table-logo\";\n      } else if (alpineReplace === \"andretti\") {\n        logo.className = \"teams-table-logo-inner ferrari-team-table-logo\";\n        logo.src = \"../assets/images/andretti2.png\";\n      } else if (alpineReplace === \"renault\") {\n        logo.className = \"teams-table-logo-inner ferrari-team-table-logo\";\n        logo.src = \"../assets/images/renault2.png\";\n      } else if (alpineReplace === \"lotus\") {\n        logo.src = \"../assets/images/lotus2.png\";\n      }\n    } else if (logo.dataset.teamid === \"6\") {\n      logo.className = \"teams-table-logo-inner williams-team-table-logo\";\n      logo.src = \"../assets/images/williams2.png\";\n    } else if (logo.dataset.teamid === \"7\") {\n      logo.className = \"teams-table-logo-inner haas-team-table-logo\";\n    } else if (logo.dataset.teamid === \"8\") {\n      if (alphaReplace === \"alphatauri\") {\n        logo.className = \"teams-table-logo-inner alphatauri-team-table-logo\";\n      } else if (alphaReplace === \"visarb\") {\n        logo.className = \"teams-table-logo-inner merc-team-table-logo\";\n      } else if (alphaReplace === \"hugo\") {\n        logo.className = \"teams-table-logo-inner hugo-team-table-logo\";\n      } else if (alphaReplace === \"toyota\") {\n        logo.className = \"teams-table-logo-inner toyota-team-table-logo\";\n        logo.src = \"../assets/images/toyota2.png\";\n      } else if (alphaReplace === \"porsche\") {\n        logo.className = \"teams-table-logo-inner porsche-team-table-logo\";\n      } else if (alphaReplace === \"brawn\") {\n        logo.className = \"teams-table-logo-inner brawn-team-table-logo\";\n        logo.src = \"../assets/images/brawn2.png\";\n      }\n    } else if (logo.dataset.teamid === \"9\") {\n      if (alfaReplace === \"alfa\") {\n        logo.className = \"teams-table-logo-inner merc-team-table-logo\";\n      } else if (alfaReplace === \"audi\") {\n        logo.className = \"teams-table-logo-inner audi-team-table-logo\";\n      } else if (alfaReplace === \"stake\") {\n        logo.className = \"teams-table-logo-inner stake-team-table-logo\";\n      } else if (alfaReplace === \"sauber\") {\n        logo.className = \"teams-table-logo-inner ferrari-team-table-logo\";\n        logo.src = \"../assets/images/sauber2.png\";\n      }\n    } else if (logo.dataset.teamid === \"10\") {\n      logo.className = \"teams-table-logo-inner aston-team-table-logo\";\n    } else if (logo.dataset.teamid === \"32\") {\n      logo.className = \"teams-table-logo-inner custom-team-table-logo\";\n    }\n  });\n}\nfunction manage_teams_table_names() {\n  let names = document.querySelectorAll(\".teams-table-team\");\n  names.forEach(function (name) {\n    if (name.dataset.teamid === \"5\") {\n      if (alpineReplace === \"alpine\") {\n        name.firstChild.innerText = \"ALPINE\";\n      } else if (alpineReplace === \"andretti\") {\n        name.firstChild.innerText = \"ANDRETTI\";\n      } else if (alpineReplace === \"renault\") {\n        name.firstChild.innerText = \"RENAULT\";\n      } else if (alpineReplace === \"lotus\") {\n        name.firstChild.innerText = \"LOTUS\";\n      }\n    } else if (name.dataset.teamid === \"8\") {\n      if (alphaReplace === \"alphatauri\") {\n        name.firstChild.innerText = \"ALPHA TAURI\";\n      } else if (alphaReplace === \"visarb\") {\n        name.firstChild.innerText = \"VISA CASHAPP RB\";\n      } else if (alphaReplace === \"hugo\") {\n        name.firstChild.innerText = \"HUGO\";\n      } else if (alphaReplace === \"toyota\") {\n        name.firstChild.innerText = \"TOYOTA\";\n      } else if (alphaReplace === \"porsche\") {\n        name.firstChild.innerText = \"PORSCHE\";\n      } else if (alphaReplace === \"brawn\") {\n        name.firstChild.innerText = \"BRAWN GP\";\n      }\n    } else if (name.dataset.teamid === \"9\") {\n      if (alfaReplace === \"alfa\") {\n        name.firstChild.innerText = \"ALFA ROMEO\";\n      } else if (alfaReplace === \"audi\") {\n        name.firstChild.innerText = \"AUDI\";\n      } else if (alfaReplace === \"stake\") {\n        name.firstChild.innerText = \"STAKE SAUBER\";\n      } else if (alfaReplace === \"sauber\") {\n        name.firstChild.innerText = \"SAUBER\";\n      }\n    }\n  });\n}\nfunction new_color_teams_table() {\n  let datazone = document.querySelector(\".teams-table-data\");\n  calendarData.forEach(function (race) {\n    let id = race[0];\n    let colCells = datazone.querySelectorAll(\".teams-table-normal[data-raceid='\" + id + \"']\");\n    if (colCells.length > 0) {\n      let values = [];\n      colCells.forEach(function (cell, index) {\n        let value = cell.dataset.points;\n        values.push([value, index]);\n        if (cell.dataset.quali1 === \"1\" || cell.dataset.quali2 === \"1\") {\n          cell.style.fontFamily = \"Formula1Bold\";\n        }\n        if (cell.dataset.fastlap1 === \"1\" || cell.dataset.fastlap2 === \"1\") {\n          cell.classList.add(\"fastest\");\n        }\n      });\n      values.sort((a, b) => b[0] - a[0]);\n      let topThree = values.slice(0, 3);\n      colCells[topThree[0][1]].classList.add(\"first\");\n      colCells[topThree[1][1]].classList.add(\"second\");\n      colCells[topThree[2][1]].classList.add(\"third\");\n    }\n  });\n}\nfunction order_teams_table() {\n  let datazone = document.querySelector(\".teams-table-data\");\n  let rows = datazone.querySelectorAll(\".teams-table-row\");\n  let ordered = Array.from(rows).sort((a, b) => parseInt(a.querySelector(\".teams-table-position\").innerText) - parseInt(b.querySelector(\".teams-table-position\").innerText));\n  datazone.innerHTML = \"\";\n  ordered.forEach(function (row, index) {\n    let odd = index % 2 === 0;\n    if (odd) {\n      row.classList.add(\"odd\");\n    }\n    datazone.appendChild(row);\n  });\n}\nfunction new_load_drivers_table(data) {\n  seasonResults = data;\n  let datazone = document.querySelector(\".drivers-table-data\");\n  datazone.innerHTML = \"\";\n  data = data[0];\n  data = new_order_drivers(data);\n  data.forEach(function (driver, index) {\n    let odd = index % 2 === 0;\n    let races_done = driver.slice(3).map(x => x[0]);\n    new_addDriver(driver, races_done, odd);\n  });\n  hoverListeners();\n  checkscroll();\n  new_color_drivers_table();\n}\nfunction new_order_drivers(array) {\n  return array.sort((a, b) => a[2] - b[2]);\n}\nfunction update_logo(team, logo, newTeam) {\n  if (team === \"alpine\") {\n    alpineReplace = newTeam;\n    _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[5] = logo;\n  } else if (team === \"williams\") {\n    _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[6] = logo;\n  } else if (team === \"haas\") {\n    _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[7] = logo;\n  } else if (team === \"alphatauri\") {\n    alphaReplace = newTeam;\n    _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[8] = logo;\n  } else if (team === \"alfa\") {\n    alfaReplace = newTeam;\n    _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[9] = logo;\n  }\n}\nfunction reloadTables() {\n  let datazone = document.querySelector(\".drivers-table-data\");\n  //if not empty\n  if (datazone.innerHTML !== \"\") {\n    new_drivers_table(calendarData);\n    new_load_drivers_table(seasonResults);\n    new_teams_table(calendarData);\n    new_load_teams_table(seasonResults);\n  }\n}\nfunction new_load_teams_table(data) {\n  console.log(data);\n  let pairTeamPos = data[data.length - 1];\n  //create dict with dirst element of pair as key and second as value\n  let pairTeamPosDict = {};\n  pairTeamPos.forEach(function (pair) {\n    pairTeamPosDict[pair[0]] = pair[1];\n  });\n  data = data[0];\n  let datazone = document.querySelector(\".teams-table-data\");\n  datazone.innerHTML = \"\";\n  let teamData = {\n    1: [],\n    2: [],\n    3: [],\n    4: [],\n    5: [],\n    6: [],\n    7: [],\n    8: [],\n    9: [],\n    10: []\n  };\n  if (_renderer__WEBPACK_IMPORTED_MODULE_2__.game_version === 2024 && _renderer__WEBPACK_IMPORTED_MODULE_2__.custom_team) {\n    teamData[32] = [];\n  }\n  data.forEach(function (driver) {\n    let races = driver.slice(3);\n    races.forEach(function (race) {\n      let team = race[race.length - 1];\n      teamData[team].push(race);\n    });\n  });\n  for (let team in teamData) {\n    //order the rray by the firit element of each elmeent\n    teamData[team].sort((a, b) => a[0] - b[0]);\n    let seasonLong = races_ids.length * 2;\n    let racesDone = teamData.length;\n    //push [] until the length is the same as the\n    while (teamData[team].length < seasonLong) {\n      teamData[team].push([]);\n    }\n  }\n  console.log(engine_names);\n  console.log(engine_allocations);\n  for (let team in _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict) {\n    if (_config__WEBPACK_IMPORTED_MODULE_0__.f1_teams.includes(parseInt(team))) {\n      let pos = pairTeamPosDict[team];\n      new_addTeam(teamData[team], _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[team], pos, team);\n    }\n  }\n  new_color_teams_table();\n  order_teams_table();\n  manage_teams_table_logos();\n  manage_teams_table_names();\n}\nfunction new_addTeam(teamData, name, pos, id) {\n  console.log(id);\n  let data = document.querySelector(\".teams-table-data\");\n  let row = document.createElement(\"div\");\n  row.classList = \"teams-table-row\";\n  let nameDiv = document.createElement(\"div\");\n  let teamName = document.createElement(\"span\");\n  let engineName = document.createElement(\"span\");\n  engineName.classList = \"teams-table-engine-name bold-font\";\n  engineName.textContent = engine_names[engine_allocations[id]];\n  nameDiv.dataset.teamid = id;\n  nameDiv.classList = \"teams-table-team bold-font\";\n  teamName.innerText = name.toUpperCase();\n  nameDiv.appendChild(teamName);\n  nameDiv.appendChild(engineName);\n  row.appendChild(nameDiv);\n  let posDiv = document.createElement(\"div\");\n  posDiv.classList = \"teams-table-position bold-font\";\n  posDiv.innerText = pos;\n  row.appendChild(posDiv);\n  let logoDiv = document.createElement(\"div\");\n  logoDiv.classList = \"teams-table-logo\";\n  let logo = document.createElement(\"img\");\n  logo.classList = \"teams-table-logo-inner\";\n  logo.dataset.teamid = id;\n  logoDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[id] + \"iconback\");\n  logo.setAttribute(\"src\", _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[id]);\n  logoDiv.appendChild(logo);\n  row.appendChild(logoDiv);\n  row.appendChild(nameDiv);\n  let driverCounted = 0;\n  let teampoints = 0;\n  //only take pair indexes\n  if (teamData !== undefined) {\n    teamData.forEach(function (race, index) {\n      if (index % 2 === 0) {\n        let raceDiv = document.createElement(\"div\");\n        raceDiv.classList = \"teams-table-normal\";\n        if (race.length > 0) {\n          let driver1 = teamData[index];\n          let driver2 = teamData[index + 1];\n          raceDiv.dataset.raceid = driver1[0];\n          let driver1Points = 0;\n          let driver2Points = 0;\n          let driver1Pos = 0;\n          let driver2Pos = 0;\n          if (driver1[2] === -1) {\n            driver1Points = 0;\n            driver1Pos = \"DNF\";\n          } else {\n            driver1Points = driver1[2];\n            driver1Pos = driver1[1];\n          }\n          if (driver2[2] === -1) {\n            driver2Points = 0;\n            driver2Pos = \"DNF\";\n          } else {\n            driver2Points = driver2[2];\n            driver2Pos = driver2[1];\n          }\n          raceDiv.dataset.points = parseInt(driver1Points) + parseInt(driver2Points);\n          raceDiv.dataset.pos1 = driver1Pos;\n          raceDiv.dataset.pos2 = driver2Pos;\n          raceDiv.dataset.quali1 = driver1[4];\n          raceDiv.dataset.quali2 = driver2[4];\n          raceDiv.dataset.fastlap1 = driver1[3];\n          raceDiv.dataset.fastlap2 = driver2[3];\n          raceDiv.dataset.gapToWinner1 = driver1[5];\n          raceDiv.dataset.gapToWinner2 = driver2[5];\n          raceDiv.dataset.gapToPole1 = driver1[6];\n          raceDiv.dataset.gapToPole2 = driver2[6];\n          teampoints += parseInt(raceDiv.dataset.points);\n          if (race.length > 8) {\n            let d1SprintPoints = 0;\n            let d2SprintPoints = 0;\n            let d1SprintPos = 0;\n            let d2SprintPos = 0;\n            if (driver1[5] === -1) {\n              d1SprintPoints = 0;\n              d1SprintPos = \"DNF\";\n            } else {\n              d1SprintPoints = driver1[7];\n              d1SprintPos = driver1[8];\n            }\n            if (driver2[5] === -1) {\n              d2SprintPoints = 0;\n              d2SprintPos = \"DNF\";\n            } else {\n              d2SprintPoints = driver2[7];\n              d2SprintPos = driver2[8];\n            }\n            raceDiv.dataset.sprintpoints = parseInt(d1SprintPoints) + parseInt(d2SprintPoints);\n            raceDiv.dataset.sprintpos1 = d1SprintPos;\n            teampoints += parseInt(raceDiv.dataset.sprintpoints);\n            raceDiv.dataset.sprintpos2 = d2SprintPos;\n          }\n        } else {\n          raceDiv.innerText = \"-\";\n        }\n        let newText = manageTeamsText(raceDiv);\n        raceDiv.innerHTML = newText.innerHTML;\n        row.appendChild(raceDiv);\n      }\n    });\n  }\n  let pointsDiv = document.createElement(\"div\");\n  pointsDiv.classList = \"teams-table-points bold-font\";\n  pointsDiv.innerText = teampoints;\n  row.appendChild(pointsDiv);\n  data.appendChild(row);\n}\nfunction new_addDriver(driver, races_done, odd) {\n  let data = document.querySelector(\".drivers-table-data\");\n  let row = document.createElement(\"div\");\n  row.classList = \"drivers-table-row\";\n  if (odd) {\n    row.classList.add(\"odd\");\n  }\n  let nameDiv = document.createElement(\"div\");\n  nameDiv.classList = \"drivers-table-driver\";\n  let name = driver[0].split(\" \");\n  let nameContainer = document.createElement(\"div\");\n  nameContainer.className = \"name-container\";\n  let spanName = document.createElement(\"span\");\n  let spanLastName = document.createElement(\"span\");\n  (0,_transfers__WEBPACK_IMPORTED_MODULE_3__.format_name)(driver[0], name, spanName, spanLastName);\n  spanLastName.classList.add(\"bold-font\");\n  spanLastName.dataset.teamid = driver[1];\n  row.dataset.teamid = driver[1];\n  nameContainer.appendChild(spanName);\n  nameContainer.appendChild(spanLastName);\n  nameDiv.appendChild(nameContainer);\n  (0,_transfers__WEBPACK_IMPORTED_MODULE_3__.manageColor)(spanLastName, spanLastName);\n  let posDiv = document.createElement(\"div\");\n  posDiv.classList = \"drivers-table-position bold-font\";\n  posDiv.innerText = driver[2];\n  row.appendChild(posDiv);\n  let logoDiv = document.createElement(\"div\");\n  logoDiv.classList = \"drivers-table-logo-div\";\n  let logo = document.createElement(\"img\");\n  logo.classList = \"drivers-table-logo\";\n  logo.dataset.teamid = driver[1];\n  if (driver[1] === 1) {\n    //ferrari\n    logo.classList.add(\"logo-ferrari-table\");\n  }\n  if (driver[1] === 2) {\n    //mclaren\n    logo.classList.add(\"logo-reduce\");\n  }\n  if (driver[1] === 3) {\n    //redbull\n    logo.classList.add(\"logo-up-down-mid\");\n  }\n  if (driver[1] === 6) {\n    logo.classList.add(\"logo-williams-table\");\n  }\n  if (driver[1] === 4 || driver[1] === 7) {\n    //mercedes  haas\n    logo.classList.add(\"logo-merc-table\");\n  }\n  if (driver[1] === 5) {\n    //different to aston\n    logo.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.driversTableLogosDict[alpineReplace]);\n  }\n  if (driver[1] === 8) {\n    //alphatauri\n    logo.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.driversTableLogosDict[alphaReplace]);\n  }\n  if (driver[1] === 9) {\n    //alfa\n    logo.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.driversTableLogosDict[alfaReplace]);\n  }\n  if (driver[1] === 10 || driver[1] === 32) {\n    logo.classList.add(\"logo-up-down-little\");\n  }\n  logoDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[1]] + \"hoverback\");\n  logo.setAttribute(\"src\", _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[driver[1]]);\n  logoDiv.appendChild(logo);\n  row.appendChild(logoDiv);\n  row.appendChild(nameDiv);\n  let driverpoints = 0;\n  races_ids.forEach(function (raceid) {\n    let raceDiv = document.createElement(\"div\");\n    raceDiv.classList = \"drivers-table-normal\";\n    if (races_done.includes(raceid)) {\n      let index = races_done.indexOf(raceid);\n      let race = driver[index + 3];\n      raceDiv.dataset.pos = race[1];\n      raceDiv.dataset.points = race[2];\n      raceDiv.dataset.fastlap = race[3];\n      raceDiv.dataset.qualy = race[4];\n      raceDiv.dataset.gapToWinner = race[5];\n      raceDiv.dataset.gapToPole = race[6];\n      if (race.length > 8) {\n        //sprint \n        raceDiv.dataset.sprintpos = race[8];\n        raceDiv.dataset.sprintpoints = race[7];\n        if (raceDiv.dataset.sprintpoints !== \"-1\") {\n          driverpoints += parseInt(raceDiv.dataset.sprintpoints);\n        }\n      }\n      if (raceDiv.dataset.points !== \"-1\") {\n        driverpoints += parseInt(raceDiv.dataset.points);\n      }\n      raceDiv = manageText(raceDiv);\n      row.appendChild(raceDiv);\n    } else {\n      raceDiv.innerText = \"-\";\n      row.appendChild(raceDiv);\n    }\n  });\n  let pointsDiv = document.createElement(\"div\");\n  pointsDiv.classList = \"drivers-table-points bold-font\";\n  pointsDiv.innerText = driverpoints;\n  row.appendChild(pointsDiv);\n  row.addEventListener(\"hover\", function (elem) {\n    if (elem.dataset.teamid === 2) {\n      let logo = this.querySelector(\".drivers-table-logo\");\n      logo.style.opacity = \"0\";\n      let logo2 = this.querySelector(\".drivers-table-logo\").nextElementSibling;\n      logo2.style.opacity = \"1\";\n    }\n  });\n  data.appendChild(row);\n}\nfunction manageText(raceDiv) {\n  if (raceDiv.innerText === \"-\") {\n    return raceDiv;\n  }\n  if (pointsOrPos === \"points\" || pointsOrPos === \"pos\") {\n    let racePart = \"\";\n    let sprintPart = \"\";\n    if (raceDiv.dataset.points !== \"-1\") {\n      if (pointsOrPos === \"points\") {\n        racePart = raceDiv.dataset.points;\n      } else {\n        racePart = raceDiv.dataset.pos;\n      }\n    } else {\n      racePart = \"DNF\";\n    }\n    if (raceDiv.dataset.points === \"0\" && pointsOrPos === \"points\") {\n      racePart = \"\";\n    }\n    if (raceDiv.dataset.sprintpoints !== undefined) {\n      if (raceDiv.dataset.sprintpoints !== \"-1\") {\n        if (pointsOrPos === \"points\") {\n          sprintPart = raceDiv.dataset.sprintpoints;\n        } else {\n          sprintPart = raceDiv.dataset.sprintpos;\n        }\n      } else {\n        sprintPart = \"DNF\";\n      }\n    }\n    if (raceDiv.dataset.sprintpoints === undefined || raceDiv.dataset.sprintpoints === \"0\") {\n      raceDiv.innerText = racePart;\n    } else {\n      raceDiv.innerText = racePart + \"(\" + sprintPart + \")\";\n    }\n  } else if (pointsOrPos === \"quali\") {\n    raceDiv.innerText = raceDiv.dataset.qualy;\n  } else if (pointsOrPos === \"gapWinner\") {\n    if (raceDiv.dataset.pos === \"-1\") {\n      raceDiv.innerText = \"DNF\";\n    } else {\n      raceDiv.innerText = raceDiv.dataset.gapToWinner;\n    }\n  } else if (pointsOrPos === \"gapPole\") {\n    raceDiv.innerText = raceDiv.dataset.gapToPole;\n  }\n  return raceDiv;\n}\nfunction manageTeamsText(raceDiv) {\n  if (raceDiv.innerText === \"-\") {\n    return raceDiv;\n  }\n  if (pointsOrPos === \"points\") {\n    if (raceDiv.dataset.sprintpoints !== undefined) {\n      let racePart = raceDiv.dataset.points;\n      let sprintPart = \"(\" + raceDiv.dataset.sprintpoints + \")\";\n      if (racePart === \"0\") {\n        racePart = \"\";\n      }\n      if (sprintPart === \"0\") {\n        sprintPart = \"\";\n      }\n      raceDiv.innerText = racePart + sprintPart;\n    } else {\n      let racePart = raceDiv.dataset.points;\n      if (racePart === \"0\") {\n        racePart = \"\";\n      }\n      raceDiv.innerText = racePart;\n    }\n  } else if (pointsOrPos === \"pos\") {\n    let d1Pos = \"DNF\";\n    let d2Pos = \"DNF\";\n    let d1SprPos = \"\";\n    let d2SprPos = \"\";\n    if (raceDiv.dataset.pos1 !== \"DNF\") {\n      d1Pos = raceDiv.dataset.pos1;\n    }\n    if (raceDiv.dataset.pos2 !== \"DNF\") {\n      d2Pos = raceDiv.dataset.pos2;\n    }\n    if (raceDiv.dataset.sprintpos1 !== undefined) {\n      d1SprPos = raceDiv.dataset.sprintpos1;\n    }\n    if (raceDiv.dataset.sprintpos2 !== undefined) {\n      d2SprPos = raceDiv.dataset.sprintpos2;\n    }\n    let text = d1Pos + \"<br>\" + d2Pos;\n    if (d1SprPos !== \"\" && d2SprPos !== \"\") {\n      text = d1Pos + \"(\" + d1SprPos + \")\" + \"<br>\" + d2Pos + \"(\" + d2SprPos + \")\";\n    }\n    raceDiv.innerHTML = text;\n  } else if (pointsOrPos === \"quali\") {\n    raceDiv.innerHTML = raceDiv.dataset.quali1 + \"<br>\" + raceDiv.dataset.quali2;\n  } else if (pointsOrPos === \"gapWinner\") {\n    let d1, d2;\n    if (raceDiv.dataset.pos1 === \"DNF\") {\n      d1 = \"DNF\";\n    } else {\n      d1 = raceDiv.dataset.gapToWinner1;\n    }\n    if (raceDiv.dataset.pos2 === \"DNF\") {\n      d2 = \"DNF\";\n    } else {\n      d2 = raceDiv.dataset.gapToWinner2;\n    }\n    raceDiv.innerHTML = d1 + \"<br>\" + d2;\n  } else if (pointsOrPos === \"gapPole\") {\n    raceDiv.innerHTML = raceDiv.dataset.gapToPole1 + \"<br>\" + raceDiv.dataset.gapToPole2;\n  }\n  return raceDiv;\n}\nfunction hoverListeners() {\n  document.querySelectorAll(\".drivers-table-row\").forEach(function (row) {\n    row.addEventListener(\"mouseenter\", function () {\n      if (this.dataset.teamid === \"2\" || this.dataset.teamid === \"6\" || this.dataset.teamid === \"5\" && alpineReplace !== \"alpine\" || this.dataset.teamid === \"9\" && alfaReplace === \"sauber\" || this.dataset.teamid === \"8\" && (alphaReplace === \"brawn\" || alphaReplace === \"hugo\" || alphaReplace === \"toyota\")) {\n        let logo = this.querySelector(\".drivers-table-logo\");\n        let new_src = _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[this.dataset.teamid].slice(0, -4) + \"2\" + logo.src.slice(-4);\n        logo.src = new_src;\n      }\n    });\n    row.addEventListener(\"mouseleave\", function () {\n      if (this.dataset.teamid === \"2\" || this.dataset.teamid === \"6\" || this.dataset.teamid === \"5\" && alpineReplace !== \"alpine\" || this.dataset.teamid === \"9\" && alfaReplace === \"sauber\" || this.dataset.teamid === \"8\" && (alphaReplace === \"brawn\" || alphaReplace === \"hugo\" || alphaReplace === \"toyota\")) {\n        let logo = this.querySelector(\".drivers-table-logo\");\n        let new_src = _config__WEBPACK_IMPORTED_MODULE_0__.logos_disc[this.dataset.teamid].slice(0, -4) + logo.src.slice(-4);\n        logo.src = new_src;\n      }\n    });\n  });\n}\n\n/**\r\n * Creates the year selector menu\r\n * @param {String} actualYear current year of the save\r\n */\nfunction generateYearsMenu(actualYear) {\n  document.querySelector(\"#yearInput\").min = actualYear;\n  (0,_transfers__WEBPACK_IMPORTED_MODULE_3__.setCurrentSeason)(actualYear);\n  let yearMenu = document.querySelector(\"#yearMenu\");\n  let yearH2H = document.querySelector(\"#yearMenuH2H\");\n  let yearPrediction = document.querySelector(\"#yearPredictionMenu\");\n  let yearPredictionModal = document.querySelector(\"#yearPredictionModalMenu\");\n  yearMenu.innerHTML = \"\";\n  yearH2H.innerHTML = \"\";\n  yearPrediction.innerHTML = \"\";\n  yearPredictionModal.innerHTML = \"\";\n  for (let year = actualYear; year >= actualYear; year--) {\n    let a = document.createElement(\"a\");\n    a.textContent = year.toString();\n    a.classList = \"dropdown-item\";\n    a.style.cursor = \"pointer\";\n    yearMenu.appendChild(a);\n    a.addEventListener(\"click\", function () {\n      document.getElementById(\"yearButton\").textContent = a.textContent;\n      isYearSelected = true;\n      manage_show_tables();\n      const message = {\n        command: 'yearSelected',\n        data: {\n          year: a.textContent\n        }\n      };\n      const command = _renderer__WEBPACK_IMPORTED_MODULE_2__.factory.createCommand(message);\n      command.execute();\n    });\n    let a2 = document.createElement(\"a\");\n    a2.textContent = year.toString();\n    a2.classList = \"dropdown-item\";\n    a2.style.cursor = \"pointer\";\n    yearH2H.appendChild(a2);\n    a2.addEventListener(\"click\", function () {\n      (0,_head2head__WEBPACK_IMPORTED_MODULE_1__.resetH2H)();\n      document.querySelectorAll(\".modal-team\").forEach(function (elem) {\n        elem.classList.remove(\"d-none\");\n      });\n      document.getElementById(\"yearButtonH2H\").textContent = a2.textContent;\n      const message = {\n        command: 'yearSelectedH2H',\n        data: {\n          year: a2.textContent\n        }\n      };\n      const command = _renderer__WEBPACK_IMPORTED_MODULE_2__.factory.createCommand(message);\n      command.execute();\n    });\n    let a3 = document.createElement(\"a\");\n    a3.textContent = year.toString();\n    a3.classList = \"dropdown-item\";\n    a3.style.cursor = \"pointer\";\n    yearPrediction.appendChild(a3);\n    a3.addEventListener(\"click\", function () {\n      document.getElementById(\"yearPredictionButton\").textContent = a3.textContent;\n      document.querySelector(\"#mainPred\").classList.remove(\"d-none\");\n      let dataYear = {\n        command: \"yearSelectedPrediction\",\n        year: a3.textContent\n      };\n      _renderer__WEBPACK_IMPORTED_MODULE_2__.socket.send(JSON.stringify(dataYear));\n    });\n    let a4 = document.createElement(\"a\");\n    a4.textContent = year.toString();\n    a4.classList = \"dropdown-item\";\n    a4.style.cursor = \"pointer\";\n    yearPredictionModal.appendChild(a4);\n    a4.addEventListener(\"click\", function () {\n      document.getElementById(\"yearPredictionModalButton\").textContent = a4.textContent;\n      let dataYear = {\n        command: \"yearSelectedPredictionModal\",\n        year: a4.textContent\n      };\n      _renderer__WEBPACK_IMPORTED_MODULE_2__.socket.send(JSON.stringify(dataYear));\n    });\n  }\n  yearMenu.childNodes[0].click();\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/seasonViewer.js?");

/***/ }),

/***/ "./src/js/frontend/stats.js":
/*!**********************************!*\
  !*** ./src/js/frontend/stats.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateOverall: () => (/* binding */ calculateOverall),\n/* harmony export */   change_elegibles: () => (/* binding */ change_elegibles),\n/* harmony export */   getName: () => (/* binding */ getName),\n/* harmony export */   listenersStaffGroups: () => (/* binding */ listenersStaffGroups),\n/* harmony export */   manage_mentality_modifiers: () => (/* binding */ manage_mentality_modifiers),\n/* harmony export */   manage_stat_bar: () => (/* binding */ manage_stat_bar),\n/* harmony export */   place_drivers_editStats: () => (/* binding */ place_drivers_editStats),\n/* harmony export */   place_staff_editStats: () => (/* binding */ place_staff_editStats),\n/* harmony export */   removeStatsDrivers: () => (/* binding */ removeStatsDrivers),\n/* harmony export */   setStatPanelShown: () => (/* binding */ setStatPanelShown),\n/* harmony export */   setTypeEdit: () => (/* binding */ setTypeEdit),\n/* harmony export */   setTypeOverall: () => (/* binding */ setTypeOverall),\n/* harmony export */   statPanelShown: () => (/* binding */ statPanelShown),\n/* harmony export */   typeEdit: () => (/* binding */ typeEdit),\n/* harmony export */   typeOverall: () => (/* binding */ typeOverall)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transfers */ \"./src/js/frontend/transfers.js\");\n\n\nlet driverStatTitle = document.getElementById(\"driverStatsTitle\");\nlet statPanelShown = 0;\nlet typeOverall = \"driver\";\nlet typeEdit;\nlet oldNum;\nfunction setStatPanelShown(value) {\n  statPanelShown = value;\n}\nfunction setTypeOverall(value) {\n  typeOverall = value;\n}\nfunction setTypeEdit(value) {\n  typeEdit = value;\n}\n\n/**\r\n * Removes all the staff from their list\r\n */\nfunction removeStatsDrivers() {\n  document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n    elem.innerHTML = \"\";\n  });\n}\n\n/**\r\n * Places the drivers that the backend fetched on the driver list\r\n * @param {Object} driversArray Object with all the drivers that the backend fetched\r\n */\nfunction place_drivers_editStats(driversArray) {\n  console.log(driversArray);\n  let divPosition;\n  driversArray.forEach(driver => {\n    divPosition = \"fulldriverlist\";\n    let newDiv = document.createElement(\"div\");\n    let ovrDiv = document.createElement(\"div\");\n    let ovrSpan = document.createElement(\"span\");\n    let mentality_ovrSpan = document.createElement(\"span\");\n    newDiv.className = \"col normal-driver\";\n    newDiv.dataset.driverid = driver[1];\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.className = \"name-div-edit-stats\";\n    newDiv.dataset.teamid = driver[2];\n    newDiv.dataset.type = 0;\n    let name = driver[0].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.format_name)(driver[0], name, spanName, spanLastName);\n    newDiv.dataset.name = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \" + name.slice(1).join(\" \");\n    spanLastName.classList.add(\"bold-font\");\n    spanLastName.classList.add(\"surname\");\n    nameDiv.appendChild(spanName);\n    nameDiv.appendChild(spanLastName);\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.manageColor)(newDiv, spanLastName);\n    newDiv.appendChild(nameDiv);\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[2]] + \"-transparent\");\n    let statsString = '';\n    for (let i = 5; i <= 15; i++) {\n      statsString += driver[i] + ' ';\n    }\n    newDiv.dataset.stats = statsString;\n    newDiv.dataset.superLicense = driver[\"superlicense\"];\n    newDiv.dataset.age = driver[\"age\"];\n    newDiv.dataset.retirement = driver[\"retirement_age\"];\n    newDiv.dataset.numWC = driver[\"wants1\"];\n    newDiv.dataset.number = driver[\"driver_number\"];\n    newDiv.dataset.raceFormula = driver[\"race_formula\"];\n    newDiv.dataset.driverCode = driver[\"driver_code\"];\n    newDiv.dataset.isRetired = driver[4];\n    if (driver[\"nationality\"] !== \"\") {\n      let country_code = driver[\"nationality\"];\n      let flag = document.createElement(\"img\");\n      flag.className = \"name-flag\";\n      flag.src = `https://flagsapi.com/${country_code}/flat/24.png`;\n      nameDiv.appendChild(flag);\n    }\n    if (driver[\"mentality0\"] >= 0) {\n      newDiv.dataset.mentality0 = driver[\"mentality0\"];\n      newDiv.dataset.mentality1 = driver[\"mentality1\"];\n      newDiv.dataset.mentality2 = driver[\"mentality2\"];\n      newDiv.dataset.globalMentality = driver[\"global_mentality\"];\n    }\n    let mentality = driver[\"global_mentality\"];\n    let modifier = getMentalityModifier(mentality);\n    if (modifier > 0) {\n      mentality_ovrSpan.classList.add(\"mentality-small-ovr-positive\");\n    } else if (modifier < 0) {\n      mentality_ovrSpan.classList.add(\"mentality-small-ovr-negative\");\n    }\n    newDiv.dataset.marketability = driver[\"marketability\"];\n    let ovr = calculateOverall(statsString, \"driver\", mentality);\n    ovrSpan.textContent = ovr[0];\n    mentality_ovrSpan.textContent = \"\";\n    if (ovr[0] !== ovr[1]) {\n      mentality_ovrSpan.textContent = ovr[1];\n    }\n    ovrDiv.appendChild(mentality_ovrSpan);\n    ovrDiv.appendChild(ovrSpan);\n    ovrDiv.classList.add(\"bold-font\");\n    ovrDiv.classList.add(\"small-ovr\");\n    newDiv.appendChild(ovrDiv);\n    newDiv.addEventListener('click', () => {\n      let elementosClicked = document.querySelectorAll('.clicked');\n      elementosClicked.forEach(item => item.classList.remove('clicked'));\n      newDiv.classList.toggle('clicked');\n      driverStatTitle.value = newDiv.dataset.name;\n      load_stats(newDiv);\n      if (statPanelShown == 0) {\n        document.getElementById(\"editStatsPanel\").className = \"left-panel-stats\";\n        statPanelShown = 1;\n      }\n      recalculateOverall();\n      let diff = parseInt(ovr[1]) - parseInt(ovr[0]);\n      let mentalitydiff = document.querySelector(\".mentality-change-ovr\");\n      if (diff > 0) {\n        mentalitydiff.textContent = \"+\" + diff;\n        mentalitydiff.className = \"mentality-change-ovr positive\";\n      } else if (diff < 0) {\n        mentalitydiff.textContent = diff;\n        mentalitydiff.className = \"mentality-change-ovr negative\";\n      } else {\n        mentalitydiff.textContent = \"\";\n        mentalitydiff.className = \"mentality-change-ovr\";\n      }\n    });\n    document.getElementById(divPosition).appendChild(newDiv);\n  });\n  document.querySelector(\"#edit_stats\").querySelectorAll(\".custom-input-number\").forEach(function (elem) {\n    elem.addEventListener(\"change\", function () {\n      if (elem.value > 100) {\n        elem.value = 100;\n      }\n      recalculateOverall();\n    });\n  });\n  manage_order(0);\n}\n\n/**\r\n * Places the staff that the backend fetched on their respective staff list\r\n * @param {Object} staffArray Object with all the staff that the backend fetched\r\n */\nfunction place_staff_editStats(staffArray) {\n  let divPosition;\n  staffArray.forEach(staff => {\n    let statsString = '';\n    if (staff[3] == 1) {\n      divPosition = \"fullTechnicalList\";\n      for (let i = 4; i <= 9; i++) {\n        statsString += staff[i] + ' ';\n      }\n    } else if (staff[3] == 2) {\n      divPosition = \"fullEngineerList\";\n      for (let i = 4; i <= 6; i++) {\n        statsString += staff[i] + ' ';\n      }\n    } else if (staff[3] == 3) {\n      divPosition = \"fullAeroList\";\n      for (let i = 4; i <= 11; i++) {\n        statsString += staff[i] + ' ';\n      }\n    } else if (staff[3] == 4) {\n      divPosition = \"fullDirectorList\";\n      for (let i = 4; i <= 7; i++) {\n        statsString += staff[i] + ' ';\n      }\n    }\n    statsString = statsString.slice(0, -1);\n    let newDiv = document.createElement(\"div\");\n    let ovrDiv = document.createElement(\"div\");\n    let ovrSpan = document.createElement(\"span\");\n    let mentality_ovrSpan = document.createElement(\"span\");\n    newDiv.className = \"col normal-driver\";\n    newDiv.dataset.driverid = staff[1];\n    newDiv.dataset.type = staff[3];\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.className = \"name-div-edit-stats\";\n    newDiv.dataset.teamid = staff[2];\n    let name = staff[0].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.format_name)(staff[0], name, spanName, spanLastName);\n    newDiv.dataset.name = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \" + name.slice(1).join(\" \");\n    spanLastName.classList.add(\"bold-font\");\n    spanLastName.classList.add(\"surname\");\n    nameDiv.appendChild(spanName);\n    nameDiv.appendChild(spanLastName);\n    (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.manageColor)(newDiv, spanLastName);\n    newDiv.appendChild(nameDiv);\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[staff[2]] + \"-transparent\");\n    newDiv.dataset.stats = statsString;\n    newDiv.dataset.age = staff[\"age\"];\n    newDiv.dataset.retirement = staff[\"retirement_age\"];\n    newDiv.dataset.raceFormula = staff[\"race_formula\"];\n    newDiv.dataset.isRetired = staff[4];\n    if (staff[\"nationality\"] !== \"\") {\n      let country_code = staff[\"nationality\"];\n      let flag = document.createElement(\"img\");\n      flag.className = \"name-flag\";\n      flag.src = `https://flagsapi.com/${country_code}/flat/24.png`;\n      nameDiv.appendChild(flag);\n    }\n    if (staff[\"mentality0\"] >= 0) {\n      newDiv.dataset.mentality0 = staff[\"mentality0\"];\n      newDiv.dataset.mentality1 = staff[\"mentality1\"];\n      newDiv.dataset.mentality2 = staff[\"mentality2\"];\n      newDiv.dataset.globalMentality = staff[\"global_mentality\"];\n    }\n    let mentality = staff[\"global_mentality\"];\n    let ovr = calculateOverall(statsString, \"staff\", mentality);\n    ovrSpan.textContent = ovr[0];\n    mentality_ovrSpan.textContent = \"\";\n    if (ovr[0] !== ovr[1]) {\n      mentality_ovrSpan.textContent = ovr[1];\n    }\n    ovrDiv.appendChild(mentality_ovrSpan);\n    let modifier = getMentalityModifier(mentality);\n    if (modifier > 0) {\n      mentality_ovrSpan.classList.add(\"mentality-small-ovr-positive\");\n    } else if (modifier < 0) {\n      mentality_ovrSpan.classList.add(\"mentality-small-ovr-negative\");\n    }\n    ovrDiv.appendChild(ovrSpan);\n    ovrDiv.classList.add(\"bold-font\");\n    ovrDiv.classList.add(\"small-ovr\");\n    newDiv.appendChild(ovrDiv);\n    newDiv.addEventListener('click', () => {\n      let elementosClicked = document.querySelectorAll('.clicked');\n      elementosClicked.forEach(item => item.classList.remove('clicked'));\n      newDiv.classList.toggle('clicked');\n      driverStatTitle.value = newDiv.dataset.name;\n      load_stats(newDiv);\n      if (statPanelShown == 0) {\n        document.getElementById(\"editStatsPanel\").className = \"left-panel-stats\";\n        statPanelShown = 1;\n      }\n      recalculateOverall();\n      let diff = parseInt(ovr[1]) - parseInt(ovr[0]);\n      let mentalitydiff = document.querySelector(\".mentality-change-ovr\");\n      if (diff > 0) {\n        mentalitydiff.textContent = \"+\" + diff;\n        mentalitydiff.classList.add(\"positive\");\n      } else if (diff < 0) {\n        mentalitydiff.textContent = diff;\n        mentalitydiff.classList.add(\"negative\");\n      } else {\n        mentalitydiff.textContent = \"\";\n        mentalitydiff.classList.remove(\"positive\");\n        mentalitydiff.classList.remove(\"negative\");\n      }\n    });\n    document.getElementById(divPosition).appendChild(newDiv);\n  });\n}\nfunction getMentalityModifier(mentality) {\n  let keys = Object.keys(_config__WEBPACK_IMPORTED_MODULE_0__.mentalityModifiers).map(Number).sort((a, b) => a - b);\n  let nextKey = keys.find(key => key > mentality);\n  return nextKey !== undefined ? _config__WEBPACK_IMPORTED_MODULE_0__.mentalityModifiers[nextKey] : null;\n}\n\n/**\r\n * changes the overall placed in the overall square\r\n */\nfunction recalculateOverall() {\n  let stats = \"\";\n  document.querySelectorAll(\".elegible\").forEach(function (elem) {\n    stats += elem.value + \" \";\n  });\n  stats = stats.slice(0, -1);\n  let oldovr = document.getElementById(\"ovrholder\").innerHTML;\n  let ovr = calculateOverall(stats, typeOverall, 2, \"big\");\n  if (oldovr > ovr) {\n    document.getElementById(\"ovrholder\").innerHTML = ovr;\n    document.getElementById(\"ovrholder\").className = \"overall-holder bold-font alertNeg\";\n    setTimeout(() => {\n      document.getElementById(\"ovrholder\").className = \"overall-holder bold-font\";\n    }, 300);\n  } else if (oldovr < ovr) {\n    document.getElementById(\"ovrholder\").innerHTML = ovr;\n    document.getElementById(\"ovrholder\").className = \"overall-holder bold-font alertPos\";\n    setTimeout(() => {\n      document.getElementById(\"ovrholder\").className = \"overall-holder bold-font\";\n    }, 300);\n  }\n}\n\n/**\r\n * eventListeenr for the confirm button for the stats\r\n */\n\n/**\r\n * Gets the named with a space between name and lastname\r\n * @param {*} html element with the name bad formatted\r\n * @returns the name formatted\r\n */\nfunction getName(html) {\n  let name = \"\";\n  html.querySelectorAll('span').forEach(function (elem) {\n    name += elem.innerText + \" \";\n  });\n  name = name.slice(0, -1);\n  return name;\n}\n\n/**\r\n * Mathematic calculations to get a staff's overall value\r\n * @param {string} stats all stats spearated by a space between them\r\n * @param {string} type type of staff\r\n * @returns the number of his overall value\r\n */\nfunction calculateOverall(stats, type, mentality = 2, ovr = \"small\") {\n  let statsArray = stats.split(\" \").map(Number);\n  let mentality_stats = [];\n  for (let i = 0; i < statsArray.length; i++) {\n    mentality_stats[i] = statsArray[i] + getMentalityModifier(mentality);\n  }\n  let rating, mentality_rating;\n  if (type === \"driver\") {\n    let cornering = statsArray[0];\n    let braking = statsArray[1];\n    let control = statsArray[2];\n    let smoothness = statsArray[3];\n    let adaptability = statsArray[4];\n    let overtaking = statsArray[5];\n    let defence = statsArray[6];\n    let reactions = statsArray[7];\n    let accuracy = statsArray[8];\n    rating = (cornering + braking * 0.75 + reactions * 0.5 + control * 0.75 + smoothness * 0.5 + accuracy * 0.75 + adaptability * 0.25 + overtaking * 0.25 + defence * 0.25) / 5;\n    mentality_rating = (mentality_stats[0] + mentality_stats[1] * 0.75 + mentality_stats[7] * 0.5 + mentality_stats[2] * 0.75 + mentality_stats[3] * 0.5 + mentality_stats[8] * 0.75 + mentality_stats[4] * 0.25 + mentality_stats[5] * 0.25 + mentality_stats[6] * 0.25) / 5;\n  } else if (type === \"staff\") {\n    let suma = 0;\n    mentality_rating = 0;\n    for (let i = 0; i < statsArray.length; i++) {\n      suma += statsArray[i];\n      mentality_rating += mentality_stats[i];\n    }\n    rating = suma / statsArray.length;\n    mentality_rating = mentality_rating / statsArray.length;\n  }\n  if (ovr === \"small\") {\n    return [Math.round(rating), Math.round(mentality_rating)];\n  } else {\n    return Math.round(rating);\n  }\n}\nfunction updateStat(input, increment) {\n  let val = parseInt(input.value) + increment;\n  if (val > 100) val = 100;\n  if (val < 0) val = 0;\n  input.value = val;\n  recalculateOverall();\n  manage_stat_bar(input, val);\n}\ndocument.querySelectorAll(\".attirbutes-panel .bi-plus-lg\").forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\"input\");\n    updateStat(input, 1);\n    intervalId = setInterval(() => {\n      updateStat(input, 1);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelectorAll(\".attirbutes-panel .bi-dash-lg\").forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\"input\");\n    updateStat(input, -1);\n    intervalId = setInterval(() => {\n      updateStat(input, -1);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelectorAll(\".age-holder .bi-plus-lg\").forEach(function (elem) {\n  elem.addEventListener('mousedown', function (event) {\n    let intervalId;\n    let input = event.target.parentNode.parentNode.querySelector(\".age-ret\");\n    function updateRetirement(increment) {\n      let age = parseInt(input.innerText.split(\" \")[1]) + increment;\n      input.innerText = input.dataset.text + \" \" + age;\n    }\n    updateRetirement(1);\n    intervalId = setInterval(() => {\n      updateRetirement(1);\n    }, 100);\n    this.addEventListener('mouseup', function () {\n      clearInterval(intervalId);\n    });\n    this.addEventListener('mouseleave', function () {\n      clearInterval(intervalId);\n    });\n  });\n});\ndocument.querySelectorAll(\".age-holder .bi-dash-lg\").forEach(function (elem) {\n  elem.addEventListener('mousedown', function (event) {\n    let intervalId;\n    let input = event.target.parentNode.parentNode.querySelector(\".age-ret\");\n    function updateRetirement(increment) {\n      let age = parseInt(input.innerText.split(\" \")[1]) + increment;\n      input.innerText = input.dataset.text + \" \" + age;\n    }\n    updateRetirement(-1);\n    intervalId = setInterval(() => {\n      updateRetirement(-1);\n    }, 100);\n    this.addEventListener('mouseup', function () {\n      clearInterval(intervalId);\n    });\n    this.addEventListener('mouseleave', function () {\n      clearInterval(intervalId);\n    });\n  });\n});\ndocument.querySelector(\"#nameFilter\").addEventListener(\"input\", function (event) {\n  let text = event.target.value;\n  if (text !== \"\") {\n    document.querySelector(\"#filterContainer\").querySelector(\".bi-x\").classList.remove(\"d-none\");\n  } else {\n    document.querySelector(\"#filterContainer\").querySelector(\".bi-x\").classList.add(\"d-none\");\n  }\n  let elements = document.querySelectorAll(\".normal-driver\");\n  elements.forEach(function (elem) {\n    let first_name = elem.children[0].children[0].innerText;\n    let last_name = elem.children[0].children[1].innerText;\n    let full_name = first_name + \" \" + last_name;\n    let minus = full_name.toLowerCase();\n    let name = text.toLowerCase();\n    if (minus.includes(name)) {\n      elem.classList.remove(\"d-none\");\n    } else {\n      elem.classList.add(\"d-none\");\n    }\n  });\n});\ndocument.querySelectorAll(\".text-filter-container .bi-x\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let input = elem.parentNode.querySelector(\"input\");\n    input.value = \"\";\n    elem.classList.add(\"d-none\");\n    let event = new Event('input', {\n      bubbles: true,\n      cancelable: true\n    });\n    input.dispatchEvent(event);\n  });\n});\ndocument.querySelector(\"#filterIcon\").addEventListener(\"click\", function () {\n  document.getElementById(\"edit_stats\").querySelector(\".category-filters\").classList.toggle(\"show\");\n  document.getElementById(\"edit_stats\").querySelector(\".filter-container\").classList.toggle(\"focused\");\n});\ndocument.getElementById(\"edit_stats\").querySelectorAll(\".filter-pills\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function (event) {\n    let isActive = elem.classList.contains('active');\n    document.getElementById(\"edit_stats\").querySelectorAll('.filter-pills').forEach(function (el) {\n      el.classList.remove('active');\n    });\n    if (!isActive) {\n      elem.classList.add('active');\n    }\n  });\n});\ndocument.querySelector(\"#F1filter\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      if (parseInt(elem.dataset.raceFormula) === 1) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\ndocument.querySelector(\"#F2filter\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      if (parseInt(elem.dataset.raceFormula) === 2) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\ndocument.querySelector(\"#F3filter\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      if (parseInt(elem.dataset.raceFormula) === 3) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\ndocument.querySelector(\"#freefilter\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      if (parseInt(elem.dataset.raceFormula) === 4) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\ndocument.querySelector(\".order-space\").querySelectorAll(\"i\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function (event) {\n    let parent = elem.parentNode;\n    let state = parent.dataset.state;\n    let orderNumUp = document.querySelector(\".bi-sort-numeric-up-alt\");\n    let orderNumDown = document.querySelector(\".bi-sort-numeric-down\");\n    parent.dataset.state = (parseInt(state) + 1) % 3;\n    if (parent.dataset.state == 0) {\n      orderNumUp.classList.remove(\"active\");\n      orderNumUp.classList.remove(\"hidden\");\n      orderNumDown.classList.add(\"hidden\");\n    } else if (parent.dataset.state == 1) {\n      orderNumDown.classList.add(\"hidden\");\n      orderNumDown.classList.add(\"active\");\n      orderNumUp.classList.add(\"active\");\n      orderNumUp.classList.remove(\"hidden\");\n    } else if (parent.dataset.state == 2) {\n      orderNumUp.classList.remove(\"active\");\n      orderNumUp.classList.add(\"hidden\");\n      orderNumDown.classList.add(\"active\");\n      orderNumDown.classList.remove(\"hidden\");\n    }\n    manage_order(parseInt(parent.dataset.state));\n  });\n});\n\n/**\r\n * Adds eventListeners to all the elements of the staff dropdown\r\n */\nfunction listenersStaffGroups() {\n  document.querySelectorAll('#staffMenu a').forEach(item => {\n    item.addEventListener(\"click\", function () {\n      const staffButton = document.getElementById('staffDropdown');\n      let staffSelected = item.innerHTML;\n      let staffCode = item.dataset.spacestats;\n      if (staffCode === \"driverStats\") {\n        typeOverall = \"driver\";\n        typeEdit = \"0\";\n        document.getElementById(\"driverSpecialAttributes\").classList.remove(\"d-none\");\n        document.querySelector(\"#superLicenseSwitch\").classList.remove(\"d-none\");\n        document.querySelector(\"#driverCode\").classList.remove(\"d-none\");\n      } else {\n        typeOverall = \"staff\";\n        document.getElementById(\"driverSpecialAttributes\").classList.add(\"d-none\");\n        document.querySelector(\"#superLicenseSwitch\").classList.add(\"d-none\");\n        document.querySelector(\"#driverCode\").classList.add(\"d-none\");\n        if (staffCode === \"chiefStats\") {\n          typeEdit = \"1\";\n        }\n        if (staffCode === \"engineerStats\") {\n          typeEdit = \"2\";\n        }\n        if (staffCode === \"aeroStats\") {\n          typeEdit = \"3\";\n        }\n        if (staffCode === \"directorStats\") {\n          typeEdit = \"4\";\n        }\n      }\n      staffButton.innerHTML = staffSelected;\n      change_elegibles(item.dataset.spacestats);\n      document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n        elem.classList.add(\"d-none\");\n        if (item.dataset.list == elem.id) {\n          elem.classList.remove(\"d-none\");\n        }\n      });\n      document.querySelector(\".left-panel-stats\").classList.add(\"d-none\");\n      statPanelShown = 0;\n    });\n  });\n}\nfunction manage_order(state) {\n  let elements = document.querySelectorAll(\".normal-driver\");\n  let array = Array.from(elements);\n\n  // Crear un objeto para almacenar los padres originales\n  let parents = {};\n  array.forEach(elem => {\n    parents[elem.dataset.driverid] = elem.parentNode; // Asumiendo que cada .normal-driver tiene un data-id único\n  });\n  let sortedArray = array.sort(function (a, b) {\n    let ovrA = parseInt(a.children[1].innerText);\n    let ovrB = parseInt(b.children[1].innerText);\n    let teamA = parseInt(a.dataset.teamid);\n    let teamB = parseInt(b.dataset.teamid);\n    if (state == 0) {\n      if (teamA === 0) return 1;\n      if (teamB === 0) return -1;\n      let indexA = _config__WEBPACK_IMPORTED_MODULE_0__.teamOrder.indexOf(teamA);\n      let indexB = _config__WEBPACK_IMPORTED_MODULE_0__.teamOrder.indexOf(teamB);\n      if (indexA !== indexB) {\n        return indexA - indexB;\n      }\n      return ovrB - ovrA;\n    } else if (state == 1) {\n      return ovrB - ovrA;\n    } else {\n      return ovrA - ovrB;\n    }\n  });\n\n  // Limpiar los contenedores\n  document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n    elem.innerHTML = \"\";\n  });\n\n  // Volver a colocar los elementos ordenados en sus padres originales\n  sortedArray.forEach(function (elem) {\n    let parent = parents[elem.dataset.driverid];\n    parent.appendChild(elem);\n  });\n}\nfunction manage_stat_bar(element, value) {\n  let container = element.parentNode.parentNode.parentNode;\n  let bar = container.querySelector(\".one-stat-progress\");\n  let percentage = value + \"%\";\n  bar.style.width = percentage;\n}\nfunction manage_mentality_modifiers(element, mentality) {\n  let name_stat = element.parentNode.parentNode.querySelector(\"span.bold-font\");\n  let modifier_span = name_stat.querySelector(\".mentality-modifier\");\n  if (modifier_span) {\n    modifier_span.remove();\n  }\n  let modifier = getMentalityModifier(mentality);\n  let mentality_class,\n    span = \"\";\n  if (modifier > 0) {\n    mentality_class = \"positive\";\n    span = \"<span class='mentality-modifier positive'> +\" + modifier + \"</span>\";\n  } else if (modifier < 0) {\n    mentality_class = \"negative\";\n    span = \"<span class='mentality-modifier negative'> \" + modifier + \"</span>\";\n  }\n  if (name_stat.textContent !== \"GROWTH\" && name_stat.textContent !== \"AGRESSION\") {\n    name_stat.innerHTML = name_stat.textContent + span;\n  }\n}\n\n/**\r\n * Loads the stats into the input numbers\r\n * @param {div} div div of the staff that is about to be edited\r\n */\nfunction load_stats(div) {\n  let statsArray = div.dataset.stats.split(\" \").map(Number);\n  let inputArray = document.querySelectorAll(\".elegible\");\n  inputArray.forEach(function (input, index) {\n    let value = statsArray[index];\n    input.value = value;\n    manage_stat_bar(input, value);\n    manage_mentality_modifiers(input, div.dataset.globalMentality);\n  });\n  let actualAge = document.querySelector(\".actual-age\");\n  let retirementAge = document.querySelector(\".actual-retirement\");\n  let numberButton = document.querySelector(\"#numberButton\");\n  let numberWC = document.querySelector(\"#driverNumber1\");\n  let codeInput = document.querySelector(\"#driverCode\");\n  codeInput.value = div.dataset.driverCode;\n  oldNum = div.dataset.number;\n  actualAge.innerText = \"Age \" + div.dataset.age;\n  retirementAge.innerText = \"Ret \" + div.dataset.retirement;\n  numberButton.querySelector(\".front-gradient\").innerText = div.dataset.number;\n  if (div.dataset.numWC === \"0\") {\n    numberWC.checked = false;\n  } else {\n    numberWC.checked = true;\n  }\n  if (div.dataset.superLicense === \"1\") {\n    document.querySelector(\"#superLicense\").checked = true;\n  } else {\n    document.querySelector(\"#superLicense\").checked = false;\n  }\n  if (div.dataset.isRetired === \"1\") {\n    document.querySelector(\"#retiredInput\").checked = true;\n  } else {\n    document.querySelector(\"#retiredInput\").checked = false;\n  }\n  if (div.dataset.mentality0) {\n    for (let i = 0; i < 3; i++) {\n      let mentality = div.dataset[\"mentality\" + i];\n      let indicator = document.getElementById(\"mentality\" + i);\n      indicator.parentNode.parentNode.classList.remove(\"d-none\");\n      indicator.dataset.value = mentality;\n      let inverted_value = 5 - mentality;\n      let levels = indicator.querySelectorAll('.mentality-level');\n      let mentality_class = _config__WEBPACK_IMPORTED_MODULE_0__.mentality_dict[mentality];\n      for (let j = 0; j < 5; j++) {\n        levels[j].className = \"mentality-level\";\n        if (j <= inverted_value - 1) {\n          levels[j].classList.add(mentality_class);\n        }\n      }\n      let nameEmoji = indicator.parentNode.parentNode.querySelector(\".mentality-and-emoji\");\n      nameEmoji.innerText = capitalizeFirstLetter(mentality_class);\n      nameEmoji.className = \"mentality-and-emoji\";\n      nameEmoji.classList.add(mentality_class);\n    }\n  } else {\n    for (let i = 0; i < 3; i++) {\n      let indicator = document.getElementById(\"mentality\" + i);\n      indicator.parentNode.parentNode.classList.add(\"d-none\");\n    }\n  }\n  if (div.dataset.marketability) {\n    document.querySelector(\"#marketability\").classList.remove(\"d-none\");\n    document.getElementById(\"marketabilityInput\").value = div.dataset.marketability;\n    document.getElementById(\"marketabilityBar\").style.width = div.dataset.marketability + \"%\";\n  } else {\n    document.querySelector(\"#marketability\").classList.add(\"d-none\");\n  }\n}\ndocument.querySelectorAll(\".bar-container .bi-chevron-right\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let indicator = elem.parentNode.querySelector(\".mentality-level-indicator\");\n    let value = parseInt(indicator.getAttribute('data-value')) - 1;\n    if (value < 0) {\n      value = 0;\n    }\n    let inverted_value = 5 - value;\n    indicator.setAttribute('data-value', value);\n    let levels = indicator.querySelectorAll('.mentality-level');\n    let mentality_class = _config__WEBPACK_IMPORTED_MODULE_0__.mentality_dict[value];\n    for (let j = 0; j < 5; j++) {\n      levels[j].className = \"mentality-level\";\n      if (j <= inverted_value - 1) {\n        levels[j].classList.add(mentality_class);\n      }\n    }\n    let nameEmoji = elem.parentNode.parentNode.querySelector(\".mentality-and-emoji\");\n    nameEmoji.innerText = capitalizeFirstLetter(mentality_class);\n    nameEmoji.className = \"mentality-and-emoji\";\n    nameEmoji.classList.add(mentality_class);\n  });\n});\ndocument.querySelectorAll(\".bar-container .bi-chevron-left\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let indicator = elem.parentNode.querySelector(\".mentality-level-indicator\");\n    let value = parseInt(indicator.getAttribute('data-value')) + 1;\n    if (value > 4) {\n      value = 4;\n    }\n    let inverted_value = 5 - value;\n    indicator.setAttribute('data-value', value);\n    let levels = indicator.querySelectorAll('.mentality-level');\n    let mentality_class = _config__WEBPACK_IMPORTED_MODULE_0__.mentality_dict[value];\n    for (let j = 0; j < 5; j++) {\n      levels[j].className = \"mentality-level\";\n      if (j <= inverted_value - 1) {\n        levels[j].classList.add(mentality_class);\n      }\n    }\n    let nameEmoji = elem.parentNode.parentNode.querySelector(\".mentality-and-emoji\");\n    nameEmoji.innerText = capitalizeFirstLetter(mentality_class);\n    nameEmoji.className = \"mentality-and-emoji\";\n    nameEmoji.classList.add(mentality_class);\n  });\n});\nfunction capitalizeFirstLetter(str) {\n  if (!str) return str; // Manejo de cadena vacía\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}\n\n/**\r\n * Generates the name title on the main panel of the edit stats\r\n * @param {div} html div from the staff selected\r\n * @returns the html necessary to put in the name with correct color\r\n */\nfunction manage_stats_title(html) {\n  let colorClass = \"\";\n  if (html.dataset.teamid != 0) {\n    colorClass = _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[html.dataset.teamid] + \"font\";\n  }\n  let spanName = document.createElement(\"span\");\n  let spanLastName = document.createElement(\"span\");\n  let name = \"<span>\" + html.children[0].children[0].innerText + \" </span>\" + \"<span class='\" + colorClass + \"'>\" + html.children[0].children[1].innerText + \"</span>\";\n\n  //let name = html.substring(0,html.length - 2).trim();\n\n  return name;\n}\n\n/**\r\n * Changes the input number that are taken into account to change stats \r\n * @param {div} divID div that contains the correct input numbers  \r\n */\nfunction change_elegibles(divID) {\n  document.querySelectorAll(\".elegible\").forEach(function (elem) {\n    elem.classList.remove(\"elegible\");\n  });\n  let divStats = document.getElementById(divID);\n  divStats.querySelectorAll(\".custom-input-number\").forEach(function (elem) {\n    elem.classList.add(\"elegible\");\n  });\n  if (divID === \"driverStats\") {\n    document.getElementById(\"growthInput\").classList.add(\"elegible\");\n    document.getElementById(\"agressionInput\").classList.add(\"elegible\");\n  }\n  document.querySelectorAll(\".main-panel-stats\").forEach(function (elem) {\n    elem.className = \"main-panel-stats d-none\";\n  });\n  divStats.classList.remove(\"d-none\");\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/stats.js?");

/***/ }),

/***/ "./src/js/frontend/teams.js":
/*!**********************************!*\
  !*** ./src/js/frontend/teams.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fillLevels: () => (/* binding */ fillLevels),\n/* harmony export */   gather_pit_crew: () => (/* binding */ gather_pit_crew),\n/* harmony export */   gather_team_data: () => (/* binding */ gather_team_data),\n/* harmony export */   longTermObj: () => (/* binding */ longTermObj),\n/* harmony export */   originalCostCap: () => (/* binding */ originalCostCap),\n/* harmony export */   resetTeamEditing: () => (/* binding */ resetTeamEditing),\n/* harmony export */   teamCod: () => (/* binding */ teamCod)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/js/frontend/renderer.js\");\n/* harmony import */ var _stats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stats */ \"./src/js/frontend/stats.js\");\n\n\n\nlet teamCod;\nlet currYear;\nlet originalCostCap;\nlet longTermObj;\n\n/**\r\n * Listener for the team menu buttons\r\n */\ndocument.querySelector(\"#teamMenu\").querySelectorAll(\"a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    document.querySelector(\"#teamButton\").innerText = elem.querySelector(\".team-menu-name\").innerText;\n    teamCod = elem.dataset.teamid;\n    let data = {\n      teamID: teamCod\n    };\n    const message = {\n      command: 'teamRequest',\n      data: data\n    };\n    const command = _renderer__WEBPACK_IMPORTED_MODULE_1__.factory.createCommand(message);\n    command.execute();\n    document.querySelector(\".team-viewer\").classList.remove(\"d-none\");\n  });\n});\n\n/**\r\n * Listener for the objective menu dropdown\r\n */\ndocument.querySelector(\"#objectiveMenu\").querySelectorAll(\"a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    document.querySelector(\".objective-label\").innerText = elem.textContent;\n    longTermObj = elem.id[elem.id.length - 1];\n  });\n});\n\n/**\r\n * Helper function to add mousedown listener with auto increment/decrement\r\n */\nfunction addContinuousListener(element, selector, incrementCallback, decrementCallback) {\n  let intervalId;\n  element.querySelectorAll(selector).forEach(function (elem) {\n    elem.addEventListener('mousedown', function () {\n      let input = this.parentNode.parentNode.querySelector(\"input\");\n      if (this.classList.contains('bi-chevron-up') || this.classList.contains('bi-plus-lg')) {\n        incrementCallback(input);\n        intervalId = setInterval(() => {\n          incrementCallback(input);\n        }, 100);\n      } else if (this.classList.contains('bi-chevron-down') || this.classList.contains('bi-dash-lg')) {\n        decrementCallback(input);\n        intervalId = setInterval(() => {\n          decrementCallback(input);\n        }, 100);\n      }\n    });\n    elem.addEventListener('mouseup', function () {\n      clearInterval(intervalId);\n    });\n    elem.addEventListener('mouseleave', function () {\n      clearInterval(intervalId);\n    });\n  });\n}\n\n/**\r\n * Listeners for the long term input year\r\n */\naddContinuousListener(document.querySelector(\"#objAndYear\"), \".bi-chevron-up, .bi-chevron-down\", function (input) {\n  input.value = Number(input.value) + 1;\n}, function (input) {\n  let value = Number(input.value) - 1;\n  if (value <= currYear) {\n    value = currYear;\n  }\n  input.value = value;\n});\n\n/**\r\n * Listeners for the season objective input\r\n */\naddContinuousListener(document.querySelector(\"#seasonObjective\"), \".bi-chevron-up, .bi-chevron-down\", function (input) {\n  let value = Number(input.value) - 1;\n  if (value <= 1) {\n    value = 1;\n  }\n  input.value = value;\n}, function (input) {\n  let value = Number(input.value) + 1;\n  if (value >= 10) {\n    value = 10;\n  }\n  input.value = value;\n});\n\n/**\r\n * Listeners for the board confidence input\r\n */\naddContinuousListener(document.querySelector(\"#confidence\"), \".bi-plus-lg, .bi-dash-lg\", function (input) {\n  let value = Number(input.value) + 5;\n  if (value >= 100) {\n    value = 100;\n  }\n  input.value = value;\n}, function (input) {\n  let value = Number(input.value) - 5;\n  if (value <= 0) {\n    value = 0;\n  }\n  input.value = value;\n});\n\n/**\r\n * Listeners for the cost cap input\r\n */\naddContinuousListener(document.querySelector(\"#costCap\"), \".bi-plus-lg, .bi-dash-lg\", function (input) {\n  let valorActual = input.value.replace(/[$,]/g, \"\");\n  let nuevoValor = Number(valorActual) + 100000;\n  input.value = nuevoValor.toLocaleString('en-US') + '$';\n}, function (input) {\n  let valorActual = input.value.replace(/[$,]/g, \"\");\n  let nuevoValor = Number(valorActual) - 100000;\n  input.value = nuevoValor.toLocaleString('en-US') + '$';\n});\n\n/**\r\n * Listeners for the team budget input\r\n */\naddContinuousListener(document.querySelector(\"#teamBudget\"), \".bi-plus-lg, .bi-dash-lg\", function (input) {\n  let valorActual = input.value.replace(/[$,]/g, \"\");\n  let nuevoValor = Number(valorActual) + 100000;\n  input.value = nuevoValor.toLocaleString('en-US') + '$';\n}, function (input) {\n  let valorActual = input.value.replace(/[$,]/g, \"\");\n  let nuevoValor = Number(valorActual) - 100000;\n  input.value = nuevoValor.toLocaleString('en-US') + '$';\n});\nfunction updateCondition(input, increment, bar) {\n  let actual = input.innerText.split(\"%\")[0];\n  let val = parseInt(actual) + increment;\n  if (val > 100) val = 100;\n  if (val < 0) val = 0;\n  input.innerText = val + \"%\";\n  bar.style.width = val + \"%\";\n}\ndocument.querySelectorAll(\".condition-container .bi-plus\").forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    let input = button.parentNode.parentNode.querySelector(\".condition-container-value\");\n    let bar = button.parentNode.parentNode.querySelector(\".condition-container-bar-progress\");\n    updateCondition(input, 1, bar);\n    intervalId = setInterval(() => {\n      updateCondition(input, 1, bar);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelectorAll(\".condition-container .bi-dash\").forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    let input = button.parentNode.parentNode.querySelector(\".condition-container-value\");\n    let bar = button.parentNode.parentNode.querySelector(\".condition-container-bar-progress\");\n    updateCondition(input, -1, bar);\n    intervalId = setInterval(() => {\n      updateCondition(input, -1, bar);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\n\n/**\r\n * Listeners for the show and hide buttons facilities\r\n */\ndocument.querySelector(\"#carDevButton\").addEventListener(\"click\", function () {\n  if (document.querySelector(\"#operationButton\").dataset.state === \"show\") {\n    document.querySelector(\"#operationButton\").click();\n  }\n  if (document.querySelector(\"#staffButton\").dataset.state === \"show\") {\n    document.querySelector(\"#staffButton\").click();\n  }\n  if (document.querySelector(\"#carDevButton\").dataset.state === \"show\") {\n    document.querySelector(\"#carDevButton\").dataset.state = \"hide\";\n    document.querySelector(\"#carDevButton\").querySelector(\".front-gradient\").innerText = \"Show\";\n  } else {\n    document.querySelector(\"#carDevButton\").dataset.state = \"show\";\n    document.querySelector(\"#carDevButton\").querySelector(\".front-gradient\").innerText = \"Hide\";\n  }\n});\ndocument.querySelector(\"#operationButton\").addEventListener(\"click\", function () {\n  if (document.querySelector(\"#carDevButton\").dataset.state === \"show\") {\n    document.querySelector(\"#carDevButton\").click();\n  }\n  if (document.querySelector(\"#staffButton\").dataset.state === \"show\") {\n    document.querySelector(\"#staffButton\").click();\n  }\n  if (document.querySelector(\"#operationButton\").dataset.state === \"show\") {\n    document.querySelector(\"#operationButton\").dataset.state = \"hide\";\n    document.querySelector(\"#operationButton\").querySelector(\".front-gradient\").innerText = \"Show\";\n  } else {\n    document.querySelector(\"#operationButton\").dataset.state = \"show\";\n    document.querySelector(\"#operationButton\").querySelector(\".front-gradient\").innerText = \"Hide\";\n  }\n});\ndocument.querySelector(\"#staffButton\").addEventListener(\"click\", function () {\n  if (document.querySelector(\"#operationButton\").dataset.state === \"show\") {\n    document.querySelector(\"#operationButton\").click();\n  }\n  if (document.querySelector(\"#carDevButton\").dataset.state === \"show\") {\n    document.querySelector(\"#carDevButton\").click();\n  }\n  if (document.querySelector(\"#staffButton\").dataset.state === \"show\") {\n    document.querySelector(\"#staffButton\").dataset.state = \"hide\";\n    document.querySelector(\"#staffButton\").querySelector(\".front-gradient\").innerText = \"Show\";\n  } else {\n    document.querySelector(\"#staffButton\").dataset.state = \"show\";\n    document.querySelector(\"#staffButton\").querySelector(\".front-gradient\").innerText = \"Hide\";\n  }\n});\n\n/**\r\n * Fills the level for each facility\r\n * @param {object} teamData info of the team facilities\r\n */\nfunction fillLevels(teamData) {\n  console.log(teamData);\n  teamData.slice(0, 15).forEach(function (elem) {\n    let num = elem[0];\n    let level = num % 10;\n    let facilityID = Math.floor(num / 10);\n    let facility = document.querySelector(\"#facility\" + facilityID);\n    let indicator = facility.querySelector('.facility-level-indicator');\n    let condition_container = facility.querySelector('.condition-container');\n    let bar = condition_container.querySelector('.condition-container-bar-progress');\n    let condition_value = condition_container.querySelector('.condition-container-value');\n    bar.style.width = elem[1] * 100 + \"%\";\n    condition_value.innerText = parseInt(elem[1] * 100) + \"%\";\n    indicator.dataset.value = level;\n    let value = level;\n    let levels = indicator.querySelectorAll('.level');\n    for (let i = 0; i < 5; i++) {\n      levels[i].className = \"level\";\n      if (i <= value - 1) {\n        levels[i].classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamCod] + 'activated');\n      }\n    }\n  });\n  document.querySelector(\"#seasonObjectiveInput\").value = teamData[16];\n  document.querySelector(\"#longTermObj\" + teamData[17][0]).click();\n  document.querySelector(\"#longTermInput\").value = teamData[17][1];\n  document.querySelector(\"#teamBudgetInput\").value = teamData[18].toLocaleString(\"en-US\") + \"$\";\n  document.querySelector(\"#costCapInput\").value = Math.abs(teamData[19][0]).toLocaleString(\"en-US\") + \"$\";\n  manageConfidence(teamData[20]);\n  document.querySelector(\"#confidenceInput\").value = teamData[20];\n  currYear = teamData[21];\n  originalCostCap = Math.abs(teamData[19][0]);\n  for (let key in teamData[22]) {\n    let pitCrewStat = document.querySelector(`.pit-crew-details .one-stat-panel[data-crewStat='${key}']`);\n    let input = pitCrewStat.querySelector(\"input\");\n    let value = Math.round(teamData[22][key]);\n    if (key === \"38\") {\n      value = value / 10;\n    }\n    input.value = value + \"%\";\n    let bar = pitCrewStat.querySelector(\".one-stat-progress\");\n    bar.style.width = value + \"%\";\n  }\n  let engineManufacturer = teamData[23];\n  document.querySelector(`#engineMenu a[data-engine='${engineManufacturer}']`).click();\n  let bars = document.querySelector(\".pit-crew-details\").querySelectorAll(\".one-stat-progress\");\n  bars.forEach(function (elem) {\n    elem.classList = \"one-stat-progress \" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamCod] + \"bar-primary\";\n  });\n}\ndocument.querySelectorAll(\".facility-refurbish svg\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let facility = elem.parentNode.parentNode;\n    let condition_value = facility.querySelector('.condition-container-value');\n    let bar = facility.querySelector('.condition-container-bar-progress');\n    condition_value.innerText = \"100%\";\n    bar.style.width = \"100%\";\n  });\n});\ndocument.querySelectorAll(\"#engineMenu a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let engineiD = elem.dataset.engine;\n    let engine = elem.innerText;\n    document.querySelector(\"#engineLabel\").innerText = engine;\n    document.querySelector(\"#engineButton\").dataset.value = engineiD;\n  });\n});\n\n/**\r\n * Resets the view\r\n */\nfunction resetTeamEditing() {\n  document.querySelector(\".team-viewer\").classList.add(\"d-none\");\n  teamCod = null;\n  document.querySelector(\"#teamButton\").innerText = \"Team\";\n}\nfunction updatePitStat(input, increment) {\n  let actual = input.value.split(\"%\")[0];\n  let val = parseInt(actual) + increment;\n  if (val > 100) val = 100;\n  if (val < 0) val = 0;\n  input.value = val + \"%\";\n  (0,_stats__WEBPACK_IMPORTED_MODULE_2__.manage_stat_bar)(input, val);\n}\ndocument.querySelector(\".pit-crew-details\").querySelectorAll(\".bi-plus-lg\").forEach(function (elem) {\n  let intervalId;\n  elem.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\"input\");\n    updatePitStat(input, 1);\n    intervalId = setInterval(() => {\n      updatePitStat(input, 1);\n    }, 100);\n  });\n  elem.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  elem.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".pit-crew-details\").querySelectorAll(\".bi-dash-lg\").forEach(function (elem) {\n  let intervalId;\n  elem.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\"input\");\n    updatePitStat(input, -1);\n    intervalId = setInterval(() => {\n      updatePitStat(input, -1);\n    }, 100);\n  });\n  elem.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  elem.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\n\n/**\r\n * Manages state of blocking div for confidence\r\n * @param {Number} data Confidence number. If -1, blocking div is activated\r\n */\nfunction manageConfidence(data) {\n  if (Number(data[0]) !== -1) {\n    document.querySelector(\".blocking-confidence\").classList.add(\"d-none\");\n  } else {\n    document.querySelector(\".blocking-confidence\").classList.remove(\"d-none\");\n  }\n}\n\n/**\r\n * Listeners for the level indicators for each facility\r\n */\ndocument.querySelector(\"#edit_teams\").querySelectorAll(\".bi-chevron-right\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let indicator = elem.parentNode.querySelector(\".facility-level-indicator\");\n    let value = parseInt(indicator.getAttribute('data-value')) + 1;\n    if (value > 5) {\n      value = 5;\n    }\n    indicator.setAttribute('data-value', value);\n    let levels = indicator.querySelectorAll('.level');\n    if (value <= levels.length) {\n      levels[value - 1].classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamCod] + 'activated');\n    }\n  });\n});\ndocument.querySelector(\"#edit_teams\").querySelectorAll(\".bi-chevron-left\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let indicator = elem.parentNode.querySelector(\".facility-level-indicator\");\n    let value = parseInt(indicator.getAttribute('data-value')) - 1;\n    if (value < 0) {\n      value = 0;\n    }\n    indicator.setAttribute('data-value', value);\n    let levels = indicator.querySelectorAll('.level');\n    if (value < levels.length) {\n      levels[value].className = \"level\";\n    }\n  });\n});\n\n/**\r\n * Collects the data for each facility\r\n * @returns array with tuples for each facility\r\n */\nfunction gather_team_data() {\n  let facilities = document.getElementsByClassName('facility');\n  let result = [];\n  for (let i = 0; i < facilities.length; i++) {\n    let facility = facilities[i];\n    let id = facility.id.match(/\\d+$/)[0]; // Extrae el número al final del id\n    let levelIndicator = facility.getElementsByClassName('facility-level-indicator')[0];\n    let level = levelIndicator.getAttribute('data-value');\n    let number = id + level; // Compone el número concatenando los strings\n    let condition = facility.querySelector('.condition-container-value').innerText.split(\"%\")[0] / 100;\n    result.push([number, condition]); // Añade la tupla a la lista\n  }\n  return result;\n}\nfunction gather_pit_crew() {\n  let pitCrewStats = document.querySelectorAll(\".pit-crew-details .one-stat-panel\");\n  let result = {};\n  pitCrewStats.forEach(function (elem) {\n    let key = elem.dataset.crewstat;\n    let value = elem.querySelector(\"input\").value.split(\"%\")[0];\n    if (key === \"38\") {\n      value = value * 10;\n    }\n    result[key] = value;\n  });\n  return result;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/teams.js?");

/***/ }),

/***/ "./src/js/frontend/transfers.js":
/*!**************************************!*\
  !*** ./src/js/frontend/transfers.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   currentSeason: () => (/* binding */ currentSeason),\n/* harmony export */   format_name: () => (/* binding */ format_name),\n/* harmony export */   freeDriversDiv: () => (/* binding */ freeDriversDiv),\n/* harmony export */   insert_space: () => (/* binding */ insert_space),\n/* harmony export */   loadNumbers: () => (/* binding */ loadNumbers),\n/* harmony export */   manageColor: () => (/* binding */ manageColor),\n/* harmony export */   manage_modal: () => (/* binding */ manage_modal),\n/* harmony export */   place_drivers: () => (/* binding */ place_drivers),\n/* harmony export */   place_staff: () => (/* binding */ place_staff),\n/* harmony export */   remove_drivers: () => (/* binding */ remove_drivers),\n/* harmony export */   setCurrentSeason: () => (/* binding */ setCurrentSeason),\n/* harmony export */   sortList: () => (/* binding */ sortList),\n/* harmony export */   update_name: () => (/* binding */ update_name)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/frontend/config.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/js/frontend/renderer.js\");\n\n\nconst myModal = new bootstrap.Modal(document.getElementById('contractModal'));\nconst raceBonusAmt = document.getElementById(\"raceBonusAmt\");\nconst raceBonusPos = document.getElementById(\"raceBonusPos\");\nconst freeDriversPill = document.getElementById(\"freepill\");\nconst f2DriversPill = document.getElementById(\"F2pill\");\nconst f3DriversPill = document.getElementById(\"F3pill\");\nconst freeDriversDiv = document.getElementById(\"free-drivers\");\nconst freeStaffDiv = document.getElementById(\"free-staff\");\nconst f2DriversDiv = document.getElementById(\"f2-drivers\");\nconst f3DriversDiv = document.getElementById(\"f3-drivers\");\nconst autoContractToggle = document.getElementById(\"autoContractToggle\");\nconst divsArray = [freeDriversDiv, f2DriversDiv, f3DriversDiv];\nconst fileInput = document.getElementById('fileInput');\nlet originalParent;\nlet destinationParent;\nlet draggable;\nlet teamDestiniy;\nlet teamOrigin;\nlet posInTeam;\nlet modalType;\nlet driverEditingID;\nlet driverEditingName;\nlet driver1;\nlet driver2;\nlet originalTeamId;\nlet currentSeason;\nfunction setCurrentSeason(season) {\n  currentSeason = season;\n}\nlet name_dict = {\n  'ferrari': \"Ferrari\",\n  'mclaren': \"McLaren\",\n  'redbull': \"Red Bull\",\n  'merc': \"Mercedes\",\n  'alpine': \"Alpine\",\n  'williams': \"Williams\",\n  'haas': \"Haas\",\n  'alphatauri': \"Alpha Tauri\",\n  'alfaromeo': \"Alfa Romeo\",\n  'astonmartin': \"Aston Martin\",\n  \"F2\": \"F2\",\n  \"F3\": \"F3\",\n  \"custom\": \"Custom Team\"\n};\n//custom team name changes so this dict stays here\n\n/**\r\n * Removes all the drivers from teams and categories\r\n */\nfunction remove_drivers() {\n  document.querySelectorAll('.driver-space').forEach(item => {\n    item.innerHTML = \"\";\n  });\n  document.querySelectorAll('.staff-space').forEach(item => {\n    item.innerHTML = \"\";\n  });\n  document.querySelectorAll('.affiliates-space').forEach(item => {\n    item.innerHTML = \"\";\n  });\n  freeDriversDiv.innerHTML = \"\";\n  freeStaffDiv.innerHTML = \"\";\n}\nfunction insert_space(str) {\n  return str.replace(/([A-Z])/g, ' $1').trim();\n}\nfunction format_name(fullName, nameSplitted, spanName, spanLastName) {\n  if (fullName.length > 17) {\n    let nameArray = fullName.split(\" \");\n    let firstName = nameArray[0];\n    if (insert_space(firstName).includes(\" \")) {\n      let splitName = insert_space(firstName).split(\" \");\n      spanName.textContent = splitName[0][0] + \". \" + splitName[1] + \" \";\n    } else {\n      spanName.textContent = firstName[0] + \". \";\n    }\n    spanLastName.textContent = nameArray.slice(1).join(\" \").toUpperCase();\n  } else {\n    spanName.textContent = insert_space(nameSplitted[0]) + \" \";\n    spanLastName.textContent = nameSplitted.slice(1).join(\" \").toUpperCase();\n  }\n}\n\n/**\r\n * Places all drivers in their respective team, category etc\r\n * @param {Object} driversArray List of drivers\r\n */\nfunction place_drivers(driversArray) {\n  let divPosition;\n  driversArray.forEach(driver => {\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = \"col free-driver\";\n    newDiv.dataset.driverid = driver[1];\n    newDiv.dataset.teamid = driver[2];\n    let name = driver[0].split(\" \");\n    let nameContainer = document.createElement(\"div\");\n    nameContainer.className = \"name-container\";\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    format_name(driver[0], name, spanName, spanLastName);\n    spanLastName.classList.add(\"bold-font\");\n    nameContainer.appendChild(spanName);\n    nameContainer.appendChild(spanLastName);\n    newDiv.appendChild(nameContainer);\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[2]] + \"-transparent\");\n    if (driver[\"team_future\"] !== -1) {\n      add_future_team_noti(newDiv, driver[\"team_future\"]);\n    }\n    newDiv.dataset.futureteam = driver[\"team_future\"];\n    manageColor(newDiv, spanLastName);\n    divPosition = \"free-drivers\";\n    let position = driver[3];\n    if (position >= 3) {\n      position = 3;\n    }\n    addIcon(newDiv);\n    add_edit_container(newDiv);\n    if (driver[2] > 0 && driver[2] <= 10 || driver[2] === 32) {\n      divPosition = _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[2]] + position;\n    }\n    document.getElementById(divPosition).appendChild(newDiv);\n  });\n}\nfunction add_edit_container(div) {\n  let edit_container = document.createElement(\"div\");\n  edit_container.className = \"edit-container\";\n  let numbersicon = document.createElement(\"i\");\n  numbersicon.className = \"bi bi bi-123\";\n  let pencilicon = document.createElement(\"i\");\n  pencilicon.className = \"bi bi-pencil-fill\";\n  edit_container.appendChild(pencilicon);\n  edit_container.appendChild(numbersicon);\n  div.appendChild(edit_container);\n  edit_container.addEventListener(\"click\", function () {\n    let id = div.dataset.driverid;\n    document.getElementById(\"statspill\").click();\n    let edit_stats_div = document.querySelector(`.normal-driver[data-driverid=\"${id}\"]`);\n    let typeStaff = _config__WEBPACK_IMPORTED_MODULE_0__.typeStaff_dict[edit_stats_div.dataset.type];\n    let menuClick = document.querySelector(`#staffMenu a[data-list=\"${typeStaff}\"]`);\n    menuClick.click();\n    edit_stats_div.click();\n    edit_stats_div.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"center\"\n    });\n  });\n}\nfunction update_name(driverID, name) {\n  let freeDiv = document.querySelector(`.free-driver[data-driverid='${driverID}']`);\n  let normalDiv = document.querySelector(`.normal-driver[data-driverid='${driverID}']`);\n  let nameContainer = freeDiv.querySelector(\".name-container\");\n  let nameArray = name.split(\" \");\n  let new_name = nameArray[0];\n  let new_surname = nameArray.slice(1).join(\" \").toUpperCase();\n  let firstNameContainer = nameContainer.childNodes[0];\n  let lastNameContainer = nameContainer.querySelector(\".bold-font\");\n  firstNameContainer.textContent = new_name;\n  lastNameContainer.textContent = new_surname;\n  firstNameContainer = normalDiv.childNodes[0].childNodes[0];\n  lastNameContainer = normalDiv.childNodes[0].querySelector(\".bold-font\");\n  firstNameContainer.textContent = new_name + \" \";\n  lastNameContainer.textContent = new_surname;\n  normalDiv.dataset.name = name;\n}\nfunction sortList(divID) {\n  let container = document.getElementById(divID);\n  let divs = Array.from(container.querySelectorAll('.free-driver'));\n  let compareFunction = (a, b) => {\n    let futureTeamA = parseInt(a.dataset.futureteam);\n    let futureTeamB = parseInt(b.dataset.futureteam);\n    if (futureTeamA > futureTeamB) return -1;\n    if (futureTeamA < futureTeamB) return 1;\n    let textA = a.firstElementChild.textContent.toLowerCase();\n    let textB = b.firstElementChild.textContent.toLowerCase();\n    return textA.localeCompare(textB);\n  };\n  divs.sort(compareFunction);\n  container.innerHTML = '';\n  divs.forEach(div => container.appendChild(div));\n}\nfunction place_staff(staffArray) {\n  console.log(staffArray);\n  let divPosition;\n  staffArray.forEach(staff => {\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = \"col free-driver\";\n    newDiv.dataset.driverid = staff[1];\n    newDiv.dataset.teamid = staff[2];\n    let name = staff[0].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    let marqueeContainer = document.createElement(\"div\");\n    marqueeContainer.className = \"marquee-wrapper\";\n    let nameContainer = document.createElement(\"div\");\n    nameContainer.className = \"name-container\";\n    spanName.textContent = insert_space(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    spanLastName.classList.add(\"bold-font\");\n    let staffLogo = document.createElement(\"img\");\n    let position = staff[3];\n    staffLogo.src = _config__WEBPACK_IMPORTED_MODULE_0__.staff_pics[position];\n    staffLogo.className = \"staff-logo\";\n    newDiv.appendChild(staffLogo);\n    nameContainer.appendChild(spanName);\n    nameContainer.appendChild(spanLastName);\n    marqueeContainer.appendChild(nameContainer);\n    newDiv.appendChild(marqueeContainer);\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[staff[2]] + \"-transparent\");\n    if (staff[\"team_future\"] !== -1) {\n      add_future_team_noti(newDiv, staff[\"team_future\"]);\n    }\n    newDiv.dataset.futureteam = staff[\"team_future\"];\n    manageColor(newDiv, spanLastName);\n    // if (staff[4] === 1) {\n    //     addUnRetireIcon(newDiv)\n    // }\n    divPosition = \"free-staff\";\n    let staff_position = _config__WEBPACK_IMPORTED_MODULE_0__.staff_positions[position];\n    newDiv.dataset.type = staff_position;\n    staffLogo.classList.add(staff_position + \"-border\");\n    addIcon(newDiv);\n    add_edit_container(newDiv);\n    if (staff[2] > 0 && staff[2] <= 10 || staff[2] === 32) {\n      let teamDiv = document.querySelector(`.staff-section[data-teamid='${staff[2]}']`);\n      if (position !== 2) {\n        teamDiv.querySelector(`[data-type='${staff_position}']`).appendChild(newDiv);\n      } else {\n        let engineer_1_has_child = teamDiv.querySelector(`[data-type='${staff_position}'][data-pos='1']`).childElementCount;\n        if (engineer_1_has_child === 0) {\n          teamDiv.querySelector(`[data-type='${staff_position}'][data-pos='1']`).appendChild(newDiv);\n        } else {\n          teamDiv.querySelector(`[data-type='${staff_position}'][data-pos='2']`).appendChild(newDiv);\n        }\n      }\n    } else {\n      document.getElementById(divPosition).appendChild(newDiv);\n    }\n  });\n}\ndocument.querySelectorAll(\"#stafftransfersMenu a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    document.querySelector(\"#staffTransfersDropdown\").innerText = elem.innerText;\n    let value = elem.dataset.value;\n    document.querySelector(\"#staffTransfersDropdown\").dataset.value = value;\n    manage_staff_drivers(value);\n  });\n});\nfunction manage_staff_drivers(value) {\n  if (value === \"drivers\") {\n    document.getElementById(\"free-drivers\").classList.remove(\"d-none\");\n    document.getElementById(\"free-staff\").classList.add(\"d-none\");\n    document.querySelectorAll(\".drivers-section\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    document.querySelectorAll(\".staff-section\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n  } else {\n    document.getElementById(\"free-drivers\").classList.add(\"d-none\");\n    document.getElementById(\"free-staff\").classList.remove(\"d-none\");\n    document.querySelectorAll(\".drivers-section\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n    document.querySelectorAll(\".staff-section\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  }\n}\nfunction add_future_team_noti(driverDiv, teamID) {\n  let notiDiv = document.createElement(\"div\");\n  notiDiv.className = \"future-contract-noti noti-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamID];\n  driverDiv.appendChild(notiDiv);\n}\ndocument.querySelectorAll(\".affiliates-and-arrows\").forEach(function (elem) {\n  elem.querySelector(\".bi-chevron-right\").addEventListener(\"click\", function (event) {\n    let parent = elem.parentNode.parentNode;\n    let affiliatesDiv = parent.querySelector(\".affiliates-space\");\n    let maxScrollLeft = affiliatesDiv.scrollWidth - affiliatesDiv.clientWidth;\n    let newScrollLeft = affiliatesDiv.scrollLeft + 100;\n    if (newScrollLeft > maxScrollLeft) {\n      event.target.parentNode.classList.add(\"d-none\");\n    }\n    affiliatesDiv.scrollTo({\n      left: newScrollLeft,\n      behavior: 'smooth'\n    });\n  });\n  elem.querySelector(\".bi-chevron-left\").addEventListener(\"click\", function () {\n    let parent = elem.parentNode.parentNode;\n    let affiliatesDiv = parent.querySelector(\".affiliates-space\");\n    elem.parentNode.querySelector(\".bi-chevron-right\").parentNode.classList.remove(\"d-none\");\n    affiliatesDiv.scrollBy({\n      left: -100,\n      behavior: 'smooth'\n    });\n  });\n});\n\n/**\r\n * Updates the color from the div depending on the team, both in contract and stats view\r\n * @param {div} div div from the driver\r\n */\nfunction updateColor(div) {\n  let surnameDiv = div.querySelector(\".bold-font\");\n  surnameDiv.className = \"bold-font\";\n  manageColor(div, surnameDiv);\n  let statsDiv = document.querySelector('.normal-driver[data-driverid=\"' + div.dataset.driverid + '\"]');\n  statsDiv.dataset.teamid = div.dataset.teamid;\n  surnameDiv = statsDiv.querySelector(\".surname\");\n  surnameDiv.className = \"bold-font surname\";\n  manageColor(statsDiv, surnameDiv);\n  div.className = \"colr free-driver \" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[div.dataset.teamid] + \"-transparent\";\n  statsDiv.className = \"colr normal-driver \" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[div.dataset.teamid] + \"-transparent\";\n}\n\n/**\r\n * Manages the color depending on the team\r\n * @param {div} div div from the driver\r\n * @param {span} lastName the lastname span from the driver\r\n */\nfunction manageColor(div, lastName) {\n  if (div.dataset.teamid != 0) {\n    let colorClass = _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[div.dataset.teamid] + \"font\";\n    lastName.classList.add(colorClass);\n  }\n}\n\n/**\r\n * Loads all the numbers into the number menu\r\n * @param {Object} nums all numbers array\r\n */\nfunction loadNumbers(nums) {\n  let numsMenu = document.getElementById(\"numberMenu\");\n  numsMenu.innerHTML = \"\";\n  nums.forEach(function (elem) {\n    let a = document.createElement(\"a\");\n    a.textContent = elem.toString();\n    a.classList = \"dropdown-item\";\n    a.style.cursor = \"pointer\";\n    numsMenu.appendChild(a);\n    a.addEventListener(\"click\", function () {\n      document.getElementById(\"numberButton\").querySelector(\".front-gradient\").textContent = a.textContent;\n    });\n  });\n}\n\n/**\r\n * Adds the edit icon\r\n * @param {div} div div from the driver that is going to add the icon into\r\n */\nfunction addIcon(div) {\n  let iconDiv = document.createElement(\"div\");\n  iconDiv.className = \"custom-icon\";\n  let iconElement = document.createElement(\"i\");\n  iconElement.className = \"bi bi-pencil-square\";\n  iconListener(iconElement);\n  iconDiv.appendChild(iconElement);\n  div.appendChild(iconDiv);\n}\nfunction addUnRetireIcon(div) {\n  let iconDiv = document.createElement(\"div\");\n  let iconElement = document.createElement(\"i\");\n  iconElement.className = \"bi bi-ban\";\n  unretireListener(iconElement);\n  div.appendChild(iconElement);\n  div.appendChild(iconDiv);\n}\n\n/**\r\n * Adds the eventlistener for one icon\r\n * @param {div} icon div from the icon\r\n */\nfunction iconListener(icon) {\n  icon.addEventListener(\"click\", function () {\n    modalType = \"edit\";\n    document.getElementById(\"contractModalTitle\").innerText = icon.parentNode.parentNode.innerText.replace(/\\n/g, ' ') + \"'s contract\";\n    queryContract(icon.parentNode.parentNode);\n    let space = icon.parentNode.parentNode.parentNode;\n    if (space.classList.contains(\"driver-space\") || space.classList.contains(\"affiliates-space\") || space.id === \"free-drivers\" && (f2_teams.includes(parseInt(icon.parentNode.parentNode.dataset.teamid)) || f3_teams.includes(parseInt(icon.parentNode.parentNode.dataset.teamid)))) {\n      manage_modal_driver_staff(\"driver\");\n    } else if (space.classList.contains(\"staff-space\") || space.id === \"free-staff\" && (f2_teams.includes(parseInt(icon.parentNode.parentNode.dataset.teamid)) || f3_teams.includes(parseInt(icon.parentNode.parentNode.dataset.teamid)))) {\n      if (event.target.parentNode.parentNode.dataset.type === \"race-engineer\") {\n        manage_modal_driver_staff(\"race-engineer\");\n      } else {\n        manage_modal_driver_staff(\"staff\");\n      }\n    } else if (space.id === \"free-drivers\") {\n      manage_modal_driver_staff(\"free-driver\");\n    } else if (space.id === \"free-staff\") {\n      if (event.target.parentNode.parentNode.dataset.type === \"race-engineer\") {\n        manage_modal_driver_staff(\"free-race-engineer\");\n      } else {\n        manage_modal_driver_staff(\"free-staff\");\n      }\n    }\n    myModal.show();\n  });\n}\nfunction manage_modal_driver_staff(type) {\n  if (type === \"staff\" || type === \"race-engineer\") {\n    document.getElementById(\"currentContractTitle\").classList.remove(\"d-none\");\n    document.getElementById(\"currentContractOptions\").classList.remove(\"d-none\");\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = true;\n      input.classList.add(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.add(\"disabled\");\n      });\n    });\n  } else if (type === \"driver\") {\n    document.getElementById(\"currentContractTitle\").classList.remove(\"d-none\");\n    document.getElementById(\"currentContractOptions\").classList.remove(\"d-none\");\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = false;\n      input.classList.remove(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.remove(\"disabled\");\n      });\n    });\n    let positionInput = document.querySelector(\"#positionInput input\");\n    positionInput.max = 999;\n  } else if (type === \"free-driver\") {\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = false;\n      input.classList.remove(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.remove(\"disabled\");\n      });\n    });\n    let positionInput = document.querySelector(\"#positionInput input\");\n    positionInput.max = 999;\n    document.getElementById(\"currentContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractTitle\").classList.add(\"d-none\");\n    document.getElementById(\"currentContractTitle\").classList.add(\"d-none\");\n    document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n  } else if (type === \"free-staff\") {\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = true;\n      input.classList.add(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.add(\"disabled\");\n      });\n    });\n    let positionInput = document.querySelector(\"#positionInput input\");\n    positionInput.disabled = true;\n    let buttons = document.querySelectorAll(\"#positionInput i\");\n    buttons.forEach(function (button) {\n      button.classList.add(\"disabled\");\n    });\n    document.getElementById(\"currentContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractTitle\").classList.add(\"d-none\");\n    document.getElementById(\"currentContractTitle\").classList.add(\"d-none\");\n    document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n  } else if (type === \"free-race-engineer\") {\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = true;\n      input.classList.add(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.add(\"disabled\");\n      });\n    });\n    let input = document.querySelector(\"#positionInput input\");\n    let buttons = document.querySelectorAll(\"#positionInput i\");\n    input.disabled = false;\n    input.max = 2;\n    input.classList.remove(\"disabled\");\n    buttons.forEach(function (button) {\n      button.classList.remove(\"disabled\");\n    });\n    document.getElementById(\"currentContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractTitle\").classList.add(\"d-none\");\n    document.getElementById(\"currentContractTitle\").classList.add(\"d-none\");\n    document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n  }\n  if (type === \"race-engineer\") {\n    let input = document.querySelector(\"#positionInput input\");\n    let buttons = document.querySelectorAll(\"#positionInput i\");\n    input.disabled = false;\n    input.max = 2;\n    input.classList.remove(\"disabled\");\n    buttons.forEach(function (button) {\n      button.classList.remove(\"disabled\");\n    });\n  }\n}\nfunction unretireListener(icon) {\n  icon.addEventListener(\"click\", function () {\n    let driverReq = {\n      command: \"unretireDriver\",\n      driverID: icon.parentNode.dataset.driverid,\n      driver: icon.parentNode.innerText\n    };\n    icon.classList.add(\"d-none\");\n    socket.send(JSON.stringify(driverReq));\n  });\n}\n\n/**\r\n * Places all the values for the modal that just openend\r\n * @param {Object} info values for the contract modal that just opened\r\n */\nfunction manage_modal(info) {\n  if (info[0] !== null) {\n    let teamID;\n    if (info[0][5] <= 10 || info[0][5] === 32) {\n      teamID = info[0][5];\n    } else if (f2_teams.includes(info[0][5])) {\n      teamID = 33;\n    } else if (f3_teams.includes(info[0][5])) {\n      teamID = 34;\n    }\n    document.getElementById(\"currentContract\").innerText = _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[info[0][5]].toUpperCase();\n    document.getElementById(\"currentContract\").className = \"team-contract engine-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamID];\n    document.getElementById(\"yearInput\").dataset.maxYear = info[2];\n    document.getElementById(\"yearInput\").min = info[2];\n    document.getElementById(\"yearInputFuture\").min = info[2] + 1;\n    document.querySelector(\"#currentContractOptions\").querySelectorAll(\".old-custom-input-number\").forEach(function (elem, index) {\n      if (elem.id === \"salaryInput\" || elem.id === \"signBonusInput\" || elem.id === \"raceBonusAmt\") {\n        elem.value = info[0][index].toLocaleString(\"en-US\") + \" $\";\n      } else {\n        elem.value = info[0][index];\n      }\n    });\n  }\n  if (info[1] === null) {\n    document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n    document.querySelector(\"#futureContractTitle\").classList.add(\"d-none\");\n    document.querySelector(\"#futureContractOptions\").classList.add(\"d-none\");\n    document.querySelector(\"#teamContractButton\").innerText = \"Team\";\n    document.querySelector(\"#teamContractButton\").dataset.teamid = \"-1\";\n  } else {\n    document.querySelector(\".add-contract\").classList.add(\"d-none\");\n    document.querySelector(\"#futureContractTitle\").classList.remove(\"d-none\");\n    document.querySelector(\"#futureContractOptions\").classList.remove(\"d-none\");\n    document.getElementById(\"futureYear\").innerText = \"Contract for \" + parseInt(info[2] + 1);\n    document.getElementById(\"futureContract\").innerText = _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[info[1][6]].toUpperCase();\n    document.querySelector(\"#teamContractButton\").dataset.teamid = info[1][6];\n    document.getElementById(\"futureContract\").className = \"team-contract engine-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[info[1][6]];\n    document.querySelector(\"#futureContractOptions\").querySelectorAll(\".old-custom-input-number\").forEach(function (elem, index) {\n      if (elem.id === \"salaryInputFuture\" || elem.id === \"signBonusInputFuture\" || elem.id === \"raceBonusAmtFuture\") {\n        elem.value = info[1][index].toLocaleString(\"en-US\") + \" $\";\n      } else {\n        elem.value = info[1][index];\n      }\n    });\n  }\n}\n\n/**\r\n * Listener for the team menu buttons\r\n */\ndocument.querySelector(\"#teamContractMenu\").querySelectorAll(\"a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    document.querySelector(\"#teamContractButton\").innerText = elem.querySelector(\".team-menu-name\").innerText;\n    document.querySelector(\"#teamContractButton\").dataset.teamid = elem.dataset.teamid;\n    document.querySelector(\".add-contract\").classList.add(\"enabled\");\n  });\n});\nfunction formatNumber(num) {\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\ndocument.querySelector(\".add-contract i\").addEventListener(\"click\", function () {\n  if (event.target.parentNode.classList.contains(\"enabled\")) {\n    document.getElementById(\"yearInput\").value = document.getElementById(\"yearInput\").dataset.maxYear;\n    document.querySelector(\"#futureYear\").innerText = \"Next year's contract\";\n    document.querySelector(\"#futureContract\").className = \"team-contract engine-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[document.querySelector(\"#teamContractButton\").dataset.teamid];\n    document.querySelector(\"#futureContract\").innerText = document.querySelector(\"#teamContractButton\").innerText;\n    document.querySelector(\".add-contract\").classList.add(\"d-none\");\n    document.querySelector(\"#futureContractTitle\").classList.remove(\"d-none\");\n    document.querySelector(\"#futureContractOptions\").classList.remove(\"d-none\");\n    if (document.querySelector(\"#salaryInput\").value !== \"\") {\n      document.querySelector(\"#salaryInputFuture\").value = formatNumber((parseFloat(document.querySelector(\"#salaryInput\").value.replace(/,/g, '').split(\" \")[0]) * 1.3).toFixed(0)) + \" $\";\n      document.querySelector(\"#signBonusInputFuture\").value = formatNumber((parseFloat(document.querySelector(\"#signBonusInput\").value.replace(/,/g, '').split(\" \")[0]) * 1.15).toFixed(0)) + \" $\";\n      document.querySelector(\"#raceBonusAmtFuture\").value = formatNumber((parseFloat(document.querySelector(\"#raceBonusAmt\").value.replace(/,/g, '').split(\" \")[0]) * 1.15).toFixed(0)) + \" $\";\n      document.querySelector(\"#raceBonusPosFuture\").value = parseInt(document.querySelector(\"#raceBonusPos\").value);\n      document.querySelector(\"#yearInputFuture\").value = parseInt(document.querySelector(\"#yearInput\").value) + 2;\n    } else {\n      document.querySelector(\"#salaryInputFuture\").value = \"1,000,000 $\";\n      document.querySelector(\"#signBonusInputFuture\").value = \"100,000 $\";\n      document.querySelector(\"#raceBonusAmtFuture\").value = \"0 $\";\n      document.querySelector(\"#raceBonusPosFuture\").value = \"1\";\n      document.querySelector(\"#yearInputFuture\").value = parseInt(currentSeason) + 1;\n    }\n    document.querySelector(\"#posInTeamFuture\").value = 1;\n  }\n});\ndocument.querySelector(\".break-contract\").addEventListener(\"click\", function () {\n  document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n  document.querySelector(\"#futureContractTitle\").classList.add(\"d-none\");\n  document.querySelector(\"#futureContractOptions\").classList.add(\"d-none\");\n  document.querySelector(\"#teamContractButton\").innerText = \"Team\";\n  document.querySelector(\"#teamContractButton\").dataset.teamid = \"-1\";\n  document.querySelector(\".add-contract\").classList.remove(\"enabled\");\n});\ndocument.querySelector(\".contract-options\").querySelectorAll('.bi-plus-lg').forEach(button => {\n  let intervalId;\n  let increment = 10000;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\".old-custom-input-number\");\n    if (input.id === \"salaryInput\") {\n      increment = 100000;\n    }\n    updateContractMoneyValue(input, increment);\n    intervalId = setInterval(() => {\n      updateContractMoneyValue(input, increment);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".contract-options\").querySelectorAll('.bi-dash-lg').forEach(button => {\n  let intervalId;\n  let increment = -10000;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\".old-custom-input-number\");\n    if (input.id === \"salaryInput\") {\n      increment = -100000;\n    }\n    updateContractMoneyValue(input, increment);\n    intervalId = setInterval(() => {\n      updateContractMoneyValue(input, increment);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".contract-options\").querySelectorAll('.bi-chevron-up').forEach(button => {\n  let intervalId;\n  let increment = 1;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\".old-custom-input-number\");\n    if (input.id == \"raceBonusPos\") {\n      increment = -1;\n    }\n    updateContractValue(input, increment);\n    intervalId = setInterval(() => {\n      updateContractValue(input, increment);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".contract-options\").querySelectorAll('.bi-chevron-down').forEach(button => {\n  let intervalId;\n  let increment = -1;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\".old-custom-input-number\");\n    if (input.id == \"raceBonusPos\") {\n      increment = 1;\n    }\n    updateContractValue(input, increment);\n    intervalId = setInterval(() => {\n      updateContractValue(input, increment);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\nfunction updateContractMoneyValue(input, increment) {\n  let val = input.value.replace(/[$,]/g, \"\");\n  let new_val = Number(val) + increment;\n  if (new_val < parseInt(input.min)) {\n    new_val = input.min;\n  }\n  let formatted = new_val.toLocaleString('en-US') + '$';\n  input.value = formatted;\n}\nfunction updateContractValue(input, increment) {\n  let val = input.value;\n  let new_val = Number(val) + increment;\n  if (new_val < parseInt(input.min)) {\n    new_val = input.min;\n  }\n  if (new_val > parseInt(input.max)) {\n    new_val = input.max;\n  }\n  input.value = new_val;\n}\n\n/**\r\n * Sends the message that requests the details from the driver\r\n * @param {div} elem div from the driver its requesting its details\r\n */\nfunction queryContract(elem) {\n  driverEditingID = elem.dataset.driverid;\n  driverEditingName = elem.innerText;\n  const message = {\n    command: 'driverRequest',\n    data: {\n      driverID: driverEditingID\n    }\n  };\n  const command = _renderer__WEBPACK_IMPORTED_MODULE_1__.factory.createCommand(message);\n  command.execute();\n}\n\n/**\r\n * Manages the state of the categorias\r\n * @param  {...string} divs the state of each div\r\n */\nfunction manageDrivers(...divs) {\n  divsArray.forEach(function (div, index) {\n    if (divs[index] === \"show\") {\n      div.className = \"main-columns-drag-section\";\n    } else {\n      div.className = \"main-columns-drag-section d-none\";\n    }\n  });\n}\n\n/**\r\n * Event listener for the confirm button from the modal\r\n */\ndocument.getElementById(\"confirmButton\").addEventListener('click', function () {\n  if (modalType === \"hire\") {\n    if ((f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) && !destinationParent.classList.contains(\"affiliates-space\")) | originalParent.className === \"driver-space\" | originalParent.classList.contains(\"affiliates-space\") | originalParent.className === \"staff-space\") {\n      signDriver(\"fireandhire\");\n    }\n    signDriver(\"regular\");\n    modalType = \"\";\n  } else if (modalType === \"edit\") {\n    editContract();\n    modalType = \"\";\n  }\n  setTimeout(clearModal, 500);\n  sortList(\"free-drivers\");\n  sortList(\"free-staff\");\n});\n\n/**\r\n * Clears the modal's inputs\r\n */\nfunction clearModal() {\n  document.querySelectorAll(\".old-custom-input-number\").forEach(function (elem) {\n    elem.value = \"\";\n  });\n}\n\n/**\r\n * Sends the message to the backend to edit the contract\r\n */\nfunction editContract() {\n  let values = [];\n  document.querySelector(\"#currentContractOptions\").querySelectorAll(\".old-custom-input-number\").forEach(function (elem) {\n    if (elem.id === \"salaryInput\" || elem.id === \"signBonusInput\" || elem.id === \"raceBonusAmt\") {\n      values.push(elem.value.replace(/[$,]/g, \"\"));\n    } else {\n      values.push(elem.value);\n    }\n  });\n  let futureValues = [];\n  document.querySelector(\"#futureContractOptions\").querySelectorAll(\".old-custom-input-number\").forEach(function (elem) {\n    if (elem.id === \"salaryInputFuture\" || elem.id === \"signBonusInputFuture\" || elem.id === \"raceBonusAmtFuture\") {\n      futureValues.push(elem.value.replace(/[$,]/g, \"\"));\n    } else {\n      futureValues.push(elem.value);\n    }\n  });\n  let future_team = document.querySelector(\"#teamContractButton\").dataset.teamid;\n  let data = {\n    command: \"editContract\",\n    driverID: driverEditingID,\n    salary: values[0],\n    year: values[1],\n    signBonus: values[2],\n    raceBonus: values[3],\n    raceBonusPos: values[4],\n    driver: driverEditingName,\n    futureTeam: future_team,\n    futureSalary: futureValues[0],\n    futureYear: futureValues[1],\n    futureSignBonus: futureValues[2],\n    futureRaceBonus: futureValues[3],\n    futureRaceBonusPos: futureValues[4],\n    futurePosition: futureValues[5]\n  };\n  socket.send(JSON.stringify(data));\n  if (future_team !== \"-1\") {\n    let driverDiv = document.querySelector('.free-driver[data-driverid=\"' + driverEditingID + '\"]');\n    add_future_team_noti(driverDiv, future_team);\n    driverDiv.dataset.futureteam = future_team;\n  } else {\n    let driverDiv = document.querySelector('.free-driver[data-driverid=\"' + driverEditingID + '\"]');\n    driverDiv.querySelector(\".future-contract-noti\").remove();\n    driverDiv.dataset.futureteam = -1;\n  }\n}\n\n/**\r\n * Changes the positions of 2 drivers involved in a swap\r\n */\nfunction manage_swap() {\n  let parent1 = driver1.parentNode;\n  let parent2 = driver2.parentNode;\n  parent1.removeChild(driver1);\n  parent2.removeChild(driver2);\n  parent1.appendChild(driver2);\n  parent2.appendChild(driver1);\n}\n\n/**\r\n * Sends the necessary messages to hire a driver\r\n * @param {string} type type of the hiring of the driver, depending if he needs to be fired before or not\r\n */\nfunction signDriver(type) {\n  let driverName = draggable.innerText;\n  if (type === \"fireandhire\") {\n    let data = {\n      command: \"fire\",\n      driverID: draggable.dataset.driverid,\n      driver: driverName,\n      team: name_dict[teamOrigin.dataset.team],\n      teamID: originalTeamId\n    };\n    if (!data[\"team\"]) {\n      if (f2_teams.includes(originalTeamId)) {\n        data[\"team\"] = \"F2\";\n      } else if (f3_teams.includes(originalTeamId)) {\n        data[\"team\"] = \"F3\";\n      }\n    }\n    socket.send(JSON.stringify(data));\n  }\n  if (type === \"regular\") {\n    let salaryData = document.getElementById(\"salaryInput\").value.replace(/[$,]/g, \"\");\n    let yearData = document.getElementById(\"yearInput\").value;\n    let signBonusData = document.getElementById(\"signBonusInput\").value.replace(/[$,]/g, \"\");\n    let raceBonusData;\n    let raceBonusPosData;\n    if (signBonusData === \"\") signBonusData = \"0\";\n    if (raceBonusAmt.value === \"\") raceBonusData = \"0\";else raceBonusData = raceBonusAmt.value.replace(/[$,]/g, \"\");\n    if (raceBonusPos.value === \"\") raceBonusPosData = \"10\";else raceBonusPosData = raceBonusPos.value;\n    let data = {\n      command: \"hire\",\n      driverID: draggable.dataset.driverid,\n      teamID: inverted_dict[teamDestiniy],\n      position: posInTeam,\n      salary: salaryData,\n      signBonus: signBonusData,\n      raceBonus: raceBonusData,\n      raceBonusPos: raceBonusPosData,\n      year: yearData,\n      driver: driverName,\n      team: name_dict[teamDestiniy]\n    };\n    destinationParent.appendChild(draggable);\n    socket.send(JSON.stringify(data));\n  } else if (type === \"autocontract\") {\n    let dataAuto = {\n      command: \"autoContract\",\n      driverID: draggable.dataset.driverid,\n      teamID: inverted_dict[teamDestiniy],\n      position: posInTeam,\n      driver: driverName,\n      team: name_dict[teamDestiniy]\n    };\n    destinationParent.appendChild(draggable);\n    socket.send(JSON.stringify(dataAuto));\n  }\n}\n\n/**\r\n * Event listener for the cancel button on the modal\r\n */\ndocument.getElementById(\"cancelButton\").addEventListener('click', function () {\n  document.querySelector(\".add-contract\").classList.remove(\"enabled\");\n  if (modalType === \"hire\") {\n    originalParent.appendChild(draggable);\n    draggable.dataset.teamid = inverted_dict[teamOrigin.dataset.team];\n    updateColor(draggable);\n  }\n  setTimeout(clearModal, 500);\n});\ndocument.querySelector(\"#nameFilterTransfer\").addEventListener(\"input\", function (event) {\n  let text = event.target.value;\n  if (text !== \"\") {\n    document.querySelector(\"#filterTransfersContainer\").querySelector(\".bi-x\").classList.remove(\"d-none\");\n  } else {\n    document.querySelector(\"#filterTransfersContainer\").querySelector(\".bi-x\").classList.add(\"d-none\");\n  }\n  let driverElements = document.querySelectorAll(\"#free-drivers .free-driver\");\n  driverElements.forEach(function (elem) {\n    let first_name = elem.children[0].innerText;\n    let last_name = elem.children[1].innerText;\n    let full_name = first_name + \" \" + last_name;\n    let minus = full_name.toLowerCase();\n    let name = text.toLowerCase();\n    if (minus.includes(name)) {\n      elem.classList.remove(\"d-none\");\n    } else {\n      elem.classList.add(\"d-none\");\n    }\n  });\n  let staffElements = document.querySelectorAll(\"#free-staff .free-driver\");\n  staffElements.forEach(function (elem) {\n    let first_name = elem.children[0].innerText;\n    let last_name = elem.children[1].innerText;\n    let full_name = first_name + \" \" + last_name;\n    let minus = full_name.toLowerCase();\n    let name = text.toLowerCase();\n    if (minus.includes(name)) {\n      elem.classList.remove(\"d-none\");\n    } else {\n      elem.classList.add(\"d-none\");\n    }\n  });\n});\ndocument.querySelector(\"#filterIconTransfers\").addEventListener(\"click\", function () {\n  document.querySelector(\".category-filters\").classList.toggle(\"show\");\n  document.querySelector(\".filter-container\").classList.toggle(\"focused\");\n});\ndocument.getElementById(\"driver_transfers\").querySelectorAll(\".filter-pills\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function (event) {\n    let isActive = elem.classList.contains('active');\n    document.getElementById(\"driver_transfers\").querySelectorAll('.filter-pills').forEach(function (el) {\n      el.classList.remove('active');\n    });\n    if (!isActive) {\n      elem.classList.add('active');\n    }\n  });\n});\ndocument.querySelector(\"#F2filterTransfers\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) <= 21 && parseInt(elem.dataset.teamid) > 10) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) <= 21 && parseInt(elem.dataset.teamid) > 10) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\ndocument.querySelector(\"#F3filterTransfers\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) <= 31 && parseInt(elem.dataset.teamid) > 21) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) <= 31 && parseInt(elem.dataset.teamid) > 21) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\ndocument.querySelector(\"#freefilterTransfers\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) == 0) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) == 0) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\nfunction hire_modal_standars() {\n  document.querySelector(\".add-contract\").classList.add(\"d-none\");\n  document.querySelector(\"#futureContractTitle\").classList.add(\"d-none\");\n  document.querySelector(\"#futureContractOptions\").classList.add(\"d-none\");\n  document.getElementById(\"currentContract\").innerText = _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[inverted_dict[teamDestiniy]].toUpperCase();\n  document.getElementById(\"currentContract\").className = \"team-contract engine-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[inverted_dict[teamDestiniy]];\n}\n\n/**\r\n * Manages the interaction to drag drivers\r\n */\ninteract('.free-driver').draggable({\n  inertia: true,\n  listeners: {\n    start(event) {\n      originalParent = event.target.parentNode;\n      if (originalParent.className != \"main-columns-drag-section\") {\n        if (originalParent.classList.contains(\"affiliates-space\")) {\n          teamOrigin = originalParent.parentNode.parentNode;\n        } else {\n          teamOrigin = originalParent.parentNode;\n        }\n      } else {\n        teamOrigin = originalParent;\n      }\n      draggable = event.target;\n      let target = event.target;\n      let position = target.getBoundingClientRect();\n      let width = target.getBoundingClientRect().width;\n      target.style.width = width + \"px\";\n      target.style.position = \"fixed\";\n      target.style.top = position.top + \"px\";\n      target.style.left = position.left + \"px\"; // Añadir esta línea para manejar la posición izquierda\n    },\n    move(event) {\n      const target = event.target;\n      const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;\n      const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\n      target.style.transform = `translate(${x}px, ${y}px)`;\n      target.style.opacity = 1;\n      target.style.zIndex = 10;\n      target.setAttribute('data-x', x);\n      target.setAttribute('data-y', y);\n    },\n    end(event) {\n      let target = event.target;\n      target.style.position = \"relative\";\n      target.style.top = \"auto\";\n      target.style.left = \"auto\"; // Resetear la posición izquierda\n      target.style.width = \"auto\";\n      target.style.transform = 'none';\n      target.style.zIndex = 1;\n      target.setAttribute('data-x', 0);\n      target.setAttribute('data-y', 0);\n      //is driver\n      if (event.target.parentNode.classList.contains(\"driver-space\") | event.target.parentNode.classList.contains(\"affiliates-space\") | event.target.parentNode.id === \"free-drivers\") {\n        let freeDrivers = document.getElementById('free-drivers');\n        let freeRect = freeDrivers.getBoundingClientRect();\n        let driverSpaceElements = document.querySelectorAll('.driver-space');\n        driverSpaceElements.forEach(function (element) {\n          let rect = element.getBoundingClientRect();\n          if (event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom) {\n            if (element.classList.contains(\"affiliates-space\") && _renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024) {\n              posInTeam = 3 + element.childElementCount;\n              teamDestiniy = element.parentNode.parentNode.dataset.team;\n              destinationParent = element;\n              element.appendChild(target);\n              originalTeamId = parseInt(target.dataset.teamid);\n              target.dataset.teamid = inverted_dict[teamDestiniy];\n              updateColor(target);\n              document.getElementById(\"contractModalTitle\").innerText = target.innerText + \"'s contract with \" + name_dict[teamDestiniy];\n              if (autoContractToggle.checked) {\n                if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024 && originalParent.className === \"driver-space\" | originalParent.classList.contains(\"affiliates-space\")) {\n                  signDriver(\"fireandhire\");\n                }\n                signDriver(\"autocontract\");\n              } else {\n                modalType = \"hire\";\n                hire_modal_standars();\n                manage_modal_driver_staff(\"driver\");\n                myModal.show();\n              }\n              if (target.querySelector(\".custom-icon\") === null) {\n                addIcon(target);\n              }\n            } else {\n              if (element.childElementCount < 1) {\n                posInTeam = element.id.charAt(2);\n                teamDestiniy = element.parentNode.dataset.team;\n                destinationParent = element;\n                element.appendChild(target);\n                originalTeamId = parseInt(target.dataset.teamid);\n                target.dataset.teamid = inverted_dict[teamDestiniy];\n                updateColor(target);\n                document.getElementById(\"contractModalTitle\").innerText = target.innerText + \"'s contract with \" + name_dict[teamDestiniy];\n                if (autoContractToggle.checked) {\n                  if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023 && f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) | originalParent.className === \"driver-space\" | originalParent.classList.contains(\"affiliates-space\") || _renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024 && f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) | originalParent.className === \"driver-space\" | originalParent.classList.contains(\"affiliates-space\")) {\n                    signDriver(\"fireandhire\");\n                  }\n                  signDriver(\"autocontract\");\n                } else {\n                  modalType = \"hire\";\n                  hire_modal_standars();\n                  manage_modal_driver_staff(\"driver\");\n                  myModal.show();\n                }\n                if (target.querySelector(\".custom-icon\") === null) {\n                  addIcon(target);\n                }\n              } else if (element.childElementCount == 1) {\n                if (originalParent.classList.contains(\"driver-space\")) {\n                  driver1 = target;\n                  driver2 = element.firstChild;\n                  let team1 = driver1.parentNode.parentNode;\n                  let team2 = driver2.parentNode.parentNode;\n                  driver1.dataset.teamid = inverted_dict[team2.dataset.team];\n                  updateColor(driver1);\n                  driver2.dataset.teamid = inverted_dict[team1.dataset.team];\n                  updateColor(driver2);\n                  if (driver1 !== driver2) {\n                    let data = {\n                      command: \"swap\",\n                      driver1ID: target.dataset.driverid,\n                      driver2ID: element.firstChild.dataset.driverid,\n                      driver1: target.innerText,\n                      driver2: element.firstChild.innerText\n                    };\n                    socket.send(JSON.stringify(data));\n                    manage_swap();\n                  }\n                }\n              }\n            }\n          }\n        });\n        if (event.clientX >= freeRect.left && event.clientX <= freeRect.right && event.clientY >= freeRect.top && event.clientY <= freeRect.bottom) {\n          if (target.querySelector(\".custom-icon\") !== null) {\n            draggable.removeChild(draggable.querySelector(\".custom-icon\"));\n          }\n          if (originalParent.id !== \"free-drivers\") {\n            originalParent.removeChild(draggable);\n            originalTeamId = parseInt(target.dataset.teamid);\n            draggable.dataset.teamid = 0;\n            updateColor(draggable);\n            freeDrivers.appendChild(target);\n            let data = {\n              command: \"fire\",\n              driverID: draggable.dataset.driverid,\n              driver: draggable.innerText,\n              team: name_dict[teamOrigin.dataset.team],\n              teamID: originalTeamId\n            };\n            if (!data[\"team\"]) {\n              if (f2_teams.includes(originalTeamId)) {\n                data[\"team\"] = \"F2\";\n              } else if (f3_teams.includes(originalTeamId)) {\n                data[\"team\"] = \"F3\";\n              }\n            }\n            socket.send(JSON.stringify(data));\n          }\n        }\n      }\n      //is staff\n      else if (event.target.parentNode.classList.contains(\"staff-space\") | event.target.parentNode.id === \"free-staff\") {\n        let tfreeStaff = document.getElementById('free-staff');\n        let staffRect = tfreeStaff.getBoundingClientRect();\n        let staffSpaceElements = document.querySelectorAll('.staff-space');\n        staffSpaceElements.forEach(function (element) {\n          let rect = element.getBoundingClientRect();\n          if (event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom) {\n            if (element.dataset.type === event.target.dataset.type) {\n              if (element.childElementCount < 1) {\n                posInTeam = element.dataset.pos;\n                teamDestiniy = element.parentNode.dataset.team;\n                destinationParent = element;\n                element.appendChild(target);\n                originalTeamId = parseInt(target.dataset.teamid);\n                target.dataset.teamid = inverted_dict[teamDestiniy];\n                updateColor(target);\n                document.getElementById(\"contractModalTitle\").innerText = target.innerText + \"'s contract with \" + name_dict[teamDestiniy];\n                if (autoContractToggle.checked) {\n                  if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023 && f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) | originalParent.className === \"staff-space\" || _renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024 && f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) | originalParent.className === \"staff-space\") {\n                    signDriver(\"fireandhire\");\n                  }\n                  signDriver(\"autocontract\");\n                } else {\n                  modalType = \"hire\";\n                  hire_modal_standars();\n                  if (event.target.dataset.type === \"race-engineer\") {\n                    manage_modal_driver_staff(\"race-engineer\");\n                  } else {\n                    manage_modal_driver_staff(\"staff\");\n                  }\n                  myModal.show();\n                }\n                if (target.querySelector(\".custom-icon\") === null) {\n                  addIcon(target);\n                }\n              } else if (element.childElementCount == 1) {\n                if (originalParent.classList.contains(\"staff-space\")) {\n                  driver1 = target;\n                  driver2 = element.firstChild;\n                  let team1 = driver1.parentNode.parentNode;\n                  let team2 = driver2.parentNode.parentNode;\n                  driver1.dataset.teamid = inverted_dict[team2.dataset.team];\n                  updateColor(driver1);\n                  driver2.dataset.teamid = inverted_dict[team1.dataset.team];\n                  updateColor(driver2);\n                  if (driver1 !== driver2) {\n                    let data = {\n                      command: \"swap\",\n                      driver1ID: target.dataset.driverid,\n                      driver2ID: element.firstChild.dataset.driverid,\n                      driver1: target.innerText,\n                      driver2: element.firstChild.innerText\n                    };\n                    socket.send(JSON.stringify(data));\n                    manage_swap();\n                  }\n                }\n              }\n            } else {\n              update_notifications(\"You can't change staff from different positions\", \"lighterror\");\n            }\n          }\n        });\n        if (event.clientX >= staffRect.left && event.clientX <= staffRect.right && event.clientY >= staffRect.top && event.clientY <= staffRect.bottom) {\n          if (target.querySelector(\".custom-icon\") !== null) {\n            draggable.removeChild(draggable.querySelector(\".custom-icon\"));\n          }\n          if (originalParent.id !== \"free-staff\") {\n            originalParent.removeChild(draggable);\n            originalTeamId = parseInt(target.dataset.teamid);\n            draggable.dataset.teamid = 0;\n            updateColor(draggable);\n            tfreeStaff.appendChild(target);\n            let data = {\n              command: \"fire\",\n              driverID: draggable.dataset.driverid,\n              driver: draggable.innerText,\n              team: name_dict[teamOrigin.dataset.team],\n              teamID: originalTeamId\n            };\n            if (!data[\"team\"]) {\n              if (f2_teams.includes(originalTeamId)) {\n                data[\"team\"] = \"F2\";\n              } else if (f3_teams.includes(originalTeamId)) {\n                data[\"team\"] = \"F3\";\n              }\n            }\n            socket.send(JSON.stringify(data));\n          }\n        }\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/frontend/transfers.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/file-saver/dist/FileSaver.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof __webpack_require__.g&&__webpack_require__.g.global===__webpack_require__.g?__webpack_require__.g:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g, true&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./node_modules/file-saver/dist/FileSaver.min.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/sql.js/dist/sql-wasm.js":
/*!**********************************************!*\
  !*** ./node_modules/sql.js/dist/sql-wasm.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var __dirname = \"/\";\n/* module decorator */ module = __webpack_require__.nmd(module);\n\n// We are modularizing this manually because the current modularize setting in Emscripten has some issues:\n// https://github.com/kripken/emscripten/issues/5820\n// In addition, When you use emcc's modularization, it still expects to export a global object called `Module`,\n// which is able to be used/called before the WASM is loaded.\n// The modularization below exports a promise that loads and resolves to the actual sql.js module.\n// That way, this module can't be used before the WASM is finished loading.\n\n// We are going to define a function that a user will call to start loading initializing our Sql.js library\n// However, that function might be called multiple times, and on subsequent calls, we don't actually want it to instantiate a new instance of the Module\n// Instead, we want to return the previously loaded module\n\n// TODO: Make this not declare a global if used in the browser\nvar initSqlJsPromise = undefined;\n\nvar initSqlJs = function (moduleConfig) {\n\n    if (initSqlJsPromise){\n      return initSqlJsPromise;\n    }\n    // If we're here, we've never called this function before\n    initSqlJsPromise = new Promise(function (resolveModule, reject) {\n\n        // We are modularizing this manually because the current modularize setting in Emscripten has some issues:\n        // https://github.com/kripken/emscripten/issues/5820\n\n        // The way to affect the loading of emcc compiled modules is to create a variable called `Module` and add\n        // properties to it, like `preRun`, `postRun`, etc\n        // We are using that to get notified when the WASM has finished loading.\n        // Only then will we return our promise\n\n        // If they passed in a moduleConfig object, use that\n        // Otherwise, initialize Module to the empty object\n        var Module = typeof moduleConfig !== 'undefined' ? moduleConfig : {};\n\n        // EMCC only allows for a single onAbort function (not an array of functions)\n        // So if the user defined their own onAbort function, we remember it and call it\n        var originalOnAbortFunction = Module['onAbort'];\n        Module['onAbort'] = function (errorThatCausedAbort) {\n            reject(new Error(errorThatCausedAbort));\n            if (originalOnAbortFunction){\n              originalOnAbortFunction(errorThatCausedAbort);\n            }\n        };\n\n        Module['postRun'] = Module['postRun'] || [];\n        Module['postRun'].push(function () {\n            // When Emscripted calls postRun, this promise resolves with the built Module\n            resolveModule(Module);\n        });\n\n        // There is a section of code in the emcc-generated code below that looks like this:\n        // (Note that this is lowercase `module`)\n        // if (typeof module !== 'undefined') {\n        //     module['exports'] = Module;\n        // }\n        // When that runs, it's going to overwrite our own modularization export efforts in shell-post.js!\n        // The only way to tell emcc not to emit it is to pass the MODULARIZE=1 or MODULARIZE_INSTANCE=1 flags,\n        // but that carries with it additional unnecessary baggage/bugs we don't want either.\n        // So, we have three options:\n        // 1) We undefine `module`\n        // 2) We remember what `module['exports']` was at the beginning of this function and we restore it later\n        // 3) We write a script to remove those lines of code as part of the Make process.\n        //\n        // Since those are the only lines of code that care about module, we will undefine it. It's the most straightforward\n        // of the options, and has the side effect of reducing emcc's efforts to modify the module if its output were to change in the future.\n        // That's a nice side effect since we're handling the modularization efforts ourselves\n        module = undefined;\n\n        // The emcc-generated code and shell-post.js code goes below,\n        // meaning that all of it runs inside of this promise. If anything throws an exception, our promise will abort\nvar f;f||=typeof Module != 'undefined' ? Module : {};var aa=\"object\"==typeof window,ba=\"function\"==typeof importScripts,ca=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;\"use strict\";\nf.onRuntimeInitialized=function(){function a(g,l){switch(typeof l){case \"boolean\":fc(g,l?1:0);break;case \"number\":gc(g,l);break;case \"string\":hc(g,l,-1,-1);break;case \"object\":if(null===l)ib(g);else if(null!=l.length){var n=da(l,ea);ic(g,n,l.length,-1);fa(n)}else xa(g,\"Wrong API use : tried to return a value of an unknown type (\"+l+\").\",-1);break;default:ib(g)}}function b(g,l){for(var n=[],t=0;t<g;t+=1){var w=m(l+4*t,\"i32\"),A=jc(w);if(1===A||2===A)w=kc(w);else if(3===A)w=lc(w);else if(4===A){A=w;\nw=mc(A);A=nc(A);for(var N=new Uint8Array(w),M=0;M<w;M+=1)N[M]=p[A+M];w=N}else w=null;n.push(w)}return n}function c(g,l){this.Ka=g;this.db=l;this.Ia=1;this.eb=[]}function d(g,l){this.db=l;l=ha(g)+1;this.Xa=ia(l);if(null===this.Xa)throw Error(\"Unable to allocate memory for the SQL string\");q(g,u,this.Xa,l);this.cb=this.Xa;this.Ta=this.hb=null}function e(g){this.filename=\"dbfile_\"+(4294967295*Math.random()>>>0);if(null!=g){var l=this.filename,n=\"/\",t=l;n&&(n=\"string\"==typeof n?n:ja(n),t=l?x(n+\"/\"+l):\nn);l=ka(!0,!0);t=la(t,(void 0!==l?l:438)&4095|32768,0);if(g){if(\"string\"==typeof g){n=Array(g.length);for(var w=0,A=g.length;w<A;++w)n[w]=g.charCodeAt(w);g=n}ma(t,l|146);n=na(t,577);oa(n,g,0,g.length,0);pa(n);ma(t,l)}}this.handleError(r(this.filename,h));this.db=m(h,\"i32\");lb(this.db);this.Ya={};this.Ma={}}var h=y(4),k=f.cwrap,r=k(\"sqlite3_open\",\"number\",[\"string\",\"number\"]),z=k(\"sqlite3_close_v2\",\"number\",[\"number\"]),v=k(\"sqlite3_exec\",\"number\",[\"number\",\"string\",\"number\",\"number\",\"number\"]),E=k(\"sqlite3_changes\",\n\"number\",[\"number\"]),H=k(\"sqlite3_prepare_v2\",\"number\",[\"number\",\"string\",\"number\",\"number\",\"number\"]),mb=k(\"sqlite3_sql\",\"string\",[\"number\"]),oc=k(\"sqlite3_normalized_sql\",\"string\",[\"number\"]),nb=k(\"sqlite3_prepare_v2\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]),pc=k(\"sqlite3_bind_text\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]),ob=k(\"sqlite3_bind_blob\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]),qc=k(\"sqlite3_bind_double\",\"number\",[\"number\",\"number\",\"number\"]),\nrc=k(\"sqlite3_bind_int\",\"number\",[\"number\",\"number\",\"number\"]),sc=k(\"sqlite3_bind_parameter_index\",\"number\",[\"number\",\"string\"]),tc=k(\"sqlite3_step\",\"number\",[\"number\"]),uc=k(\"sqlite3_errmsg\",\"string\",[\"number\"]),vc=k(\"sqlite3_column_count\",\"number\",[\"number\"]),wc=k(\"sqlite3_data_count\",\"number\",[\"number\"]),xc=k(\"sqlite3_column_double\",\"number\",[\"number\",\"number\"]),pb=k(\"sqlite3_column_text\",\"string\",[\"number\",\"number\"]),yc=k(\"sqlite3_column_blob\",\"number\",[\"number\",\"number\"]),zc=k(\"sqlite3_column_bytes\",\n\"number\",[\"number\",\"number\"]),Ac=k(\"sqlite3_column_type\",\"number\",[\"number\",\"number\"]),Bc=k(\"sqlite3_column_name\",\"string\",[\"number\",\"number\"]),Cc=k(\"sqlite3_reset\",\"number\",[\"number\"]),Dc=k(\"sqlite3_clear_bindings\",\"number\",[\"number\"]),Ec=k(\"sqlite3_finalize\",\"number\",[\"number\"]),qb=k(\"sqlite3_create_function_v2\",\"number\",\"number string number number number number number number number\".split(\" \")),jc=k(\"sqlite3_value_type\",\"number\",[\"number\"]),mc=k(\"sqlite3_value_bytes\",\"number\",[\"number\"]),lc=k(\"sqlite3_value_text\",\n\"string\",[\"number\"]),nc=k(\"sqlite3_value_blob\",\"number\",[\"number\"]),kc=k(\"sqlite3_value_double\",\"number\",[\"number\"]),gc=k(\"sqlite3_result_double\",\"\",[\"number\",\"number\"]),ib=k(\"sqlite3_result_null\",\"\",[\"number\"]),hc=k(\"sqlite3_result_text\",\"\",[\"number\",\"string\",\"number\",\"number\"]),ic=k(\"sqlite3_result_blob\",\"\",[\"number\",\"number\",\"number\",\"number\"]),fc=k(\"sqlite3_result_int\",\"\",[\"number\",\"number\"]),xa=k(\"sqlite3_result_error\",\"\",[\"number\",\"string\",\"number\"]),rb=k(\"sqlite3_aggregate_context\",\"number\",\n[\"number\",\"number\"]),lb=k(\"RegisterExtensionFunctions\",\"number\",[\"number\"]);c.prototype.bind=function(g){if(!this.Ka)throw\"Statement closed\";this.reset();return Array.isArray(g)?this.vb(g):null!=g&&\"object\"===typeof g?this.wb(g):!0};c.prototype.step=function(){if(!this.Ka)throw\"Statement closed\";this.Ia=1;var g=tc(this.Ka);switch(g){case 100:return!0;case 101:return!1;default:throw this.db.handleError(g);}};c.prototype.qb=function(g){null==g&&(g=this.Ia,this.Ia+=1);return xc(this.Ka,g)};c.prototype.zb=\nfunction(g){null==g&&(g=this.Ia,this.Ia+=1);g=pb(this.Ka,g);if(\"function\"!==typeof BigInt)throw Error(\"BigInt is not supported\");return BigInt(g)};c.prototype.Ab=function(g){null==g&&(g=this.Ia,this.Ia+=1);return pb(this.Ka,g)};c.prototype.getBlob=function(g){null==g&&(g=this.Ia,this.Ia+=1);var l=zc(this.Ka,g);g=yc(this.Ka,g);for(var n=new Uint8Array(l),t=0;t<l;t+=1)n[t]=p[g+t];return n};c.prototype.get=function(g,l){l=l||{};null!=g&&this.bind(g)&&this.step();g=[];for(var n=wc(this.Ka),t=0;t<n;t+=\n1)switch(Ac(this.Ka,t)){case 1:var w=l.useBigInt?this.zb(t):this.qb(t);g.push(w);break;case 2:g.push(this.qb(t));break;case 3:g.push(this.Ab(t));break;case 4:g.push(this.getBlob(t));break;default:g.push(null)}return g};c.prototype.getColumnNames=function(){for(var g=[],l=vc(this.Ka),n=0;n<l;n+=1)g.push(Bc(this.Ka,n));return g};c.prototype.getAsObject=function(g,l){g=this.get(g,l);l=this.getColumnNames();for(var n={},t=0;t<l.length;t+=1)n[l[t]]=g[t];return n};c.prototype.getSQL=function(){return mb(this.Ka)};\nc.prototype.getNormalizedSQL=function(){return oc(this.Ka)};c.prototype.run=function(g){null!=g&&this.bind(g);this.step();return this.reset()};c.prototype.mb=function(g,l){null==l&&(l=this.Ia,this.Ia+=1);g=qa(g);var n=da(g,ea);this.eb.push(n);this.db.handleError(pc(this.Ka,l,n,g.length-1,0))};c.prototype.ub=function(g,l){null==l&&(l=this.Ia,this.Ia+=1);var n=da(g,ea);this.eb.push(n);this.db.handleError(ob(this.Ka,l,n,g.length,0))};c.prototype.lb=function(g,l){null==l&&(l=this.Ia,this.Ia+=1);this.db.handleError((g===\n(g|0)?rc:qc)(this.Ka,l,g))};c.prototype.xb=function(g){null==g&&(g=this.Ia,this.Ia+=1);ob(this.Ka,g,0,0,0)};c.prototype.nb=function(g,l){null==l&&(l=this.Ia,this.Ia+=1);switch(typeof g){case \"string\":this.mb(g,l);return;case \"number\":this.lb(g,l);return;case \"bigint\":this.mb(g.toString(),l);return;case \"boolean\":this.lb(g+0,l);return;case \"object\":if(null===g){this.xb(l);return}if(null!=g.length){this.ub(g,l);return}}throw\"Wrong API use : tried to bind a value of an unknown type (\"+g+\").\";};c.prototype.wb=\nfunction(g){var l=this;Object.keys(g).forEach(function(n){var t=sc(l.Ka,n);0!==t&&l.nb(g[n],t)});return!0};c.prototype.vb=function(g){for(var l=0;l<g.length;l+=1)this.nb(g[l],l+1);return!0};c.prototype.reset=function(){this.freemem();return 0===Dc(this.Ka)&&0===Cc(this.Ka)};c.prototype.freemem=function(){for(var g;void 0!==(g=this.eb.pop());)fa(g)};c.prototype.free=function(){this.freemem();var g=0===Ec(this.Ka);delete this.db.Ya[this.Ka];this.Ka=0;return g};d.prototype.next=function(){if(null===\nthis.Xa)return{done:!0};null!==this.Ta&&(this.Ta.free(),this.Ta=null);if(!this.db.db)throw this.fb(),Error(\"Database closed\");var g=ra(),l=y(4);sa(h);sa(l);try{this.db.handleError(nb(this.db.db,this.cb,-1,h,l));this.cb=m(l,\"i32\");var n=m(h,\"i32\");if(0===n)return this.fb(),{done:!0};this.Ta=new c(n,this.db);this.db.Ya[n]=this.Ta;return{value:this.Ta,done:!1}}catch(t){throw this.hb=ta(this.cb),this.fb(),t;}finally{ua(g)}};d.prototype.fb=function(){fa(this.Xa);this.Xa=null};d.prototype.getRemainingSQL=\nfunction(){return null!==this.hb?this.hb:ta(this.cb)};\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator&&(d.prototype[Symbol.iterator]=function(){return this});e.prototype.run=function(g,l){if(!this.db)throw\"Database closed\";if(l){g=this.prepare(g,l);try{g.step()}finally{g.free()}}else this.handleError(v(this.db,g,0,0,h));return this};e.prototype.exec=function(g,l,n){if(!this.db)throw\"Database closed\";var t=ra(),w=null;try{var A=va(g),N=y(4);for(g=[];0!==m(A,\"i8\");){sa(h);sa(N);this.handleError(nb(this.db,\nA,-1,h,N));var M=m(h,\"i32\");A=m(N,\"i32\");if(0!==M){var K=null;w=new c(M,this);for(null!=l&&w.bind(l);w.step();)null===K&&(K={columns:w.getColumnNames(),values:[]},g.push(K)),K.values.push(w.get(null,n));w.free()}}return g}catch(O){throw w&&w.free(),O;}finally{ua(t)}};e.prototype.each=function(g,l,n,t,w){\"function\"===typeof l&&(t=n,n=l,l=void 0);g=this.prepare(g,l);try{for(;g.step();)n(g.getAsObject(null,w))}finally{g.free()}if(\"function\"===typeof t)return t()};e.prototype.prepare=function(g,l){sa(h);\nthis.handleError(H(this.db,g,-1,h,0));g=m(h,\"i32\");if(0===g)throw\"Nothing to prepare\";var n=new c(g,this);null!=l&&n.bind(l);return this.Ya[g]=n};e.prototype.iterateStatements=function(g){return new d(g,this)};e.prototype[\"export\"]=function(){Object.values(this.Ya).forEach(function(l){l.free()});Object.values(this.Ma).forEach(wa);this.Ma={};this.handleError(z(this.db));var g=ya(this.filename);this.handleError(r(this.filename,h));this.db=m(h,\"i32\");lb(this.db);return g};e.prototype.close=function(){null!==\nthis.db&&(Object.values(this.Ya).forEach(function(g){g.free()}),Object.values(this.Ma).forEach(wa),this.Ma={},this.handleError(z(this.db)),za(\"/\"+this.filename),this.db=null)};e.prototype.handleError=function(g){if(0===g)return null;g=uc(this.db);throw Error(g);};e.prototype.getRowsModified=function(){return E(this.db)};e.prototype.create_function=function(g,l){Object.prototype.hasOwnProperty.call(this.Ma,g)&&(wa(this.Ma[g]),delete this.Ma[g]);var n=Aa(function(t,w,A){w=b(w,A);try{var N=l.apply(null,\nw)}catch(M){xa(t,M,-1);return}a(t,N)},\"viii\");this.Ma[g]=n;this.handleError(qb(this.db,g,l.length,1,0,n,0,0,0));return this};e.prototype.create_aggregate=function(g,l){var n=l.init||function(){return null},t=l.finalize||function(K){return K},w=l.step;if(!w)throw\"An aggregate function must have a step function in \"+g;var A={};Object.hasOwnProperty.call(this.Ma,g)&&(wa(this.Ma[g]),delete this.Ma[g]);l=g+\"__finalize\";Object.hasOwnProperty.call(this.Ma,l)&&(wa(this.Ma[l]),delete this.Ma[l]);var N=Aa(function(K,\nO,Ra){var Y=rb(K,1);Object.hasOwnProperty.call(A,Y)||(A[Y]=n());O=b(O,Ra);O=[A[Y]].concat(O);try{A[Y]=w.apply(null,O)}catch(Gc){delete A[Y],xa(K,Gc,-1)}},\"viii\"),M=Aa(function(K){var O=rb(K,1);try{var Ra=t(A[O])}catch(Y){delete A[O];xa(K,Y,-1);return}a(K,Ra);delete A[O]},\"vi\");this.Ma[g]=N;this.Ma[l]=M;this.handleError(qb(this.db,g,w.length-1,1,0,0,N,M,0));return this};f.Database=e};var Ba=Object.assign({},f),Ca=\"./this.program\",B=\"\",Da,Ea;\nif(ca){var fs=__webpack_require__(/*! fs */ \"?5041\"),Fa=__webpack_require__(/*! path */ \"?c8d5\");B=__dirname+\"/\";Ea=a=>{a=Ga(a)?new URL(a):Fa.normalize(a);return fs.readFileSync(a)};Da=a=>{a=Ga(a)?new URL(a):Fa.normalize(a);return new Promise((b,c)=>{fs.readFile(a,void 0,(d,e)=>{d?c(d):b(e.buffer)})})};!f.thisProgram&&1<process.argv.length&&(Ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2); true&&(module.exports=f)}else if(aa||ba)ba?B=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(B=document.currentScript.src),\nB=B.startsWith(\"blob:\")?\"\":B.substr(0,B.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1),ba&&(Ea=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),Da=a=>Ga(a)?new Promise((b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=()=>{(200==d.status||0==d.status&&d.response)&&c(d.response);b(d.status)};d.onerror=b;d.send(null)}):fetch(a,{credentials:\"same-origin\"}).then(b=>b.ok?b.arrayBuffer():Promise.reject(Error(b.status+\n\" : \"+b.url)));var Ha=f.print||console.log.bind(console),C=f.printErr||console.error.bind(console);Object.assign(f,Ba);Ba=null;f.thisProgram&&(Ca=f.thisProgram);var Ia;f.wasmBinary&&(Ia=f.wasmBinary);var Ja,Ka=!1,p,u,La,D,F,Ma,Na;\nfunction Oa(){var a=Ja.buffer;f.HEAP8=p=new Int8Array(a);f.HEAP16=La=new Int16Array(a);f.HEAPU8=u=new Uint8Array(a);f.HEAPU16=new Uint16Array(a);f.HEAP32=D=new Int32Array(a);f.HEAPU32=F=new Uint32Array(a);f.HEAPF32=Ma=new Float32Array(a);f.HEAPF64=Na=new Float64Array(a)}var Pa=[],Qa=[],Sa=[];function Ta(){var a=f.preRun.shift();Pa.unshift(a)}var Ua=0,Va=null,Wa=null;\nfunction G(a){f.onAbort?.(a);a=\"Aborted(\"+a+\")\";C(a);Ka=!0;throw new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");}var Xa=a=>a.startsWith(\"data:application/octet-stream;base64,\"),Ga=a=>a.startsWith(\"file://\"),Ya;function Za(a){if(a==Ya&&Ia)return new Uint8Array(Ia);if(Ea)return Ea(a);throw\"both async and sync fetching of the wasm failed\";}function $a(a){return Ia?Promise.resolve().then(()=>Za(a)):Da(a).then(b=>new Uint8Array(b),()=>Za(a))}\nfunction ab(a,b,c){return $a(a).then(d=>WebAssembly.instantiate(d,b)).then(c,d=>{C(`failed to asynchronously prepare wasm: ${d}`);G(d)})}function bb(a,b){var c=Ya;Ia||\"function\"!=typeof WebAssembly.instantiateStreaming||Xa(c)||Ga(c)||ca||\"function\"!=typeof fetch?ab(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(e){C(`wasm streaming compile failed: ${e}`);C(\"falling back to ArrayBuffer instantiation\");return ab(c,a,b)}))}\nvar I,J,cb=a=>{for(;0<a.length;)a.shift()(f)};function m(a,b=\"i8\"){b.endsWith(\"*\")&&(b=\"*\");switch(b){case \"i1\":return p[a];case \"i8\":return p[a];case \"i16\":return La[a>>1];case \"i32\":return D[a>>2];case \"i64\":G(\"to do getValue(i64) use WASM_BIGINT\");case \"float\":return Ma[a>>2];case \"double\":return Na[a>>3];case \"*\":return F[a>>2];default:G(`invalid type for getValue: ${b}`)}}\nfunction sa(a){var b=\"i32\";b.endsWith(\"*\")&&(b=\"*\");switch(b){case \"i1\":p[a]=0;break;case \"i8\":p[a]=0;break;case \"i16\":La[a>>1]=0;break;case \"i32\":D[a>>2]=0;break;case \"i64\":G(\"to do setValue(i64) use WASM_BIGINT\");case \"float\":Ma[a>>2]=0;break;case \"double\":Na[a>>3]=0;break;case \"*\":F[a>>2]=0;break;default:G(`invalid type for setValue: ${b}`)}}\nvar db=\"undefined\"!=typeof TextDecoder?new TextDecoder:void 0,L=(a,b,c)=>{var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&db)return db.decode(a.subarray(b,c));for(d=\"\";b<c;){var e=a[b++];if(e&128){var h=a[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|h);else{var k=a[b++]&63;e=224==(e&240)?(e&15)<<12|h<<6|k:(e&7)<<18|h<<12|k<<6|a[b++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d},ta=(a,\nb)=>a?L(u,a,b):\"\",eb=(a,b)=>{for(var c=0,d=a.length-1;0<=d;d--){var e=a[d];\".\"===e?a.splice(d,1):\"..\"===e?(a.splice(d,1),c++):c&&(a.splice(d,1),c--)}if(b)for(;c;c--)a.unshift(\"..\");return a},x=a=>{var b=\"/\"===a.charAt(0),c=\"/\"===a.substr(-1);(a=eb(a.split(\"/\").filter(d=>!!d),!b).join(\"/\"))||b||(a=\".\");a&&c&&(a+=\"/\");return(b?\"/\":\"\")+a},fb=a=>{var b=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/.exec(a).slice(1);a=b[0];b=b[1];if(!a&&!b)return\".\";b&&=b.substr(0,b.length-1);return a+\nb},gb=a=>{if(\"/\"===a)return\"/\";a=x(a);a=a.replace(/\\/$/,\"\");var b=a.lastIndexOf(\"/\");return-1===b?a:a.substr(b+1)},hb=()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return c=>crypto.getRandomValues(c);if(ca)try{var a=__webpack_require__(/*! crypto */ \"?8893\");if(a.randomFillSync)return c=>a.randomFillSync(c);var b=a.randomBytes;return c=>(c.set(b(c.byteLength)),c)}catch(c){}G(\"initRandomDevice\")},jb=a=>(jb=hb())(a),kb=(...a)=>{for(var b=\"\",c=!1,d=a.length-1;-1<=d&&!c;d--){c=0<=d?a[d]:\"/\";if(\"string\"!=\ntypeof c)throw new TypeError(\"Arguments to path.resolve must be strings\");if(!c)return\"\";b=c+\"/\"+b;c=\"/\"===c.charAt(0)}b=eb(b.split(\"/\").filter(e=>!!e),!c).join(\"/\");return(c?\"/\":\"\")+b||\".\"},sb=[],ha=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},q=(a,b,c,d)=>{if(!(0<d))return 0;var e=c;d=c+d-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var r=a.charCodeAt(++h);k=65536+((k&1023)<<10)|r&1023}if(127>=\nk){if(c>=d)break;b[c++]=k}else{if(2047>=k){if(c+1>=d)break;b[c++]=192|k>>6}else{if(65535>=k){if(c+2>=d)break;b[c++]=224|k>>12}else{if(c+3>=d)break;b[c++]=240|k>>18;b[c++]=128|k>>12&63}b[c++]=128|k>>6&63}b[c++]=128|k&63}}b[c]=0;return c-e};function qa(a,b){var c=Array(ha(a)+1);a=q(a,c,0,c.length);b&&(c.length=a);return c}var tb=[];function ub(a,b){tb[a]={input:[],output:[],Wa:b};vb(a,wb)}\nvar wb={open(a){var b=tb[a.node.rdev];if(!b)throw new P(43);a.tty=b;a.seekable=!1},close(a){a.tty.Wa.fsync(a.tty)},fsync(a){a.tty.Wa.fsync(a.tty)},read(a,b,c,d){if(!a.tty||!a.tty.Wa.rb)throw new P(60);for(var e=0,h=0;h<d;h++){try{var k=a.tty.Wa.rb(a.tty)}catch(r){throw new P(29);}if(void 0===k&&0===e)throw new P(6);if(null===k||void 0===k)break;e++;b[c+h]=k}e&&(a.node.timestamp=Date.now());return e},write(a,b,c,d){if(!a.tty||!a.tty.Wa.ib)throw new P(60);try{for(var e=0;e<d;e++)a.tty.Wa.ib(a.tty,b[c+\ne])}catch(h){throw new P(29);}d&&(a.node.timestamp=Date.now());return e}},xb={rb(){a:{if(!sb.length){var a=null;if(ca){var b=Buffer.alloc(256),c=0,d=process.stdin.fd;try{c=fs.readSync(d,b,0,256)}catch(e){if(e.toString().includes(\"EOF\"))c=0;else throw e;}0<c&&(a=b.slice(0,c).toString(\"utf-8\"))}else\"undefined\"!=typeof window&&\"function\"==typeof window.prompt&&(a=window.prompt(\"Input: \"),null!==a&&(a+=\"\\n\"));if(!a){a=null;break a}sb=qa(a,!0)}a=sb.shift()}return a},ib(a,b){null===b||10===b?(Ha(L(a.output,\n0)),a.output=[]):0!=b&&a.output.push(b)},fsync(a){a.output&&0<a.output.length&&(Ha(L(a.output,0)),a.output=[])},Lb(){return{Gb:25856,Ib:5,Fb:191,Hb:35387,Eb:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},Mb(){return 0},Nb(){return[24,80]}},yb={ib(a,b){null===b||10===b?(C(L(a.output,0)),a.output=[]):0!=b&&a.output.push(b)},fsync(a){a.output&&0<a.output.length&&(C(L(a.output,0)),a.output=[])}};\nfunction zb(a,b){var c=a.Ha?a.Ha.length:0;c>=b||(b=Math.max(b,c*(1048576>c?2:1.125)>>>0),0!=c&&(b=Math.max(b,256)),c=a.Ha,a.Ha=new Uint8Array(b),0<a.La&&a.Ha.set(c.subarray(0,a.La),0))}\nvar Q={Pa:null,Qa(){return Q.createNode(null,\"/\",16895,0)},createNode(a,b,c,d){if(24576===(c&61440)||4096===(c&61440))throw new P(63);Q.Pa||(Q.Pa={dir:{node:{Oa:Q.Fa.Oa,Na:Q.Fa.Na,lookup:Q.Fa.lookup,$a:Q.Fa.$a,rename:Q.Fa.rename,unlink:Q.Fa.unlink,rmdir:Q.Fa.rmdir,readdir:Q.Fa.readdir,symlink:Q.Fa.symlink},stream:{Sa:Q.Ga.Sa}},file:{node:{Oa:Q.Fa.Oa,Na:Q.Fa.Na},stream:{Sa:Q.Ga.Sa,read:Q.Ga.read,write:Q.Ga.write,kb:Q.Ga.kb,ab:Q.Ga.ab,bb:Q.Ga.bb}},link:{node:{Oa:Q.Fa.Oa,Na:Q.Fa.Na,readlink:Q.Fa.readlink},\nstream:{}},ob:{node:{Oa:Q.Fa.Oa,Na:Q.Fa.Na},stream:Ab}});c=Bb(a,b,c,d);R(c.mode)?(c.Fa=Q.Pa.dir.node,c.Ga=Q.Pa.dir.stream,c.Ha={}):32768===(c.mode&61440)?(c.Fa=Q.Pa.file.node,c.Ga=Q.Pa.file.stream,c.La=0,c.Ha=null):40960===(c.mode&61440)?(c.Fa=Q.Pa.link.node,c.Ga=Q.Pa.link.stream):8192===(c.mode&61440)&&(c.Fa=Q.Pa.ob.node,c.Ga=Q.Pa.ob.stream);c.timestamp=Date.now();a&&(a.Ha[b]=c,a.timestamp=c.timestamp);return c},Kb(a){return a.Ha?a.Ha.subarray?a.Ha.subarray(0,a.La):new Uint8Array(a.Ha):new Uint8Array(0)},\nFa:{Oa(a){var b={};b.dev=8192===(a.mode&61440)?a.id:1;b.ino=a.id;b.mode=a.mode;b.nlink=1;b.uid=0;b.gid=0;b.rdev=a.rdev;R(a.mode)?b.size=4096:32768===(a.mode&61440)?b.size=a.La:40960===(a.mode&61440)?b.size=a.link.length:b.size=0;b.atime=new Date(a.timestamp);b.mtime=new Date(a.timestamp);b.ctime=new Date(a.timestamp);b.yb=4096;b.blocks=Math.ceil(b.size/b.yb);return b},Na(a,b){void 0!==b.mode&&(a.mode=b.mode);void 0!==b.timestamp&&(a.timestamp=b.timestamp);if(void 0!==b.size&&(b=b.size,a.La!=b))if(0==\nb)a.Ha=null,a.La=0;else{var c=a.Ha;a.Ha=new Uint8Array(b);c&&a.Ha.set(c.subarray(0,Math.min(b,a.La)));a.La=b}},lookup(){throw Cb[44];},$a(a,b,c,d){return Q.createNode(a,b,c,d)},rename(a,b,c){if(R(a.mode)){try{var d=Db(b,c)}catch(h){}if(d)for(var e in d.Ha)throw new P(55);}delete a.parent.Ha[a.name];a.parent.timestamp=Date.now();a.name=c;b.Ha[c]=a;b.timestamp=a.parent.timestamp},unlink(a,b){delete a.Ha[b];a.timestamp=Date.now()},rmdir(a,b){var c=Db(a,b),d;for(d in c.Ha)throw new P(55);delete a.Ha[b];\na.timestamp=Date.now()},readdir(a){var b=[\".\",\"..\"],c;for(c of Object.keys(a.Ha))b.push(c);return b},symlink(a,b,c){a=Q.createNode(a,b,41471,0);a.link=c;return a},readlink(a){if(40960!==(a.mode&61440))throw new P(28);return a.link}},Ga:{read(a,b,c,d,e){var h=a.node.Ha;if(e>=a.node.La)return 0;a=Math.min(a.node.La-e,d);if(8<a&&h.subarray)b.set(h.subarray(e,e+a),c);else for(d=0;d<a;d++)b[c+d]=h[e+d];return a},write(a,b,c,d,e,h){b.buffer===p.buffer&&(h=!1);if(!d)return 0;a=a.node;a.timestamp=Date.now();\nif(b.subarray&&(!a.Ha||a.Ha.subarray)){if(h)return a.Ha=b.subarray(c,c+d),a.La=d;if(0===a.La&&0===e)return a.Ha=b.slice(c,c+d),a.La=d;if(e+d<=a.La)return a.Ha.set(b.subarray(c,c+d),e),d}zb(a,e+d);if(a.Ha.subarray&&b.subarray)a.Ha.set(b.subarray(c,c+d),e);else for(h=0;h<d;h++)a.Ha[e+h]=b[c+h];a.La=Math.max(a.La,e+d);return d},Sa(a,b,c){1===c?b+=a.position:2===c&&32768===(a.node.mode&61440)&&(b+=a.node.La);if(0>b)throw new P(28);return b},kb(a,b,c){zb(a.node,b+c);a.node.La=Math.max(a.node.La,b+c)},\nab(a,b,c,d,e){if(32768!==(a.node.mode&61440))throw new P(43);a=a.node.Ha;if(e&2||a.buffer!==p.buffer){if(0<c||c+b<a.length)a.subarray?a=a.subarray(c,c+b):a=Array.prototype.slice.call(a,c,c+b);c=!0;b=65536*Math.ceil(b/65536);(e=Eb(65536,b))?(u.fill(0,e,e+b),b=e):b=0;if(!b)throw new P(48);p.set(a,b)}else c=!1,b=a.byteOffset;return{Cb:b,tb:c}},bb(a,b,c,d){Q.Ga.write(a,b,0,d,c,!1);return 0}}},ka=(a,b)=>{var c=0;a&&(c|=365);b&&(c|=146);return c},Fb=null,Gb={},Hb=[],Ib=1,S=null,Jb=!0,P=class{constructor(a){this.name=\n\"ErrnoError\";this.Ja=a}},Cb={},Kb=class{constructor(){this.Za={};this.node=null}get flags(){return this.Za.flags}set flags(a){this.Za.flags=a}get position(){return this.Za.position}set position(a){this.Za.position=a}},Lb=class{constructor(a,b,c,d){a||=this;this.parent=a;this.Qa=a.Qa;this.Ua=null;this.id=Ib++;this.name=b;this.mode=c;this.Fa={};this.Ga={};this.rdev=d}get read(){return 365===(this.mode&365)}set read(a){a?this.mode|=365:this.mode&=-366}get write(){return 146===(this.mode&146)}set write(a){a?\nthis.mode|=146:this.mode&=-147}};function T(a,b={}){a=kb(a);if(!a)return{path:\"\",node:null};b=Object.assign({pb:!0,jb:0},b);if(8<b.jb)throw new P(32);a=a.split(\"/\").filter(k=>!!k);for(var c=Fb,d=\"/\",e=0;e<a.length;e++){var h=e===a.length-1;if(h&&b.parent)break;c=Db(c,a[e]);d=x(d+\"/\"+a[e]);c.Ua&&(!h||h&&b.pb)&&(c=c.Ua.root);if(!h||b.Ra)for(h=0;40960===(c.mode&61440);)if(c=Mb(d),d=kb(fb(d),c),c=T(d,{jb:b.jb+1}).node,40<h++)throw new P(32);}return{path:d,node:c}}\nfunction ja(a){for(var b;;){if(a===a.parent)return a=a.Qa.sb,b?\"/\"!==a[a.length-1]?`${a}/${b}`:a+b:a;b=b?`${a.name}/${b}`:a.name;a=a.parent}}function Nb(a,b){for(var c=0,d=0;d<b.length;d++)c=(c<<5)-c+b.charCodeAt(d)|0;return(a+c>>>0)%S.length}function Ob(a){var b=Nb(a.parent.id,a.name);if(S[b]===a)S[b]=a.Va;else for(b=S[b];b;){if(b.Va===a){b.Va=a.Va;break}b=b.Va}}\nfunction Db(a,b){var c=R(a.mode)?(c=Pb(a,\"x\"))?c:a.Fa.lookup?0:2:54;if(c)throw new P(c);for(c=S[Nb(a.id,b)];c;c=c.Va){var d=c.name;if(c.parent.id===a.id&&d===b)return c}return a.Fa.lookup(a,b)}function Bb(a,b,c,d){a=new Lb(a,b,c,d);b=Nb(a.parent.id,a.name);a.Va=S[b];return S[b]=a}function R(a){return 16384===(a&61440)}function Qb(a){var b=[\"r\",\"w\",\"rw\"][a&3];a&512&&(b+=\"w\");return b}\nfunction Pb(a,b){if(Jb)return 0;if(!b.includes(\"r\")||a.mode&292){if(b.includes(\"w\")&&!(a.mode&146)||b.includes(\"x\")&&!(a.mode&73))return 2}else return 2;return 0}function Rb(a,b){try{return Db(a,b),20}catch(c){}return Pb(a,\"wx\")}function Sb(a,b,c){try{var d=Db(a,b)}catch(e){return e.Ja}if(a=Pb(a,\"wx\"))return a;if(c){if(!R(d.mode))return 54;if(d===d.parent||\"/\"===ja(d))return 10}else if(R(d.mode))return 31;return 0}function U(a){a=Hb[a];if(!a)throw new P(8);return a}\nfunction Tb(a,b=-1){a=Object.assign(new Kb,a);if(-1==b)a:{for(b=0;4096>=b;b++)if(!Hb[b])break a;throw new P(33);}a.fd=b;return Hb[b]=a}function Ub(a,b=-1){a=Tb(a,b);a.Ga?.Jb?.(a);return a}var Ab={open(a){a.Ga=Gb[a.node.rdev].Ga;a.Ga.open?.(a)},Sa(){throw new P(70);}};function vb(a,b){Gb[a]={Ga:b}}\nfunction Vb(a,b){var c=\"/\"===b;if(c&&Fb)throw new P(10);if(!c&&b){var d=T(b,{pb:!1});b=d.path;d=d.node;if(d.Ua)throw new P(10);if(!R(d.mode))throw new P(54);}b={type:a,Ob:{},sb:b,Bb:[]};a=a.Qa(b);a.Qa=b;b.root=a;c?Fb=a:d&&(d.Ua=b,d.Qa&&d.Qa.Bb.push(b))}function la(a,b,c){var d=T(a,{parent:!0}).node;a=gb(a);if(!a||\".\"===a||\"..\"===a)throw new P(28);var e=Rb(d,a);if(e)throw new P(e);if(!d.Fa.$a)throw new P(63);return d.Fa.$a(d,a,b,c)}function V(a,b){return la(a,(void 0!==b?b:511)&1023|16384,0)}\nfunction Wb(a,b,c){\"undefined\"==typeof c&&(c=b,b=438);la(a,b|8192,c)}function Xb(a,b){if(!kb(a))throw new P(44);var c=T(b,{parent:!0}).node;if(!c)throw new P(44);b=gb(b);var d=Rb(c,b);if(d)throw new P(d);if(!c.Fa.symlink)throw new P(63);c.Fa.symlink(c,b,a)}function Yb(a){var b=T(a,{parent:!0}).node;a=gb(a);var c=Db(b,a),d=Sb(b,a,!0);if(d)throw new P(d);if(!b.Fa.rmdir)throw new P(63);if(c.Ua)throw new P(10);b.Fa.rmdir(b,a);Ob(c)}\nfunction za(a){var b=T(a,{parent:!0}).node;if(!b)throw new P(44);a=gb(a);var c=Db(b,a),d=Sb(b,a,!1);if(d)throw new P(d);if(!b.Fa.unlink)throw new P(63);if(c.Ua)throw new P(10);b.Fa.unlink(b,a);Ob(c)}function Mb(a){a=T(a).node;if(!a)throw new P(44);if(!a.Fa.readlink)throw new P(28);return kb(ja(a.parent),a.Fa.readlink(a))}function Zb(a,b){a=T(a,{Ra:!b}).node;if(!a)throw new P(44);if(!a.Fa.Oa)throw new P(63);return a.Fa.Oa(a)}function $b(a){return Zb(a,!0)}\nfunction ma(a,b){a=\"string\"==typeof a?T(a,{Ra:!0}).node:a;if(!a.Fa.Na)throw new P(63);a.Fa.Na(a,{mode:b&4095|a.mode&-4096,timestamp:Date.now()})}function ac(a,b){if(0>b)throw new P(28);a=\"string\"==typeof a?T(a,{Ra:!0}).node:a;if(!a.Fa.Na)throw new P(63);if(R(a.mode))throw new P(31);if(32768!==(a.mode&61440))throw new P(28);var c=Pb(a,\"w\");if(c)throw new P(c);a.Fa.Na(a,{size:b,timestamp:Date.now()})}\nfunction na(a,b,c){if(\"\"===a)throw new P(44);if(\"string\"==typeof b){var d={r:0,\"r+\":2,w:577,\"w+\":578,a:1089,\"a+\":1090}[b];if(\"undefined\"==typeof d)throw Error(`Unknown file open mode: ${b}`);b=d}c=b&64?(\"undefined\"==typeof c?438:c)&4095|32768:0;if(\"object\"==typeof a)var e=a;else{a=x(a);try{e=T(a,{Ra:!(b&131072)}).node}catch(h){}}d=!1;if(b&64)if(e){if(b&128)throw new P(20);}else e=la(a,c,0),d=!0;if(!e)throw new P(44);8192===(e.mode&61440)&&(b&=-513);if(b&65536&&!R(e.mode))throw new P(54);if(!d&&(c=\ne?40960===(e.mode&61440)?32:R(e.mode)&&(\"r\"!==Qb(b)||b&512)?31:Pb(e,Qb(b)):44))throw new P(c);b&512&&!d&&ac(e,0);b&=-131713;e=Tb({node:e,path:ja(e),flags:b,seekable:!0,position:0,Ga:e.Ga,Db:[],error:!1});e.Ga.open&&e.Ga.open(e);!f.logReadFiles||b&1||(bc||={},a in bc||(bc[a]=1));return e}function pa(a){if(null===a.fd)throw new P(8);a.gb&&(a.gb=null);try{a.Ga.close&&a.Ga.close(a)}catch(b){throw b;}finally{Hb[a.fd]=null}a.fd=null}\nfunction cc(a,b,c){if(null===a.fd)throw new P(8);if(!a.seekable||!a.Ga.Sa)throw new P(70);if(0!=c&&1!=c&&2!=c)throw new P(28);a.position=a.Ga.Sa(a,b,c);a.Db=[]}function dc(a,b,c,d,e){if(0>d||0>e)throw new P(28);if(null===a.fd)throw new P(8);if(1===(a.flags&2097155))throw new P(8);if(R(a.node.mode))throw new P(31);if(!a.Ga.read)throw new P(28);var h=\"undefined\"!=typeof e;if(!h)e=a.position;else if(!a.seekable)throw new P(70);b=a.Ga.read(a,b,c,d,e);h||(a.position+=b);return b}\nfunction oa(a,b,c,d,e){if(0>d||0>e)throw new P(28);if(null===a.fd)throw new P(8);if(0===(a.flags&2097155))throw new P(8);if(R(a.node.mode))throw new P(31);if(!a.Ga.write)throw new P(28);a.seekable&&a.flags&1024&&cc(a,0,2);var h=\"undefined\"!=typeof e;if(!h)e=a.position;else if(!a.seekable)throw new P(70);b=a.Ga.write(a,b,c,d,e,void 0);h||(a.position+=b);return b}\nfunction ya(a){var b=\"binary\";if(\"utf8\"!==b&&\"binary\"!==b)throw Error(`Invalid encoding type \"${b}\"`);var c;var d=na(a,d||0);a=Zb(a).size;var e=new Uint8Array(a);dc(d,e,0,a,0);\"utf8\"===b?c=L(e,0):\"binary\"===b&&(c=e);pa(d);return c}var ec;\nfunction Fc(a,b,c){a=x(\"/dev/\"+a);var d=ka(!!b,!!c);Hc||=64;var e=Hc++<<8|0;vb(e,{open(h){h.seekable=!1},close(){c?.buffer?.length&&c(10)},read(h,k,r,z){for(var v=0,E=0;E<z;E++){try{var H=b()}catch(mb){throw new P(29);}if(void 0===H&&0===v)throw new P(6);if(null===H||void 0===H)break;v++;k[r+E]=H}v&&(h.node.timestamp=Date.now());return v},write(h,k,r,z){for(var v=0;v<z;v++)try{c(k[r+v])}catch(E){throw new P(29);}z&&(h.node.timestamp=Date.now());return v}});Wb(a,d,e)}var Hc,W={},bc;\nfunction Ic(a,b,c){if(\"/\"===b.charAt(0))return b;a=-100===a?\"/\":U(a).path;if(0==b.length){if(!c)throw new P(44);return a}return x(a+\"/\"+b)}\nfunction Jc(a,b,c){a=a(b);D[c>>2]=a.dev;D[c+4>>2]=a.mode;F[c+8>>2]=a.nlink;D[c+12>>2]=a.uid;D[c+16>>2]=a.gid;D[c+20>>2]=a.rdev;J=[a.size>>>0,(I=a.size,1<=+Math.abs(I)?0<I?+Math.floor(I/4294967296)>>>0:~~+Math.ceil((I-+(~~I>>>0))/4294967296)>>>0:0)];D[c+24>>2]=J[0];D[c+28>>2]=J[1];D[c+32>>2]=4096;D[c+36>>2]=a.blocks;b=a.atime.getTime();var d=a.mtime.getTime(),e=a.ctime.getTime();J=[Math.floor(b/1E3)>>>0,(I=Math.floor(b/1E3),1<=+Math.abs(I)?0<I?+Math.floor(I/4294967296)>>>0:~~+Math.ceil((I-+(~~I>>>\n0))/4294967296)>>>0:0)];D[c+40>>2]=J[0];D[c+44>>2]=J[1];F[c+48>>2]=b%1E3*1E3;J=[Math.floor(d/1E3)>>>0,(I=Math.floor(d/1E3),1<=+Math.abs(I)?0<I?+Math.floor(I/4294967296)>>>0:~~+Math.ceil((I-+(~~I>>>0))/4294967296)>>>0:0)];D[c+56>>2]=J[0];D[c+60>>2]=J[1];F[c+64>>2]=d%1E3*1E3;J=[Math.floor(e/1E3)>>>0,(I=Math.floor(e/1E3),1<=+Math.abs(I)?0<I?+Math.floor(I/4294967296)>>>0:~~+Math.ceil((I-+(~~I>>>0))/4294967296)>>>0:0)];D[c+72>>2]=J[0];D[c+76>>2]=J[1];F[c+80>>2]=e%1E3*1E3;J=[a.ino>>>0,(I=a.ino,1<=+Math.abs(I)?\n0<I?+Math.floor(I/4294967296)>>>0:~~+Math.ceil((I-+(~~I>>>0))/4294967296)>>>0:0)];D[c+88>>2]=J[0];D[c+92>>2]=J[1];return 0}var Kc=void 0;function Lc(){var a=D[+Kc>>2];Kc+=4;return a}\nvar Mc=(a,b)=>b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN,Nc=[0,31,60,91,121,152,182,213,244,274,305,335],Oc=[0,31,59,90,120,151,181,212,243,273,304,334],Pc={},Rc=()=>{if(!Qc){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:Ca||\"./this.program\"},b;for(b in Pc)void 0===Pc[b]?delete a[b]:a[b]=Pc[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Qc=c}return Qc},\nQc,va=a=>{var b=ha(a)+1,c=y(b);q(a,u,c,b);return c},Sc=(a,b,c,d)=>{var e={string:v=>{var E=0;null!==v&&void 0!==v&&0!==v&&(E=va(v));return E},array:v=>{var E=y(v.length);p.set(v,E);return E}};a=f[\"_\"+a];var h=[],k=0;if(d)for(var r=0;r<d.length;r++){var z=e[c[r]];z?(0===k&&(k=ra()),h[r]=z(d[r])):h[r]=d[r]}c=a(...h);return c=function(v){0!==k&&ua(k);return\"string\"===b?v?L(u,v):\"\":\"boolean\"===b?!!v:v}(c)},ea=0,da=(a,b)=>{b=1==b?y(a.length):ia(a.length);a.subarray||a.slice||(a=new Uint8Array(a));u.set(a,\nb);return b},Tc,Uc=[],X,wa=a=>{Tc.delete(X.get(a));X.set(a,null);Uc.push(a)},Aa=(a,b)=>{if(!Tc){Tc=new WeakMap;var c=X.length;if(Tc)for(var d=0;d<0+c;d++){var e=X.get(d);e&&Tc.set(e,d)}}if(c=Tc.get(a)||0)return c;if(Uc.length)c=Uc.pop();else{try{X.grow(1)}catch(r){if(!(r instanceof RangeError))throw r;throw\"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.\";}c=X.length-1}try{X.set(c,a)}catch(r){if(!(r instanceof TypeError))throw r;if(\"function\"==typeof WebAssembly.Function){d=WebAssembly.Function;\ne={i:\"i32\",j:\"i64\",f:\"f32\",d:\"f64\",e:\"externref\",p:\"i32\"};for(var h={parameters:[],results:\"v\"==b[0]?[]:[e[b[0]]]},k=1;k<b.length;++k)h.parameters.push(e[b[k]]);b=new d(h,a)}else{d=[1];e=b.slice(0,1);b=b.slice(1);h={i:127,p:127,j:126,f:125,d:124,e:111};d.push(96);k=b.length;128>k?d.push(k):d.push(k%128|128,k>>7);for(k=0;k<b.length;++k)d.push(h[b[k]]);\"v\"==e?d.push(0):d.push(1,h[e]);b=[0,97,115,109,1,0,0,0,1];e=d.length;128>e?b.push(e):b.push(e%128|128,e>>7);b.push(...d);b.push(2,7,1,1,101,1,102,0,\n0,7,5,1,1,102,0,0);b=new WebAssembly.Module(new Uint8Array(b));b=(new WebAssembly.Instance(b,{e:{f:a}})).exports.f}X.set(c,b)}Tc.set(a,c);return c};[44].forEach(a=>{Cb[a]=new P(a);Cb[a].stack=\"<generic error, no stack>\"});S=Array(4096);Vb(Q,\"/\");V(\"/tmp\");V(\"/home\");V(\"/home/web_user\");\n(function(){V(\"/dev\");vb(259,{read:()=>0,write:(d,e,h,k)=>k});Wb(\"/dev/null\",259);ub(1280,xb);ub(1536,yb);Wb(\"/dev/tty\",1280);Wb(\"/dev/tty1\",1536);var a=new Uint8Array(1024),b=0,c=()=>{0===b&&(b=jb(a).byteLength);return a[--b]};Fc(\"random\",c);Fc(\"urandom\",c);V(\"/dev/shm\");V(\"/dev/shm/tmp\")})();\n(function(){V(\"/proc\");var a=V(\"/proc/self\");V(\"/proc/self/fd\");Vb({Qa(){var b=Bb(a,\"fd\",16895,73);b.Fa={lookup(c,d){var e=U(+d);c={parent:null,Qa:{sb:\"fake\"},Fa:{readlink:()=>e.path}};return c.parent=c}};return b}},\"/proc/self/fd\")})();\nvar Vc={a:(a,b,c,d)=>{G(`Assertion failed: ${a?L(u,a):\"\"}, at: `+[b?b?L(u,b):\"\":\"unknown filename\",c,d?d?L(u,d):\"\":\"unknown function\"])},h:function(a,b){try{return a=a?L(u,a):\"\",ma(a,b),0}catch(c){if(\"undefined\"==typeof W||\"ErrnoError\"!==c.name)throw c;return-c.Ja}},H:function(a,b,c){try{b=b?L(u,b):\"\";b=Ic(a,b);if(c&-8)return-28;var d=T(b,{Ra:!0}).node;if(!d)return-44;a=\"\";c&4&&(a+=\"r\");c&2&&(a+=\"w\");c&1&&(a+=\"x\");return a&&Pb(d,a)?-2:0}catch(e){if(\"undefined\"==typeof W||\"ErrnoError\"!==e.name)throw e;\nreturn-e.Ja}},i:function(a,b){try{var c=U(a);ma(c.node,b);return 0}catch(d){if(\"undefined\"==typeof W||\"ErrnoError\"!==d.name)throw d;return-d.Ja}},g:function(a){try{var b=U(a).node;var c=\"string\"==typeof b?T(b,{Ra:!0}).node:b;if(!c.Fa.Na)throw new P(63);c.Fa.Na(c,{timestamp:Date.now()});return 0}catch(d){if(\"undefined\"==typeof W||\"ErrnoError\"!==d.name)throw d;return-d.Ja}},b:function(a,b,c){Kc=c;try{var d=U(a);switch(b){case 0:var e=Lc();if(0>e)break;for(;Hb[e];)e++;return Ub(d,e).fd;case 1:case 2:return 0;\ncase 3:return d.flags;case 4:return e=Lc(),d.flags|=e,0;case 12:return e=Lc(),La[e+0>>1]=2,0;case 13:case 14:return 0}return-28}catch(h){if(\"undefined\"==typeof W||\"ErrnoError\"!==h.name)throw h;return-h.Ja}},f:function(a,b){try{var c=U(a);return Jc(Zb,c.path,b)}catch(d){if(\"undefined\"==typeof W||\"ErrnoError\"!==d.name)throw d;return-d.Ja}},n:function(a,b,c){b=Mc(b,c);try{if(isNaN(b))return 61;var d=U(a);if(0===(d.flags&2097155))throw new P(28);ac(d.node,b);return 0}catch(e){if(\"undefined\"==typeof W||\n\"ErrnoError\"!==e.name)throw e;return-e.Ja}},C:function(a,b){try{if(0===b)return-28;var c=ha(\"/\")+1;if(b<c)return-68;q(\"/\",u,a,b);return c}catch(d){if(\"undefined\"==typeof W||\"ErrnoError\"!==d.name)throw d;return-d.Ja}},F:function(a,b){try{return a=a?L(u,a):\"\",Jc($b,a,b)}catch(c){if(\"undefined\"==typeof W||\"ErrnoError\"!==c.name)throw c;return-c.Ja}},z:function(a,b,c){try{return b=b?L(u,b):\"\",b=Ic(a,b),b=x(b),\"/\"===b[b.length-1]&&(b=b.substr(0,b.length-1)),V(b,c),0}catch(d){if(\"undefined\"==typeof W||\"ErrnoError\"!==\nd.name)throw d;return-d.Ja}},E:function(a,b,c,d){try{b=b?L(u,b):\"\";var e=d&256;b=Ic(a,b,d&4096);return Jc(e?$b:Zb,b,c)}catch(h){if(\"undefined\"==typeof W||\"ErrnoError\"!==h.name)throw h;return-h.Ja}},x:function(a,b,c,d){Kc=d;try{b=b?L(u,b):\"\";b=Ic(a,b);var e=d?Lc():0;return na(b,c,e).fd}catch(h){if(\"undefined\"==typeof W||\"ErrnoError\"!==h.name)throw h;return-h.Ja}},v:function(a,b,c,d){try{b=b?L(u,b):\"\";b=Ic(a,b);if(0>=d)return-28;var e=Mb(b),h=Math.min(d,ha(e)),k=p[c+h];q(e,u,c,d+1);p[c+h]=k;return h}catch(r){if(\"undefined\"==\ntypeof W||\"ErrnoError\"!==r.name)throw r;return-r.Ja}},u:function(a){try{return a=a?L(u,a):\"\",Yb(a),0}catch(b){if(\"undefined\"==typeof W||\"ErrnoError\"!==b.name)throw b;return-b.Ja}},G:function(a,b){try{return a=a?L(u,a):\"\",Jc(Zb,a,b)}catch(c){if(\"undefined\"==typeof W||\"ErrnoError\"!==c.name)throw c;return-c.Ja}},r:function(a,b,c){try{return b=b?L(u,b):\"\",b=Ic(a,b),0===c?za(b):512===c?Yb(b):G(\"Invalid flags passed to unlinkat\"),0}catch(d){if(\"undefined\"==typeof W||\"ErrnoError\"!==d.name)throw d;return-d.Ja}},\nq:function(a,b,c){try{b=b?L(u,b):\"\";b=Ic(a,b,!0);if(c){var d=F[c>>2]+4294967296*D[c+4>>2],e=D[c+8>>2];h=1E3*d+e/1E6;c+=16;d=F[c>>2]+4294967296*D[c+4>>2];e=D[c+8>>2];k=1E3*d+e/1E6}else var h=Date.now(),k=h;a=h;var r=T(b,{Ra:!0}).node;r.Fa.Na(r,{timestamp:Math.max(a,k)});return 0}catch(z){if(\"undefined\"==typeof W||\"ErrnoError\"!==z.name)throw z;return-z.Ja}},l:function(a,b,c){a=new Date(1E3*Mc(a,b));D[c>>2]=a.getSeconds();D[c+4>>2]=a.getMinutes();D[c+8>>2]=a.getHours();D[c+12>>2]=a.getDate();D[c+16>>\n2]=a.getMonth();D[c+20>>2]=a.getFullYear()-1900;D[c+24>>2]=a.getDay();b=a.getFullYear();D[c+28>>2]=(0!==b%4||0===b%100&&0!==b%400?Oc:Nc)[a.getMonth()]+a.getDate()-1|0;D[c+36>>2]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();D[c+32>>2]=(b!=d&&a.getTimezoneOffset()==Math.min(d,b))|0},j:function(a,b,c,d,e,h,k,r){e=Mc(e,h);try{if(isNaN(e))return 61;var z=U(d);if(0!==(b&2)&&0===(c&2)&&2!==(z.flags&2097155))throw new P(2);\nif(1===(z.flags&2097155))throw new P(2);if(!z.Ga.ab)throw new P(43);var v=z.Ga.ab(z,a,e,b,c);var E=v.Cb;D[k>>2]=v.tb;F[r>>2]=E;return 0}catch(H){if(\"undefined\"==typeof W||\"ErrnoError\"!==H.name)throw H;return-H.Ja}},k:function(a,b,c,d,e,h,k){h=Mc(h,k);try{var r=U(e);if(c&2){if(32768!==(r.node.mode&61440))throw new P(43);if(!(d&2)){var z=u.slice(a,a+b);r.Ga.bb&&r.Ga.bb(r,z,h,b,d)}}}catch(v){if(\"undefined\"==typeof W||\"ErrnoError\"!==v.name)throw v;return-v.Ja}},y:(a,b,c,d)=>{var e=(new Date).getFullYear(),\nh=(new Date(e,0,1)).getTimezoneOffset();e=(new Date(e,6,1)).getTimezoneOffset();F[a>>2]=60*Math.max(h,e);D[b>>2]=Number(h!=e);b=k=>{var r=Math.abs(k);return`UTC${0<=k?\"-\":\"+\"}${String(Math.floor(r/60)).padStart(2,\"0\")}${String(r%60).padStart(2,\"0\")}`};a=b(h);b=b(e);e<h?(q(a,u,c,17),q(b,u,d,17)):(q(a,u,d,17),q(b,u,c,17))},d:()=>Date.now(),s:()=>2147483648,c:()=>performance.now(),o:a=>{var b=u.length;a>>>=0;if(2147483648<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=\nMath;d=Math.max(a,d);a:{e=(e.min.call(e,2147483648,d+(65536-d%65536)%65536)-Ja.buffer.byteLength+65535)/65536;try{Ja.grow(e);Oa();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},A:(a,b)=>{var c=0;Rc().forEach((d,e)=>{var h=b+c;e=F[a+4*e>>2]=h;for(h=0;h<d.length;++h)p[e++]=d.charCodeAt(h);p[e]=0;c+=d.length+1});return 0},B:(a,b)=>{var c=Rc();F[a>>2]=c.length;var d=0;c.forEach(e=>d+=e.length+1);F[b>>2]=d;return 0},e:function(a){try{var b=U(a);pa(b);return 0}catch(c){if(\"undefined\"==typeof W||\n\"ErrnoError\"!==c.name)throw c;return c.Ja}},p:function(a,b){try{var c=U(a);p[b]=c.tty?2:R(c.mode)?3:40960===(c.mode&61440)?7:4;La[b+2>>1]=0;J=[0,(I=0,1<=+Math.abs(I)?0<I?+Math.floor(I/4294967296)>>>0:~~+Math.ceil((I-+(~~I>>>0))/4294967296)>>>0:0)];D[b+8>>2]=J[0];D[b+12>>2]=J[1];J=[0,(I=0,1<=+Math.abs(I)?0<I?+Math.floor(I/4294967296)>>>0:~~+Math.ceil((I-+(~~I>>>0))/4294967296)>>>0:0)];D[b+16>>2]=J[0];D[b+20>>2]=J[1];return 0}catch(d){if(\"undefined\"==typeof W||\"ErrnoError\"!==d.name)throw d;return d.Ja}},\nw:function(a,b,c,d){try{a:{var e=U(a);a=b;for(var h,k=b=0;k<c;k++){var r=F[a>>2],z=F[a+4>>2];a+=8;var v=dc(e,p,r,z,h);if(0>v){var E=-1;break a}b+=v;if(v<z)break;\"undefined\"!=typeof h&&(h+=v)}E=b}F[d>>2]=E;return 0}catch(H){if(\"undefined\"==typeof W||\"ErrnoError\"!==H.name)throw H;return H.Ja}},m:function(a,b,c,d,e){b=Mc(b,c);try{if(isNaN(b))return 61;var h=U(a);cc(h,b,d);J=[h.position>>>0,(I=h.position,1<=+Math.abs(I)?0<I?+Math.floor(I/4294967296)>>>0:~~+Math.ceil((I-+(~~I>>>0))/4294967296)>>>0:0)];\nD[e>>2]=J[0];D[e+4>>2]=J[1];h.gb&&0===b&&0===d&&(h.gb=null);return 0}catch(k){if(\"undefined\"==typeof W||\"ErrnoError\"!==k.name)throw k;return k.Ja}},D:function(a){try{var b=U(a);return b.Ga?.fsync?b.Ga.fsync(b):0}catch(c){if(\"undefined\"==typeof W||\"ErrnoError\"!==c.name)throw c;return c.Ja}},t:function(a,b,c,d){try{a:{var e=U(a);a=b;for(var h,k=b=0;k<c;k++){var r=F[a>>2],z=F[a+4>>2];a+=8;var v=oa(e,p,r,z,h);if(0>v){var E=-1;break a}b+=v;\"undefined\"!=typeof h&&(h+=v)}E=b}F[d>>2]=E;return 0}catch(H){if(\"undefined\"==\ntypeof W||\"ErrnoError\"!==H.name)throw H;return H.Ja}}},Z=function(){function a(c){Z=c.exports;Ja=Z.I;Oa();X=Z.K;Qa.unshift(Z.J);Ua--;f.monitorRunDependencies?.(Ua);0==Ua&&(null!==Va&&(clearInterval(Va),Va=null),Wa&&(c=Wa,Wa=null,c()));return Z}var b={a:Vc};Ua++;f.monitorRunDependencies?.(Ua);if(f.instantiateWasm)try{return f.instantiateWasm(b,a)}catch(c){return C(`Module.instantiateWasm callback failed with error: ${c}`),!1}Ya||=Xa(\"sql-wasm.wasm\")?\"sql-wasm.wasm\":f.locateFile?f.locateFile(\"sql-wasm.wasm\",\nB):B+\"sql-wasm.wasm\";bb(b,function(c){a(c.instance)});return{}}();f._sqlite3_free=a=>(f._sqlite3_free=Z.L)(a);f._sqlite3_value_text=a=>(f._sqlite3_value_text=Z.M)(a);f._sqlite3_prepare_v2=(a,b,c,d,e)=>(f._sqlite3_prepare_v2=Z.N)(a,b,c,d,e);f._sqlite3_step=a=>(f._sqlite3_step=Z.O)(a);f._sqlite3_reset=a=>(f._sqlite3_reset=Z.P)(a);f._sqlite3_exec=(a,b,c,d,e)=>(f._sqlite3_exec=Z.Q)(a,b,c,d,e);f._sqlite3_finalize=a=>(f._sqlite3_finalize=Z.R)(a);\nf._sqlite3_column_name=(a,b)=>(f._sqlite3_column_name=Z.S)(a,b);f._sqlite3_column_text=(a,b)=>(f._sqlite3_column_text=Z.T)(a,b);f._sqlite3_column_type=(a,b)=>(f._sqlite3_column_type=Z.U)(a,b);f._sqlite3_errmsg=a=>(f._sqlite3_errmsg=Z.V)(a);f._sqlite3_clear_bindings=a=>(f._sqlite3_clear_bindings=Z.W)(a);f._sqlite3_value_blob=a=>(f._sqlite3_value_blob=Z.X)(a);f._sqlite3_value_bytes=a=>(f._sqlite3_value_bytes=Z.Y)(a);f._sqlite3_value_double=a=>(f._sqlite3_value_double=Z.Z)(a);\nf._sqlite3_value_int=a=>(f._sqlite3_value_int=Z._)(a);f._sqlite3_value_type=a=>(f._sqlite3_value_type=Z.$)(a);f._sqlite3_result_blob=(a,b,c,d)=>(f._sqlite3_result_blob=Z.aa)(a,b,c,d);f._sqlite3_result_double=(a,b)=>(f._sqlite3_result_double=Z.ba)(a,b);f._sqlite3_result_error=(a,b,c)=>(f._sqlite3_result_error=Z.ca)(a,b,c);f._sqlite3_result_int=(a,b)=>(f._sqlite3_result_int=Z.da)(a,b);f._sqlite3_result_int64=(a,b,c)=>(f._sqlite3_result_int64=Z.ea)(a,b,c);\nf._sqlite3_result_null=a=>(f._sqlite3_result_null=Z.fa)(a);f._sqlite3_result_text=(a,b,c,d)=>(f._sqlite3_result_text=Z.ga)(a,b,c,d);f._sqlite3_aggregate_context=(a,b)=>(f._sqlite3_aggregate_context=Z.ha)(a,b);f._sqlite3_column_count=a=>(f._sqlite3_column_count=Z.ia)(a);f._sqlite3_data_count=a=>(f._sqlite3_data_count=Z.ja)(a);f._sqlite3_column_blob=(a,b)=>(f._sqlite3_column_blob=Z.ka)(a,b);f._sqlite3_column_bytes=(a,b)=>(f._sqlite3_column_bytes=Z.la)(a,b);\nf._sqlite3_column_double=(a,b)=>(f._sqlite3_column_double=Z.ma)(a,b);f._sqlite3_bind_blob=(a,b,c,d,e)=>(f._sqlite3_bind_blob=Z.na)(a,b,c,d,e);f._sqlite3_bind_double=(a,b,c)=>(f._sqlite3_bind_double=Z.oa)(a,b,c);f._sqlite3_bind_int=(a,b,c)=>(f._sqlite3_bind_int=Z.pa)(a,b,c);f._sqlite3_bind_text=(a,b,c,d,e)=>(f._sqlite3_bind_text=Z.qa)(a,b,c,d,e);f._sqlite3_bind_parameter_index=(a,b)=>(f._sqlite3_bind_parameter_index=Z.ra)(a,b);f._sqlite3_sql=a=>(f._sqlite3_sql=Z.sa)(a);\nf._sqlite3_normalized_sql=a=>(f._sqlite3_normalized_sql=Z.ta)(a);f._sqlite3_changes=a=>(f._sqlite3_changes=Z.ua)(a);f._sqlite3_close_v2=a=>(f._sqlite3_close_v2=Z.va)(a);f._sqlite3_create_function_v2=(a,b,c,d,e,h,k,r,z)=>(f._sqlite3_create_function_v2=Z.wa)(a,b,c,d,e,h,k,r,z);f._sqlite3_open=(a,b)=>(f._sqlite3_open=Z.xa)(a,b);var ia=f._malloc=a=>(ia=f._malloc=Z.ya)(a),fa=f._free=a=>(fa=f._free=Z.za)(a);f._RegisterExtensionFunctions=a=>(f._RegisterExtensionFunctions=Z.Aa)(a);\nvar Eb=(a,b)=>(Eb=Z.Ba)(a,b),ua=a=>(ua=Z.Ca)(a),y=a=>(y=Z.Da)(a),ra=()=>(ra=Z.Ea)();f.stackSave=()=>ra();f.stackRestore=a=>ua(a);f.stackAlloc=a=>y(a);f.cwrap=(a,b,c,d)=>{var e=!c||c.every(h=>\"number\"===h||\"boolean\"===h);return\"string\"!==b&&e&&!d?f[\"_\"+a]:(...h)=>Sc(a,b,c,h)};f.addFunction=Aa;f.removeFunction=wa;f.UTF8ToString=ta;f.ALLOC_NORMAL=ea;f.allocate=da;f.allocateUTF8OnStack=va;var Wc;Wa=function Xc(){Wc||Yc();Wc||(Wa=Xc)};\nfunction Yc(){function a(){if(!Wc&&(Wc=!0,f.calledRun=!0,!Ka)){f.noFSInit||ec||(ec=!0,f.stdin=f.stdin,f.stdout=f.stdout,f.stderr=f.stderr,f.stdin?Fc(\"stdin\",f.stdin):Xb(\"/dev/tty\",\"/dev/stdin\"),f.stdout?Fc(\"stdout\",null,f.stdout):Xb(\"/dev/tty\",\"/dev/stdout\"),f.stderr?Fc(\"stderr\",null,f.stderr):Xb(\"/dev/tty1\",\"/dev/stderr\"),na(\"/dev/stdin\",0),na(\"/dev/stdout\",1),na(\"/dev/stderr\",1));Jb=!1;cb(Qa);f.onRuntimeInitialized?.();if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;){var b=\nf.postRun.shift();Sa.unshift(b)}cb(Sa)}}if(!(0<Ua)){if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)Ta();cb(Pa);0<Ua||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){f.setStatus(\"\")},1);a()},1)):a())}}if(f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();Yc();\n\n\n        // The shell-pre.js and emcc-generated code goes above\n        return Module;\n    }); // The end of the promise being returned\n\n  return initSqlJsPromise;\n} // The end of our initSqlJs function\n\n// This bit below is copied almost exactly from what you get when you use the MODULARIZE=1 flag with emcc\n// However, we don't want to use the emcc modularization. See shell-pre.js\nif (true){\n    module.exports = initSqlJs;\n    // This will allow the module to be used in ES6 or CommonJS\n    module.exports[\"default\"] = initSqlJs;\n}\nelse {}\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./node_modules/sql.js/dist/sql-wasm.js?");

/***/ }),

/***/ "?8893":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/crypto_(ignored)?");

/***/ }),

/***/ "?5041":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/fs_(ignored)?");

/***/ }),

/***/ "?c8d5":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/path_(ignored)?");

/***/ }),

/***/ "./node_modules/marked/lib/marked.esm.js":
/*!***********************************************!*\
  !*** ./node_modules/marked/lib/marked.esm.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hooks: () => (/* binding */ _Hooks),\n/* harmony export */   Lexer: () => (/* binding */ _Lexer),\n/* harmony export */   Marked: () => (/* binding */ Marked),\n/* harmony export */   Parser: () => (/* binding */ _Parser),\n/* harmony export */   Renderer: () => (/* binding */ _Renderer),\n/* harmony export */   Slugger: () => (/* binding */ _Slugger),\n/* harmony export */   TextRenderer: () => (/* binding */ _TextRenderer),\n/* harmony export */   Tokenizer: () => (/* binding */ _Tokenizer),\n/* harmony export */   defaults: () => (/* binding */ _defaults),\n/* harmony export */   getDefaults: () => (/* binding */ _getDefaults),\n/* harmony export */   lexer: () => (/* binding */ lexer),\n/* harmony export */   marked: () => (/* binding */ marked),\n/* harmony export */   options: () => (/* binding */ options),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseInline: () => (/* binding */ parseInline),\n/* harmony export */   parser: () => (/* binding */ parser),\n/* harmony export */   setOptions: () => (/* binding */ setOptions),\n/* harmony export */   use: () => (/* binding */ use),\n/* harmony export */   walkTokens: () => (/* binding */ walkTokens)\n/* harmony export */ });\n/**\n * marked v7.0.3 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        baseUrl: null,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        headerIds: false,\n        headerPrefix: '',\n        highlight: null,\n        hooks: null,\n        langPrefix: 'language-',\n        mangle: false,\n        pedantic: false,\n        renderer: null,\n        sanitize: false,\n        sanitizer: null,\n        silent: false,\n        smartypants: false,\n        tokenizer: null,\n        walkTokens: null,\n        xhtml: false\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret, '$1');\n            regex = regex.replace(name, val);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(regex, opt);\n        }\n    };\n    return obj;\n}\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n    if (sanitize) {\n        let prot;\n        try {\n            prot = decodeURIComponent(unescape(href))\n                .replace(nonWordAndColonTest, '')\n                .toLowerCase();\n        }\n        catch (e) {\n            return null;\n        }\n        if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n            return null;\n        }\n    }\n    if (base && !originIndependentUrl.test(href)) {\n        href = resolveUrl(base, href);\n    }\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\nfunction resolveUrl(base, href) {\n    if (!baseUrls[' ' + base]) {\n        // we can ignore everything in base after the last slash of its path component,\n        // but we might need to add _that_\n        // https://tools.ietf.org/html/rfc3986#section-3\n        if (justDomain.test(base)) {\n            baseUrls[' ' + base] = base + '/';\n        }\n        else {\n            baseUrls[' ' + base] = rtrim(base, '/', true);\n        }\n    }\n    base = baseUrls[' ' + base];\n    const relativeBase = base.indexOf(':') === -1;\n    if (href.substring(0, 2) === '//') {\n        if (relativeBase) {\n            return href;\n        }\n        return base.replace(protocol, '$1') + href;\n    }\n    else if (href.charAt(0) === '/') {\n        if (relativeBase) {\n            return href;\n        }\n        return base.replace(domain, '$1') + href;\n    }\n    else {\n        return base + href;\n    }\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false, curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    const l = str.length;\n    let level = 0, i = 0;\n    for (; i < l; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\nfunction checkDeprecations(opt, callback) {\n    if (!opt || opt.silent) {\n        return;\n    }\n    if (callback) {\n        console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n    }\n    if (opt.sanitize || opt.sanitizer) {\n        console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n    }\n    if (opt.highlight || opt.langPrefix !== 'language-') {\n        console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n    }\n    if (opt.mangle) {\n        console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n    }\n    if (opt.baseUrl) {\n        console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n    }\n    if (opt.smartypants) {\n        console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n    }\n    if (opt.xhtml) {\n        console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n    }\n    if (opt.headerIds || opt.headerPrefix) {\n        console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n    }\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                nextLine = src.split('\\n', 1)[0];\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimLeft();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimRight();\n            list.items[list.items.length - 1].text = itemContents.trimRight();\n            list.raw = list.raw.trimRight();\n            const l = list.items.length;\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (i = 0; i < l; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (i = 0; i < l; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: !this.options.sanitizer\n                    && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n                text: cap[0]\n            };\n            if (this.options.sanitize) {\n                const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n                const paragraph = token;\n                paragraph.type = 'paragraph';\n                paragraph.text = text;\n                paragraph.tokens = this.lexer.inline(text);\n            }\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c };\n                }),\n                align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i, j, k, row;\n                for (i = 0; i < l; i++) {\n                    if (/^ *-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'right';\n                    }\n                    else if (/^ *:-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'center';\n                    }\n                    else if (/^ *:-+ *$/.test(item.align[i])) {\n                        item.align[i] = 'left';\n                    }\n                    else {\n                        item.align[i] = null;\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n                        return { text: c };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: this.options.sanitize\n                    ? 'text'\n                    : 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: this.options.sanitize\n                    ? (this.options.sanitizer\n                        ? this.options.sanitizer(cap[0])\n                        : escape(cap[0]))\n                    : cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n                title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                const raw = [...src].slice(0, lLength + match.index + rLength + 1).join('');\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src, mangle) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src, mangle) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src, smartypants) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n            }\n            else {\n                text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst block = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')',\n    def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label', block._label)\n    .replace('title', block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull', block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g, block.bullet)\n    .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n    .replace('def', '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n    .replace('comment', block._comment)\n    .replace('tag', block._tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g, block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph', block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal,\n    table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n        + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table', block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', block._comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr', block.hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', block.lheading)\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme', inline._scheme)\n    .replace('email', inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment', inline._comment)\n    .replace('attribute', inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label', inline._label)\n    .replace('href', inline._href)\n    .replace('title', inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label', inline._label)\n    .replace('ref', block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref', block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n    .replace('reflink', inline.reflink)\n    .replace('nolink', inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal,\n    strong: {\n        start: /^__|\\*\\*/,\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n        endAst: /\\*\\*(?!\\*)/g,\n        endUnd: /__(?!_)/g\n    },\n    em: {\n        start: /^_|\\*/,\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n        endAst: /\\*(?!\\*)/g,\n        endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', inline._label)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal,\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i')\n    .replace('email', inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm,\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n    return text\n        // em-dashes\n        .replace(/---/g, '\\u2014')\n        // en-dashes\n        .replace(/--/g, '\\u2013')\n        // opening singles\n        .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n        // closing singles & apostrophes\n        .replace(/'/g, '\\u2019')\n        // opening doubles\n        .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n        // closing doubles\n        .replace(/\"/g, '\\u201d')\n        // ellipses\n        .replace(/\\.{3}/g, '\\u2026');\n}\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n    let out = '', i, ch;\n    const l = text.length;\n    for (i = 0; i < l; i++) {\n        ch = text.charCodeAt(i);\n        if (Math.random() > 0.5) {\n            ch = 'x' + ch.toString(16);\n        }\n        out += '&#' + ch + ';';\n    }\n    return out;\n}\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src, mangle)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/\\S*/)[0];\n        if (this.options.highlight) {\n            const out = this.options.highlight(code, lang);\n            if (out != null && out !== code) {\n                escaped = true;\n                code = out;\n            }\n        }\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"'\n            + this.options.langPrefix\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw, slugger) {\n        if (this.options.headerIds) {\n            const id = this.options.headerPrefix + slugger.slug(raw);\n            return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n        }\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul', startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\"'\n            + (this.options.xhtml ? ' /' : '')\n            + '> ';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return this.options.xhtml ? '<br/>' : '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n        if (href === null) {\n            return text;\n        }\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n        if (href === null) {\n            return text;\n        }\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += this.options.xhtml ? '/>' : '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Slugger generates header id\n */\nclass _Slugger {\n    seen;\n    constructor() {\n        this.seen = {};\n    }\n    serialize(value) {\n        return value\n            .toLowerCase()\n            .trim()\n            // remove html tags\n            .replace(/<[!\\/a-z].*?>/ig, '')\n            // remove unwanted chars\n            .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n            .replace(/\\s/g, '-');\n    }\n    /**\n     * Finds the next safe (unique) slug to use\n     */\n    getNextSafeSlug(originalSlug, isDryRun) {\n        let slug = originalSlug;\n        let occurenceAccumulator = 0;\n        if (this.seen.hasOwnProperty(slug)) {\n            occurenceAccumulator = this.seen[originalSlug];\n            do {\n                occurenceAccumulator++;\n                slug = originalSlug + '-' + occurenceAccumulator;\n            } while (this.seen.hasOwnProperty(slug));\n        }\n        if (!isDryRun) {\n            this.seen[originalSlug] = occurenceAccumulator;\n            this.seen[slug] = 0;\n        }\n        return slug;\n    }\n    /**\n     * Convert string to unique id\n     */\n    slug(value, options = {}) {\n        const slug = this.serialize(value);\n        return this.getNextSafeSlug(slug, options.dryrun);\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    slugger;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n        this.slugger = new _Slugger();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '', i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;\n        const l = tokens.length;\n        for (i = 0; i < l; i++) {\n            token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token.text, token.lang, !!token.escaped);\n                    continue;\n                }\n                case 'table': {\n                    header = '';\n                    // header\n                    cell = '';\n                    l2 = token.header.length;\n                    for (j = 0; j < l2; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), { header: true, align: token.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    body = '';\n                    l2 = token.rows.length;\n                    for (j = 0; j < l2; j++) {\n                        row = token.rows[j];\n                        cell = '';\n                        l3 = row.length;\n                        for (k = 0; k < l3; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: token.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    body = this.parse(token.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    ordered = token.ordered;\n                    start = token.start;\n                    loose = token.loose;\n                    l2 = token.items.length;\n                    body = '';\n                    for (j = 0; j < l2; j++) {\n                        item = token.items[j];\n                        checked = item.checked;\n                        task = item.task;\n                        itemBody = '';\n                        if (item.task) {\n                            checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox;\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token.text, token.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(this.parseInline(token.tokens));\n                    continue;\n                }\n                case 'text': {\n                    body = token.tokens ? this.parseInline(token.tokens) : token.text;\n                    while (i + 1 < l && tokens[i + 1].type === 'text') {\n                        token = tokens[++i];\n                        body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '', i, token, ret;\n        const l = tokens.length;\n        for (i = 0; i < l; i++) {\n            token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token.text);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token.text);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token.href, token.title, token.text);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(this.parseInline(token.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(this.parseInline(token.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(this.parseInline(token.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    parser = _Parser.parse;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    lexer = _Lexer.lex;\n    Tokenizer = _Tokenizer;\n    Slugger = _Slugger;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    for (const cell of token.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of token.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    values = values.concat(this.walkTokens(token.items, callback));\n                    break;\n                }\n                default: {\n                    if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n                        this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n                            // @ts-expect-error we assume token[childToken] is an array of tokens but we can't be sure\n                            values = values.concat(this.walkTokens(token[childTokens], callback));\n                        });\n                    }\n                    else if (token.tokens) {\n                        values = values.concat(this.walkTokens(token.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        if (extensions[ext.level]) {\n                            extensions[ext.level].unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(pack.walkTokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, optOrCallback, callback) => {\n            if (typeof optOrCallback === 'function') {\n                callback = optOrCallback;\n                optOrCallback = null;\n            }\n            const origOpt = { ...optOrCallback };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.#onError(!!opt.silent, !!opt.async, callback);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            checkDeprecations(opt, callback);\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (callback) {\n                const highlight = opt.highlight;\n                let tokens;\n                try {\n                    if (opt.hooks) {\n                        src = opt.hooks.preprocess(src);\n                    }\n                    tokens = lexer(src, opt);\n                }\n                catch (e) {\n                    return throwError(e);\n                }\n                const done = (err) => {\n                    let out;\n                    if (!err) {\n                        try {\n                            if (opt.walkTokens) {\n                                this.walkTokens(tokens, opt.walkTokens);\n                            }\n                            out = parser(tokens, opt);\n                            if (opt.hooks) {\n                                out = opt.hooks.postprocess(out);\n                            }\n                        }\n                        catch (e) {\n                            err = e;\n                        }\n                    }\n                    opt.highlight = highlight;\n                    return err\n                        ? throwError(err)\n                        : callback(null, out);\n                };\n                if (!highlight || highlight.length < 3) {\n                    return done();\n                }\n                delete opt.highlight;\n                if (!tokens.length)\n                    return done();\n                let pending = 0;\n                this.walkTokens(tokens, (token) => {\n                    if (token.type === 'code') {\n                        pending++;\n                        setTimeout(() => {\n                            highlight(token.text, token.lang, (err, code) => {\n                                if (err) {\n                                    return done(err);\n                                }\n                                if (code != null && code !== token.text) {\n                                    token.text = code;\n                                    token.escaped = true;\n                                }\n                                pending--;\n                                if (pending === 0) {\n                                    done();\n                                }\n                            });\n                        }, 0);\n                    }\n                });\n                if (pending === 0) {\n                    done();\n                }\n                return;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async, callback) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                if (callback) {\n                    callback(null, msg);\n                    return;\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            if (callback) {\n                callback(e);\n                return;\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt, callback) {\n    return markedInstance.parse(src, opt, callback);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\n\n//# sourceMappingURL=marked.esm.js.map\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./node_modules/marked/lib/marked.esm.js?");

/***/ }),

/***/ "./node_modules/pako/dist/pako.esm.mjs":
/*!*********************************************!*\
  !*** ./node_modules/pako/dist/pako.esm.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deflate: () => (/* binding */ Deflate_1),\n/* harmony export */   Inflate: () => (/* binding */ Inflate_1),\n/* harmony export */   constants: () => (/* binding */ constants_1),\n/* harmony export */   \"default\": () => (/* binding */ pako),\n/* harmony export */   deflate: () => (/* binding */ deflate_1),\n/* harmony export */   deflateRaw: () => (/* binding */ deflateRaw_1),\n/* harmony export */   gzip: () => (/* binding */ gzip_1),\n/* harmony export */   inflate: () => (/* binding */ inflate_1),\n/* harmony export */   inflateRaw: () => (/* binding */ inflateRaw_1),\n/* harmony export */   ungzip: () => (/* binding */ ungzip_1)\n/* harmony export */ });\n\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./node_modules/pako/dist/pako.esm.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;