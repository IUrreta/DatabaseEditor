/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_calendar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/calendar.js */ \"./src/js/calendar.js\");\n/* harmony import */ var _js_renderer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/renderer.js */ \"./src/js/renderer.js\");\n/* harmony import */ var _js_transfers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/transfers.js */ \"./src/js/transfers.js\");\n/* harmony import */ var _js_stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/stats.js */ \"./src/js/stats.js\");\n/* harmony import */ var _js_performance_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/performance.js */ \"./src/js/performance.js\");\n/* harmony import */ var _js_seasonViewer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js/seasonViewer.js */ \"./src/js/seasonViewer.js\");\n/* harmony import */ var _js_head2head_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./js/head2head.js */ \"./src/js/head2head.js\");\n/* harmony import */ var _js_teams_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./js/teams.js */ \"./src/js/teams.js\");\n/* harmony import */ var _js_predictions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./js/predictions.js */ \"./src/js/predictions.js\");\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/index.js?");

/***/ }),

/***/ "./src/js/calendar.js":
/*!****************************!*\
  !*** ./src/js/calendar.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   load_calendar: () => (/* binding */ load_calendar)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/js/renderer.js\");\n\n\nlet deleting = false;\nlet deleted = false;\n\n/**\r\n * Positions both the div the user's moving and the one he has moved it into\r\n * @param {div} div0 The div the user is moving\r\n * @param {div} div1 The div the user has moved div0 into\r\n * @param {string} beforeAfter If the user has moved div0 before or after div1\r\n */\nfunction reubicate(div0, div1, beforeAfter) {\n  const parentDiv = document.querySelector('.main-calendar-section');\n  parentDiv.removeChild(div0);\n  if (beforeAfter === 'before') {\n    parentDiv.insertBefore(div0, div1);\n  } else if (beforeAfter === 'after') {\n    parentDiv.insertBefore(div0, div1.nextSibling);\n  }\n}\n\n/**\r\n * Adds a race in the calendar div\r\n * @param {string} code Code from the race\r\n */\nfunction addRace(code, rainP, rainQ, rainR, type, trackID, state) {\n  let imageUrl = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[code];\n  let div = document.createElement('div');\n  let leftDiv = document.createElement('div');\n  let numberDiv = document.createElement('div');\n  numberDiv.className = \"race-calendar-number bold-font\";\n  leftDiv.className = \"left-race\";\n  let rightDiv = document.createElement('div');\n  rightDiv.className = \"right-race\";\n  div.classList.add('race-calendar');\n  div.dataset.trackid = trackID;\n  div.dataset.rainQ = rainQ;\n  div.dataset.rainR = rainR;\n  div.dataset.rainP = rainP;\n  div.dataset.type = type;\n  div.dataset.state = state;\n  if (state === 2) {\n    div.classList.add(\"completed\");\n    let compDiv = document.createElement('div');\n    compDiv.classList.add('complete-div');\n    let divText = document.createElement('div');\n    divText.innerHTML = \"Completed\";\n    divText.className = \"bold-font\";\n    divText.style.fontSize = \"18px\";\n    compDiv.appendChild(divText);\n    div.appendChild(compDiv);\n  }\n  let upperDiv = document.createElement('div');\n  upperDiv.className = \"upper-text-and-flag\";\n  let textDiv = document.createElement('div');\n  textDiv.classList.add('upper-race', 'bold-font');\n  textDiv.textContent = code.slice(0, -1).toUpperCase();\n  const img = document.createElement('img');\n  img.src = imageUrl;\n  img.classList.add('flag');\n  upperDiv.appendChild(textDiv);\n  upperDiv.appendChild(img);\n  let ATAInput;\n  let lowerDiv = document.createElement('div');\n  lowerDiv.classList.add('lower-race');\n  lowerDiv.innerHTML = \"<div class='form-check form-switch'><input class='form-check-input custom-toggle sprint-input' type='checkbox' role='switch''><label class='form-check-label'>Sprint</label></div>\";\n  if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023) {\n    lowerDiv.innerHTML += \"<div class='form-check form-switch'><input class='form-check-input custom-toggle ata-input' type='checkbox' role='switch'><label class='form-check-label' for='flexSwitchCheckDefault'>ATA Quali</label></div>\";\n    ATAInput = lowerDiv.querySelector(\".ata-input\");\n  }\n  let SprintInput = lowerDiv.querySelector(\".sprint-input\");\n  SprintInput.addEventListener(\"click\", function (event) {\n    if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023) {\n      if (ATAInput.checked) ATAInput.checked = false;\n    }\n    if (SprintInput.checked) div.dataset.type = 1;else div.dataset.type = 0;\n  });\n  if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023) {\n    ATAInput.addEventListener(\"click\", function (event) {\n      if (SprintInput.checked) SprintInput.checked = false;\n      if (ATAInput.checked) div.dataset.type = 2;else div.dataset.type = 0;\n    });\n  }\n  leftDiv.appendChild(upperDiv);\n  leftDiv.appendChild(lowerDiv);\n  if (type === 1) {\n    lowerDiv.children[0].firstChild.click();\n  } else if (type === 2) {\n    lowerDiv.children[1].firstChild.click();\n  }\n  div.appendChild(numberDiv);\n  div.appendChild(leftDiv);\n  let qWeather = document.createElement('div');\n  qWeather.className = \"full-quali-weather\";\n  let qName = document.createElement('div');\n  qName.className = \"session-name bold-font\";\n  qName.innerText = \"Sat\";\n  let wSelector = document.createElement('div');\n  wSelector.className = \"weather-selector\";\n  let leftArrow = document.createElement('i');\n  leftArrow.className = \"bi bi-chevron-left\";\n  let rightArrow = document.createElement('i');\n  rightArrow.className = \"bi bi-chevron-right\";\n  let wVis = document.createElement('div');\n  wVis.className = \"weather-vis\";\n  wVis.dataset.value = Number(rainQ);\n  wSelector.appendChild(leftArrow);\n  wSelector.appendChild(wVis);\n  wSelector.appendChild(rightArrow);\n  qWeather.appendChild(qName);\n  qWeather.appendChild(wSelector);\n  let rWeather = qWeather.cloneNode(true);\n  rWeather.firstChild.innerText = \"Sun\";\n  rWeather.children[1].children[1].dataset.value = Number(rainR);\n  let pWeather = qWeather.cloneNode(true);\n  pWeather.firstChild.innerText = \"Fri\";\n  pWeather.children[1].children[1].dataset.value = Number(rainP);\n  rightDiv.appendChild(pWeather);\n  rightDiv.appendChild(qWeather);\n  rightDiv.appendChild(rWeather);\n  div.appendChild(rightDiv);\n  div.querySelectorAll(\".bi-chevron-left\").forEach(function (elem) {\n    elem.addEventListener(\"click\", function () {\n      let val = elem.parentNode.querySelector(\".weather-vis\").dataset.value;\n      newVal = Number(val) - 1;\n      if (newVal === -1) {\n        newVal = 5;\n      }\n      elem.parentNode.querySelector(\".weather-vis\").dataset.value = newVal;\n      if (elem.parentNode.parentNode.firstChild.innerText === \"Sat\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainQ = newVal;\n      } else if (elem.parentNode.parentNode.firstChild.innerText === \"Sun\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainR = newVal;\n      } else if (elem.parentNode.parentNode.firstChild.innerText === \"Fri\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainP = newVal;\n      }\n      updateVisualizers();\n    });\n  });\n  div.querySelectorAll(\".bi-chevron-right\").forEach(function (elem) {\n    elem.addEventListener(\"click\", function () {\n      let val = elem.parentNode.querySelector(\".weather-vis\").dataset.value;\n      newVal = Number(val) + 1;\n      if (newVal === 6) {\n        newVal = 0;\n      }\n      elem.parentNode.querySelector(\".weather-vis\").dataset.value = newVal;\n      if (elem.parentNode.parentNode.firstChild.innerText === \"Sat\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainQ = newVal;\n      } else if (elem.parentNode.parentNode.firstChild.innerText === \"Sun\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainR = newVal;\n      } else if (elem.parentNode.parentNode.firstChild.innerText === \"Fri\") {\n        elem.parentNode.parentNode.parentNode.parentNode.dataset.rainP = newVal;\n      }\n      updateVisualizers();\n    });\n  });\n  document.querySelector('.main-calendar-section').appendChild(div);\n}\nfunction updateVisualizers() {\n  document.querySelector(\".main-calendar\").querySelectorAll(\".weather-vis\").forEach(function (elem) {\n    elem.innerHTML = \"\";\n    let val = elem.dataset.value;\n    let icon = document.createElement(\"i\");\n    icon.className = _config__WEBPACK_IMPORTED_MODULE_0__.weather_dict[val];\n    elem.appendChild(icon);\n  });\n}\nfunction load_calendar(races) {\n  document.querySelector('.main-calendar-section').innerHTML = \"\";\n  races.forEach(function (elem) {\n    let code = _config__WEBPACK_IMPORTED_MODULE_0__.races_map[elem[0]];\n    addRace(code, transformWeather(elem[1]), transformWeather(elem[2]), transformWeather(elem[3]), elem[4], elem[0], elem[5]);\n  });\n  updateVisualizers();\n  update_numbers();\n  load_addRaces();\n}\nfunction update_numbers() {\n  document.querySelectorAll(\".race-calendar-number\").forEach(function (elem, index) {\n    elem.textContent = index + 1;\n  });\n}\nfunction transformWeather(state) {\n  let realWeather;\n  if (state === 1) {\n    realWeather = 0;\n  } else if (state === 2) {\n    realWeather = 1;\n  } else if (state === 4) {\n    realWeather = 2;\n  } else if (state === 8) {\n    realWeather = 3;\n  } else if (state === 16) {\n    realWeather = 4;\n  } else if (state === 32) {\n    realWeather = 5;\n  }\n  return realWeather;\n}\n\n/**\r\n * Changes the number after the race code to specify the format\r\n * @param {div} div div from the race that's changing format\r\n * @param {string} format code of the format\r\n */\nfunction changeFormat(div, format) {\n  let lastChar = div.dataset.code.charAt(div.dataset.code.length - 1);\n  if (/\\d/.test(lastChar)) {\n    div.dataset.code = div.dataset.code.slice(0, -1) + format;\n  } else {\n    div.dataset.code = div.dataset.code + format;\n  }\n}\n\n/**\r\n * Adds all the races to the addRace menu\r\n */\nfunction load_addRaces() {\n  document.getElementById(\"addTrackMenu\").innerHTML = \"\";\n  for (let dataCode of Object.keys(_config__WEBPACK_IMPORTED_MODULE_0__.codes_dict)) {\n    let elem = countries_dict[dataCode];\n    let li = document.createElement('li');\n    let a = document.createElement('a');\n    a.classList.add('dropdown-item');\n    a.classList.add('menu-race');\n    a.href = '#';\n    a.textContent = elem;\n    a.dataset.code = dataCode;\n    a.dataset.trackid = invertedRacesMap[dataCode];\n    let imageUrl = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[dataCode];\n    let img = document.createElement('img');\n    img.src = imageUrl;\n    img.classList.add('menuFlag');\n    a.appendChild(img);\n    li.appendChild(a);\n    document.getElementById(\"addTrackMenu\").appendChild(li);\n  }\n  listenerRaces();\n}\n\n/**\r\n * Adds the listeners to the addRace menu races\r\n */\nfunction listenerRaces() {\n  document.querySelectorAll('#addTrackMenu a').forEach(item => {\n    item.addEventListener(\"click\", function () {\n      if (document.querySelector(\".main-calendar-section\").childElementCount < max_races) {\n        addRace(item.dataset.code, 0, 0, 0, 0, item.dataset.trackid, 0);\n        updateVisualizers();\n        update_numbers();\n      }\n    });\n  });\n}\n\n/**\r\n * Event listeenr for the delete tracks button\r\n */\ndocument.getElementById(\"deleteTracks\").addEventListener(\"click\", function (btn) {\n  if (deleting) {\n    document.querySelectorAll(\".delete-div\").forEach(function (elem) {\n      elem.parentNode.removeChild(elem);\n      update_numbers();\n    });\n    this.className = \"custom-dropdown custom-button bold-font\";\n    document.querySelectorAll(\".race-calendar\").forEach(function (elem) {\n      if (elem.firstChild.className !== \"complete-div\") {\n        elem.classList = \"race-calendar\";\n      }\n    });\n  } else {\n    document.querySelectorAll(\".race-calendar\").forEach(function (elem) {\n      if (elem.firstChild.className !== \"complete-div\") {\n        elem.classList = \"race-calendar deleting\";\n        let div = document.createElement('div');\n        let trashicon = document.createElement('i');\n        let trashandtext = document.createElement('div');\n        let text = document.createElement('span');\n        text.classList = \"bold-font\";\n        text.innerText = \"Delete\";\n        trashandtext.classList.add('trash-and-text');\n        trashicon.className = \"bi bi-trash-fill\";\n        div.classList.add('delete-div');\n        trashandtext.appendChild(trashicon);\n        trashandtext.appendChild(text);\n        div.appendChild(trashandtext);\n        elem.insertBefore(div, elem.firstChild);\n        trashandtext.addEventListener(\"click\", function () {\n          let race = trashandtext.parentNode.parentNode;\n          trashandtext.parentNode.parentNode.parentNode.removeChild(race);\n          deleted = true;\n          if (race.dataset.trackid === \"6\") {\n            update_notifications(\"Why'd you do that?\", \"monaco\");\n          }\n        });\n      }\n    });\n    this.className = \"custom-dropdown custom-button bold-font delete-mode\";\n  }\n  deleting = !deleting;\n});\n\n/**\r\n * Manages the interaction with the race divs\r\n */\ninteract('.race-calendar').draggable({\n  inertia: true,\n  listeners: {\n    start(event) {\n      let target = event.target;\n      let position = target.getBoundingClientRect();\n      let width = target.getBoundingClientRect().width;\n    },\n    move(event) {\n      const target = event.target;\n      const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;\n      const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\n      target.style.transform = `translate(${x}px, ${y}px)`;\n      target.style.opacity = 1;\n      target.style.zIndex = 10;\n      target.setAttribute('data-x', x);\n      target.setAttribute('data-y', y);\n    },\n    end(event) {\n      let target = event.target;\n      const racesEvents = document.querySelectorAll('.race-calendar');\n      racesEvents.forEach(function (element) {\n        let eventRect = element.getBoundingClientRect();\n        let centerHorizontal = (eventRect.left + eventRect.right) / 2;\n        if (target !== element) {\n          if (event.clientX >= eventRect.left && event.clientX <= eventRect.right && event.clientY >= eventRect.top && event.clientY <= eventRect.bottom) {\n            if (event.clientX >= centerHorizontal) {\n              reubicate(target, element, \"after\");\n            } else {\n              reubicate(target, element, \"before\");\n            }\n            update_numbers();\n          }\n        }\n      });\n      target.style.transform = 'none';\n      target.setAttribute('data-x', 0);\n      target.setAttribute('data-y', 0);\n\n      // originalParent = undefined;\n      // destinationParent = undefined;\n      // draggable = undefined;\n    }\n  }\n});\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/calendar.js?");

/***/ }),

/***/ "./src/js/config.js":
/*!**************************!*\
  !*** ./src/js/config.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abreviations_dict: () => (/* binding */ abreviations_dict),\n/* harmony export */   codes_dict: () => (/* binding */ codes_dict),\n/* harmony export */   combined_dict: () => (/* binding */ combined_dict),\n/* harmony export */   countries_dict: () => (/* binding */ countries_dict),\n/* harmony export */   default_dict: () => (/* binding */ default_dict),\n/* harmony export */   default_points: () => (/* binding */ default_points),\n/* harmony export */   difficultyConfig: () => (/* binding */ difficultyConfig),\n/* harmony export */   driversTableLogosDict: () => (/* binding */ driversTableLogosDict),\n/* harmony export */   engine_stats_dict: () => (/* binding */ engine_stats_dict),\n/* harmony export */   f1_teams: () => (/* binding */ f1_teams),\n/* harmony export */   f2_teams: () => (/* binding */ f2_teams),\n/* harmony export */   f3_teams: () => (/* binding */ f3_teams),\n/* harmony export */   invertedRacesMap: () => (/* binding */ invertedRacesMap),\n/* harmony export */   inverted_dict: () => (/* binding */ inverted_dict),\n/* harmony export */   lightColors: () => (/* binding */ lightColors),\n/* harmony export */   logos_disc: () => (/* binding */ logos_disc),\n/* harmony export */   mentalityModifiers: () => (/* binding */ mentalityModifiers),\n/* harmony export */   mentality_bonuses: () => (/* binding */ mentality_bonuses),\n/* harmony export */   mentality_dict: () => (/* binding */ mentality_dict),\n/* harmony export */   mentality_to_global_menatality: () => (/* binding */ mentality_to_global_menatality),\n/* harmony export */   names_full: () => (/* binding */ names_full),\n/* harmony export */   pars_abreviations: () => (/* binding */ pars_abreviations),\n/* harmony export */   part_codes_abreviations: () => (/* binding */ part_codes_abreviations),\n/* harmony export */   points_race: () => (/* binding */ points_race),\n/* harmony export */   points_sprint: () => (/* binding */ points_sprint),\n/* harmony export */   races_map: () => (/* binding */ races_map),\n/* harmony export */   races_names: () => (/* binding */ races_names),\n/* harmony export */   staff_pics: () => (/* binding */ staff_pics),\n/* harmony export */   staff_positions: () => (/* binding */ staff_positions),\n/* harmony export */   teamOrder: () => (/* binding */ teamOrder),\n/* harmony export */   team_dict: () => (/* binding */ team_dict),\n/* harmony export */   teams_full_name_dict: () => (/* binding */ teams_full_name_dict),\n/* harmony export */   typeStaff_dict: () => (/* binding */ typeStaff_dict),\n/* harmony export */   weather_dict: () => (/* binding */ weather_dict)\n/* harmony export */ });\n// calendar\nlet codes_dict = {\n  \"bah0\": \"../assets/images/bahrain.png\",\n  \"sau0\": \"../assets/images/saudi.jpg\",\n  \"aus0\": \"../assets/images/australia.png\",\n  \"aze0\": \"../assets/images/azerbaiyan.png\",\n  \"mia0\": \"../assets/images/usa.png\",\n  \"imo0\": \"../assets/images/italy.png\",\n  \"mon0\": \"../assets/images/monaco.png\",\n  \"spa0\": \"../assets/images/spain.png\",\n  \"can0\": \"../assets/images/canada.png\",\n  \"aut0\": \"../assets/images/austria.png\",\n  \"gbr0\": \"../assets/images/gbr.png\",\n  \"hun0\": \"../assets/images/hungry.png\",\n  \"bel0\": \"../assets/images/balgium.png\",\n  \"ned0\": \"../assets/images/ned.png\",\n  \"ita0\": \"../assets/images/italy.png\",\n  \"jap0\": \"../assets/images/japan.png\",\n  \"sgp0\": \"../assets/images/singapore.png\",\n  \"qat0\": \"../assets/images/qatar.png\",\n  \"usa0\": \"../assets/images/usa.png\",\n  \"mex0\": \"../assets/images/mexico.png\",\n  \"bra0\": \"../assets/images/brazil.png\",\n  \"veg0\": \"../assets/images/usa.png\",\n  \"uae0\": \"../assets/images/uae.png\",\n  \"chi0\": \"../assets/images/china.png\"\n};\nlet countries_dict = {\n  \"bah0\": \"Bahrain\",\n  \"sau0\": \"Saudi Arabia\",\n  \"aus0\": \"Australia\",\n  \"aze0\": \"Azerbaijan\",\n  \"mia0\": \"Miami\",\n  \"imo0\": \"Imola\",\n  \"mon0\": \"Monaco\",\n  \"spa0\": \"Spain\",\n  \"can0\": \"Canada\",\n  \"aut0\": \"Austria\",\n  \"gbr0\": \"United Kingdom\",\n  \"hun0\": \"Hungary\",\n  \"bel0\": \"Belgium\",\n  \"ned0\": \"Netherlands\",\n  \"ita0\": \"Italy\",\n  \"sgp0\": \"Singapore\",\n  \"jap0\": \"Japan\",\n  \"qat0\": \"Qatar\",\n  \"usa0\": \"USA\",\n  \"mex0\": \"Mexico\",\n  \"bra0\": \"Brazil\",\n  \"veg0\": \"Vegas\",\n  \"uae0\": \"Abu Dhbai\",\n  \"chi0\": \"China\"\n};\nlet weather_dict = {\n  0: \"bi bi-sun\",\n  1: \"bi bi-cloud-sun\",\n  2: \"bi bi-cloud\",\n  3: \"bi bi-cloud-drizzle\",\n  4: \"bi bi-cloud-rain\",\n  5: \"bi bi-cloud-rain-heavy\"\n};\n\n//h2h\nconst lightColors = [\"#f1f1f1\", \"#47c7fc\", \"#ffd300\", \"#6CD3BF\", \"#fcfcfc\", \"#37BEDD\", \"#B6BABD\", \"#c3dc00\", \"#d0e610\", \"#fac51c\", \"#b09247\", \"#f7c82f\"];\nconst default_dict = {\n  1: \"Ferrari\",\n  2: \"McLaren\",\n  3: \"Red Bull\",\n  4: \"Mercedes\",\n  5: \"Alpine\",\n  6: \"Williams\",\n  7: \"Haas\",\n  8: \"Alpha Tauri\",\n  9: \"Alfa Romeo\",\n  10: \"Aston Martin\",\n  32: \"Custom Team\"\n};\nlet combined_dict = {\n  1: \"Ferrari\",\n  2: \"McLaren\",\n  3: \"Red Bull\",\n  4: \"Mercedes\",\n  5: \"Alpine\",\n  6: \"Williams\",\n  7: \"Haas\",\n  8: \"Alpha Tauri\",\n  9: \"Alfa Romeo\",\n  10: \"Aston Martin\",\n  11: \"Prema Racing (F2)\",\n  12: \"Virtuosi Racing (F2)\",\n  13: \"Carlin (F2)\",\n  14: \"Hitech GP (F2)\",\n  15: \"ART Grand Prix (F2)\",\n  16: \"MP Motorsport (F2)\",\n  17: \"PHM Racing (F2)\",\n  18: \"DAMS (F2)\",\n  19: \"Campo Racing (F2)\",\n  20: \"VAR Racing (F2)\",\n  21: \"Trident (F2)\",\n  22: \"Prema Racing (F3)\",\n  23: \"Trident (F3)\",\n  24: \"ART Grand Prix (F3)\",\n  25: \"Hitech GP (F3)\",\n  26: \"VAR Racing (F3)\",\n  27: \"MP Motorsport (F3)\",\n  28: \"Campos Racing (F3)\",\n  29: \"Carlin (F3)\",\n  30: \"Jenzzer Motorsport (F3)\",\n  31: \"PHM Racing (F3)\",\n  32: \"Custom Team\"\n};\n\n//performance\nconst pars_abreviations = {\n  \"chassis\": \"C\",\n  \"front_wing\": \"FW\",\n  \"rear_wing\": \"RW\",\n  \"underfloor\": \"UF\",\n  \"sidepods\": \"SP\",\n  \"suspension\": \"S\"\n};\nconst part_codes_abreviations = {\n  3: \"C\",\n  4: \"FW\",\n  5: \"RW\",\n  6: \"UF\",\n  7: \"SP\",\n  8: \"S\"\n};\nlet abreviations_dict = {\n  1: \"FE\",\n  2: \"MC\",\n  3: \"RB\",\n  4: \"MER\",\n  5: \"ALP\",\n  6: \"WIL\",\n  7: \"HA\",\n  8: \"AT\",\n  9: \"ALFA\",\n  10: \"AM\",\n  32: \"CUS\"\n};\nlet engine_stats_dict = new Map([[10, \"Power\"], [6, \"Fuel efficiency\"], [11, \"Performance threshold\"], [12, \"Performance loss\"], [14, \"Engine durability\"], [18, \"ERS durability\"], [19, \"Gearbox durability\"]]);\n\n//predictions\nconst names_full = {\n  \"BAH\": \"Bahrain\",\n  \"AUS\": \"Australia\",\n  \"SAU\": \"Saudi Arabia\",\n  \"IMO\": \"Imola\",\n  \"MIA\": \"Miami\",\n  \"SPA\": \"Spain\",\n  \"MON\": \"Monaco\",\n  \"AZE\": \"Azerbaijan\",\n  \"CAN\": \"Canada\",\n  \"GBR\": \"Great Britain\",\n  \"AUT\": \"Austria\",\n  \"FRA\": \"France\",\n  \"HUN\": \"Hungary\",\n  \"BEL\": \"Belgium\",\n  \"ITA\": \"Italy\",\n  \"SGP\": \"Singapore\",\n  \"JAP\": \"Japan\",\n  \"USA\": \"United States\",\n  \"MEX\": \"Mexico\",\n  \"BRA\": \"Brazil\",\n  \"UAE\": \"Abu Dhabi\",\n  \"NED\": \"Netherlands\",\n  \"VEG\": \"Vegas\",\n  \"QAT\": \"Qatar\",\n  \"CHI\": \"China\"\n};\n\n//seasonViewer\nlet driversTableLogosDict = {\n  \"stake\": \"logo-stake-table\",\n  \"audi\": \"logo-up-down-extra\",\n  \"alfa\": \"logo-merc-table\",\n  \"sauber\": \"logo-williams-table\",\n  \"visarb\": \"logo-visarb-table\",\n  \"hugo\": \"logo-stake-table\",\n  \"brawn\": \"logo-brawn-table\",\n  \"toyota\": \"logo-williams-table\",\n  \"alphatauri\": \"logo-extra-small\",\n  \"porsche\": \"logo-porsche-table\",\n  \"renault\": \"logo-ferrari-table\",\n  \"andretti\": \"logo-ferrari-table\",\n  \"lotus\": \"logo-up-down\",\n  \"alpine\": \"logo-alpine-table\"\n};\nconst races_map = {\n  2: \"bah0\",\n  1: \"aus0\",\n  11: \"sau0\",\n  24: \"imo0\",\n  22: \"mia0\",\n  5: \"spa0\",\n  6: \"mon0\",\n  4: \"aze0\",\n  7: \"can0\",\n  10: \"gbr0\",\n  9: \"aut0\",\n  8: \"fra0\",\n  12: \"hun0\",\n  13: \"bel0\",\n  14: \"ita0\",\n  15: \"sgp0\",\n  17: \"jap0\",\n  19: \"usa0\",\n  18: \"mex0\",\n  20: \"bra0\",\n  21: \"uae0\",\n  23: \"ned0\",\n  25: \"veg0\",\n  26: \"qat0\",\n  3: \"chi0\"\n};\nconst invertedRacesMap = {\n  \"bah0\": 2,\n  \"aus0\": 1,\n  \"sau0\": 11,\n  \"imo0\": 24,\n  \"mia0\": 22,\n  \"spa0\": 5,\n  \"mon0\": 6,\n  \"aze0\": 4,\n  \"can0\": 7,\n  \"gbr0\": 10,\n  \"aut0\": 9,\n  \"fra0\": 8,\n  \"hun0\": 12,\n  \"bel0\": 13,\n  \"ita0\": 14,\n  \"sgp0\": 15,\n  \"jap0\": 17,\n  \"usa0\": 19,\n  \"mex0\": 18,\n  \"bra0\": 20,\n  \"uae0\": 21,\n  \"ned0\": 23,\n  \"veg0\": 25,\n  \"qat0\": 26,\n  \"chi0\": 3\n};\nconst races_names = {\n  2: \"BAH\",\n  1: \"AUS\",\n  11: \"SAU\",\n  24: \"IMO\",\n  22: \"MIA\",\n  5: \"SPA\",\n  6: \"MON\",\n  4: \"AZE\",\n  7: \"CAN\",\n  10: \"GBR\",\n  9: \"AUT\",\n  8: \"FRA\",\n  12: \"HUN\",\n  13: \"BEL\",\n  14: \"ITA\",\n  15: \"SGP\",\n  17: \"JAP\",\n  19: \"USA\",\n  18: \"MEX\",\n  20: \"BRA\",\n  21: \"UAE\",\n  23: \"NED\",\n  25: \"VEG\",\n  26: \"QAT\",\n  3: \"CHI\"\n};\nconst teams_full_name_dict = {\n  'FERRARI': 1,\n  'MCLAREN': 2,\n  'RED BULL': 3,\n  'MERCEDES': 4,\n  'ALPINE': 5,\n  'WILLIAMS': 6,\n  'HAAS': 7,\n  'ALPHA TAURI': 8,\n  'ALFA ROMEO': 9,\n  'ASTON MARTIN': 10\n};\nlet logos_disc = {\n  1: '../assets/images/ferrari.png',\n  2: '../assets/images/mclaren.png',\n  3: '../assets/images/redbull.png',\n  4: '../assets/images/mercedes.png',\n  5: '../assets/images/alpine.png',\n  6: '../assets/images/williams.png',\n  7: '../assets/images/haas.png',\n  8: '../assets/images/alphatauri.png',\n  9: '../assets/images/alfaromeo.png',\n  10: '../assets/images/astonmartin.png',\n  32: '../assets/images/placeholder.png'\n};\nconst points_race = {\n  1: 25,\n  2: 18,\n  3: 15,\n  4: 12,\n  5: 10,\n  6: 8,\n  7: 6,\n  8: 4,\n  9: 2,\n  10: 1,\n  11: 0,\n  12: 0,\n  13: 0,\n  14: 0,\n  15: 0,\n  16: 0,\n  17: 0,\n  18: 0,\n  19: 0,\n  20: 0,\n  \"DNF\": 0\n};\nconst points_sprint = {\n  1: 8,\n  2: 7,\n  3: 6,\n  4: 5,\n  5: 4,\n  6: 3,\n  7: 2,\n  8: 1,\n  9: 0,\n  10: 0,\n  11: 0,\n  12: 0,\n  13: 0,\n  14: 0,\n  15: 0,\n  16: 0,\n  17: 0,\n  18: 0,\n  19: 0,\n  20: 0,\n  \"-1\": 0\n};\nlet default_points = [\"25\", \"18\", \"15\", \"12\", \"10\", \"8\", \"6\", \"4\", \"2\", \"1\", \"DNF\", \"0\", \"\", \"-\"];\n\n//stats\nlet typeStaff_dict = {\n  0: \"fulldriverlist\",\n  1: \"fullTechnicalList\",\n  2: \"fullEngineerList\",\n  3: \"fullAeroList\",\n  4: \"fullDirectorList\"\n};\nlet mentality_dict = {\n  0: \"enthusiastic\",\n  1: \"positive\",\n  2: \"neutral\",\n  3: \"negative\",\n  4: \"demoralized\"\n};\nlet teamOrder = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\nconst mentality_bonuses = {\n  0: 7,\n  1: 4,\n  2: 0,\n  3: -2,\n  4: -6\n};\nconst mentalityModifiers = {\n  5: -8,\n  9: -7,\n  15: -6,\n  20: -5,\n  24: -4,\n  29: -3,\n  35: -2,\n  39: -1,\n  59: 0,\n  63: 1,\n  69: 2,\n  77: 3,\n  79: 4,\n  83: 5,\n  85: 6,\n  96: 7,\n  100: 8\n};\nconst mentality_to_global_menatality = {\n  0: 95,\n  1: 79,\n  2: 59,\n  3: 24,\n  4: 5\n};\n\n//transfers\nconst f1_teams = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32];\nconst f2_teams = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21];\nconst f3_teams = [22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\nconst staff_positions = {\n  1: \"technical-chief\",\n  2: \"race-engineer\",\n  3: \"head-aero\",\n  4: \"sporting-director\"\n};\nconst staff_pics = {\n  1: \"../assets/images/technicalChief.png\",\n  2: \"../assets/images/raceEngineer.png\",\n  3: \"../assets/images/headAero.png\",\n  4: \"../assets/images/sportingDirector.png\"\n};\nlet team_dict = {\n  1: \"fe\",\n  2: \"mc\",\n  3: \"rb\",\n  4: \"me\",\n  5: \"al\",\n  6: \"wi\",\n  7: \"ha\",\n  8: \"at\",\n  9: \"af\",\n  10: \"as\",\n  32: \"ct\",\n  33: \"f2\",\n  34: \"f3\"\n};\nlet inverted_dict = {\n  'ferrari': 1,\n  'mclaren': 2,\n  'redbull': 3,\n  'merc': 4,\n  'alpine': 5,\n  'williams': 6,\n  'haas': 7,\n  'alphatauri': 8,\n  'alfaromeo': 9,\n  'astonmartin': 10,\n  'custom': 32\n};\n\n// renderer\nconst difficultyConfig = {\n  \"default\": {\n    visible: [\"defaultDif\"],\n    lightDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    researchDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    statDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    designTimeDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    factoryDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    },\n    buildDif: {\n      className: \"dif-warning\",\n      text: \"\"\n    }\n  },\n  \"reduced weight\": {\n    visible: [\"lightDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    }\n  },\n  \"extra-hard\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Small research boost\"\n    },\n    statDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Stats boost +0.1%\"\n    }\n  },\n  \"brutal\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning brutal\",\n      text: \"Moderate research boost\"\n    },\n    statDif: {\n      className: \"dif-warning brutal\",\n      text: \"Stats boost +0.15%\"\n    },\n    designTimeDif: {\n      className: \"dif-warning brutal\",\n      text: \"Design times reduced 5%\"\n    }\n  },\n  \"unfair\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\", \"factoryDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning unfair\",\n      text: \"Large research boost\"\n    },\n    statDif: {\n      className: \"dif-warning unfair\",\n      text: \"Stats boost +0.3%\"\n    },\n    designTimeDif: {\n      className: \"dif-warning unfair\",\n      text: \"Design times reduced 11%\"\n    },\n    factoryDif: {\n      className: \"dif-warning unfair\",\n      text: \"Factory level 4\"\n    }\n  },\n  \"insane\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\", \"factoryDif\", \"buildDif\"],\n    lightDif: {\n      className: \"dif-warning extra-hard\",\n      text: \"Lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning insane\",\n      text: \"Huge research boost\"\n    },\n    statDif: {\n      className: \"dif-warning insane\",\n      text: \"Stats boost +0.35%\"\n    },\n    designTimeDif: {\n      className: \"dif-warning insane\",\n      text: \"Design times reduced 16%\"\n    },\n    factoryDif: {\n      className: \"dif-warning unfair\",\n      text: \"Factory level 4\"\n    },\n    buildDif: {\n      className: \"dif-warning insane\",\n      text: \"+1 part when design completed\"\n    }\n  },\n  \"impossible\": {\n    visible: [\"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\", \"factoryDif\", \"buildDif\"],\n    lightDif: {\n      className: \"dif-warning impossible\",\n      text: \"ULTRA-lightweight parts\"\n    },\n    researchDif: {\n      className: \"dif-warning impossible\",\n      text: \"Massive research boost\"\n    },\n    statDif: {\n      className: \"dif-warning impossible\",\n      text: \"Stats boost +0.48%\"\n    },\n    designTimeDif: {\n      className: \"dif-warning impossible\",\n      text: \"Design times reduced 20%\"\n    },\n    factoryDif: {\n      className: \"dif-warning impossible\",\n      text: \"Factory level 5\"\n    },\n    buildDif: {\n      className: \"dif-warning impossible\",\n      text: \"+2 parts when design completed\"\n    }\n  }\n};\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/config.js?");

/***/ }),

/***/ "./src/js/head2head.js":
/*!*****************************!*\
  !*** ./src/js/head2head.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   colors_dict: () => (/* binding */ colors_dict),\n/* harmony export */   hideComp: () => (/* binding */ hideComp),\n/* harmony export */   resetH2H: () => (/* binding */ resetH2H)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/js/renderer.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transfers */ \"./src/js/transfers.js\");\n\n\n\nlet driver1_selected = false;\nlet driver2_selected = false;\nlet driver1Sel;\nlet driver2Sel;\nlet pos_dict = {\n  1: \"1st\",\n  2: \"2nd\",\n  3: \"3rd\"\n};\nlet d1_team;\nlet d2_team;\nlet wins = false;\nlet poles = false;\nlet sprints = false;\nlet race = 0;\nlet quali = 0;\nlet menuLength = 4;\nlet driverGraph;\nlet pointsGraph;\nlet qualiGraph;\nlet gapWinnerGraph;\nlet gapPoleGraph;\nlet compData;\nlet annotationsToggle = true;\nlet h2hCount = 0;\nlet graphCount = 0;\nlet h2hList = [];\nlet graphList = [];\nlet h2hTeamList = [];\nlet graphTeamList = [];\nlet mode = \"driver\";\nlet colors_dict = {\n  \"10\": \"#F91536\",\n  \"11\": \"#f1f1f1\",\n  \"20\": \"#F58020\",\n  \"21\": \"#47c7fc\",\n  \"30\": \"#3671C6\",\n  \"31\": \"#ffd300\",\n  \"40\": \"#6CD3BF\",\n  \"41\": \"#fcfcfc\",\n  \"50\": \"#2293D1\",\n  \"51\": \"#fd48c7\",\n  \"60\": \"#37BEDD\",\n  \"61\": \"#f1f1f1\",\n  \"70\": \"#B6BABD\",\n  \"71\": \"#f62039\",\n  \"80\": \"#5E8FAA\",\n  \"81\": \"#f1f1f1\",\n  \"90\": \"#C92D4B\",\n  \"91\": \"#f1f1f1\",\n  \"100\": \"#358C75\",\n  \"101\": \"#c3dc00\",\n  \"320\": \"#ffffff\",\n  \"321\": \"#000000\"\n};\n//changed as the ct colors changes, so it stays\n\nChart.register(ChartDataLabels);\n\n/**\r\n * Puts the bars of the head to head with the correct width for the drivers selected\r\n * @param {object} data object with all the info of the comparision between both drivers\r\n */\nfunction manage_h2h_bars(data) {\n  let relValue;\n  let d1_width;\n  let d2_width;\n  compData = data;\n  if (data[7].some(elem => elem >= 2)) {\n    data[4] = data[7];\n    document.getElementById(\"bestrh2h\").querySelector(\".only-name\").textContent = \"WINS\";\n    wins = true;\n  } else {\n    document.getElementById(\"bestrh2h\").querySelector(\".only-name\").textContent = \"BEST RACE\";\n    wins = false;\n  }\n  if (data[8].some(elem => elem >= 2)) {\n    data[5] = data[8];\n    document.getElementById(\"bestqh2h\").querySelector(\".only-name\").textContent = \"POLES\";\n    poles = true;\n  } else {\n    document.getElementById(\"bestqh2h\").querySelector(\".only-name\").textContent = \"BEST QUALI\";\n    poles = false;\n  }\n  if (data[9].some(elem => elem >= 1)) {\n    document.getElementById(\"bestrh2h\").querySelector(\".name-H2H\").style.justifyContent = \"space-between\";\n    document.getElementById(\"bestrh2h\").querySelectorAll(\"i\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    document.getElementById(\"bestrh2h\").querySelector(\".name-H2H\").style.justifyContent = \"center\";\n    document.getElementById(\"bestrh2h\").querySelectorAll(\"i\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n  }\n  document.querySelectorAll(\".one-statH2H\").forEach(function (elem, index) {\n    if (elem.id === \"bestrh2h\" || elem.id === \"bestqh2h\") {\n      if (!wins && elem.id === \"bestrh2h\") {\n        d1_width = 100 - (data[index][0] - 1) * relative_grid;\n        d2_width = 100 - (data[index][1] - 1) * relative_grid;\n        if (data[index][0] <= 3) {\n          elem.querySelector(\".driver1-number\").textContent = pos_dict[data[index][0]];\n        } else {\n          elem.querySelector(\".driver1-number\").textContent = data[index][0] + \"th\";\n        }\n        if (data[index][1] <= 3) {\n          elem.querySelector(\".driver2-number\").textContent = pos_dict[data[index][1]];\n        } else {\n          elem.querySelector(\".driver2-number\").textContent = data[index][1] + \"th\";\n        }\n      } else if (wins && elem.id === \"bestrh2h\") {\n        relValue = (100 / (data[index][0] + data[index][1])).toFixed(2);\n        d1_width = data[index][0] * relValue;\n        d2_width = data[index][1] * relValue;\n        elem.querySelector(\".driver1-number\").textContent = data[index][0];\n        elem.querySelector(\".driver2-number\").textContent = data[index][1];\n      }\n      if (!poles && elem.id === \"bestqh2h\") {\n        d1_width = 100 - (data[index][0] - 1) * relative_grid;\n        d2_width = 100 - (data[index][1] - 1) * relative_grid;\n        if (data[index][0] <= 3) {\n          elem.querySelector(\".driver1-number\").textContent = pos_dict[data[index][0]];\n        } else {\n          elem.querySelector(\".driver1-number\").textContent = data[index][0] + \"th\";\n        }\n        if (data[index][1] <= 3) {\n          elem.querySelector(\".driver2-number\").textContent = pos_dict[data[index][1]];\n        } else {\n          elem.querySelector(\".driver2-number\").textContent = data[index][1] + \"th\";\n        }\n      } else if (poles && elem.id === \"bestqh2h\") {\n        relValue = (100 / (data[index][0] + data[index][1])).toFixed(2);\n        d1_width = data[index][0] * relValue;\n        d2_width = data[index][1] * relValue;\n        elem.querySelector(\".driver1-number\").textContent = data[index][0];\n        elem.querySelector(\".driver2-number\").textContent = data[index][1];\n      }\n    } else {\n      if (elem.id === \"raceh2h\" || elem.id === \"qualih2h\") {\n        let index2;\n        if (elem.id === \"raceh2h\") {\n          index2 = 10;\n        } else {\n          index2 = 11;\n        }\n        let d1Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver1-avg\");\n        d1Num.className = \"driver1-avg bold-font\";\n        let d2Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver2-avg\");\n        d2Num.className = \"driver2-avg bold-font\";\n        let d1 = compData[index2][0];\n        if (compData[index2][0] > 0) {\n          d1 = \"+\" + compData[index2][0];\n          d1Num.classList.add(\"negative\");\n          d2Num.classList.add(\"positive\");\n        }\n        d1Num.innerText = d1;\n        let d2 = compData[index2][1];\n        if (compData[index2][1] > 0) {\n          d2 = \"+\" + compData[index2][1];\n          d1Num.classList.add(\"positive\");\n          d2Num.classList.add(\"negative\");\n        }\n        d2Num.innerText = d2;\n        if (elem.id === \"qualih2h\") {\n          relValue = (100 / (data[0][0] + data[0][1])).toFixed(2);\n          if (relValue == Infinity) {\n            relValue = 0;\n          }\n          d1_width = data[index][0] * relValue;\n          d2_width = data[index][1] * relValue;\n          elem.querySelector(\".driver1-number\").textContent = data[index][0];\n          elem.querySelector(\".driver2-number\").textContent = data[index][1];\n          if (quali === 2) {\n            d1_width = 100 - (data[14][0] - 1) * relative_grid;\n            d2_width = 100 - (data[14][1] - 1) * relative_grid;\n            elem.querySelector(\".driver1-number\").textContent = data[14][0];\n            elem.querySelector(\".driver2-number\").textContent = data[14][1];\n          } else if (quali === 3) {\n            d1_width = 100 - (data[15][0] - 1) * relative_grid;\n            d2_width = 100 - (data[15][1] - 1) * relative_grid;\n            elem.querySelector(\".driver1-number\").textContent = data[15][0];\n            elem.querySelector(\".driver2-number\").textContent = data[15][1];\n          }\n        }\n        if (elem.id === \"raceh2h\") {\n          relValue = (100 / (data[0][0] + data[0][1])).toFixed(2);\n          if (relValue == Infinity) {\n            relValue = 0;\n          }\n          d1_width = data[index][0] * relValue;\n          d2_width = data[index][1] * relValue;\n          elem.querySelector(\".driver1-number\").textContent = data[index][0];\n          elem.querySelector(\".driver2-number\").textContent = data[index][1];\n          if (race === 2) {\n            d1_width = 100 - (data[12][0] - 1) * relative_grid;\n            d2_width = 100 - (data[12][1] - 1) * relative_grid;\n            elem.querySelector(\".driver1-number\").textContent = data[12][0];\n            elem.querySelector(\".driver2-number\").textContent = data[12][1];\n          } else if (race === 3) {\n            d1_width = 100 - (data[13][0] - 1) * relative_grid;\n            d2_width = 100 - (data[13][1] - 1) * relative_grid;\n            elem.querySelector(\".driver1-number\").textContent = data[13][0];\n            elem.querySelector(\".driver2-number\").textContent = data[13][1];\n          }\n        }\n      } else if (elem.id === \"ptsh2h\") {\n        relValue = 100 / Math.max(data[index][0], data[index][1]);\n        if (relValue == Infinity) {\n          relValue = 0;\n        }\n        d1_width = data[index][0] * relValue;\n        d2_width = data[index][1] * relValue;\n        elem.querySelector(\".driver1-number\").textContent = data[index][0];\n        elem.querySelector(\".driver2-number\").textContent = data[index][1];\n      } else if (elem.id === \"dnfh2h\" || elem.id === \"podiumsh2h\") {\n        relValue = (100 / (data[index][0] + data[index][1])).toFixed(2);\n        if (relValue == Infinity) {\n          relValue = 0;\n        }\n        d1_width = data[index][0] * relValue;\n        d2_width = data[index][1] * relValue;\n        elem.querySelector(\".driver1-number\").textContent = data[index][0];\n        elem.querySelector(\".driver2-number\").textContent = data[index][1];\n      }\n    }\n    if (d1_width > 100) {\n      d1_width = 100;\n    }\n    if (d2_width > 100) {\n      d2_width = 100;\n    }\n    fill_bars(elem, d1_width, d2_width);\n  });\n}\n/**\r\n * Fills the bars for the elem with driver1 and 2 data\r\n * @param {div} elem general bar for the comparision\r\n * @param {Number} d1_width driver 1's width for his bar\r\n * @param {Number} d2_width driver 2's width for his bar\r\n */\nfunction fill_bars(elem, d1_width, d2_width) {\n  elem.querySelector(\".driver1-bar\").className = \"driver1-bar\";\n  elem.querySelector(\".driver2-bar\").className = \"driver2-bar\";\n  document.querySelector(\".driver1-name\").className = \"driver1-name\";\n  document.querySelector(\".driver2-name\").className = \"driver2-name\";\n  elem.querySelector(\".driver1-bar\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[0]] + \"bar-primary\");\n  document.querySelector(\".driver1-name\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[0]] + \"-back-transparent\");\n  if (h2hTeamList[0] === h2hTeamList[1]) {\n    elem.querySelector(\".driver2-bar\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[1]] + \"bar-secondary\");\n    document.querySelector(\".driver2-name\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[1]] + \"-back-transparent-secondary\");\n  } else {\n    elem.querySelector(\".driver2-bar\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[1]] + \"bar-primary\");\n    document.querySelector(\".driver2-name\").classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[h2hTeamList[1]] + \"-back-transparent\");\n  }\n  elem.querySelector(\".driver1-bar\").style.width = d1_width + \"%\";\n  elem.querySelector(\".driver2-bar\").style.width = d2_width + \"%\";\n}\n\n/**\r\n * Toggles the sprint wins comparision\r\n */\nfunction toggle_sprints() {\n  let elem = document.querySelector(\"#bestrh2h\");\n  if (sprints) {\n    elem.querySelector(\".only-name\").textContent = \"SPRINT WINS\";\n    relValue = (100 / (compData[9][0] + compData[9][1])).toFixed(2);\n    d1_width = compData[9][0] * relValue;\n    d2_width = compData[9][1] * relValue;\n    elem.querySelector(\".driver1-number\").textContent = compData[9][0];\n    elem.querySelector(\".driver2-number\").textContent = compData[9][1];\n  } else {\n    if (wins) {\n      elem.querySelector(\".only-name\").textContent = \"WINS\";\n      relValue = (100 / (compData[4][0] + compData[4][1])).toFixed(2);\n      d1_width = compData[4][0] * relValue;\n      d2_width = compData[4][1] * relValue;\n      elem.querySelector(\".driver1-number\").textContent = compData[4][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[4][1];\n    } else {\n      elem.querySelector(\".only-name\").textContent = \"BEST RACE\";\n      d1_width = 100 - (compData[4][0] - 1) * 5;\n      d2_width = 100 - (compData[4][1] - 1) * 5;\n      if (compData[4][0] <= 3) {\n        elem.querySelector(\".driver1-number\").textContent = pos_dict[compData[4][0]];\n      } else {\n        elem.querySelector(\".driver1-number\").textContent = compData[4][0] + \"th\";\n      }\n      if (compData[4][1] <= 3) {\n        elem.querySelector(\".driver2-number\").textContent = pos_dict[compData[4][1]];\n      } else {\n        elem.querySelector(\".driver2-number\").textContent = compData[4][1] + \"th\";\n      }\n    }\n  }\n  fill_bars(elem, d1_width, d2_width);\n}\nfunction toggle_racePace() {\n  let elem = document.querySelector(\"#raceh2h\");\n  if (race === 1) {\n    elem.querySelector(\".only-name\").textContent = \"AVG PACE DIFF (s)\";\n    elem.querySelector(\".bar-space\").classList.add(\"d-none\");\n    elem.querySelector(\".avg-comparison\").classList.remove(\"d-none\");\n    let d1Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver1-avg\");\n    d1Num.className = \"driver1-avg bold-font\";\n    let d2Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver2-avg\");\n    d2Num.className = \"driver2-avg bold-font\";\n    let d1 = compData[10][0];\n    if (compData[10][0] > 0) {\n      d1 = \"+\" + compData[10][0];\n      d1Num.classList.add(\"negative\");\n      d2Num.classList.add(\"positive\");\n    }\n    d1Num.innerText = d1;\n    let d2 = compData[10][1];\n    if (compData[10][1] > 0) {\n      d2 = \"+\" + compData[10][1];\n      d1Num.classList.add(\"positive\");\n      d2Num.classList.add(\"negative\");\n    }\n    d2Num.innerText = d2;\n  } else {\n    elem.querySelector(\".bar-space\").classList.remove(\"d-none\");\n    elem.querySelector(\".avg-comparison\").classList.add(\"d-none\");\n    if (race === 0) {\n      elem.querySelector(\".only-name\").textContent = \"RACE\";\n      relValue = (100 / (compData[0][0] + compData[0][1])).toFixed(2);\n      d1_width = compData[0][0] * relValue;\n      d2_width = compData[0][1] * relValue;\n      elem.querySelector(\".driver1-number\").textContent = compData[0][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[0][1];\n    } else if (race === 2) {\n      elem.querySelector(\".only-name\").textContent = \"AVG RACE\";\n      d1_width = 100 - (compData[12][0] - 1) * 5;\n      d2_width = 100 - (compData[12][1] - 1) * 5;\n      elem.querySelector(\".driver1-number\").textContent = compData[12][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[12][1];\n    } else if (race === 3) {\n      elem.querySelector(\".only-name\").textContent = \"MEDIAN RACE\";\n      d1_width = 100 - (compData[13][0] - 1) * 5;\n      d2_width = 100 - (compData[13][1] - 1) * 5;\n      elem.querySelector(\".driver1-number\").textContent = compData[13][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[13][1];\n    }\n    fill_bars(elem, d1_width, d2_width);\n  }\n}\nfunction toggle_qualiPace() {\n  let elem = document.querySelector(\"#qualih2h\");\n  if (quali === 1) {\n    elem.querySelector(\".only-name\").textContent = \"AVG QUALI DIFF (s)\";\n    elem.querySelector(\".bar-space\").classList.add(\"d-none\");\n    elem.querySelector(\".avg-comparison\").classList.remove(\"d-none\");\n    let d1Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver1-avg\");\n    d1Num.className = \"driver1-avg bold-font\";\n    let d2Num = elem.querySelector(\".avg-comparison\").querySelector(\".driver2-avg\");\n    d2Num.className = \"driver2-avg bold-font\";\n    let d1 = compData[11][0];\n    if (compData[11][0] > 0) {\n      d1 = \"+\" + compData[11][0];\n      d1Num.classList.add(\"negative\");\n      d2Num.classList.add(\"positive\");\n    }\n    d1Num.innerText = d1;\n    let d2 = compData[11][1];\n    if (compData[11][1] > 0) {\n      d2 = \"+\" + compData[11][1];\n      d1Num.classList.add(\"positive\");\n      d2Num.classList.add(\"negative\");\n    }\n    d2Num.innerText = d2;\n  } else {\n    elem.querySelector(\".bar-space\").classList.remove(\"d-none\");\n    elem.querySelector(\".avg-comparison\").classList.add(\"d-none\");\n    if (quali === 0) {\n      elem.querySelector(\".only-name\").textContent = \"QUALIFYING\";\n      relValue = (100 / (compData[0][0] + compData[0][1])).toFixed(2);\n      d1_width = compData[1][0] * relValue;\n      d2_width = compData[1][1] * relValue;\n      elem.querySelector(\".driver1-number\").textContent = compData[1][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[1][1];\n    } else if (quali === 2) {\n      elem.querySelector(\".only-name\").textContent = \"AVG QUALI\";\n      d1_width = 100 - (compData[14][0] - 1) * 5;\n      d2_width = 100 - (compData[14][1] - 1) * 5;\n      elem.querySelector(\".driver1-number\").textContent = compData[14][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[14][1];\n    } else if (quali === 3) {\n      elem.querySelector(\".only-name\").textContent = \"MEDIAN QUALI\";\n      d1_width = 100 - (compData[15][0] - 1) * 5;\n      d2_width = 100 - (compData[15][1] - 1) * 5;\n      elem.querySelector(\".driver1-number\").textContent = compData[15][0];\n      elem.querySelector(\".driver2-number\").textContent = compData[15][1];\n    }\n    fill_bars(elem, d1_width, d2_width);\n  }\n}\n\n/**\r\n * Adds listeners for the arrows to change between sprints and races\r\n */\nfunction sprintsListeners() {\n  document.querySelector(\"#bestrh2h\").querySelectorAll(\"i\").forEach(function (elem) {\n    elem.removeEventListener('evento2', change_sprintView);\n    elem.addEventListener(\"click\", change_sprintView);\n  });\n}\n\n/**\r\n * listeners to the race head to head comparison\r\n */\nfunction racePaceListener() {\n  document.querySelector(\"#raceh2h\").querySelectorAll(\".bi-chevron-right\").forEach(function (elem) {\n    elem.removeEventListener('evento5', increase_racePaceView);\n    elem.addEventListener(\"click\", increase_racePaceView);\n  });\n  document.querySelector(\"#raceh2h\").querySelectorAll(\".bi-chevron-left\").forEach(function (elem) {\n    elem.removeEventListener('evento6', decrease_racePaceView);\n    elem.addEventListener(\"click\", decrease_racePaceView);\n  });\n}\n\n/**\r\n * listeners to the qualifying head to head comparison\r\n */\nfunction qualiPaceListener() {\n  document.querySelector(\"#qualih2h\").querySelectorAll(\".bi-chevron-right\").forEach(function (elem) {\n    elem.removeEventListener('evento3', increase_qualiPaceView);\n    elem.addEventListener(\"click\", increase_qualiPaceView);\n  });\n  document.querySelector(\"#qualih2h\").querySelectorAll(\".bi-chevron-left\").forEach(function (elem) {\n    elem.removeEventListener('evento4', decrease_qualiPaceView);\n    elem.addEventListener(\"click\", decrease_qualiPaceView);\n  });\n}\n\n/**\r\n * increases the race comparison showed\r\n */\nfunction increase_racePaceView() {\n  race += 1;\n  race = race % menuLength;\n  toggle_racePace();\n}\n\n/**\r\n * decreases the race comparison showed\r\n */\nfunction decrease_racePaceView() {\n  race -= 1;\n  race = (race + menuLength) % menuLength;\n  toggle_racePace();\n}\n\n/**\r\n * increases the quali comparison showed\r\n */\nfunction increase_qualiPaceView() {\n  quali += 1;\n  quali = quali % menuLength;\n  toggle_qualiPace();\n}\n\n/**\r\n * decreases the quali comparison showed\r\n */\nfunction decrease_qualiPaceView() {\n  quali -= 1;\n  quali = (quali + menuLength) % menuLength;\n  toggle_qualiPace();\n}\n\n/**\r\n * Changes the sprint view\r\n */\nfunction change_sprintView() {\n  sprints = !sprints;\n  toggle_sprints();\n}\n\n/**\r\n * Event listener for the annotatiosn switch\r\n */\ndocument.getElementById(\"annotationsToggle\").addEventListener(\"click\", function () {\n  annotationsToggle = !annotationsToggle;\n  if (typeof driverGraph !== 'undefined' && driverGraph !== null) {\n    driverGraph.options.plugins.annotation.annotations.line1.display = annotationsToggle;\n    driverGraph.options.plugins.annotation.annotations.line2.display = annotationsToggle;\n    driverGraph.options.plugins.annotation.annotations.line3.display = annotationsToggle;\n    driverGraph.options.plugins.annotation.annotations.line4.display = annotationsToggle;\n    driverGraph.update();\n  }\n  if (typeof qualiGraph !== 'undefined' && qualiGraph !== null) {\n    qualiGraph.options.plugins.annotation.annotations.line1.display = annotationsToggle;\n    qualiGraph.options.plugins.annotation.annotations.line2.display = annotationsToggle;\n    qualiGraph.update();\n  }\n});\n\n/**\r\n * hides the comparison\r\n */\nfunction hideComp() {\n  document.querySelector(\".drivers-modal-zone\").innerHTML = \"\";\n  document.querySelector(\"#mainH2h\").classList.add(\"d-none\");\n  document.querySelectorAll(\".modal-team\").forEach(function (elem) {\n    elem.classList.add(\"d-none\");\n  });\n}\n\n/**\r\n * Loads all the drivers into the menus of driver selection\r\n * @param {Object} drivers object with all the driver info\r\n */\nfunction load_drivers_h2h(drivers) {\n  let dest = document.querySelector(\".drivers-modal-zone\");\n  h2hCount = 0;\n  h2hList = [];\n  graphList = [];\n  h2hTeamList = [];\n  graphTeamList = [];\n  dest.innerHTML = \"\";\n  drivers.forEach(function (driver) {\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = \"col modal-driver\";\n    newDiv.dataset.driverid = driver[1];\n    newDiv.dataset.teamid = driver[2];\n    let name = driver[0].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    spanLastName.dataset.teamid = driver[2];\n    newDiv.dataset.teamid = driver[2];\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[2]] + \"-transparent\");\n    spanName.textContent = (0,_transfers__WEBPACK_IMPORTED_MODULE_2__.insert_space)(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    spanLastName.classList.add(\"bold-font\");\n    let h2hBut = document.createElement(\"div\");\n    h2hBut.dataset.driverid = driver[1];\n    h2hBut.dataset.teamid = driver[2];\n    let h2hLabel = document.createElement(\"div\");\n    h2hLabel.innerText = \"H2H\";\n    h2hLabel.className = \"no-pointer pos-relative\";\n    h2hBut.appendChild(h2hLabel);\n    h2hBut.className = \"H2Hradio\";\n    h2hBut.dataset.state = \"unchecked\";\n    h2hBut.addEventListener(\"click\", function () {\n      if (h2hBut.dataset.state === \"unchecked\" && h2hCount < 2) {\n        h2hBut.dataset.state = \"checked\";\n        h2hBut.classList.add(\"activated\");\n        h2hCount += 1;\n        h2hList.push(h2hBut.dataset.driverid);\n        h2hTeamList.push(h2hBut.dataset.teamid);\n      } else if (h2hBut.dataset.state === \"checked\") {\n        h2hBut.dataset.state = \"unchecked\";\n        h2hBut.classList.remove(\"activated\");\n        h2hCount -= 1;\n        let ind = h2hList.indexOf(h2hBut.dataset.driverid);\n        h2hTeamList.splice(ind, 1);\n        h2hList = h2hList.filter(x => x !== h2hBut.dataset.driverid);\n      }\n      let text = document.querySelector(\".H2H-text\").querySelector(\".text-normal\");\n      text.innerText = \"- \" + h2hCount + \"/2 drivers selected\";\n      text.classList.add(\"h2h-highlight\");\n      setTimeout(function () {\n        text.classList.remove(\"h2h-highlight\");\n      }, 400);\n    });\n    let graphBut = document.createElement(\"div\");\n    let graphIcon = document.createElement(\"i\");\n    graphBut.dataset.driverid = driver[1];\n    graphBut.dataset.teamid = driver[2];\n    graphIcon.className = \"bi bi-graph-up no-pointer pos-relative \";\n    graphBut.appendChild(graphIcon);\n    graphBut.className = \"GraphButton\";\n    graphBut.dataset.state = \"unchecked\";\n    graphBut.addEventListener(\"click\", function () {\n      if (graphBut.dataset.state === \"unchecked\") {\n        graphBut.dataset.state = \"checked\";\n        graphBut.classList.add(\"activated\");\n        graphList.push(graphBut.dataset.driverid);\n        graphTeamList.push(graphBut.dataset.teamid);\n        graphCount += 1;\n      } else if (graphBut.dataset.state === \"checked\") {\n        graphBut.dataset.state = \"unchecked\";\n        graphBut.classList.remove(\"activated\");\n        let ind = graphList.indexOf(graphBut.dataset.driverid);\n        graphTeamList.splice(ind, 1);\n        graphList = graphList.filter(x => x !== graphBut.dataset.driverid);\n        graphCount -= 1;\n      }\n      let text = document.querySelector(\".graph-text\").querySelector(\".text-normal\");\n      text.innerText = \"- \" + graphCount + \" drivers selected\";\n      text.classList.add(\"graph-highlight\");\n      setTimeout(function () {\n        text.classList.remove(\"graph-highlight\");\n      }, 400);\n    });\n    let buttons = document.createElement(\"div\");\n    buttons.classList = \"buttons-drivers-modal\";\n    let nameAndSurName = document.createElement(\"div\");\n    nameAndSurName.appendChild(spanName);\n    nameAndSurName.appendChild(spanLastName);\n    buttons.appendChild(h2hBut);\n    buttons.append(graphBut);\n    newDiv.appendChild(nameAndSurName);\n    newDiv.appendChild(buttons);\n    manageColor(newDiv, spanLastName);\n    dest.appendChild(newDiv);\n  });\n  buttonsListeners();\n}\ndocument.querySelector(\".teams-modal-zone\").querySelectorAll(\".H2Hradio\").forEach(function (h2hBut) {\n  h2hBut.addEventListener(\"click\", function () {\n    if (h2hBut.dataset.state === \"unchecked\" && h2hCount < 2) {\n      h2hBut.dataset.state = \"checked\";\n      h2hBut.classList.add(\"activated\");\n      h2hCount += 1;\n      h2hTeamList.push(h2hBut.dataset.teamid);\n    } else if (h2hBut.dataset.state === \"checked\") {\n      h2hBut.dataset.state = \"unchecked\";\n      h2hBut.classList.remove(\"activated\");\n      h2hCount -= 1;\n      let ind = h2hTeamList.indexOf(h2hBut.dataset.teamid);\n      h2hTeamList.splice(ind, 1);\n    }\n    let text = document.querySelector(\".H2H-text\").querySelector(\".text-normal\");\n    text.innerText = \"- \" + h2hCount + \"/2 teams selected\";\n    text.classList.add(\"h2h-highlight\");\n    setTimeout(function () {\n      text.classList.remove(\"h2h-highlight\");\n    }, 400);\n  });\n});\ndocument.querySelector(\".teams-modal-zone\").querySelectorAll(\".GraphButton\").forEach(function (graphBut) {\n  graphBut.addEventListener(\"click\", function () {\n    if (graphBut.dataset.state === \"unchecked\") {\n      graphBut.dataset.state = \"checked\";\n      graphBut.classList.add(\"activated\");\n      graphTeamList.push(graphBut.dataset.teamid);\n      graphCount += 1;\n    } else if (graphBut.dataset.state === \"checked\") {\n      graphBut.dataset.state = \"unchecked\";\n      graphBut.classList.remove(\"activated\");\n      let ind = graphTeamList.indexOf(graphBut.dataset.teamid);\n      graphTeamList.splice(ind, 1);\n      graphCount -= 1;\n    }\n    let text = document.querySelector(\".graph-text\").querySelector(\".text-normal\");\n    text.innerText = \"- \" + graphCount + \" teams selected\";\n    text.classList.add(\"graph-highlight\");\n    setTimeout(function () {\n      text.classList.remove(\"graph-highlight\");\n    }, 400);\n  });\n});\ndocument.querySelector(\"#driverspillmodal\").addEventListener(\"click\", function () {\n  document.querySelector(\".drivers-modal-section\").classList.remove(\"d-none\");\n  document.querySelector(\".teams-modal-section\").classList.add(\"d-none\");\n  mode = \"driver\";\n  resetH2H();\n});\ndocument.querySelector(\"#teamspillmodal\").addEventListener(\"click\", function () {\n  document.querySelector(\".drivers-modal-section\").classList.add(\"d-none\");\n  document.querySelector(\".teams-modal-section\").classList.remove(\"d-none\");\n  mode = \"team\";\n  resetH2H();\n});\nfunction buttonsListeners() {\n  document.querySelectorAll(\"H2HRadio\").forEach(function (button) {\n    button.addEventListener(\"click\", function () {});\n  });\n}\ndocument.querySelector(\"#confirmComparison\").addEventListener(\"click\", function () {\n  H2HReady();\n  if (h2hCount === 2) {\n    let drivers = document.querySelectorAll(\".H2Hradio.activated\");\n    let d1;\n    let d2;\n    document.querySelectorAll(\".H2Hradio.activated\").forEach(function (elem) {\n      if (mode === \"driver\") {\n        if (elem.dataset.driverid === h2hList[0]) {\n          d1 = elem;\n        } else if (elem.dataset.driverid === h2hList[1]) {\n          d2 = elem;\n        }\n      } else if (mode === \"team\") {\n        if (elem.dataset.teamid === h2hTeamList[0]) {\n          d1 = elem;\n        } else if (elem.dataset.teamid === h2hTeamList[1]) {\n          d2 = elem;\n        }\n      }\n    });\n    nameTitleD1(d1.parentElement.parentElement);\n    nameTitleD2(d2.parentElement.parentElement);\n  }\n  document.querySelector(\"#compConfigContent\").innerText = document.querySelector(\"#yearButtonH2H\").textContent;\n  if (mode === \"driver\") {\n    document.querySelector(\"#qualiForm\").classList.remove(\"d-none\");\n    document.querySelector(\"#raceForm\").classList.remove(\"d-none\");\n    document.querySelector(\"#gapToWinner\").classList.remove(\"d-none\");\n    document.querySelector(\"#gapToPole\").classList.remove(\"d-none\");\n    document.querySelector(\"#raceForm\").click();\n    race = 0;\n    quali = 0;\n    menuLength = 4;\n    document.getElementById(\"qualih2h\").querySelector(\".only-name\").innerText = \"QUALIFYING\";\n    document.getElementById(\"raceh2h\").querySelector(\".only-name\").innerText = \"RACE\";\n    document.getElementById(\"raceh2h\").querySelector(\".bar-space\").classList.remove(\"d-none\");\n    document.getElementById(\"raceh2h\").querySelector(\".avg-comparison\").classList.add(\"d-none\");\n    document.getElementById(\"qualih2h\").querySelector(\".bar-space\").classList.remove(\"d-none\");\n    document.getElementById(\"qualih2h\").querySelector(\".avg-comparison\").classList.add(\"d-none\");\n  } else if (mode === \"team\") {\n    document.querySelector(\"#qualiForm\").classList.add(\"d-none\");\n    document.querySelector(\"#raceForm\").classList.add(\"d-none\");\n    document.querySelector(\"#gapToWinner\").classList.add(\"d-none\");\n    document.querySelector(\"#gapToPole\").classList.add(\"d-none\");\n    document.querySelector(\"#pointsProgression\").click();\n    menuLength = 2;\n    race = 0;\n    quali = 0;\n    document.getElementById(\"qualih2h\").querySelector(\".only-name\").innerText = \"QUALIFYING\";\n    document.getElementById(\"raceh2h\").querySelector(\".only-name\").innerText = \"RACE\";\n    document.getElementById(\"raceh2h\").querySelector(\".bar-space\").classList.remove(\"d-none\");\n    document.getElementById(\"raceh2h\").querySelector(\".avg-comparison\").classList.add(\"d-none\");\n    document.getElementById(\"qualih2h\").querySelector(\".bar-space\").classList.remove(\"d-none\");\n    document.getElementById(\"qualih2h\").querySelector(\".avg-comparison\").classList.add(\"d-none\");\n  }\n});\ndocument.querySelector(\"#clearAll\").addEventListener(\"click\", function () {\n  resetH2H();\n});\nfunction resetH2H() {\n  h2hCount = 0;\n  graphCount = 0;\n  h2hList = [];\n  graphList = [];\n  h2hTeamList = [];\n  graphTeamList = [];\n  let h2htext = document.querySelector(\".H2H-text\").querySelector(\".text-normal\");\n  let graphtext = document.querySelector(\".graph-text\").querySelector(\".text-normal\");\n  if (mode === \"driver\") {\n    h2htext.innerText = \"- \" + h2hCount + \"/2 drivers selected\";\n    graphtext.innerText = \"- \" + graphCount + \" drivers selected\";\n  } else if (mode === \"team\") {\n    h2htext.innerText = \"- \" + h2hCount + \"/2 teams selected\";\n    graphtext.innerText = \"- \" + graphCount + \" teams selected\";\n  }\n  document.querySelector(\".teams-modal-zone\").querySelectorAll(\".H2Hradio\").forEach(function (elem) {\n    elem.classList = \"H2Hradio\";\n    elem.dataset.state = \"unchecked\";\n  });\n  document.querySelector(\".teams-modal-zone\").querySelectorAll(\".GraphButton\").forEach(function (elem) {\n    elem.classList = \"GraphButton\";\n    elem.dataset.state = \"unchecked\";\n  });\n  document.querySelector(\".drivers-modal-zone\").querySelectorAll(\".H2Hradio\").forEach(function (elem) {\n    elem.classList = \"H2Hradio\";\n    elem.dataset.state = \"unchecked\";\n  });\n  document.querySelector(\".drivers-modal-zone\").querySelectorAll(\".GraphButton\").forEach(function (elem) {\n    elem.classList = \"GraphButton\";\n    elem.dataset.state = \"unchecked\";\n  });\n}\n\n/**\r\n * Event listeners for the 3 types of graphs\r\n */\ndocument.querySelector(\"#pointsProgression\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Points progression\";\n  document.querySelector(\"#qualiGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.remove(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#raceForm\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Race form\";\n  document.querySelector(\"#qualiGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.remove(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#qualiForm\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Qualifying form\";\n  document.querySelector(\"#qualiGraph\").classList.remove(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#gapToWinner\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Gap to winner\";\n  document.querySelector(\"#qualiGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.remove(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#gapToPole\").addEventListener(\"click\", function (elem) {\n  document.querySelector(\"#graphTypeButton\").innerText = \"Gap to pole\";\n  document.querySelector(\"#qualiGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#driverGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#progressionGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToWinnerGraph\").classList.add(\"d-none\");\n  document.querySelector(\"#gapToPoleGraph\").classList.remove(\"d-none\");\n});\n\n/**\r\n * Updates the driver 1 name card with the d1 information stored in aDriver1\r\n * @param {a} aDriver1 clickable element of the driver 1 dropdown\r\n */\nfunction nameTitleD1(aDriver1) {\n  driver1Sel = aDriver1;\n  if (mode === \"driver\") {\n    document.querySelector(\".driver1-first\").classList.remove(\"d-none\");\n    document.querySelector(\".driver1-second\").classList.remove(\"d-none\");\n    document.querySelector(\".team1\").classList.add(\"d-none\");\n    document.querySelector(\".driver1-first\").textContent = driver1Sel.firstChild.children[0].innerText;\n    document.querySelector(\".driver1-second\").textContent = driver1Sel.firstChild.children[1].innerText;\n    document.querySelector(\".driver1-second\").dataset.teamid = driver1Sel.firstChild.children[1].dataset.teamid;\n    d1_team = driver1Sel.firstChild.children[1].dataset.teamid;\n    document.querySelector(\".driver1-second\").className = \"driver1-second bold-font\";\n    manageColor(document.querySelector(\".driver1-second\"), document.querySelector(\".driver1-second\"));\n  } else if (mode === \"team\") {\n    document.querySelector(\".driver1-first\").classList.add(\"d-none\");\n    document.querySelector(\".driver1-second\").classList.add(\"d-none\");\n    document.querySelector(\".team1\").classList.remove(\"d-none\");\n    document.querySelector(\".team1\").textContent = driver1Sel.children[0].children[1].innerText;\n    document.querySelector(\".team1\").dataset.teamid = driver1Sel.dataset.teamid;\n  }\n}\n\n/**\r\n * Updates the driver 2 name card with the d1 information stored in aDriver2\r\n * @param {a} aDriver2 clickable element of the driver 2 dropdown\r\n */\nfunction nameTitleD2(aDriver2) {\n  driver2Sel = aDriver2;\n  if (mode === \"driver\") {\n    document.querySelector(\".driver2-first\").classList.remove(\"d-none\");\n    document.querySelector(\".driver2-second\").classList.remove(\"d-none\");\n    document.querySelector(\".team2\").classList.add(\"d-none\");\n    document.querySelector(\".driver2-first\").textContent = driver2Sel.firstChild.children[0].innerText;\n    document.querySelector(\".driver2-second\").textContent = driver2Sel.firstChild.children[1].innerText;\n    document.querySelector(\".driver2-second\").dataset.teamid = driver2Sel.firstChild.children[1].dataset.teamid;\n    document.querySelector(\".driver2-second\").className = \"driver2-second bold-font\";\n    d2_team = driver2Sel.firstChild.children[1].dataset.teamid;\n    manageColor(document.querySelector(\".driver2-second\"), document.querySelector(\".driver2-second\"));\n  } else if (mode === \"team\") {\n    document.querySelector(\".driver2-first\").classList.add(\"d-none\");\n    document.querySelector(\".driver2-second\").classList.add(\"d-none\");\n    document.querySelector(\".team2\").classList.remove(\"d-none\");\n    document.querySelector(\".team2\").textContent = driver2Sel.children[0].children[1].innerText;\n    document.querySelector(\".team2\").dataset.teamid = driver2Sel.dataset.teamid;\n  }\n}\n\n/**\r\n * Sends the message that the H2H is properly configured to fetch results\r\n */\nfunction H2HReady() {\n  document.querySelector(\"#mainH2h\").classList.remove(\"d-none\");\n  let list1, list2;\n  if (mode === \"driver\") {\n    list1 = h2hList;\n    list2 = graphList;\n  } else if (mode === \"team\") {\n    list1 = h2hTeamList;\n    list2 = graphTeamList;\n  }\n  let data = {\n    command: \"H2HConfigured\",\n    h2h: h2hCount === 2 ? list1 : -1,\n    graph: list2,\n    year: document.querySelector(\"#yearButtonH2H\").textContent,\n    mode: mode\n  };\n  manageH2hState();\n  socket.send(JSON.stringify(data));\n}\nfunction manageH2hState() {\n  if (h2hCount === 2) {\n    document.querySelector(\".blocking-h2h\").classList.add(\"d-none\");\n  } else {\n    document.querySelector(\".blocking-h2h\").classList.remove(\"d-none\");\n    document.querySelector(\".driver1-name\").className = \"driver1-name\";\n    document.querySelector(\".driver2-name\").className = \"driver2-name\";\n    document.querySelector(\".driver1-first\").textContent = \"\";\n    document.querySelector(\".driver2-first\").textContent = \"\";\n    document.querySelector(\".driver1-second\").textContent = \"\";\n    document.querySelector(\".driver2-second\").textContent = \"\";\n    document.querySelectorAll(\".driver1-bar\").forEach(function (bar) {\n      bar.className = \"driver1-bar\";\n      bar.style.width = \"0px\";\n    });\n    document.querySelectorAll(\".driver2-bar\").forEach(function (bar) {\n      bar.className = \"driver2-bar\";\n      bar.style.width = \"0px\";\n    });\n    document.querySelectorAll(\".driver1-number\").forEach(function (num) {\n      num.innerText = \"\";\n    });\n    document.querySelectorAll(\".driver2-number\").forEach(function (num) {\n      num.innerText = \"\";\n    });\n  }\n}\nfunction load_labels_initialize_graphs(data) {\n  var labels = [];\n  data[0].forEach(function (elem) {\n    labels.push(_config__WEBPACK_IMPORTED_MODULE_0__.races_names[elem[1]]);\n  });\n  if (typeof driverGraph !== 'undefined' && driverGraph !== null) {\n    driverGraph.destroy();\n  }\n  if (typeof pointsGraph !== 'undefined' && pointsGraph !== null) {\n    pointsGraph.destroy();\n  }\n  if (typeof qualiGraph !== 'undefined' && qualiGraph !== null) {\n    qualiGraph.destroy();\n  }\n  if (typeof gapWinnerGraph !== 'undefined' && gapWinnerGraph !== null) {\n    gapWinnerGraph.destroy();\n  }\n  if (typeof gapPoleGraph !== 'undefined' && gapPoleGraph !== null) {\n    gapPoleGraph.destroy();\n  }\n  createPointsChart(labels);\n  if (mode === \"driver\") {\n    let max = 20;\n    let q2_line = 15;\n    if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024 && custom_team) {\n      max = 22;\n      q2_line = 16;\n    } else {\n      max = 20;\n    }\n    createRaceChart(labels, max);\n    createQualiChart(labels, max, q2_line);\n    createGapCharts(labels);\n    load_graphs_data(data);\n  } else if (mode === \"team\") {\n    load_teams_points_graph(data);\n  }\n}\nfunction load_teams_points_graph(data) {\n  data.forEach(function (team, ind) {\n    if (ind !== 0 && ind !== data.length - 1) {\n      let teamPoints = [];\n      team.forEach(function (driv, index) {\n        let points = get_one_driver_points_format(driv, data);\n        if (teamPoints.length === 0) {\n          teamPoints = [...points];\n        } else {\n          teamPoints = teamPoints.map((point, index) => point + points[index]);\n        }\n      });\n      let team_color = colors_dict[graphTeamList[ind - 1] + \"0\"];\n      pointsGraph.data.datasets.push({\n        label: _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[graphTeamList[ind - 1]],\n        data: teamPoints,\n        borderColor: team_color,\n        pointBackgroundColor: team_color,\n        borderWidth: 2,\n        pointRadius: 0,\n        fill: false,\n        pointHitRadius: 7,\n        datalabels: {\n          color: function () {\n            if (lightColors.indexOf(team_color) !== -1) {\n              return \"#272727\";\n            } else {\n              return '#eeeef1';\n            }\n          },\n          backgroundColor: team_color,\n          display: function (context) {\n            if (context.dataIndex === findLastNonNaNIndex(context.dataset.data)) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          borderRadius: 5,\n          font: {\n            family: \"Formula1Bold\"\n          }\n        }\n      });\n    }\n  });\n  pointsGraph.update();\n}\nfunction get_one_driver_points_format(driver, data) {\n  let d1_races = [];\n  let d1_points_provisional = [];\n  let d1_points = [0];\n  driver.slice(3).forEach(function (elem) {\n    d1_races.push(elem[0]);\n    let ptsThatRace = elem[2];\n    if (ptsThatRace === -1) {\n      ptsThatRace = 0;\n    }\n    if (elem.length === 10) {\n      d1_points_provisional.push(ptsThatRace + elem[7]);\n    } else {\n      d1_points_provisional.push(ptsThatRace);\n    }\n  });\n  data[0].forEach(function (elem) {\n    let index1 = d1_races.indexOf(elem[0]);\n    if (index1 !== -1) {\n      d1_points.push(d1_points_provisional[index1] + d1_points[d1_points.length - 1]);\n    } else {\n      if (data[data.length - 1].indexOf(elem[0]) !== -1) {\n        d1_points.push(d1_points[d1_points.length - 1]);\n      } else {\n        d1_points.push(NaN);\n      }\n    }\n  });\n  d1_points.shift();\n  return d1_points;\n}\nfunction load_graphs_data(data) {\n  let max_gapPole = 0;\n  let max_gapWinner = 0;\n  data.forEach(function (driv, index) {\n    if (index !== 0 && index !== data.length - 1) {\n      let d1_res = [];\n      let d1_races = [];\n      let d1_provisonal = [];\n      let d1_points_provisional = [];\n      let d1_points = [0];\n      let d1_qualis = [];\n      let d1_provisonal_q = [];\n      let d1_provisional_gapW = [];\n      let d1_provisional_gapP = [];\n      let d1_gapWinner = [];\n      let d1_gapPole = [];\n      let d1_backgroundColors = [];\n      let d1_backgroundColorsPole = [];\n      data[index].slice(3).forEach(function (elem) {\n        d1_races.push(elem[0]);\n        d1_provisonal.push(elem[1]);\n        d1_provisonal_q.push(elem[4]);\n        if (elem[5].slice(-1) !== \"L\") {\n          d1_provisional_gapW.push(elem[5].slice(1, -1));\n        } else {\n          d1_provisional_gapW.push(elem[5]);\n        }\n        if (elem[6] !== \"NR\") {\n          d1_provisional_gapP.push(elem[6].slice(1, -1));\n        } else {\n          d1_provisional_gapP.push(\"NR\");\n        }\n        let ptsThatRace = elem[2];\n        if (ptsThatRace === -1) {\n          ptsThatRace = 0;\n        }\n        if (elem.length === 10) {\n          d1_points_provisional.push(ptsThatRace + elem[7]);\n        } else {\n          d1_points_provisional.push(ptsThatRace);\n        }\n      });\n      let d1Id = graphList[index - 1];\n      let d1pos = graphList.indexOf(d1Id);\n      let d1_color;\n      if (d1pos === graphTeamList.indexOf(driv[1].toString())) {\n        d1_color = colors_dict[data[index][1] + \"0\"];\n      } else {\n        d1_color = colors_dict[data[index][1] + \"1\"];\n      }\n      data[0].forEach(function (elem) {\n        let index1 = d1_races.indexOf(elem[0]);\n        if (index1 !== -1) {\n          if (d1_provisonal[index1] === -1) {\n            d1_res.push(NaN);\n            d1_gapWinner.push(NaN);\n            d1_backgroundColors.push(d1_color + \"50\");\n          } else {\n            d1_res.push(d1_provisonal[index1]);\n            if (d1_provisional_gapW[index1].slice(-1) === \"L\") {\n              d1_gapWinner.push(NaN);\n              d1_backgroundColors.push(d1_color + \"76\");\n            } else {\n              d1_gapWinner.push(d1_provisional_gapW[index1]);\n              if (parseFloat(d1_provisional_gapW[index1]) > max_gapWinner) {\n                max_gapWinner = parseFloat(d1_provisional_gapW[index1]);\n              }\n              d1_backgroundColors.push(d1_color);\n            }\n          }\n          d1_points.push(d1_points_provisional[index1] + d1_points[d1_points.length - 1]);\n          d1_qualis.push(d1_provisonal_q[index1]);\n          if (d1_provisional_gapP[index1] === \"NR\") {\n            d1_gapPole.push(NaN);\n            d1_backgroundColorsPole.push(d1_color + \"60\");\n          } else {\n            d1_gapPole.push(d1_provisional_gapP[index1]);\n            if (parseFloat(d1_provisional_gapP[index1]) > max_gapPole) {\n              max_gapPole = parseFloat(d1_provisional_gapP[index1]);\n            }\n            d1_backgroundColorsPole.push(d1_color);\n          }\n        } else {\n          d1_res.push(NaN);\n          d1_qualis.push(NaN);\n          if (data[data.length - 1].indexOf(elem[0]) !== -1) {\n            d1_points.push(d1_points[d1_points.length - 1]);\n          } else {\n            d1_points.push(NaN);\n          }\n        }\n      });\n      d1_points.shift();\n      d1_gapWinner = d1_gapWinner.map(function (elem) {\n        if (isNaN(elem)) {\n          return max_gapWinner / 2;\n        } else {\n          return elem;\n        }\n      });\n      d1_gapPole = d1_gapPole.map(function (elem) {\n        if (isNaN(elem)) {\n          return max_gapPole / 2;\n        } else {\n          return elem;\n        }\n      });\n      driverGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_res,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        borderWidth: 2,\n        fill: false,\n        pointHitRadius: 7\n      });\n      qualiGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_qualis,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        borderWidth: 2,\n        fill: false,\n        pointHitRadius: 7\n      });\n      pointsGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_points,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        borderWidth: 2,\n        pointRadius: 0,\n        fill: false,\n        pointHitRadius: 7,\n        datalabels: {\n          color: function () {\n            if (lightColors.indexOf(d1_color) !== -1) {\n              return \"#272727\";\n            } else {\n              return '#eeeef1';\n            }\n          },\n          backgroundColor: d1_color,\n          display: function (context) {\n            if (context.dataIndex === findLastNonNaNIndex(context.dataset.data)) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          borderRadius: 5,\n          font: {\n            family: \"Formula1Bold\"\n          }\n        }\n      });\n      gapWinnerGraph.options.scales.y.max = max_gapWinner;\n      gapPoleGraph.options.scales.y.max = max_gapPole;\n      gapWinnerGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_gapWinner,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        backgroundColor: d1_backgroundColors,\n        borderWidth: 1,\n        fill: true,\n        pointHitRadius: 7\n      });\n      gapPoleGraph.data.datasets.push({\n        label: driv[0],\n        data: d1_gapPole,\n        borderColor: d1_color,\n        pointBackgroundColor: d1_color,\n        backgroundColor: d1_backgroundColorsPole,\n        borderWidth: 1,\n        fill: true,\n        pointHitRadius: 7\n      });\n    }\n  });\n\n  /*\r\n  \r\n  let d2_color;\r\n    */\n  driverGraph.update();\n  qualiGraph.update();\n  pointsGraph.update();\n  gapWinnerGraph.update();\n  gapPoleGraph.update();\n}\n\n/**\r\n * Finds tha last non NaN element in an array\r\n * @param {Array} arr array in which the function will look\r\n * @returns the indef on which is the last non NaN or -1 if there is none\r\n */\nfunction findLastNonNaNIndex(arr) {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (!isNaN(arr[i])) {\n      return i;\n    }\n  }\n  return -1; // Devuelve -1 si todos los valores son NaN\n}\nfunction updateMaxYAxis(newMax) {\n  driverGraph.options.scales.y.max = newMax;\n  qualiGraph.options.scales.y.max = newMax;\n  driverGraph.update();\n  qualiGraph.update();\n}\n\n/**\r\n * Creates the head to head race chart\r\n * @param {Array} labelsArray array with all the labels for the races\r\n */\nfunction createRaceChart(labelsArray, max) {\n  const dataD = {\n    labels: labelsArray\n  };\n  driverGraph = new Chart(document.getElementById('driverGraph'), {\n    type: 'line',\n    data: dataD,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        mode: 'index'\n      },\n      layout: {\n        padding: {\n          top: 10,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        },\n        y: {\n          reverse: true,\n          min: 1,\n          max: max,\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        }\n      },\n      plugins: {\n        datalabels: {\n          display: false\n        },\n        annotation: {\n          annotations: {\n            line1: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 1,\n              yMax: 1,\n              borderColor: '#FDE06B',\n              borderWidth: 1\n            },\n            line2: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 2,\n              yMax: 2,\n              borderColor: '#AEB2B8',\n              borderWidth: 1\n            },\n            line3: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 3,\n              yMax: 3,\n              borderColor: '#d7985a',\n              borderWidth: 1\n            },\n            line4: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 10,\n              yMax: 10,\n              borderColor: '#dedde6',\n              borderWidth: 1\n            }\n          }\n        },\n        legend: {\n          labels: {\n            boxHeight: 2,\n            boxWidth: 25,\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1\"\n            }\n          }\n        },\n        tooltip: {\n          titleFont: {\n            family: 'Formula1Bold',\n            size: 16\n          },\n          bodyFont: {\n            family: 'Formula1',\n            size: 14\n          }\n        }\n      }\n    }\n  });\n}\n\n/**\r\n * Creates the head to head qualifying chart\r\n * @param {Array} labelsArray array with all the labels for the races\r\n */\nfunction createQualiChart(labelsArray, max, q2_line) {\n  const dataD = {\n    labels: labelsArray\n  };\n  qualiGraph = new Chart(document.getElementById('qualiGraph'), {\n    type: 'line',\n    data: dataD,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        mode: 'index'\n      },\n      layout: {\n        padding: {\n          top: 10,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        },\n        y: {\n          reverse: true,\n          min: 1,\n          max: max,\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        }\n      },\n      plugins: {\n        datalabels: {\n          display: false\n        },\n        annotation: {\n          annotations: {\n            line1: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: q2_line,\n              yMax: q2_line,\n              borderColor: 'red',\n              borderWidth: 1,\n              label: {\n                display: true,\n                color: \"white\",\n                backgroundColor: \"red\",\n                content: 'Q2',\n                position: 'start',\n                font: {\n                  family: \"Formula1Bold\",\n                  size: 12\n                }\n              }\n            },\n            line2: {\n              type: 'line',\n              display: annotationsToggle,\n              yMin: 10,\n              yMax: 10,\n              borderColor: 'red',\n              borderWidth: 1,\n              label: {\n                color: \"white\",\n                display: true,\n                backgroundColor: \"red\",\n                content: 'Q3',\n                position: 'start',\n                font: {\n                  family: \"Formula1Bold\",\n                  size: 12\n                }\n              }\n            }\n          }\n        },\n        legend: {\n          labels: {\n            boxHeight: 2,\n            boxWidth: 25,\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1\"\n            }\n          }\n        },\n        tooltip: {\n          titleFont: {\n            family: 'Formula1Bold',\n            size: 16\n          },\n          bodyFont: {\n            family: 'Formula1',\n            size: 14\n          }\n        }\n      }\n    }\n  });\n}\n\n/**\r\n * Creates the head to head qualifying chart\r\n * @param {Array} labelsArray array with all the labels for the races\r\n */\nfunction createPointsChart(labelsArray) {\n  const dataD = {\n    labels: labelsArray\n  };\n  pointsGraph = new Chart(document.getElementById('progressionGraph'), {\n    type: 'line',\n    data: dataD,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        mode: 'index'\n      },\n      layout: {\n        padding: {\n          top: 10,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        },\n        y: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          labels: {\n            boxHeight: 2,\n            boxWidth: 25,\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1\"\n            }\n          }\n        },\n        tooltip: {\n          titleFont: {\n            family: 'Formula1Bold',\n            size: 16\n          },\n          bodyFont: {\n            family: 'Formula1',\n            size: 14\n          }\n        }\n      }\n    }\n  });\n}\nfunction createGapCharts(labelsArray, maxGapWinner, maxGapPole) {\n  const dataD1 = {\n    labels: labelsArray\n  };\n  const dataD2 = {\n    labels: labelsArray\n  };\n  let commonOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      mode: 'index'\n    },\n    scales: {\n      x: {\n        grid: {\n          color: '#292929'\n        },\n        ticks: {\n          color: \"#dedde6\",\n          font: {\n            family: \"Formula1Bold\"\n          }\n        }\n      },\n      y: {\n        min: 0,\n        grid: {\n          color: '#292929'\n        },\n        ticks: {\n          color: \"#dedde6\",\n          font: {\n            family: \"Formula1Bold\"\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        display: false\n      },\n      legend: {\n        labels: {\n          boxHeight: 2,\n          boxWidth: 25,\n          color: \"#dedde6\",\n          font: {\n            family: \"Formula1\"\n          }\n        }\n      },\n      tooltip: {\n        titleFont: {\n          family: 'Formula1Bold',\n          size: 16\n        },\n        bodyFont: {\n          family: 'Formula1',\n          size: 14\n        },\n        callbacks: {\n          label: function (tooltipItem) {\n            let dataset = tooltipItem.dataset; // Acceder al dataset actual\n            let index = tooltipItem.dataIndex; // Obtener el índice del dato\n            let color = dataset.backgroundColor[index]; // Obtener el color de fondo del dato actual\n            let result;\n            if (color.endsWith(\"50\")) {\n              result = 'DNF';\n            } else if (color.endsWith(\"60\")) {\n              result = \"Not representative\";\n            } else if (color.endsWith(\"76\")) {\n              result = \"Lapped\";\n            } else {\n              result = `${tooltipItem.raw}s`;\n            }\n\n            // Mostrar el nombre del piloto y el resultado (valor o DNF)\n            return `${dataset.label}: ${result}`;\n          }\n        }\n      }\n    },\n    options: {\n      layout: {\n        padding: {\n          top: 10,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      }\n    }\n  };\n  let gapWinnerOptions = {\n    ...commonOptions,\n    scales: {\n      ...commonOptions.scales,\n      y: {\n        ...commonOptions.scales.y,\n        max: maxGapWinner\n      }\n    },\n    plugins: {\n      ...commonOptions.plugins\n    }\n  };\n  gapWinnerGraph = new Chart(document.getElementById('gapToWinnerGraph'), {\n    type: 'bar',\n    data: dataD1,\n    options: gapWinnerOptions\n  });\n  let gapPoleOptions = {\n    ...commonOptions,\n    scales: {\n      ...commonOptions.scales,\n      y: {\n        ...commonOptions.scales.y,\n        max: 20\n      }\n    },\n    plugins: {\n      ...commonOptions.plugins\n    }\n  };\n  gapPoleGraph = new Chart(document.getElementById('gapToPoleGraph'), {\n    type: 'bar',\n    data: dataD2,\n    options: gapPoleOptions\n  });\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/head2head.js?");

/***/ }),

/***/ "./src/js/performance.js":
/*!*******************************!*\
  !*** ./src/js/performance.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   load_attributes: () => (/* binding */ load_attributes),\n/* harmony export */   load_car_attributes: () => (/* binding */ load_car_attributes),\n/* harmony export */   load_cars: () => (/* binding */ load_cars),\n/* harmony export */   load_custom_engines: () => (/* binding */ load_custom_engines),\n/* harmony export */   load_performance: () => (/* binding */ load_performance),\n/* harmony export */   load_performance_graph: () => (/* binding */ load_performance_graph),\n/* harmony export */   manage_engineStats: () => (/* binding */ manage_engineStats),\n/* harmony export */   order_by: () => (/* binding */ order_by),\n/* harmony export */   viewingGraph: () => (/* binding */ viewingGraph)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n/* harmony import */ var _head2head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./head2head */ \"./src/js/head2head.js\");\n\n\nconst teamsPill = document.getElementById(\"teamsPill\");\nconst enginesPill = document.getElementById(\"enginesPill\");\nconst teamsDiv = document.getElementById(\"teamsDiv\");\nconst enginesDiv = document.getElementById(\"enginesDiv\");\nconst divsTeamsArray = [teamsDiv, enginesDiv];\nlet teamSelected;\nlet engineSelected;\nlet teamEngineSelected;\nlet performanceGraph;\nlet teamsEngine = \"teams\";\nlet viewingGraph = true;\nlet actualMaxDesign = 0;\nlet customEnginesCopy;\nfunction normalizeData(data) {\n  let values = Object.values(data);\n  let min = Math.min(...values);\n  let max = Math.max(...values);\n  let adjustedMin = min - 5;\n  let adjustedMax = max + 5;\n  let normalizedData = {};\n  for (let key in data) {\n    if (data.hasOwnProperty(key)) {\n      normalizedData[key] = (data[key] - adjustedMin) / (adjustedMax - adjustedMin) * 100;\n    }\n  }\n  return normalizedData;\n}\nfunction load_performance(teams) {\n  // let teams = normalizeData(teams);\n  for (let key in teams) {\n    if (teams.hasOwnProperty(key)) {\n      let teamPerformance = document.querySelector(`#teamsDiv .team-performance[data-teamid='${key}']`);\n      if (teamPerformance) {\n        let performanceBarProgress = teamPerformance.querySelector('.performance-bar-progress');\n        let team_value = teamPerformance.querySelector('.team-title-value');\n        if (performanceBarProgress) {\n          performanceBarProgress.style.width = teams[key] + '%';\n          team_value.innerText = teams[key].toFixed(2) + ' %';\n          performanceBarProgress.dataset.overall = teams[key];\n        }\n      }\n    }\n  }\n}\nfunction load_cars(data) {\n  for (let key in data) {\n    let cars = document.querySelectorAll(`#carsDiv .car[data-teamid='${key}']`);\n    cars.forEach(function (car, index) {\n      let carNumber = parseInt(car.dataset.carnumber);\n      index = index + 1;\n      let bar = car.querySelector('.performance-bar-progress');\n      bar.dataset.overall = data[key][carNumber][0];\n      bar.style.width = data[key][carNumber][0] + '%';\n      let name = car.querySelector('.team-title-name');\n      name.innerText = car.dataset.teamshow + \" \" + carNumber.toString() + \" -  #\" + data[key][carNumber][1];\n      let missing_parts = data[key][carNumber][2];\n      let missing_copntainer = car.querySelector(\".car-missing-parts\");\n      missing_copntainer.innerHTML = \"\";\n      if (missing_parts.length > 0) {\n        let list = document.createElement(\"span\");\n        let string = \"\";\n        missing_parts.forEach(function (part) {\n          let partName = _config__WEBPACK_IMPORTED_MODULE_0__.part_codes_abreviations[part];\n          string += partName + \" \";\n        });\n        list.innerText = string;\n        missing_copntainer.appendChild(list);\n        let icon = document.createElement(\"i\");\n        icon.classList.add(\"bi\", \"bi-exclamation-triangle-fill\");\n        missing_copntainer.appendChild(icon);\n      } else {\n        let icon = document.createElement(\"i\");\n        icon.classList.add(\"bi\", \"bi-check-all\");\n        missing_copntainer.appendChild(icon);\n      }\n      let value = document.createElement(\"span\");\n      value.classList.add(\"value\");\n      value.innerText = data[key][carNumber][0].toFixed(2) + \" %\";\n      missing_copntainer.appendChild(value);\n    });\n  }\n}\nfunction load_attributes(teams) {\n  for (let key in teams) {\n    for (let attribute in teams[key]) {\n      let team = document.querySelector(`#teamsDiv .team-performance[data-teamid='${key}']`);\n      let bar = team.querySelector(`.performance-bar-progress`);\n      let attributeValue = teams[key][attribute];\n      bar.dataset[attribute] = attributeValue.toFixed(3);\n    }\n  }\n}\nfunction load_car_attributes(teams) {\n  for (let key in teams) {\n    for (let car in teams[key]) {\n      let carDiv = document.querySelector(`#carsDiv .car[data-teamid='${key}'][data-carnumber='${car}']`);\n      for (let attribute in teams[key][car]) {\n        let bar = carDiv.querySelector(`.performance-bar-progress`);\n        let attributeValue = teams[key][car][attribute];\n        bar.dataset[attribute] = attributeValue.toFixed(3);\n      }\n    }\n  }\n}\nfunction order_by(criterion) {\n  let teams = document.querySelectorAll(\".team-performance\");\n  let teamsArray = Array.from(teams);\n  teamsArray.sort(function (a, b) {\n    return b.querySelector(\".performance-bar-progress\").dataset[criterion] - a.querySelector(\".performance-bar-progress\").dataset[criterion];\n  });\n  teamsArray.forEach(function (team, index) {\n    document.getElementById(\"teamsDiv\").appendChild(team);\n    let bar = team.querySelector(\".performance-bar-progress\");\n    bar.style.width = bar.dataset[criterion] + \"%\";\n    team.querySelector(\".team-title-value\").innerText = parseFloat(bar.dataset[criterion]).toFixed(2) + \" %\";\n    let number = team.querySelector(\".team-number\");\n    number.innerText = index + 1;\n  });\n  let cars = document.querySelectorAll(\".car-performance\");\n  let carsArray = Array.from(cars);\n  carsArray.sort(function (a, b) {\n    return b.querySelector(\".performance-bar-progress\").dataset[criterion] - a.querySelector(\".performance-bar-progress\").dataset[criterion];\n  });\n  carsArray.forEach(function (car, index) {\n    document.getElementById(\"carsDiv\").appendChild(car);\n    let bar = car.querySelector(\".performance-bar-progress\");\n    bar.style.width = bar.dataset[criterion] + \"%\";\n    let number = car.querySelector(\".performance-number\");\n    let value = car.querySelector(\".car-missing-parts .value\");\n    value.innerText = parseFloat(bar.dataset[criterion]).toFixed(2) + \" %\";\n    number.innerText = index + 1;\n  });\n}\ndocument.getElementById(\"teamsCarsButton\").addEventListener(\"click\", function (elem) {\n  if (event.target.dataset.value === \"teams\") {\n    event.target.dataset.value = \"cars\";\n    event.target.className = \"bi bi-person-fill\";\n    document.getElementById(\"teamsDiv\").classList.add(\"d-none\");\n    document.getElementById(\"carsDiv\").classList.remove(\"d-none\");\n  } else {\n    event.target.dataset.value = \"teams\";\n    event.target.className = \"bi bi-people-fill\";\n    document.getElementById(\"carsDiv\").classList.add(\"d-none\");\n    document.getElementById(\"teamsDiv\").classList.remove(\"d-none\");\n  }\n});\ndocument.querySelector(\"#attributeMenu\").querySelectorAll(\"a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    order_by(elem.dataset.attribute);\n    document.querySelector(\"#attributeButton\").innerText = elem.innerText;\n  });\n});\n\n/**\r\n * Pills that manage engines and teams screens and lists\r\n */\nteamsPill.addEventListener(\"click\", function () {\n  teamsEngine = \"teams\";\n  document.querySelector(\"#enginesPerformance\").classList.add(\"d-none\");\n  document.querySelector(\"#teamsPerformance\").classList.remove(\"d-none\");\n  document.querySelector(\"#carAttributeSelector\").classList.remove(\"d-none\");\n  document.querySelector(\"#customEnginesButtonContainer\").classList.add(\"d-none\");\n  removeSelected();\n  if (viewingGraph) {\n    document.querySelector(\".save-button\").classList.add(\"d-none\");\n  } else {\n    document.querySelector(\".save-button\").classList.remove(\"d-none\");\n    first_show_animation();\n  }\n});\nenginesPill.addEventListener(\"click\", function () {\n  teamsEngine = \"engines\";\n  document.querySelector(\"#teamsPerformance\").classList.add(\"d-none\");\n  document.querySelector(\"#enginesPerformance\").classList.remove(\"d-none\");\n  document.querySelector(\"#carAttributeSelector\").classList.add(\"d-none\");\n  document.querySelector(\"#customEnginesButtonContainer\").classList.remove(\"d-none\");\n  removeSelected();\n  document.querySelector(\".save-button\").classList.remove(\"d-none\");\n  first_show_animation();\n});\nfunction gather_engines_data() {\n  let engines = document.querySelectorAll(\".engine-performance\");\n  let enginesData = {};\n  engines.forEach(function (engine) {\n    let engineID = engine.dataset.engineid;\n    let engineStats = {};\n    engine.querySelectorAll(\".engine-performance-stat\").forEach(function (stat) {\n      let attribute = stat.dataset.attribute;\n      let value = stat.querySelector(\".custom-input-number\").value.split(\" \")[0];\n      engineStats[attribute] = value;\n    });\n    enginesData[engineID] = engineStats;\n  });\n  return enginesData;\n}\nfunction update_max_design(data) {\n  actualMaxDesign = parseInt(data) + 1;\n}\n\n/**\r\n * Manages the engine stats for all manufacturers\r\n * @param {Object} engineData engine stats for all manufacturers\r\n */\nfunction manage_engineStats(engineData) {\n  engineData.forEach(function (elem) {\n    let engineId = elem[0];\n    let engineStats = elem[1];\n    let engine = document.querySelector(`[data-engineId=\"${engineId}\"]`);\n    for (let key in engineStats) {\n      let value = engineStats[key];\n      let attribute = engine.querySelector(`.engine-performance-stat[data-attribute=\"${key}\"]`);\n      let input = attribute.querySelector(\".custom-input-number\");\n      let bar = attribute.querySelector(\".engine-performance-progress\");\n      input.value = value.toFixed(1) + \" %\";\n      bar.style.width = value + \"%\";\n    }\n  });\n}\n\n/**\r\n * removes the team or engine selected anc changes the icon if necesssary\r\n */\nfunction removeSelected() {\n  let elemsSelected = document.querySelectorAll('.selected');\n  elemsSelected.forEach(item => {\n    item.classList.remove('selected');\n  });\n}\n\n/**\r\n * eventListeners for all teams and engines\r\n */\ndocument.querySelectorAll(\".team\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    removeSelected();\n    manageSaveButton(true, \"performance\");\n    document.querySelector(\"#performanceGraphButton\").classList.remove(\"active\");\n    elem.classList.toggle('selected');\n    teamSelected = elem.dataset.teamid;\n    let teamRequest = {\n      command: \"performanceRequest\",\n      teamID: teamSelected\n    };\n    socket.send(JSON.stringify(teamRequest));\n    document.querySelector(\"#performanceGraph\").classList.add(\"d-none\");\n    document.querySelector(\".teams-show\").classList.remove(\"d-none\");\n    document.querySelector(\".save-button\").classList.remove(\"d-none\");\n    first_show_animation();\n    viewingGraph = false;\n  });\n});\ndocument.querySelectorAll(\".car\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    removeSelected();\n    manageSaveButton(true, \"performance\");\n    document.querySelector(\"#performanceGraphButton\").classList.remove(\"active\");\n    elem.classList.toggle('selected');\n    teamSelected = elem.dataset.teamid;\n    let teamRequest = {\n      command: \"performanceRequest\",\n      teamID: teamSelected\n    };\n    socket.send(JSON.stringify(teamRequest));\n    document.querySelector(\"#performanceGraph\").classList.add(\"d-none\");\n    document.querySelector(\".teams-show\").classList.remove(\"d-none\");\n    document.querySelector(\".save-button\").classList.remove(\"d-none\");\n    first_show_animation();\n    viewingGraph = false;\n  });\n});\ndocument.querySelectorAll(\".engine\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    removeSelected();\n    elem.classList.toggle('selected');\n    engineSelected = elem.dataset.engineid;\n    teamEngineSelected = elem.dataset.teamengine;\n    document.querySelector(\".engines-show\").classList.remove(\"d-none\");\n    resetBarsEngines(elem);\n  });\n});\nfunction load_parts_stats(data) {\n  for (let key in data) {\n    if (key !== \"engine\") {\n      let part = document.querySelector(`.part-performance[data-part='${key}']`);\n      for (let stat in data[key]) {\n        if (stat !== \"15\") {\n          let stat_input = part.querySelector(`.part-performance-stat[data-attribute='${stat}']`).querySelector(\".custom-input-number\");\n          if (stat === \"7\" || stat === \"8\" || stat === \"9\") {\n            stat_input.value = data[key][stat].toFixed(2) + \" kN\";\n          } else {\n            stat_input.value = data[key][stat].toFixed(2) + \" %\";\n          }\n        }\n      }\n    }\n  }\n}\nfunction load_parts_list(data) {\n  for (let key in data) {\n    let list = document.querySelector(`.part-performance[data-part='${key}'] .parts-list`);\n    let partLoadouts = document.querySelector(`.part-performance[data-part='${key}']`);\n    list.innerHTML = \"\";\n    let index = 1;\n    for (let part in data[key]) {\n      let partElem = document.createElement(\"div\");\n      partElem.classList.add(\"one-part\");\n      if (index === 1) {\n        partElem.classList.add(\"one-part-default\");\n      }\n      let partTitle = document.createElement(\"div\");\n      partTitle.classList.add(\"one-part-title\");\n      let partName = document.createElement(\"div\");\n      partName.dataset.designId = data[key][part][0];\n      partName.classList.add(\"one-part-name\");\n      let partNameText = abreviations_dict[teamSelected] + \"-\" + pars_abreviations[key] + \"-\" + index;\n      partName.innerText = partNameText;\n      let subtitle = document.querySelector(`.part-performance[data-part='${key}'] .part-subtitle`);\n      subtitle.innerText = partNameText;\n      subtitle.dataset.editing = data[key][part][0];\n      partTitle.appendChild(partName);\n      add_partName_listener(partName, subtitle);\n      let loadoutContainer = document.createElement(\"div\");\n      loadoutContainer.classList.add(\"fitted-icons\");\n      let n_parts = document.createElement(\"div\");\n      n_parts.classList.add(\"n-parts\");\n      n_parts.innerText = \"x\" + data[key][part][6];\n      loadoutContainer.appendChild(n_parts);\n      add_n_parts_buttons(loadoutContainer);\n      let loadout1 = document.createElement(\"i\");\n      loadout1.classList.add(\"bi\", \"bi-check\", \"loadout-1\");\n      loadoutContainer.appendChild(loadout1);\n      if (data[key][part][4] === 1) {\n        loadout1.classList.add(\"fitted\");\n        let number = document.createElement(\"div\");\n        number.classList.add(\"number\");\n        number.innerText = \"1\";\n        loadout1.appendChild(number);\n        partLoadouts.dataset.loadout1 = data[key][part][0];\n      }\n      loadout_listener(loadout1, \"1\", partLoadouts);\n      let loadout2 = document.createElement(\"i\");\n      loadout2.classList.add(\"bi\", \"bi-check\", \"loadout-2\");\n      loadoutContainer.appendChild(loadout2);\n      if (data[key][part][5] === 1) {\n        loadout2.classList.add(\"fitted\");\n        let number = document.createElement(\"div\");\n        number.classList.add(\"number\");\n        number.innerText = \"2\";\n        loadout2.appendChild(number);\n        partLoadouts.dataset.loadout2 = data[key][part][0];\n      }\n      loadout_listener(loadout2, \"2\", partLoadouts);\n      partTitle.appendChild(loadoutContainer);\n      let posRelative = document.createElement(\"div\");\n      posRelative.classList.add(\"one-part-flag-and-text\");\n      if (data[key][part][1] !== data[key][part][2]) {\n        let flag = document.createElement(\"img\");\n        flag.classList.add(\"one-part-flag\");\n        let code = data[key][part][3];\n        let codeFlag = races_map[code];\n        let flagSrc = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[codeFlag];\n        flag.src = flagSrc;\n        let flagName = document.createElement(\"div\");\n        flagName.classList.add(\"one-part-flag-title\");\n        flagName.innerText = _config__WEBPACK_IMPORTED_MODULE_0__.races_names[code];\n        posRelative.appendChild(flag);\n        posRelative.appendChild(flagName);\n      } else {\n        posRelative.innerText = \"BASE\";\n      }\n      partElem.appendChild(partTitle);\n      partElem.appendChild(posRelative);\n      partElem.dataset.partid = part;\n      list.appendChild(partElem);\n      if (index === data[key].length) {\n        partName.classList.add(\"editing\");\n      }\n      index++;\n    }\n    add_new_part_button(list);\n    if (list.scrollHeight > list.clientHeight) {\n      list.classList.add(\"list-overflow\");\n    } else {\n      list.classList.remove(\"list-overflow\");\n    }\n  }\n}\nfunction add_new_part_button(list) {\n  let new_part_div = document.createElement(\"div\");\n  new_part_div.classList.add(\"new-part\");\n  let icon = document.createElement(\"i\");\n  let generalPart = list.parentNode;\n  icon.classList.add(\"bi\", \"bi-plus-circle\");\n  icon.textContent = \"Add new part\";\n  new_part_div.appendChild(icon);\n  list.appendChild(new_part_div);\n  icon.addEventListener(\"click\", function () {\n    let previousPart = list.childNodes[list.childNodes.length - 2];\n    let previous_name = previousPart.querySelector(\".one-part-name\").innerText;\n    let new_name = previous_name.split(\"-\")[0] + \"-\" + previous_name.split(\"-\")[1] + \"-\" + (parseInt(previous_name.split(\"-\")[2]) + 1);\n    let part = document.createElement(\"div\");\n    part.classList.add(\"one-part\");\n    let partTitle = document.createElement(\"div\");\n    partTitle.classList.add(\"one-part-title\");\n    let partName = document.createElement(\"div\");\n    partName.dataset.designId = actualMaxDesign;\n    partName.classList.add(\"one-part-name\");\n    partName.innerText = new_name;\n    let subtitle = list.parentNode.querySelector(`.part-subtitle`);\n    subtitle.dataset.editing = \"-1\";\n    actualMaxDesign += 1;\n    subtitle.innerText = new_name;\n    partTitle.appendChild(partName);\n    let parts = list.querySelectorAll(\".one-part\");\n    parts.forEach(function (part) {\n      part.querySelector(\".one-part-name\").classList.remove(\"editing\");\n    });\n    add_partName_listener(partName, subtitle, \"new\");\n    let loadoutContainer = document.createElement(\"div\");\n    loadoutContainer.classList.add(\"fitted-icons\");\n    let n_parts = document.createElement(\"div\");\n    n_parts.classList.add(\"n-parts\");\n    n_parts.innerText = \"x0\";\n    loadoutContainer.appendChild(n_parts);\n    add_n_parts_buttons(loadoutContainer);\n    let loadout1 = document.createElement(\"i\");\n    loadout1.classList.add(\"bi\", \"bi-check\", \"loadout-1\");\n    loadoutContainer.appendChild(loadout1);\n    loadout_listener(loadout1, \"1\", generalPart);\n    let loadout2 = document.createElement(\"i\");\n    loadout2.classList.add(\"bi\", \"bi-check\", \"loadout-2\");\n    loadoutContainer.appendChild(loadout2);\n    loadout_listener(loadout2, \"2\", generalPart);\n    partTitle.appendChild(loadoutContainer);\n    part.appendChild(partTitle);\n    list.insertBefore(part, new_part_div);\n    partName.classList.add(\"editing\");\n    new_part_div.remove();\n  });\n}\nfunction add_n_parts_buttons(loadoutContainer) {\n  let buttonsContainer = document.createElement(\"div\");\n  buttonsContainer.classList.add(\"n-parts-buttons\");\n  let up = document.createElement(\"i\");\n  up.classList.add(\"bi\", \"bi-chevron-up\");\n  let down = document.createElement(\"i\");\n  down.classList.add(\"bi\", \"bi-chevron-down\");\n  buttonsContainer.appendChild(up);\n  buttonsContainer.appendChild(down);\n  up.addEventListener(\"click\", function () {\n    let n_parts = loadoutContainer.querySelector(\".n-parts\");\n    let n = parseInt(n_parts.innerText.split(\"x\")[1]);\n    n += 1;\n    n_parts.innerText = \"x\" + n;\n  });\n  down.addEventListener(\"click\", function () {\n    let fitted_parts = loadoutContainer.parentNode.querySelectorAll(\".fitted\");\n    let fitted_parts_numb = fitted_parts.length;\n    let n_parts = loadoutContainer.querySelector(\".n-parts\");\n    let n = parseInt(n_parts.innerText.split(\"x\")[1]);\n    if (n > fitted_parts_numb) {\n      n -= 1;\n      if (n < 0) {\n        n = 0;\n      }\n      n_parts.innerText = \"x\" + n;\n    } else {\n      fitted_parts.forEach(function (part) {\n        let errorClass = \"\";\n        if (part.classList.contains(\"loadout-1\")) {\n          errorClass = \"loadout-1-error\";\n        } else if (part.classList.contains(\"loadout-2\")) {\n          errorClass = \"loadout-2-error\";\n        }\n        part.classList.add(errorClass);\n        setTimeout(() => {\n          part.classList.remove(errorClass);\n        }, 500);\n      });\n    }\n  });\n  loadoutContainer.appendChild(buttonsContainer);\n}\nfunction load_one_part(data) {\n  data = data[0];\n  let key = Object.keys(data)[0];\n  let part = document.querySelector(`.part-performance[data-part='${key}']`);\n  for (let stat in data[key]) {\n    if (stat !== \"15\") {\n      let stat_input = part.querySelector(`.part-performance-stat[data-attribute='${stat}']`).querySelector(\".custom-input-number\");\n      if (stat === \"7\" || stat === \"8\" || stat === \"9\") {\n        stat_input.value = data[key][stat].toFixed(2) + \" kN\";\n      } else {\n        stat_input.value = data[key][stat].toFixed(2) + \" %\";\n      }\n    }\n  }\n}\nfunction add_partName_listener(div, subtitle, type = \"old\") {\n  div.addEventListener(\"click\", function () {\n    if (type === \"new\") {\n      subtitle.dataset.editing = -1;\n    } else {\n      subtitle.dataset.editing = div.dataset.designId;\n    }\n    subtitle.innerText = div.innerText;\n    let parts = div.parentNode.parentNode.parentNode.querySelectorAll(\".one-part\");\n    parts.forEach(function (part) {\n      part.querySelector(\".one-part-name\").classList.remove(\"editing\");\n    });\n    div.classList.add(\"editing\");\n    if (type === \"old\") {\n      let data = {\n        command: \"partRequest\",\n        designID: div.dataset.designId\n      };\n      socket.send(JSON.stringify(data));\n    }\n  });\n}\nfunction loadout_listener(icon, loadout_n, partTitle) {\n  icon.addEventListener(\"click\", function () {\n    let part_design = icon.parentNode.parentNode.querySelector(\".one-part-name\").dataset.designId;\n    let n_parts_elem = icon.parentNode.querySelector(\".n-parts\");\n    let n_parts = n_parts_elem.innerText.split(\"x\")[1];\n    let parts_fitted = icon.parentNode.parentNode.querySelectorAll(\".fitted\").length;\n    if (parts_fitted < n_parts) {\n      partTitle.dataset[`loadout${loadout_n}`] = part_design;\n      if (loadout_n === \"1\") {\n        let oldFitted = partTitle.querySelector(\".loadout-1.fitted\");\n        if (oldFitted) {\n          oldFitted.classList.remove(\"fitted\");\n          oldFitted.querySelector(\".number\").remove();\n        }\n        icon.classList.toggle(\"fitted\");\n        let number = document.createElement(\"div\");\n        number.classList.add(\"number\");\n        number.innerText = \"1\";\n        icon.appendChild(number);\n      } else {\n        let oldFitted = partTitle.querySelector(\".loadout-2.fitted\");\n        if (oldFitted) {\n          oldFitted.classList.remove(\"fitted\");\n          oldFitted.querySelector(\".number\").remove();\n        }\n        icon.classList.toggle(\"fitted\");\n        let number = document.createElement(\"div\");\n        number.classList.add(\"number\");\n        number.innerText = \"2\";\n        icon.appendChild(number);\n      }\n    } else {\n      n_parts_elem.classList.add(\"n-parts-error\");\n      setTimeout(() => {\n        n_parts_elem.classList.remove(\"n-parts-error\");\n      }, 500);\n    }\n  });\n}\ndocument.querySelector(\"#fitButton\").addEventListener(\"click\", function () {\n  let data = {\n    command: \"fitParts\",\n    teamID: teamSelected\n  };\n  socket.send(JSON.stringify(data));\n});\ndocument.querySelectorAll(\".part-performance-title .bi-caret-down-fill\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    elem.classList.toggle(\"clicked\");\n    let generalPart = elem.parentNode.parentNode;\n    elem.parentNode.querySelector(\".part-buttons\").classList.toggle(\"d-none\");\n    if (elem.classList.contains(\"clicked\")) {\n      generalPart.querySelector(\".part-performance-stats\").style.opacity = 0;\n      generalPart.querySelector(\".part-performance-stats\").style.height = \"0\";\n      generalPart.querySelector(\".part-performance-stats\").style.pointerEvents = \"none\";\n    } else {\n      generalPart.querySelector(\".part-performance-stats\").style.opacity = 1;\n      generalPart.querySelector(\".part-performance-stats\").style.pointerEvents = \"auto\";\n      //wait 0.2s and restore height\n      setTimeout(() => {\n        generalPart.querySelector(\".part-performance-stats\").style.height = \"auto\";\n      }, 200);\n    }\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll(\".part-name-buttons .bi-plus-lg\").forEach(function (elem) {\n  let intervalIds = [];\n  elem.addEventListener(\"mousedown\", function () {\n    let part = elem.parentNode.parentNode.parentNode.parentNode;\n    let inputs = part.querySelectorAll(\".custom-input-number\");\n    inputs.forEach(function (input) {\n      let increment;\n      if (input.max === \"100\") {\n        increment = 0.5;\n      } else {\n        increment = 0.025;\n      }\n      updateValue(input, increment);\n      let intervalId = setInterval(() => {\n        updateValue(input, increment);\n      }, 100);\n      intervalIds.push(intervalId);\n    });\n  });\n  elem.addEventListener(\"mouseup\", function () {\n    intervalIds.forEach(clearInterval);\n    intervalIds = [];\n  });\n  elem.addEventListener(\"mouseleave\", function () {\n    intervalIds.forEach(clearInterval);\n    intervalIds = [];\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll(\".part-name-buttons .bi-dash-lg\").forEach(function (elem) {\n  let intervalIds = [];\n  elem.addEventListener(\"mousedown\", function () {\n    let part = elem.parentNode.parentNode.parentNode.parentNode;\n    let inputs = part.querySelectorAll(\".custom-input-number\");\n    inputs.forEach(function (input) {\n      if (input.max === \"100\") {\n        increment = -0.5;\n      } else {\n        increment = -0.025;\n      }\n      updateValue(input, increment);\n      let intervalId = setInterval(() => {\n        updateValue(input, increment);\n      }, 100);\n      intervalIds.push(intervalId);\n    });\n  });\n  elem.addEventListener(\"mouseup\", function () {\n    intervalIds.forEach(clearInterval);\n    intervalIds = [];\n  });\n  elem.addEventListener(\"mouseleave\", function () {\n    intervalIds.forEach(clearInterval);\n    intervalIds = [];\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll('.stat-number .bi-plus-lg').forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    const input = this.previousElementSibling;\n    updateValue(input, 0.01);\n    intervalId = setInterval(() => {\n      updateValue(input, 0.01);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".engines-show\").querySelectorAll('.bi-plus-lg').forEach(button => {\n  let intervalId;\n  let bar = button.parentNode.parentNode.querySelector(\".engine-performance-progress\");\n  button.addEventListener('mousedown', function () {\n    const input = this.previousElementSibling;\n    updateValue(input, 0.5);\n    bar.style.width = input.value.split(' ')[0] + \"%\";\n    intervalId = setInterval(() => {\n      updateValue(input, 0.5);\n      bar.style.width = input.value.split(' ')[0] + \"%\";\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll('.stat-number .bi-dash-lg').forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    const input = this.nextElementSibling;\n    updateValue(input, -0.01);\n    intervalId = setInterval(() => {\n      updateValue(input, -0.01);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".engines-show\").querySelectorAll('.bi-dash-lg').forEach(button => {\n  let intervalId;\n  let bar = button.parentNode.parentNode.querySelector(\".engine-performance-progress\");\n  button.addEventListener('mousedown', function () {\n    const input = this.nextElementSibling;\n    updateValue(input, -0.5);\n    bar.style.width = input.value.split(' ')[0] + \"%\";\n    intervalId = setInterval(() => {\n      updateValue(input, -0.5);\n      bar.style.width = input.value.split(' ')[0] + \"%\";\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".performance-show\").querySelectorAll(\".new-or-existing-part div\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let parent = elem.parentNode;\n    let options = parent.querySelectorAll(\"div\");\n    options.forEach(function (option) {\n      option.classList.remove(\"active-part\");\n    });\n    elem.classList.add(\"active-part\");\n    parent.parentNode.parentNode.dataset.new = elem.dataset.new;\n  });\n});\nfunction updateValue(input, increment) {\n  let value = input.value.split(' ')[0];\n  let unit = input.value.split(' ')[1];\n  value = (parseFloat(value) + increment).toFixed(2);\n  if (value > parseFloat(input.max)) {\n    value = parseFloat(input.max).toFixed(2);\n  }\n  if (value < parseFloat(input.min)) {\n    value = parseFloat(input.min).toFixed(2);\n  }\n  input.value = value + ' ' + unit;\n}\ndocument.querySelector(\"#performanceGraphButton\").addEventListener(\"click\", function () {\n  if (!viewingGraph) {\n    document.querySelector(\"#performanceGraphButton\").classList.add(\"active\");\n    document.querySelector(\".teams-show\").classList.add(\"d-none\");\n    document.querySelector(\"#performanceGraph\").classList.remove(\"d-none\");\n  }\n  removeSelected();\n  document.querySelector(\".save-button\").classList.add(\"d-none\");\n  viewingGraph = true;\n});\ndocument.querySelectorAll(\".part-performance-title .bi-chevron-up\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let title = elem.parentNode.parentNode;\n    let list = title.parentNode.querySelector(\".parts-list\");\n    let partEditing = list.querySelector('.one-part-name.editing').parentNode.parentNode;\n    let newPart = partEditing.previousElementSibling;\n    if (!newPart) {\n      let lastValidPart = list.lastElementChild;\n      while (lastValidPart && lastValidPart.classList.contains('new-part')) {\n        lastValidPart = lastValidPart.previousElementSibling;\n      }\n      newPart = lastValidPart;\n    }\n    newPart.querySelector(\".one-part-name\").click();\n  });\n});\ndocument.querySelectorAll(\".part-performance-title .bi-chevron-down\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let title = elem.parentNode.parentNode;\n    let list = title.parentNode.querySelector(\".parts-list\");\n    let partEditing = list.querySelector('.one-part-name.editing').parentNode.parentNode;\n    let newPart = partEditing.nextElementSibling;\n\n    // Si el siguiente es 'new-part', nos movemos al primero\n    if (newPart && newPart.classList.contains('new-part')) {\n      newPart = list.firstElementChild;\n    }\n\n    // Simulamos el click en el nuevo elemento encontrado (si es válido)\n    if (newPart) {\n      newPart.querySelector(\".one-part-name\").click();\n    }\n  });\n});\n\n/**\r\n * Puts the bars of the engine to their appropiate values\r\n * @param {div} div element of the dom that contains the stats of the engine\r\n */\nfunction resetBarsEngines(div) {\n  let statsString = div.dataset.stats;\n  var statsArray = statsString.split(' ').map(function (item) {\n    return parseFloat(item, 10) / 10;\n  });\n  document.querySelector(\".engines-show\").querySelectorAll(\".custom-progress\").forEach(function (elem, index) {\n    elem.dataset.progress = statsArray[index];\n    manage_bar(elem, elem.dataset.progress);\n  });\n}\n\n/**\r\n * resets all bars to 0\r\n */\nfunction resetBars() {\n  document.querySelectorAll(\".custom-progress\").forEach(function (elem) {\n    elem.dataset.progress = 0;\n    manage_bar(elem, elem.dataset.progress);\n  });\n}\nfunction add_custom_engine(name, stats) {\n  let generalEngineDiv = document.createElement(\"div\");\n  let engineTitle = document.createElement(\"input\");\n  engineTitle.type = \"text\";\n  if (name !== \"\") {\n    engineTitle.value = name;\n  } else {\n    engineTitle.value = \"New Engine\";\n  }\n  let engineCount = document.querySelectorAll(\".custom-engines-div > div\").length;\n  let engineStatsId = `engineStats${engineCount + 1}`;\n  let engineStats = document.createElement(\"div\");\n  let caret = document.createElement(\"i\");\n  let trash = document.createElement(\"i\");\n  trash.classList.add(\"bi\", \"bi-trash\");\n  caret.classList.add(\"bi\", \"bi-caret-down-fill\", \"clicked\");\n  generalEngineDiv.classList.add(\"engine-performance\");\n  engineTitle.classList.add(\"engine-performance-title\");\n  engineStats.classList.add(\"engine-performance-stats\", \"collapse\", \"show\");\n  engineStats.id = engineStatsId;\n  caret.addEventListener(\"click\", function () {\n    caret.classList.toggle(\"clicked\");\n  });\n  trash.addEventListener(\"click\", function () {\n    generalEngineDiv.remove();\n  });\n  caret.setAttribute(\"data-bs-toggle\", \"collapse\");\n  caret.setAttribute(\"data-bs-target\", `#${engineStatsId}`);\n  for (let [key, value] of engine_stats_dict) {\n    if (game_version === 2024 && key !== 11 && key !== 12 || game_version === 2023) {\n      let stat = document.createElement(\"div\");\n      stat.classList.add(\"engine-performance-stat\");\n      stat.dataset.attribute = key;\n      let statTitle = document.createElement(\"div\");\n      statTitle.classList.add(\"part-performance-stat-title\");\n      statTitle.innerText = value;\n      let stat_number = document.createElement(\"div\");\n      stat_number.classList.add(\"stat-number\");\n      stat_number.innerHTML = '<i class=\"bi bi-dash-lg\"></i> <input type=\"text\" class=\"custom-input-number\"> <i class=\"bi bi-plus-lg\"></i>';\n      let input = stat_number.querySelector(\".custom-input-number\");\n      let bar = document.createElement(\"div\");\n      bar.classList.add(\"engine-performance-bar\");\n      let bar_progress = document.createElement(\"div\");\n      bar_progress.classList.add(\"engine-performance-progress\");\n      if (stats[key] !== undefined) {\n        input.value = stats[key] + \" %\";\n        bar_progress.style.width = stats[key] + \"%\";\n      } else {\n        input.value = \"50.0 %\";\n      }\n      stat.appendChild(statTitle);\n      stat.appendChild(stat_number);\n      bar.appendChild(bar_progress);\n      stat.appendChild(bar);\n      engineStats.appendChild(stat);\n      let less = stat_number.querySelector(\".bi-dash-lg\");\n      let intervalId;\n      less.addEventListener('mousedown', function () {\n        const input = this.nextElementSibling;\n        updateValue(input, -0.5);\n        bar_progress.style.width = input.value.split(' ')[0] + \"%\";\n        intervalId = setInterval(() => {\n          updateValue(input, -0.5);\n          bar_progress.style.width = input.value.split(' ')[0] + \"%\";\n        }, 100);\n      });\n      less.addEventListener('mouseup', function () {\n        clearInterval(intervalId);\n      });\n      less.addEventListener('mouseleave', function () {\n        clearInterval(intervalId);\n      });\n      let plus = stat_number.querySelector(\".bi-plus-lg\");\n      plus.addEventListener('mousedown', function () {\n        const input = this.previousElementSibling;\n        updateValue(input, 0.5);\n        bar_progress.style.width = input.value.split(' ')[0] + \"%\";\n        intervalId = setInterval(() => {\n          updateValue(input, 0.5);\n          bar_progress.style.width = input.value.split(' ')[0] + \"%\";\n        }, 100);\n      });\n      plus.addEventListener('mouseup', function () {\n        clearInterval(intervalId);\n      });\n      plus.addEventListener('mouseleave', function () {\n        clearInterval(intervalId);\n      });\n    }\n  }\n  generalEngineDiv.appendChild(engineTitle);\n  generalEngineDiv.appendChild(engineStats);\n  generalEngineDiv.appendChild(caret);\n  generalEngineDiv.appendChild(trash);\n  document.querySelector(\".custom-engines-div\").appendChild(generalEngineDiv);\n}\ndocument.querySelector(\"#addCustomEngineButton\").addEventListener(\"click\", function () {\n  add_custom_engine(\"\", \"\");\n});\ndocument.querySelector(\"#confirmCustomEnginesButton\").addEventListener(\"click\", function () {\n  let engines = document.querySelectorAll(\".custom-engines-div .engine-performance\");\n  let enginesData = {};\n  let unique_id = 1;\n  engines.forEach(function (engine) {\n    //id is title in lowercase\n    let engineID = 10 + unique_id;\n    let engineName = engine.querySelector(\".engine-performance-title\").value.toLowerCase();\n    let engineStats = {};\n    engine.querySelectorAll(\".engine-performance-stat\").forEach(function (stat) {\n      let attribute = stat.dataset.attribute;\n      let value = stat.querySelector(\".custom-input-number\").value.split(\" \")[0];\n      engineStats[attribute] = value;\n    });\n    enginesData[engineID] = {};\n    enginesData[engineID][\"stats\"] = engineStats;\n    enginesData[engineID][\"name\"] = engineName;\n    unique_id += 1;\n  });\n  let saveSelector = document.getElementById('saveSelector');\n  let saveSelected = saveSelector.innerHTML;\n  let data = {\n    command: \"customEngines\",\n    saveSelected: saveSelected,\n    enginesData: enginesData\n  };\n  socket.send(JSON.stringify(data));\n});\nfunction load_custom_engines(data) {\n  customEnginesCopy = data;\n  let engines = data[0];\n  let engineDropdown = document.querySelector(\"#engineMenu\");\n  engineDropdown.querySelectorAll(\"a.custom-engine\").forEach(function (elem) {\n    elem.remove();\n  });\n  document.querySelector(\".custom-engines-div\").innerHTML = \"\";\n  for (let key in engines) {\n    add_custom_engine(engines[key][\"name\"], engines[key][\"stats\"]);\n    let engineOption = document.createElement(\"a\");\n    engineOption.classList.add(\"dropdown-item\", \"custom-engine\");\n    engineOption.innerText = engines[key][\"name\"].charAt(0).toUpperCase() + engines[key][\"name\"].slice(1);\n    engineOption.dataset.engine = key;\n    engineOption.href = \"#\";\n    engineDropdown.appendChild(engineOption);\n    engineOption.addEventListener(\"click\", function () {\n      let engineid = engineOption.dataset.engine;\n      let engine = engineOption.innerText;\n      document.querySelector(\"#engineLabel\").innerText = engine;\n      document.querySelector(\"#engineButton\").dataset.value = engineid;\n    });\n  }\n}\ndocument.querySelector(\"#cancelCustomEnginesButton\").addEventListener(\"click\", function () {\n  load_custom_engines(customEnginesCopy);\n});\n\n/**\r\n * Manages the progression of the bars \r\n * @param {div} bar bar that is about to be edited\r\n * @param {int} progress number that determines the progress of the bar \r\n */\nfunction manage_bar(bar, progress) {\n  if (bar.dataset.type === \"engine\") {\n    let whiteDiv = bar.querySelector(\".white-part\");\n    let newProgress = progress * 10;\n    let newWidth = 0 + newProgress + \"%\";\n    whiteDiv.style.width = newWidth;\n  } else {\n    let grayDiv = bar.querySelector(\".gray-part\");\n    let greenDiv = bar.querySelector(\".green-part\");\n    if (progress == 0) {\n      grayDiv.style.width = \"100%\";\n      greenDiv.style.width = \"0%\";\n      bar.parentNode.querySelector(\".performance-data\").className = \"performance-data bold-font\";\n    } else if (progress > 0) {\n      grayDiv.style.width = \"100%\";\n      let newProgress = progress * 10;\n      let newWidth = 0 + newProgress + \"%\";\n      greenDiv.style.width = newWidth;\n      bar.parentNode.querySelector(\".performance-data\").className = \"performance-data bold-font positive\";\n    } else if (progress < 0) {\n      greenDiv.style.width = \"0%\";\n      let newProgress = progress * 10;\n      let newWidth = 100 + newProgress + \"%\";\n      grayDiv.style.width = newWidth;\n      bar.parentNode.querySelector(\".performance-data\").className = \"performance-data bold-font negative\";\n    }\n  }\n  bar.parentNode.querySelector(\".performance-data\").innerHTML = progress * 10 + \"%\";\n}\nfunction load_performance_graph(data) {\n  let labelsArray = [];\n  data[1].forEach(function (elem) {\n    labelsArray.push(_config__WEBPACK_IMPORTED_MODULE_0__.races_names[elem[2]]);\n  });\n  labelsArray.unshift(\"\");\n  if (typeof performanceGraph !== 'undefined' && performanceGraph !== null) {\n    performanceGraph.destroy();\n  }\n  createPerformanceChart(labelsArray);\n  performanceGraph.update();\n  let teamPerformances = {};\n\n  // Inicializar un array vacío para cada equipo\n  for (let i = 1; i <= 10; i++) {\n    teamPerformances[i] = [];\n  }\n  teamPerformances[32] = [];\n  let minValue = Number.POSITIVE_INFINITY;\n  let maxValue = Number.NEGATIVE_INFINITY;\n  let performances = [...data[0]];\n  performances.forEach(race => {\n    for (let team in race) {\n      let value = race[team];\n      teamPerformances[team].push(value);\n      if (value < minValue) {\n        minValue = value;\n      }\n      if (value > maxValue) {\n        maxValue = value;\n      }\n    }\n  });\n  let yAxisMin = minValue - 5;\n  let yAxisMax = maxValue + 5;\n  for (let team in teamPerformances) {\n    let color = _head2head__WEBPACK_IMPORTED_MODULE_1__.colors_dict[team + \"0\"];\n    let data = teamPerformances[team];\n    performanceGraph.data.datasets.push({\n      label: _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[team],\n      data: data,\n      borderColor: color,\n      backgroundColor: color,\n      pointRadius: 0,\n      fill: false,\n      tension: 0.1,\n      pointHitRadius: 7\n    });\n  }\n  performanceGraph.options.scales.y.min = yAxisMin;\n  performanceGraph.options.scales.y.max = yAxisMax;\n  performanceGraph.update();\n}\n\n/**\r\n * Creates the head to head race chart\r\n * @param {Array} labelsArray array with all the labels for the races\r\n */\nfunction createPerformanceChart(labelsArray) {\n  const dataD = {\n    labels: labelsArray\n  };\n  performanceGraph = new Chart(document.getElementById('performanceGraph'), {\n    type: 'line',\n    data: dataD,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        mode: 'index'\n      },\n      layout: {\n        padding: {\n          top: 25,\n          right: 25,\n          boottom: 20,\n          left: 10\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            }\n          }\n        },\n        y: {\n          min: 0,\n          max: 100,\n          grid: {\n            color: '#292929'\n          },\n          ticks: {\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1Bold\"\n            },\n            callback: function (value) {\n              return value.toFixed(1); // Mostrar solo un decimal\n            }\n          }\n        }\n      },\n      plugins: {\n        datalabels: {\n          display: false\n        },\n        legend: {\n          labels: {\n            boxHeight: 2,\n            boxWidth: 25,\n            color: \"#dedde6\",\n            font: {\n              family: \"Formula1\"\n            }\n          },\n          display: false\n        },\n        tooltip: {\n          titleFont: {\n            family: 'Formula1Bold',\n            size: 16\n          },\n          bodyFont: {\n            family: 'Formula1',\n            size: 14\n          }\n        }\n      }\n    }\n  });\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/performance.js?");

/***/ }),

/***/ "./src/js/predictions.js":
/*!*******************************!*\
  !*** ./src/js/predictions.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mid_grid: () => (/* binding */ mid_grid),\n/* harmony export */   resetPredict: () => (/* binding */ resetPredict)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transfers */ \"./src/js/transfers.js\");\n\n\nlet yearSel;\nlet yearProbSel;\nlet racePredicted;\nlet raceName;\nlet probRace;\nlet mid_grid = 10;\nlet max_races = 23;\nlet relative_grid = 5;\nfunction placeRaces(races) {\n  yearSel = races[0];\n  raceMenu = document.querySelector(\"#raceMenu\");\n  let dropdownRaceMenu = document.querySelector(\"#raceProbMenu\");\n  raceMenu.innerHTML = \"\";\n  races[1].forEach(function (race) {\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = \"race bold-font\";\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.textContent = names_full[_config__WEBPACK_IMPORTED_MODULE_0__.races_names[race[1]]];\n    newDiv.dataset.raceid = race[0];\n    let img = document.createElement(\"img\");\n    img.setAttribute(\"src\", _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[races_map[race[1]]]);\n    img.className = \"race-flag front-gradient\";\n    img.style.float = \"right\";\n    newDiv.appendChild(nameDiv);\n    newDiv.appendChild(img);\n    raceMenu.appendChild(newDiv);\n    newDiv.addEventListener(\"click\", function () {\n      racePredicted = newDiv.dataset.raceid;\n      if (raceMenu.querySelector(\".selected\")) {\n        raceMenu.querySelector(\".selected\").classList.remove(\"selected\");\n      }\n      newDiv.classList.add(\"selected\");\n      let data = {\n        // command: \"predictMontecarlo\",\n        command: \"predict\",\n        race: newDiv.dataset.raceid,\n        year: yearSel\n      };\n      socket.send(JSON.stringify(data));\n    });\n  });\n}\nfunction resetPredict() {\n  let raceMenu = document.querySelector(\"#raceMenu\");\n  raceMenu.innerHTML = \"\";\n  let dropdownRaceMenu = document.querySelector(\"#raceProbMenu\");\n  dropdownRaceMenu.innerHTML = \"\";\n  let header = document.querySelector(\".prob-viewer-header\");\n  header.innerHTML = \"\";\n  let driverDiv = document.createElement(\"div\");\n  driverDiv.classList = \"viewer-header-driver bold-font\";\n  driverDiv.innerText = \"Driver\";\n  let PositionDiv = document.createElement(\"div\");\n  PositionDiv.classList = \"viewer-header-position bold-font\";\n  PositionDiv.innerText = \"Pos\";\n  header.appendChild(driverDiv);\n  header.appendChild(PositionDiv);\n  let dataSect = document.querySelector(\".prob-viewer-data\");\n  dataSect.innerHTML = \"\";\n  document.querySelector(\"#predictionFirst\").querySelector(\".prediction-table-data\").innerHTML = \"\";\n  document.querySelector(\"#predictionSecond\").querySelector(\".prediction-table-data\").innerHTML = \"\";\n  document.querySelector(\"#raceProbButton\").innerText = \"Race\";\n  document.querySelector(\"#confirmPredict\").disabled = true;\n}\nfunction placeRacesInModal(races) {\n  yearProbSel = races[0];\n  let raceMenu = document.querySelector(\"#raceMenu\");\n  let dropdownRaceMenu = document.querySelector(\"#raceProbMenu\");\n  dropdownRaceMenu.innerHTML = \"\";\n  races[1].forEach(function (race) {\n    let a = document.createElement('a');\n    a.classList.add('dropdown-item');\n    a.classList.add('menu-race');\n    a.href = '#';\n    a.textContent = names_full[_config__WEBPACK_IMPORTED_MODULE_0__.races_names[race[1]]];\n    a.dataset.code = race[0];\n    let imageUrl = _config__WEBPACK_IMPORTED_MODULE_0__.codes_dict[races_map[race[1]]];\n    let img2 = document.createElement('img');\n    img2.src = imageUrl;\n    img2.classList.add('menuFlag');\n    a.appendChild(img2);\n    a.addEventListener(\"click\", function () {\n      probRace = a.dataset.code;\n      document.querySelector(\"#raceProbButton\").innerText = a.textContent;\n      document.querySelector(\"#confirmPredict\").disabled = false;\n    });\n    dropdownRaceMenu.appendChild(a);\n  });\n}\nfunction manageProgress(prog) {\n  let bar = document.querySelector(\"#predictBar\");\n  let val = \"width: \" + prog[0] + \"% !important;\";\n  bar.setAttribute(\"style\", val);\n  document.querySelector(\".indicator\").innerText = prog[0] + \"%\";\n}\nfunction resetBar() {\n  document.querySelector(\".bar-and-indicator\").style.opacity = 0;\n  let bar = document.querySelector(\"#predictBar\");\n  let val = \"width: 0% !important;\";\n  bar.setAttribute(\"style\", val);\n  document.querySelector(\".indicator\").innerText = \"0%\";\n}\ndocument.querySelector(\"#confirmPredict\").addEventListener(\"click\", function () {\n  let data = {\n    command: \"predictMontecarlo\",\n    race: probRace,\n    year: yearProbSel\n  };\n  socket.send(JSON.stringify(data));\n  document.querySelector(\".bar-and-indicator\").style.opacity = 1;\n  document.querySelector(\"#cancelPredict\").disabled = true;\n  document.querySelector(\"#confirmPredict\").disabled = true;\n});\ndocument.querySelector(\"#predictionpill\").addEventListener(\"click\", function () {\n  document.querySelector(\"#mainPred\").classList.remove(\"d-none\");\n  document.querySelector(\"#mainProb\").classList.add(\"d-none\");\n  document.querySelector(\"#yearPredictionButton\").classList.remove(\"d-none\");\n  document.querySelector(\"#predictButton\").classList.add(\"d-none\");\n  document.querySelector(\"#predictConfigContent\").classList.add(\"d-none\");\n});\ndocument.querySelector(\"#probpill\").addEventListener(\"click\", function () {\n  document.querySelector(\"#mainPred\").classList.add(\"d-none\");\n  document.querySelector(\"#mainProb\").classList.remove(\"d-none\");\n  document.querySelector(\"#yearPredictionButton\").classList.add(\"d-none\");\n  document.querySelector(\"#predictButton\").classList.remove(\"d-none\");\n  document.querySelector(\"#predictConfigContent\").classList.remove(\"d-none\");\n});\nfunction loadMontecarlo(data) {\n  let bar = document.querySelector(\"#predictBar\");\n  bar.setAttribute(\"style\", \"width: 100%\");\n  document.querySelector(\".indicator\").innerText = \"100%\";\n  let drivers = data[0];\n  setTimeout(function () {\n    document.querySelector(\"#cancelPredict\").disabled = false;\n    document.querySelector(\"#confirmPredict\").disabled = false;\n    document.querySelector(\"#cancelPredict\").click();\n    resetBar();\n  }, 500);\n  document.querySelector(\"#mainProb\").classList.remove(\"d-none\");\n  document.querySelector(\"#predictConfigContent\").innerText = document.querySelector(\"#yearPredictionModalButton\").textContent + \" \" + document.querySelector(\"#raceProbButton\").textContent;\n  drivers = orderPercent(drivers);\n  let header = document.querySelector(\".prob-viewer-header\");\n  header.innerHTML = \"\";\n  let driverDiv = document.createElement(\"div\");\n  driverDiv.classList = \"viewer-header-driver bold-font\";\n  driverDiv.innerText = \"Driver\";\n  let PositionDiv = document.createElement(\"div\");\n  PositionDiv.classList = \"viewer-header-position bold-font\";\n  PositionDiv.innerText = \"Pos\";\n  header.appendChild(driverDiv);\n  header.appendChild(PositionDiv);\n  let dataSect = document.querySelector(\".prob-viewer-data\");\n  dataSect.innerHTML = \"\";\n  drivers[0].slice(4).forEach(function (elem, index) {\n    let headerPos = document.createElement(\"div\");\n    headerPos.className = \"viewer-header-pos bold-font\";\n    headerPos.innerText = index + 1;\n    header.appendChild(headerPos);\n  });\n  drivers.forEach(function (elem, index) {\n    let row = document.createElement(\"div\");\n    row.classList = \"prob-viewer-row\";\n    if (index % 2 === 0) {\n      row.classList.add(\"prob-row-even\");\n    } else {\n      row.classList.add(\"prob-row-odd\");\n    }\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.classList = \"viewer-header-driver\";\n    let name = elem[1].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    spanLastName.dataset.teamid = elem[2];\n    row.dataset.teamid = elem[2];\n    row.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[elem[2]] + \"-transparent\");\n    spanName.textContent = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    spanLastName.classList.add(\"bold-font\");\n    manageColor(spanLastName, spanLastName);\n    nameDiv.appendChild(spanName);\n    nameDiv.appendChild(spanLastName);\n    let position = document.createElement(\"div\");\n    position.classList = \"viewer-header-position bold-font\";\n    position.innerText = elem[3];\n    row.appendChild(nameDiv);\n    row.appendChild(position);\n    elem.slice(4).forEach(function (perc) {\n      let percDiv = document.createElement(\"div\");\n      percDiv.className = \"viewer-header-data\";\n      if (perc !== 0) {\n        percDiv.innerText = Number(perc.toFixed(2));\n      }\n      if (perc < 25) {\n        if (perc !== 0) {\n          percDiv.classList.add(\"i0-25\");\n        }\n      } else if (perc < 50) {\n        percDiv.classList.add(\"i25-50\");\n      } else if (perc < 70) {\n        percDiv.classList.add(\"i50-75\");\n      } else {\n        percDiv.classList.add(\"i75-100\");\n      }\n      row.appendChild(percDiv);\n    });\n    dataSect.appendChild(row);\n  });\n}\nfunction orderDrivers(lista, camp) {\n  return lista.sort((a, b) => a[camp] - b[camp]);\n}\nfunction orderPercent(lista) {\n  lista.sort(function (a, b) {\n    return a[3] - b[3];\n  });\n  return lista;\n}\nfunction predictDrivers(drivers) {\n  document.querySelector(\"#predictionFirst\").querySelector(\".prediction-table-data\").innerHTML = \"\";\n  document.querySelector(\"#predictionSecond\").querySelector(\".prediction-table-data\").innerHTML = \"\";\n  let next_race = drivers[0];\n  let list;\n  let nextRace = Number(racePredicted) === Number(next_race[0]);\n  if (nextRace) {\n    list = orderDrivers(drivers[1], \"Prediction\");\n  } else {\n    list = drivers[1];\n  }\n  list.forEach(function (driver) {\n    let mainDiv = document.createElement(\"div\");\n    mainDiv.className = \"driver-info\";\n    let name = driver.Name.split(\" \");\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.classList = \"driver-prediction\";\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    mainDiv.dataset.teamid = driver.Team;\n    mainDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver.Team] + \"-transparent\");\n    spanLastName.dataset.teamid = driver.Team;\n    spanName.textContent = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    spanLastName.classList.add(\"bold-font\");\n    manageColor(spanLastName, spanLastName);\n    nameDiv.appendChild(spanName);\n    nameDiv.appendChild(spanLastName);\n    mainDiv.appendChild(nameDiv);\n    let positionDiv = document.createElement(\"div\");\n    positionDiv.className = \"position-prediction bold-font\";\n    let provisional = driver.result;\n    let positionNum = document.createElement(\"div\");\n    if (provisional === 1) {\n      provisional = provisional + \"st\";\n      positionNum.style.color = \"#FDE06B\";\n    } else if (provisional === 2) {\n      provisional = provisional + \"nd\";\n      positionNum.style.color = \"#AEB2B8\";\n    } else if (provisional === 3) {\n      provisional = provisional + \"rd\";\n      positionNum.style.color = \"#d7985a\";\n    } else {\n      provisional = provisional + \"th\";\n    }\n    let positionDelta = document.createElement(\"div\");\n    positionNum.textContent = provisional;\n    let delta = driver.Prediction - driver.result;\n    if (delta > 0) {\n      positionDelta.innerText = \"+\" + delta;\n      positionDelta.style.color = \"#5bd999\";\n    } else if (delta < 0) {\n      positionDelta.innerText = delta;\n      positionDelta.style.color = \"#e95656\";\n    } else if (delta === 0) {\n      positionDelta.innerText = \"\\u00A0\" + \" =\";\n    }\n    positionDiv.appendChild(positionNum);\n    positionDiv.appendChild(positionDelta);\n    let predictionDiv = document.createElement(\"div\");\n    predictionDiv.className = \"prediction-prediction bold-font\";\n    provisional = driver.Prediction;\n    if (provisional === 1) {\n      provisional = provisional + \"st\";\n      predictionDiv.style.color = \"#FDE06B\";\n    } else if (provisional === 2) {\n      provisional = provisional + \"nd\";\n      predictionDiv.style.color = \"#AEB2B8\";\n    } else if (provisional === 3) {\n      provisional = provisional + \"rd\";\n      predictionDiv.style.color = \"#d7985a\";\n    } else {\n      provisional = provisional + \"th\";\n    }\n    predictionDiv.textContent = provisional;\n    mainDiv.appendChild(predictionDiv);\n    mainDiv.appendChild(positionDiv);\n    if (nextRace) {\n      if (driver.Prediction <= mid_grid) {\n        document.querySelector(\"#predictionFirst\").querySelector(\".prediction-table-data\").appendChild(mainDiv);\n      } else if (driver.Prediction > mid_grid) {\n        document.querySelector(\"#predictionSecond\").querySelector(\".prediction-table-data\").appendChild(mainDiv);\n      }\n    } else {\n      if (driver.result <= mid_grid && driver.result != 0) {\n        document.querySelector(\"#predictionFirst\").querySelector(\".prediction-table-data\").appendChild(mainDiv);\n      } else if (driver.result > mid_grid && driver.result != 0) {\n        document.querySelector(\"#predictionSecond\").querySelector(\".prediction-table-data\").appendChild(mainDiv);\n      }\n    }\n  });\n  if (nextRace) {\n    document.querySelectorAll(\".position-prediction\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n    document.querySelectorAll(\".driver-prediction\").forEach(function (elem) {\n      elem.style.width = \"75%\";\n    });\n  } else {\n    document.querySelectorAll(\".position-prediction\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    document.querySelectorAll(\".driver-prediction\").forEach(function (elem) {\n      elem.style.width = \"50%\";\n    });\n  }\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/predictions.js?");

/***/ }),

/***/ "./src/js/renderer.js":
/*!****************************!*\
  !*** ./src/js/renderer.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   game_version: () => (/* binding */ game_version)\n/* harmony export */ });\n/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! marked */ \"./node_modules/marked/lib/marked.esm.js\");\n/* harmony import */ var _teams__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./teams */ \"./src/js/teams.js\");\n/* harmony import */ var _seasonViewer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./seasonViewer */ \"./src/js/seasonViewer.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transfers */ \"./src/js/transfers.js\");\n/* harmony import */ var _calendar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calendar */ \"./src/js/calendar.js\");\n/* harmony import */ var _performance__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./performance */ \"./src/js/performance.js\");\n/* harmony import */ var _predictions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./predictions */ \"./src/js/predictions.js\");\n/* harmony import */ var _stats__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stats */ \"./src/js/stats.js\");\n/* harmony import */ var _head2head__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./head2head */ \"./src/js/head2head.js\");\n\n\n\n\n\n\n\n\n\n\nlet conn = 0;\nlet game_version = 2023;\nlet custom_team = false;\nlet customIconPath = null;\nlet firstShow = false;\nlet configCopy;\nconst socket = new WebSocket('ws://localhost:8765/');\n/**\r\n * When the socket is opened sends a connect message to the backend\r\n */\nsocket.onopen = () => {\n  //console.log('Conexión establecida.');\n  let data = {\n    command: \"connect\"\n  };\n  socket.send(JSON.stringify(data));\n};\nlet versionNow;\nconst versionPanel = document.querySelector('.version-panel');\nconst parchModalTitle = document.getElementById(\"patchModalTitle\");\nconst repoOwner = 'IUrreta';\nconst repoName = 'DatabaseEditor';\n\n/**\r\n * get the patch notes from the actual version fro the github api\r\n */\nasync function getPatchNotes() {\n  try {\n    if (versionNow.slice(-3) !== \"dev\") {\n      let response = await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/releases/tags/${versionNow}`);\n      let data = await response.json();\n      let changes = data.body;\n      let changesHTML = (0,marked__WEBPACK_IMPORTED_MODULE_0__.marked)(changes);\n      patchNotesBody.innerHTML = changesHTML;\n      let h1Elements = patchNotesBody.querySelectorAll(\"h1\");\n      h1Elements.forEach(function (h1Element) {\n        let h4Element = document.createElement(\"h4\");\n        h4Element.textContent = h1Element.textContent;\n        h4Element.classList.add(\"bold-font\");\n        patchNotesBody.replaceChild(h4Element, h1Element);\n      });\n      let h2Elements = patchNotesBody.querySelectorAll(\"h2\");\n      h2Elements.forEach(function (h1Element) {\n        let h4Element = document.createElement(\"h4\");\n        h4Element.textContent = h1Element.textContent;\n        h4Element.classList.add(\"bold-font\");\n        patchNotesBody.replaceChild(h4Element, h1Element);\n      });\n    }\n  } catch {\n    console.log(\"Couldn't find patch notes\");\n  }\n}\n\n/**\r\n * Places and manages the notifications that appear in the tool\r\n * @param {string} noti message of the notification\r\n * @param {bool} error if the notification is an error or not\r\n */\nfunction update_notifications(noti, code) {\n  let newNoti;\n  newNoti = document.createElement('div');\n  newNoti.className = 'notification';\n  newNoti.textContent = noti;\n  let toast = createToast(noti, code);\n  setTimeout(function () {\n    toast.classList.remove(\"myShow\");\n  }, 300);\n  notificationPanel.appendChild(toast);\n  if (code !== \"error\") {\n    setTimeout(function () {\n      toast.classList.add(\"hide\");\n      setTimeout(function () {\n        notificationPanel.removeChild(toast);\n      }, 280);\n    }, 4000);\n  }\n}\n\n/**\r\n * Creates the toast with the message and the error status\r\n * @param {string} msg string with the notification message\r\n * @param {boolean} err if it's an error or not\r\n * @returns \r\n */\nfunction createToast(msg, cod) {\n  let toastFull = document.createElement('div');\n  let toastIcon = document.createElement('div');\n  let toastBodyDiv = document.createElement('div');\n  let generalDiv = document.createElement('div');\n  let icon = document.createElement('i');\n  let cross = document.createElement('i');\n  generalDiv.classList.add('d-flex', \"align-items-center\");\n  // Asignar clases y atributos\n  toastFull.classList.add('toast', \"d-flex\", \"myShow\", \"d-block\", \"custom-toast\");\n  toastFull.style.flexDirection = \"column\";\n  toastFull.setAttribute('role', 'alert');\n  toastFull.setAttribute('aria-live', 'assertive');\n  toastFull.setAttribute('aria-atomic', 'true');\n  toastIcon.classList.add(\"toast-icon\");\n  if (cod === \"ok\") {\n    icon.className = \"bi bi-check-circle\";\n    toastIcon.classList.add(\"success\");\n  } else if (cod === \"error\" || cod === \"lighterror\") {\n    icon.className = \"bi bi-x-circle\";\n    toastIcon.classList.add(\"error\");\n  } else if (cod === \"monaco\") {\n    icon.className = \"bi bi-heartbreak\";\n    toastIcon.classList.add(\"error\");\n  }\n  toastIcon.appendChild(icon);\n  toastBodyDiv.classList.add('d-flex', 'toast-body', \"custom-toast-body\");\n  toastBodyDiv.textContent = msg;\n  toastBodyDiv.style.opacity = \"1\";\n  toastBodyDiv.style.color = \"white\";\n  toastBodyDiv.style.zIndex = \"6\";\n  generalDiv.appendChild(toastIcon);\n  generalDiv.appendChild(toastBodyDiv);\n  toastFull.appendChild(generalDiv);\n  toastFull.appendChild(cross);\n  cross.className = \"bi bi-x custom-toast-cross\";\n  cross.addEventListener(\"click\", function () {\n    toastFull.classList.add(\"hide\");\n    setTimeout(function () {\n      notificationPanel.removeChild(toastFull);\n    }, 280);\n  });\n  return toastFull;\n}\nfunction editModeHandler() {\n  let stats = \"\";\n  document.querySelectorAll(\".elegible\").forEach(function (elem) {\n    stats += elem.value + \" \";\n  });\n  stats = stats.slice(0, -1);\n  let id;\n  if (document.querySelector(\".clicked\").dataset.driverid) {\n    id = document.querySelector(\".clicked\").dataset.driverid;\n  }\n  let driverName = getName(document.querySelector(\".clicked .name-div-edit-stats\"));\n  document.querySelector(\".clicked\").dataset.stats = stats;\n  let globalMentality = 2;\n  let mentality = -1;\n  if (document.querySelector(\".clicked\").dataset.mentality0) {\n    mentality = \"\";\n    document.querySelectorAll(\".mentality-level-indicator\").forEach(function (elem, index) {\n      mentality += elem.dataset.value + \" \";\n      document.querySelector(\".clicked\").dataset[\"mentality\" + index] = elem.dataset.value;\n      globalMentality += parseInt(elem.dataset.value);\n    });\n    globalMentality = Math.floor(globalMentality / 3);\n  }\n  document.querySelector(\".clicked\").dataset.globalMentality = globalMentality;\n  let new_ovr = calculateOverall(stats, _stats__WEBPACK_IMPORTED_MODULE_8__.typeOverall, mentality_to_global_menatality[globalMentality]);\n  document.querySelector(\".clicked\").childNodes[1].childNodes[0].textContent = \"\";\n  if (new_ovr[1] !== new_ovr[0]) {\n    document.querySelector(\".clicked\").childNodes[1].childNodes[0].textContent = new_ovr[1];\n  }\n  document.querySelector(\".clicked\").childNodes[1].childNodes[1].textContent = new_ovr[0];\n  if (globalMentality < 2) {\n    document.querySelector(\".clicked\").childNodes[1].childNodes[0].className = \"mentality-small-ovr-positive\";\n  } else if (globalMentality > 2) {\n    document.querySelector(\".clicked\").childNodes[1].childNodes[0].className = \"mentality-small-ovr-negative\";\n  }\n  let inputArray = document.querySelectorAll(\".elegible\");\n  inputArray.forEach(function (input, index) {\n    manage_mentality_modifiers(input, mentality_to_global_menatality[globalMentality]);\n  });\n  let diff = parseInt(new_ovr[1]) - parseInt(new_ovr[0]);\n  let mentalitydiff = document.querySelector(\".mentality-change-ovr\");\n  if (diff > 0) {\n    mentalitydiff.textContent = \"+\" + diff;\n    mentalitydiff.className = \"mentality-change-ovr positive\";\n  } else if (diff < 0) {\n    mentalitydiff.textContent = diff;\n    mentalitydiff.className = \"mentality-change-ovr negative\";\n  } else {\n    mentalitydiff.textContent = \"\";\n    mentalitydiff.className = \"mentality-change-ovr\";\n  }\n  let retirement = document.querySelector(\".actual-retirement\").textContent.split(\" \")[1];\n  let age = document.querySelector(\".actual-age\").textContent.split(\" \")[1];\n  document.querySelector(\".clicked\").dataset.retirement = retirement;\n  let ageGap = parseInt(document.querySelector(\".clicked\").dataset.age - age);\n  document.querySelector(\".clicked\").dataset.age = age;\n  let newName = document.querySelector(\"#driverStatsTitle\").value;\n  if (newName === document.querySelector(\".clicked\").dataset.name) {\n    newName = \"-1\";\n  } else {\n    update_name(id, newName);\n  }\n  let newCode = document.querySelector(\"#driverCode\").value;\n  if (newCode === document.querySelector(\".clicked\").dataset.code) {\n    newCode = \"-1\";\n  } else {\n    document.querySelector(\".clicked\").dataset.driverCode = newCode;\n  }\n  let driverNum = document.querySelector(\"#numberButton .front-gradient\").textContent;\n  let wants1, superLicense, isRetired;\n  document.querySelector(\".clicked\").dataset.number = driverNum;\n  if (document.querySelector(\"#driverNumber1\").checked) {\n    wants1 = 1;\n    document.querySelector(\".clicked\").dataset.numWC = 1;\n  } else {\n    wants1 = 0;\n    document.querySelector(\".clicked\").dataset.numWC = 0;\n  }\n  if (document.querySelector(\"#retiredInput\").checked) {\n    isRetired = 1;\n    document.querySelector(\".clicked\").dataset.isRetired = 1;\n  } else {\n    isRetired = 0;\n    document.querySelector(\".clicked\").dataset.isRetired = 0;\n  }\n  document.querySelector(\".clicked\").dataset.numWC = wants1;\n  if (document.getElementById(\"superLicense\").checked) {\n    superLicense = 1;\n    document.querySelector(\".clicked\").dataset.superLicense = 1;\n  } else {\n    superLicense = 0;\n    document.querySelector(\".clicked\").dataset.superLicense = 0;\n  }\n  let marketability = document.getElementById(\"marketabilityInput\").value;\n  let dataStats = {\n    command: \"editStats\",\n    driverID: id,\n    driver: driverName,\n    statsArray: stats,\n    typeStaff: typeEdit,\n    retirement: retirement,\n    age: ageGap,\n    isRetired: isRetired,\n    driverNum: driverNum,\n    wants1: wants1,\n    mentality: mentality,\n    superLicense: superLicense,\n    marketability: marketability,\n    newName: newName,\n    newCode: newCode\n  };\n  socket.send(JSON.stringify(dataStats));\n}\nfunction calendarModeHandler() {\n  let dataCodesString = '';\n  document.querySelectorAll(\".race-calendar\").forEach(race => {\n    dataCodesString += race.dataset.trackid.toString() + race.dataset.rainP.toString() + race.dataset.rainQ.toString() + race.dataset.rainR.toString() + race.dataset.type.toString() + race.dataset.state.toString() + ' ';\n  });\n  dataCodesString = dataCodesString.trim();\n  let dataCalendar = {\n    command: \"calendar\",\n    calendarCodes: dataCodesString\n  };\n  socket.send(JSON.stringify(dataCalendar));\n}\nfunction teamsModeHandler() {\n  let seasonObjData = document.querySelector(\"#seasonObjectiveInput\").value;\n  let longTermData = longTermObj;\n  let longTermYearData = document.querySelector(\"#longTermInput\").value;\n  let teamBudgetData = document.querySelector(\"#teamBudgetInput\").value.replace(/[$,]/g, \"\");\n  let costCapTransactionData = originalCostCap - document.querySelector(\"#costCapInput\").value.replace(/[$,]/g, \"\");\n  let confidenceData = document.querySelector(\"#confidenceInput\").value;\n  let facilitiesData = gather_team_data();\n  let pitCrew = gather_pit_crew();\n  let engine = document.querySelector(\"#engineButton\").dataset.value;\n  let saveSelected = document.getElementById('saveSelector').innerHTML;\n  let data = {\n    command: \"editTeam\",\n    teamID: teamCod,\n    facilities: facilitiesData,\n    seasonObj: seasonObjData,\n    longTermObj: longTermData,\n    longTermYear: longTermYearData,\n    teamBudget: teamBudgetData,\n    costCapEdit: costCapTransactionData,\n    confidence: confidenceData,\n    pitCrew: pitCrew,\n    engine: engine,\n    teamName: default_dict[teamCod],\n    saveSelected: saveSelected\n  };\n  socket.send(JSON.stringify(data));\n}\nfunction performanceModeHandler() {\n  let data;\n  if (teamsEngine === \"teams\") {\n    let parts = {};\n    let n_parts_designs = {};\n    let loadouts = {};\n    document.querySelectorAll(\".part-performance\").forEach(function (elem) {\n      let part = elem.dataset.part;\n      let partID = elem.dataset.partid;\n      let loadout1 = elem.dataset.loadout1;\n      let loadout2 = elem.dataset.loadout2;\n      let stats = {};\n      elem.querySelectorAll(\".part-performance-stat\").forEach(function (stat) {\n        if (stat.dataset.attribute !== \"-1\") {\n          let statNum = stat.dataset.attribute;\n          let value = stat.querySelector(\"input\").value.split(\" \")[0];\n          stats[statNum] = value;\n        }\n      });\n      stats[\"designEditing\"] = elem.querySelector(\".part-subtitle\").dataset.editing;\n      parts[part] = stats;\n      loadouts[partID] = [loadout1, loadout2];\n    });\n    document.querySelectorAll(\".one-part\").forEach(function (elem) {\n      let designID = elem.querySelector(\".one-part-name\").dataset.designId;\n      let number = elem.querySelector(\".n-parts\").innerText.split(\"x\")[1];\n      n_parts_designs[designID] = number;\n    });\n    data = {\n      command: \"editPerformance\",\n      teamID: teamSelected,\n      parts: parts,\n      n_parts_designs: n_parts_designs,\n      loadouts: loadouts,\n      teamName: document.querySelector(\".selected\").dataset.teamname\n    };\n  } else if (teamsEngine === \"engines\") {\n    let engineData = gather_engines_data();\n    data = {\n      command: \"editEngine\",\n      engines: engineData\n    };\n  }\n  socket.send(JSON.stringify(data));\n}\nfunction first_show_animation() {\n  let button = document.querySelector(\".save-button\");\n  if (!firstShow) {\n    firstShow = true;\n    button.classList.add(\"first-show\");\n    setTimeout(function () {\n      button.classList.remove('first-show');\n    }, 3000);\n  }\n}\nfunction manageSaveButton(show, mode) {\n  let button = document.querySelector(\".save-button\");\n  button.removeEventListener(\"click\", editModeHandler);\n  button.removeEventListener(\"click\", calendarModeHandler);\n  button.removeEventListener(\"click\", teamsModeHandler);\n  button.removeEventListener(\"click\", performanceModeHandler);\n  if (!show) {\n    button.classList.add(\"d-none\");\n  } else {\n    button.classList.remove(\"d-none\");\n    first_show_animation();\n  }\n  if (mode === \"stats\") {\n    button.addEventListener(\"click\", editModeHandler);\n  } else if (mode === \"calendar\") {\n    button.addEventListener(\"click\", calendarModeHandler);\n  } else if (mode === \"teams\") {\n    button.addEventListener(\"click\", teamsModeHandler);\n  } else if (mode === \"performance\") {\n    button.addEventListener(\"click\", performanceModeHandler);\n  }\n}\ndocument.addEventListener('DOMContentLoaded', function () {\n  const names_configs = {\n    \"visarb\": \"VISA CASHAPP RB\",\n    \"toyota\": \"TOYOTA\",\n    \"hugo\": \"HUGO BOSS\",\n    \"alphatauri\": \"ALPHA TAURI\",\n    \"brawn\": \"BRAWN GP\",\n    \"porsche\": \"PORSCHE\",\n    \"alpine\": \"ALPINE\",\n    \"renault\": \"RENAULT\",\n    \"andretti\": \"ANDRETTI\",\n    \"lotus\": \"LOTUS\",\n    \"alfa\": \"ALFA ROMEO\",\n    \"audi\": \"AUDI\",\n    \"sauber\": \"SAUBER\",\n    \"stake\": \"STAKE SAUBER\"\n  };\n  const pretty_names = {\n    \"visarb\": \"Visa Cashapp RB\",\n    \"toyota\": \"Toyota\",\n    \"hugo\": \"Hugo Boss\",\n    \"alphatauri\": \"Alpha Tauri\",\n    \"brawn\": \"Brawn GP\",\n    \"porsche\": \"Porsche\",\n    \"alpine\": \"Alpine\",\n    \"renault\": \"Renault\",\n    \"andretti\": \"Andretti\",\n    \"lotus\": \"Lotus\",\n    \"alfa\": \"Alfa Romeo\",\n    \"audi\": \"Audi\",\n    \"sauber\": \"Sauber\",\n    \"stake\": \"Stake Sauber\"\n  };\n  const abreviations_for_replacements = {\n    \"visarb\": \"VCARB\",\n    \"toyota\": \"TOY\",\n    \"hugo\": \"HUGO\",\n    \"alphatauri\": \"AT\",\n    \"brawn\": \"BGP\",\n    \"porsche\": \"POR\",\n    \"alpine\": \"ALP\",\n    \"renault\": \"REN\",\n    \"andretti\": \"AND\",\n    \"lotus\": \"LOT\",\n    \"alfa\": \"ALFA\",\n    \"audi\": \"AUDI\",\n    \"sauber\": \"SAU\",\n    \"stake\": \"STK\"\n  };\n  const logos_configs = {\n    \"visarb\": \"../assets/images/visarb.png\",\n    \"toyota\": \"../assets/images/toyota.png\",\n    \"hugo\": \"../assets/images/hugoboss.png\",\n    \"alphatauri\": \"../assets/images/alphatauri.png\",\n    \"brawn\": \"../assets/images/brawn.png\",\n    \"porsche\": \"../assets/images/porsche.png\",\n    \"alpine\": \"../assets/images/alpine.png\",\n    \"renault\": \"../assets/images/renault.png\",\n    \"andretti\": \"../assets/images/andretti.png\",\n    \"lotus\": \"../assets/images/lotus.png\",\n    \"alfa\": \"../assets/images/alfaromeo.png\",\n    \"audi\": \"../assets/images/audi.png\",\n    \"sauber\": \"../assets/images/sauber.png\",\n    \"stake\": \"../assets/images/kick.png\"\n  };\n  const logos_classes_configs = {\n    \"visarb\": \"visarblogo\",\n    \"toyota\": \"toyotalogo\",\n    \"hugo\": \"hugologo\",\n    \"alphatauri\": \"alphataurilogo\",\n    \"porsche\": \"porschelogo\",\n    \"brawn\": \"brawnlogo\",\n    \"alpine\": \"alpinelogo\",\n    \"renault\": \"ferrarilogo\",\n    \"andretti\": \"andrettilogo\",\n    \"lotus\": \"lotuslogo\",\n    \"alfa\": \"alfalogo\",\n    \"audi\": \"audilogo\",\n    \"sauber\": \"sauberlogo\",\n    \"stake\": \"alfalogo\"\n  };\n  const driverTransferPill = document.getElementById(\"transferpill\");\n  const editStatsPill = document.getElementById(\"statspill\");\n  const CalendarPill = document.getElementById(\"calendarpill\");\n  const carPill = document.getElementById(\"carpill\");\n  const viewPill = document.getElementById(\"viewerpill\");\n  const h2hPill = document.getElementById(\"h2hpill\");\n  const constructorsPill = document.getElementById(\"constructorspill\");\n  const predictPill = document.getElementById(\"predictpill\");\n  const editorPill = document.getElementById(\"editorPill\");\n  const gamePill = document.getElementById(\"gamePill\");\n  const driverTransferDiv = document.getElementById(\"driver_transfers\");\n  const editStatsDiv = document.getElementById(\"edit_stats\");\n  const customCalendarDiv = document.getElementById(\"custom_calendar\");\n  const carPerformanceDiv = document.getElementById(\"car_performance\");\n  const viewDiv = document.getElementById(\"season_viewer\");\n  const h2hDiv = document.getElementById(\"head2head_viewer\");\n  const teamsDiv = document.getElementById(\"edit_teams\");\n  const predictDiv = document.getElementById(\"predict_results\");\n  const patchNotesBody = document.getElementById(\"patchNotesBody\");\n  const selectImageButton = document.getElementById('selectImage');\n  const scriptsArray = [predictDiv, h2hDiv, viewDiv, driverTransferDiv, editStatsDiv, customCalendarDiv, carPerformanceDiv, teamsDiv];\n  const dropDownMenu = document.getElementById(\"dropdownMenu\");\n  const notificationPanel = document.getElementById(\"notificationPanel\");\n  const logButton = document.getElementById(\"logFileButton\");\n  const status = document.querySelector(\".status-info\");\n  const updateInfo = document.querySelector(\".update-info\");\n  const noNotifications = [\"Custom Engines fetched\", \"Cars fetched\", \"Part values fetched\", \"Parts stats fetched\", \"24 Year\", \"Game Year\", \"Performance fetched\", \"Season performance fetched\", \"Config\", \"ERROR\", \"Montecarlo fetched\", \"TeamData Fetched\", \"Progress\", \"JIC\", \"Calendar fetched\", \"Contract fetched\", \"Staff Fetched\", \"Engines fetched\", \"Results fetched\", \"Year fetched\", \"Numbers fetched\", \"H2H fetched\", \"DriversH2H fetched\", \"H2HDriver fetched\", \"Retirement fetched\", \"Prediction Fetched\", \"Events to Predict Fetched\", \"Events to Predict Modal Fetched\"];\n  let difficulty_dict = {\n    \"-2\": \"Custom\",\n    0: \"default\",\n    1: \"reduced weight\",\n    2: \"extra-hard\",\n    3: \"brutal\",\n    4: \"unfair\",\n    5: \"insane\",\n    6: \"impossible\"\n  };\n  let inverted_difficulty_dict = {\n    \"disabled\": -1,\n    \"default\": 0,\n    \"reduced weight\": 1,\n    \"extra-hard\": 2,\n    \"brutal\": 3,\n    \"unfair\": 4,\n    \"insane\": 5,\n    \"impossible\": 6\n  };\n  let difcultyCustom = \"default\";\n  const messageHandlers = {\n    \"ERROR\": message => {\n      update_notifications(message[1], \"error\");\n      manage_status(0);\n    },\n    \"JIC\": message => {\n      if (conn === 0) {\n        console.log(\"JIC DOES ITS THING\");\n        let data = {\n          command: \"connect\"\n        };\n        socket.send(JSON.stringify(data));\n      }\n    },\n    \"Connected Succesfully\": message => {\n      conn = 1;\n      load_saves(message);\n      clearTimeout(connectionTimeout);\n      manage_status(1);\n      check_version();\n      (0,_stats__WEBPACK_IMPORTED_MODULE_8__.listeners_plusLess)();\n    },\n    \"Save Loaded Succesfully\": message => {\n      (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.remove_drivers)();\n      (0,_stats__WEBPACK_IMPORTED_MODULE_8__.removeStatsDrivers)();\n      (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.place_drivers)(message.slice(1));\n      (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.sortList)(\"free-drivers\");\n      (0,_stats__WEBPACK_IMPORTED_MODULE_8__.place_drivers_editStats)(message.slice(1));\n    },\n    \"Staff Fetched\": message => {\n      (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.place_staff)(message.slice(1));\n      (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.sortList)(\"free-staff\");\n      (0,_stats__WEBPACK_IMPORTED_MODULE_8__.place_staff_editStats)(message.slice(1));\n    },\n    \"Calendar fetched\": message => {\n      (0,_calendar__WEBPACK_IMPORTED_MODULE_5__.load_calendar)(message.slice(1));\n    },\n    \"Engines fetched\": message => {\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.manage_engineStats)(message.slice(1));\n    },\n    \"Contract fetched\": message => {\n      manage_modal(message.slice(1));\n    },\n    \"Year fetched\": message => {\n      (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.generateYearsMenu)(message.slice(1));\n    },\n    \"Numbers fetched\": message => {\n      (0,_transfers__WEBPACK_IMPORTED_MODULE_4__.loadNumbers)(message.slice(1));\n    },\n    \"H2H fetched\": message => {\n      sprintsListeners();\n      racePaceListener();\n      qualiPaceListener();\n      manage_h2h_bars(message.slice(1)[0]);\n    },\n    \"DriversH2H fetched\": message => {\n      load_drivers_h2h(message.slice(1));\n    },\n    \"H2HDriver fetched\": message => {\n      load_labels_initialize_graphs(message.slice(1));\n    },\n    \"Results fetched\": message => {\n      new_drivers_table(message[1]);\n      new_load_drivers_table(message.slice(2));\n      new_teams_table(message[1]);\n      new_load_teams_table(message.slice(2));\n    },\n    \"TeamData Fetched\": message => {\n      fillLevels(message.slice(1));\n    },\n    \"Events to Predict Fetched\": message => {\n      placeRaces(message.slice(1));\n    },\n    \"Events to Predict Modal Fetched\": message => {\n      placeRacesInModal(message.slice(1));\n    },\n    \"Prediction Fetched\": message => {\n      predictDrivers(message.slice(1));\n    },\n    \"Montecarlo Fetched\": message => {\n      loadMontecarlo(message.slice(1));\n    },\n    \"Progress\": message => {\n      manageProgress(message.slice(1));\n    },\n    \"Config\": message => {\n      manage_config(message.slice(1));\n    },\n    \"24 Year\": message => {\n      manage_config(message.slice(1), true);\n    },\n    \"Performance fetched\": message => {\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_performance)(message[1]);\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_attributes)(message[2]);\n      //wait 100 ms\n      setTimeout(function () {\n        (0,_performance__WEBPACK_IMPORTED_MODULE_6__.order_by)(\"overall\");\n      }, 100);\n    },\n    \"Season performance fetched\": message => {\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_performance_graph)(message.slice(1));\n    },\n    \"Parts stats fetched\": message => {\n      load_parts_stats(message.slice(1)[0]);\n      load_parts_list(message.slice(1)[1]);\n      update_max_design(message.slice(1)[2]);\n    },\n    \"Game Year\": message => {\n      manage_game_year(message.slice(1)[0]);\n    },\n    \"Part values fetched\": message => {\n      load_one_part(message.slice(1));\n    },\n    \"Cars fetched\": message => {\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_cars)(message.slice(1)[0]);\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_car_attributes)(message.slice(1)[1]);\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.order_by)(\"overall\");\n    },\n    \"Custom Engines fetched\": message => {\n      (0,_performance__WEBPACK_IMPORTED_MODULE_6__.load_custom_engines)(message.slice(1));\n    }\n  };\n  let latestTag;\n  let isSaveSelected = 0;\n  let scriptSelected = 0;\n  let divBlocking = 1;\n  let connectionTimeout = setTimeout(() => {\n    update_notifications(\"Could not connect with backend\", \"error\");\n    manage_status(0);\n  }, 8000);\n\n  /**\r\n   * Handles the receiving end from the messages sent from backend\r\n   * @param {string} event the message tha tcomes fro the backend\r\n   */\n  socket.onmessage = event => {\n    let message = JSON.parse(event.data);\n    console.log(message); //DEBUG\n    let handler = messageHandlers[message[0]];\n    if (handler) {\n      handler(message);\n    }\n    if (!noNotifications.includes(message[0])) {\n      update_notifications(message[0], \"ok\");\n    }\n  };\n\n  /**\r\n   * Opens the log file\r\n   */\n  logButton.addEventListener(\"click\", function () {\n    window.location.href = '../log.txt';\n  });\n\n  /** \r\n   * Manages the look of the status icon in the footer\r\n   * @param {int} state state of the connection with backend\r\n   */\n  function manage_status(state) {\n    if (state == 1) {\n      status.classList.remove(\"awaiting\");\n      status.classList.add(\"positive\");\n      status.textContent = '\\xa0' + \"Connected\";\n    } else if (state == 0) {\n      status.classList.remove(\"awaiting\");\n      status.classList.remove(\"positive\");\n      status.classList.add(\"negative\");\n      status.textContent = '\\xa0' + \"Disconnected\";\n    }\n  }\n  function resizeWindowToHeight(mode) {\n    if (mode === \"11teams\") {\n      document.querySelectorAll(\".main-resizable\").forEach(function (elem) {\n        elem.style.height = \"720.5px\";\n        if (elem.id === \"enginesPerformance\") {\n          elem.style.maxHeight = \"720px\";\n        }\n      });\n      document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n        elem.style.height = \"672px\";\n      });\n      document.querySelectorAll(\".parts-list\").forEach(function (elem) {\n        elem.classList.remove(\"noCustom\");\n      });\n      document.getElementById(\"free-drivers\").style.height = \"672px\";\n      document.getElementById(\"free-staff\").style.height = \"672px\";\n      document.getElementById(\"raceMenu\").style.height = \"686px\";\n    } else if (mode === \"10teams\") {\n      document.querySelectorAll(\".main-resizable\").forEach(function (elem) {\n        elem.style.height = \"660px\";\n        if (elem.id === \"enginesPerformance\") {\n          elem.style.maxHeight = \"660px\";\n        }\n      });\n      document.querySelectorAll(\".parts-list\").forEach(function (elem) {\n        elem.classList.add(\"noCustom\");\n      });\n      document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n        elem.style.height = \"612px\";\n      });\n      document.getElementById(\"free-drivers\").style.height = \"612px\";\n      document.getElementById(\"free-staff\").style.height = \"612px\";\n      document.getElementById(\"raceMenu\").style.height = \"660px\";\n    }\n  }\n  function manage_game_year(year) {\n    if (year[0] === \"24\") {\n      document.getElementById(\"year23\").classList.remove(\"activated\");\n      document.getElementById(\"year24\").classList.add(\"activated\");\n      document.getElementById(\"drs24\").classList.remove(\"d-none\");\n      document.getElementById(\"drs24\").dataset.attribute = \"3\";\n      game_version = 2024;\n      max_races = 24;\n      manage_custom_team(year);\n      document.querySelectorAll(\".brake-cooling-replace\").forEach(function (elem) {\n        elem.textContent = \"Tyre preservation\";\n      });\n      document.querySelectorAll(\".engine24\").forEach(function (elem) {\n        elem.classList.add(\"d-none\");\n      });\n      document.querySelector(\".only-mentality\").classList.remove(\"d-none\");\n    } else if (year[0] === \"23\") {\n      resizeWindowToHeight(\"10teams\");\n      document.getElementById(\"year24\").classList.remove(\"activated\");\n      document.getElementById(\"year23\").classList.add(\"activated\");\n      document.getElementById(\"drs24\").classList.add(\"d-none\");\n      document.getElementById(\"drs24\").dataset.attribute = \"-1\";\n      if (\"32\" in _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict) {\n        delete _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[32];\n      }\n      game_version = 2023;\n      _predictions__WEBPACK_IMPORTED_MODULE_7__.mid_grid = 10;\n      max_races = 23;\n      relative_grid = 5;\n      manage_custom_team([null, null]);\n      document.querySelectorAll(\".brake-cooling-replace\").forEach(function (elem) {\n        elem.textContent = \"Brake cooling\";\n      });\n      document.querySelectorAll(\".engine24\").forEach(function (elem) {\n        elem.classList.remove(\"d-none\");\n      });\n      document.querySelector(\".only-mentality\").classList.add(\"d-none\");\n    }\n    replace_modal_teams(game_version);\n  }\n  function manage_custom_team(nameColor) {\n    if (nameColor[1] !== null) {\n      resizeWindowToHeight(\"11teams\");\n      custom_team = true;\n      _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[32] = nameColor[1];\n      _config__WEBPACK_IMPORTED_MODULE_3__.abreviations_dict[32] = nameColor[1].slice(0, 3).toUpperCase();\n      document.querySelectorAll(\".ct-teamname\").forEach(function (elem) {\n        elem.dataset.teamshow = nameColor[1];\n      });\n      document.getElementById(\"customTeamTransfers\").classList.remove(\"d-none\");\n      document.getElementById(\"customTeamPerformance\").classList.remove(\"d-none\");\n      document.getElementById(\"customTeamDropdown\").classList.remove(\"d-none\");\n      document.getElementById(\"customTeamComparison\").classList.remove(\"d-none\");\n      document.getElementById(\"customTeamContract\").classList.remove(\"d-none\");\n      document.getElementById(\"customizeTeam\").classList.remove(\"d-none\");\n      document.querySelectorAll(\".ct-replace\").forEach(function (elem) {\n        elem.textContent = nameColor[1].toUpperCase();\n      });\n      document.querySelectorAll(\".custom-car-performance\").forEach(function (elem) {\n        elem.classList.remove(\"d-none\");\n      });\n      replace_custom_team_color(nameColor[2], nameColor[3]);\n      _predictions__WEBPACK_IMPORTED_MODULE_7__.mid_grid = 11;\n      relative_grid = 4.54;\n    } else {\n      resizeWindowToHeight(\"10teams\");\n      custom_team = false;\n      document.getElementById(\"customTeamTransfers\").classList.add(\"d-none\");\n      document.getElementById(\"customTeamPerformance\").classList.add(\"d-none\");\n      document.getElementById(\"customTeamDropdown\").classList.add(\"d-none\");\n      document.getElementById(\"customTeamComparison\").classList.add(\"d-none\");\n      document.getElementById(\"customTeamContract\").classList.add(\"d-none\");\n      document.getElementById(\"customizeTeam\").classList.add(\"d-none\");\n      document.querySelectorAll(\".custom-car-performance\").forEach(function (elem) {\n        elem.classList.add(\"d-none\");\n      });\n      _predictions__WEBPACK_IMPORTED_MODULE_7__.mid_grid = 10;\n      relative_grid = 5;\n      if (\"32\" in _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict) {\n        delete _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[32];\n      }\n    }\n  }\n  function replace_custom_team_color(primary, secondary) {\n    let root = document.documentElement;\n    root.style.setProperty('--custom-team-primary', primary);\n    root.style.setProperty('--custom-team-secondary', secondary);\n    root.style.setProperty('--custom-team-primary-transparent', primary + \"30\");\n    root.style.setProperty('--custom-team-secondary-transparent', secondary + \"30\");\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"320\"] = primary;\n    _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"321\"] = secondary;\n    document.getElementById(\"primarySelector\").value = primary;\n    document.getElementById(\"secondarySelector\").value = secondary;\n    document.getElementById(\"primaryReader\").value = primary.toUpperCase();\n    document.getElementById(\"secondaryReader\").value = secondary.toUpperCase();\n  }\n  selectImageButton.addEventListener('click', () => {\n    fileInput.click();\n  });\n\n  // Función para manejar la selección de archivo\n  fileInput.addEventListener('change', event => {\n    let file = event.target.files[0];\n    if (file) {\n      customIconPath = `../assets/custom/${file.name}`;\n    }\n    document.querySelector(\".logo-preview\").src = customIconPath;\n  });\n  function replace_custom_team_logo(path) {\n    _config__WEBPACK_IMPORTED_MODULE_3__.logos_disc[32] = path;\n    document.querySelectorAll(\".custom-replace\").forEach(function (elem) {\n      elem.src = path;\n    });\n    document.querySelector(\".logo-preview\").src = path;\n    document.getElementById(\"selectImage\").innerText = path.split(\"/\").pop();\n  }\n  function ajustScrollWrapper() {\n    var windowHeight = window.innerHeight - 120;\n    document.querySelector('.scroll-wrapper').style.height = windowHeight + 'px';\n  }\n  window.addEventListener('resize', ajustScrollWrapper);\n  window.addEventListener('load', ajustScrollWrapper);\n\n  /**\r\n   * Checks with the github api if there is a newer version of the tool\r\n   */\n  function check_version() {\n    fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/tags`).then(response => response.json()).then(tags => {\n      if (tags.length > 0) {\n        latestTag = tags[0].name;\n        let actualVersion = versionPanel.textContent.trim();\n        if (actualVersion.slice(-3) === \"dev\") {\n          updateInfo.textContent = '\\xa0' + \"Development branch\";\n          updateInfo.classList.remove(\"bi-cloud\");\n          updateInfo.classList.add(\"bi-code-slash\");\n          setTimeout(() => {\n            updateInfo.classList.add(\"hide\");\n            versionPanel.classList.add(\"show\");\n          }, 4000);\n        } else {\n          let latestVer = latestTag.split(\".\").map(Number);\n          let actualVer = actualVersion.split(\".\").map(Number);\n          let isSame = true;\n          if (latestVer.length > actualVer.length) {\n            isSame = false;\n          } else {\n            for (let i = 0; i < latestVer.length; i++) {\n              if (latestVer[i] > actualVer[i]) {\n                isSame = false;\n                break;\n              } else if (latestVer[i] < actualVer[i]) {\n                break;\n              }\n            }\n          }\n          if (isSame) {\n            updateInfo.textContent = '\\xa0' + \"Up to date\";\n            updateInfo.classList.remove(\"bi-cloud\");\n            updateInfo.classList.add(\"bi-check2\");\n            setTimeout(() => {\n              updateInfo.classList.add(\"hide\");\n              versionPanel.classList.add(\"show\");\n            }, 4000);\n          } else {\n            updateInfo.classList.remove(\"bi-cloud\");\n          }\n        }\n      }\n    }).catch(error => {\n      updateInfo.textContent = '\\xa0' + \"Failed to fetch updates\";\n      updateInfo.classList.remove(\"bi-cloud\");\n      updateInfo.classList.add(\"bi-exclamation-diamond\");\n    });\n  }\n\n  /**\r\n   * Adds the spinner informing of updating state\r\n   */\n  function addSpinner() {\n    let statusDiv = document.querySelector('.status');\n    let spinnerDiv = document.createElement('div');\n    let outsideDiv = document.createElement('div');\n    spinnerDiv.className = ' spinner-border spinner-border-sm';\n    spinnerDiv.role = 'status';\n    outsideDiv.textContent = \"Updating...\";\n    outsideDiv.style.paddingRight = \"10px\";\n    outsideDiv.className = \"outside-div\";\n    outsideDiv.appendChild(spinnerDiv);\n    statusDiv.insertBefore(outsideDiv, statusDiv.children[2]);\n  }\n\n  /**\r\n   * Manages the state of the calendar blocking div in case it cannot be modified\r\n   * @param {string} info If the calendar has had major changes or not\r\n   */\n  function manage_calendarDiv(info) {\n    if (info[0] === \"1\") {\n      document.getElementById(\"calendarBlockDiv\").className = \"blocking-div d-none\";\n    } else if (info[0] === \"0\") {\n      document.getElementById(\"calendarBlockDiv\").className = \"blocking-div\";\n    }\n  }\n\n  /**\r\n  * Adds eventListeners to all the elements of the staff dropdown\r\n  */\n  function listenersStaffGroups() {\n    document.querySelectorAll('#staffMenu a').forEach(item => {\n      item.addEventListener(\"click\", function () {\n        const staffButton = document.getElementById('staffDropdown');\n        let staffSelected = item.innerHTML;\n        let staffCode = item.dataset.spacestats;\n        if (staffCode === \"driverStats\") {\n          _stats__WEBPACK_IMPORTED_MODULE_8__.typeOverall = \"driver\";\n          typeEdit = \"0\";\n          document.getElementById(\"driverSpecialAttributes\").classList.remove(\"d-none\");\n          document.querySelector(\"#superLicenseSwitch\").classList.remove(\"d-none\");\n          document.querySelector(\"#driverCode\").classList.remove(\"d-none\");\n        } else {\n          _stats__WEBPACK_IMPORTED_MODULE_8__.typeOverall = \"staff\";\n          document.getElementById(\"driverSpecialAttributes\").classList.add(\"d-none\");\n          document.querySelector(\"#superLicenseSwitch\").classList.add(\"d-none\");\n          document.querySelector(\"#driverCode\").classList.add(\"d-none\");\n          if (staffCode === \"chiefStats\") {\n            typeEdit = \"1\";\n          }\n          if (staffCode === \"engineerStats\") {\n            typeEdit = \"2\";\n          }\n          if (staffCode === \"aeroStats\") {\n            typeEdit = \"3\";\n          }\n          if (staffCode === \"directorStats\") {\n            typeEdit = \"4\";\n          }\n        }\n        staffButton.innerHTML = staffSelected;\n        change_elegibles(item.dataset.spacestats);\n        document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n          elem.classList.add(\"d-none\");\n          if (item.dataset.list == elem.id) {\n            elem.classList.remove(\"d-none\");\n          }\n        });\n        document.querySelector(\".left-panel-stats\").classList.add(\"d-none\");\n        _stats__WEBPACK_IMPORTED_MODULE_8__.statPanelShown = 0;\n      });\n    });\n  }\n\n  /**\r\n   * Adds the saves that the backend detected to the dropdown of saves\r\n   * @param {Object} savesArray contains the list of saves that the backend was able to find\r\n   */\n  function load_saves(savesArray) {\n    for (let i = 1; i < savesArray.length; i++) {\n      let elem = savesArray[i];\n      let li = document.createElement('li');\n      let a = document.createElement('a');\n      a.classList.add('dropdown-item');\n      a.href = '#';\n      a.textContent = elem;\n      li.appendChild(a);\n      dropDownMenu.appendChild(li);\n    }\n    listenersSaves();\n    listenersStaffGroups();\n  }\n\n  /**\r\n   * Adds the eventListeners to each element of the save dropdown\r\n   */\n  function listenersSaves() {\n    document.querySelectorAll('#dropdownMenu a').forEach(item => {\n      item.addEventListener(\"click\", function () {\n        const saveSelector = document.getElementById('saveSelector');\n        let saveSelected = item.innerHTML;\n        saveSelector.innerHTML = saveSelected;\n        let dataSaves = {\n          command: \"saveSelected\",\n          save: saveSelected\n        };\n        socket.send(JSON.stringify(dataSaves));\n        isSaveSelected = 1;\n        document.getElementById(\"editStatsPanel\").className = \"left-panel-stats d-none\";\n        document.querySelector(\".gear-container\").classList.add(\"shown\");\n        (0,_teams__WEBPACK_IMPORTED_MODULE_1__.resetTeamEditing)();\n        (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.resetViewer)();\n        (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.resetYearButtons)();\n        (0,_head2head__WEBPACK_IMPORTED_MODULE_9__.resetH2H)();\n        (0,_head2head__WEBPACK_IMPORTED_MODULE_9__.hideComp)();\n        (0,_predictions__WEBPACK_IMPORTED_MODULE_7__.resetPredict)();\n        (0,_stats__WEBPACK_IMPORTED_MODULE_8__.removeStatsDrivers)();\n        document.querySelectorAll(\".config-content\").forEach(function (elem) {\n          elem.textContent = \"\";\n        });\n        _stats__WEBPACK_IMPORTED_MODULE_8__.statPanelShown = 0;\n        document.querySelectorAll(\".performance-show\").forEach(function (elem) {\n          elem.classList.add(\"d-none\");\n        });\n        check_selected();\n      });\n    });\n  }\n  document.querySelector(\".gear-container\").addEventListener(\"click\", function () {\n    let configDetailModal = new bootstrap.Modal(document.getElementById('configDetailModal'), {\n      keyboard: false\n    });\n    configDetailModal.show();\n  });\n  function manage_config(info, year_config = false) {\n    document.querySelector(\".bi-gear\").classList.remove(\"hidden\");\n    configCopy = info;\n    manage_config_content(info[0], year_config);\n  }\n  function replace_all_teams(info) {\n    let teams = info[\"teams\"];\n    alphaTauriReplace(teams[\"alphatauri\"]);\n    alpineReplace(teams[\"alpine\"]);\n    alfaReplace(teams[\"alfa\"]);\n    (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.update_logo)(\"alpine\", logos_configs[teams[\"alpine\"]], teams[\"alpine\"]);\n    (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.update_logo)(\"alfa\", logos_configs[teams[\"alfa\"]], teams[\"alfa\"]);\n    (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.update_logo)(\"alphatauri\", logos_configs[teams[\"alphatauri\"]], teams[\"alphatauri\"]);\n  }\n  function manage_config_content(info, year_config = false) {\n    replace_all_teams(info);\n    if (!year_config) {\n      if (info[\"icon\"]) {\n        replace_custom_team_logo(info[\"icon\"]);\n        customIconPath = info[\"icon\"];\n      }\n      if (info[\"primaryColor\"]) {\n        replace_custom_team_color(info[\"primaryColor\"], info[\"secondaryColor\"]);\n      }\n      if (info[\"mentalityFrozen\"] === 1) {\n        document.getElementById(\"freezeMentalityToggle\").checked = true;\n      } else {\n        document.getElementById(\"freezeMentalityToggle\").checked = false;\n      }\n      if (info[\"refurbish\"] === 1) {\n        document.getElementById(\"refurbishingToggle\").checked = true;\n      } else {\n        document.getElementById(\"refurbishingToggle\").checked = false;\n      }\n      (0,_seasonViewer__WEBPACK_IMPORTED_MODULE_2__.setEngineAllocations)(info[\"engine_allocations\"]);\n      for (let key in engine_names) {\n        if (key > 10) {\n          delete engine_names[key];\n        }\n      }\n      for (let key in info[\"engines\"]) {\n        engine_names[key] = info[\"engines\"][key][\"name\"];\n      }\n      update_mentality_span(info[\"mentalityFrozen\"]);\n      let difficultySlider = document.getElementById(\"difficultySlider\");\n      difficultySlider.value = info[\"difficulty\"];\n      update_difficulty_span(info[\"difficulty\"]);\n      if (info[\"difficulty\"] === -2) {\n        //custom difficulty\n        load_difficulty_warnings(info[\"triggerList\"]);\n      } else {\n        manage_difficulty_warnings(difficulty_dict[parseInt(info[\"difficulty\"])]);\n      }\n      update_refurbish_span(info[\"refurbish\"]);\n    }\n  }\n  document.querySelectorAll(\".color-picker\").forEach(function (elem) {\n    let reader = elem.parentNode.querySelector(\".color-reader\");\n    elem.addEventListener(\"input\", function () {\n      reader.value = elem.value.toUpperCase();\n    });\n    reader.value = elem.value.toUpperCase();\n  });\n  document.querySelectorAll(\".color-reader\").forEach(function (elem) {\n    elem.addEventListener(\"input\", function () {\n      let picker = elem.parentNode.querySelector(\".color-picker\");\n      picker.value = elem.value.toLowerCase();\n    });\n  });\n  function alphaTauriReplace(info) {\n    document.querySelector(\"#alphaTauriReplaceButton\").querySelector(\"button\").textContent = names_configs[info];\n    document.querySelector(\"#alphaTauriReplaceButton\").querySelector(\"button\").dataset.value = info;\n    _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[8] = pretty_names[info];\n    _config__WEBPACK_IMPORTED_MODULE_3__.abreviations_dict[8] = abreviations_for_replacements[info];\n    document.querySelectorAll(\".at-teamname\").forEach(function (elem) {\n      elem.dataset.teamshow = pretty_names[info];\n    });\n    document.querySelectorAll(\".at-name\").forEach(function (elem) {\n      //if it has the class complete, put names_configs[info], else out VCARB\n      if (info === \"visarb\" && !elem.classList.contains(\"complete\")) {\n        elem.textContent = \"VCARB\";\n      } else {\n        elem.textContent = names_configs[info];\n      }\n    });\n    if (info !== \"alphatauri\") {\n      document.querySelectorAll(\".atlogo-replace\").forEach(function (elem) {\n        if (!elem.classList.contains(\"non-changable\")) {\n          elem.src = logos_configs[info];\n          elem.classList.remove(\"alphataurilogo\");\n          elem.classList.remove(\"toyotalogo\");\n          elem.classList.remove(\"hugologo\");\n          elem.classList.remove(\"visarblogo\");\n          elem.classList.remove(\"ferrarilogo\");\n          elem.classList.remove(\"brawnlogo\");\n          elem.classList.add(logos_classes_configs[info]);\n        }\n        if (elem.classList.contains(\"secondary\")) {\n          if (info !== \"toyota\") {\n            elem.src = elem.src.slice(0, -4) + \"2.png\";\n          }\n        }\n      });\n      let alphaVarName = \"--alphatauri-primary\";\n      let newVarName = \"--\" + info + \"-primary\";\n      change_css_variables(alphaVarName, newVarName);\n      let value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"80\"] = value;\n      alphaVarName = \"--alphatauri-secondary\";\n      newVarName = \"--\" + info + \"-secondary\";\n      change_css_variables(alphaVarName, newVarName);\n      value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"81\"] = value;\n      alphaVarName = \"--alphatauri-primary-transparent\";\n      newVarName = \"--\" + info + \"-primary-transparent\";\n      change_css_variables(alphaVarName, newVarName);\n      alphaVarName = \"--alphatauri-secondary-transparent\";\n      newVarName = \"--\" + info + \"-secondary-transparent\";\n      change_css_variables(alphaVarName, newVarName);\n    } else {\n      document.querySelectorAll(\".atlogo-replace\").forEach(function (elem) {\n        if (!elem.classList.contains(\"non-changable\")) {\n          elem.src = logos_configs[info];\n          elem.classList.remove(\"alphataurilogo\");\n          elem.classList.remove(\"toyotalogo\");\n          elem.classList.remove(\"hugologo\");\n          elem.classList.remove(\"visarblogo\");\n          elem.classList.remove(\"ferrarilogo\");\n          elem.classList.remove(\"brawnlogo\");\n          elem.classList.add(\"alphataurilogo\");\n        }\n        if (elem.classList.contains(\"secondary\")) {\n          elem.src = elem.src.slice(0, -4) + \"2.png\";\n        }\n      });\n      let alphaVarName = \"--alphatauri-primary\";\n      let newVarName = \"--alphatauri-original\";\n      change_css_variables(alphaVarName, newVarName);\n      let value = getComputedStyle(document.documentElement).getPropertyValue(\"--alphatauri-original\").trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"80\"] = value;\n      alphaVarName = \"--alphatauri-secondary\";\n      newVarName = \"--alphatauri-secondary-original\";\n      change_css_variables(alphaVarName, newVarName);\n      value = getComputedStyle(document.documentElement).getPropertyValue(\"--alphatauri-secondary-original\").trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"81\"] = value;\n      alphaVarName = \"--alphatauri-primary-transparent\";\n      newVarName = \"--alphatauri-primary-transparent-original\";\n      change_css_variables(alphaVarName, newVarName);\n      alphaVarName = \"--alphatauri-secondary-transparent\";\n      newVarName = \"--alphatauri-secondary-transparent-original\";\n      change_css_variables(alphaVarName, newVarName);\n    }\n    document.querySelectorAll(\".team-menu-alphatauri-replace\").forEach(function (elem) {\n      let classes = elem.className.split(\" \");\n      classes.forEach(function (cl) {\n        if (cl.includes(\"changable\")) {\n          elem.classList.remove(cl);\n          elem.classList.add(\"changable-team-menu-\" + info);\n        }\n      });\n    });\n  }\n  function alpineReplace(info) {\n    document.querySelector(\"#alpineReplaceButton\").querySelector(\"button\").textContent = names_configs[info];\n    document.querySelector(\"#alpineReplaceButton\").querySelector(\"button\").dataset.value = info;\n    _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[5] = pretty_names[info];\n    _config__WEBPACK_IMPORTED_MODULE_3__.abreviations_dict[5] = abreviations_for_replacements[info];\n    document.querySelectorAll(\".al-teamname\").forEach(function (elem) {\n      elem.dataset.teamshow = pretty_names[info];\n    });\n    document.querySelectorAll(\".alpine-name\").forEach(function (elem) {\n      elem.textContent = names_configs[info];\n    });\n    if (info !== \"alpine\") {\n      document.querySelectorAll(\".alpinelogo-replace\").forEach(function (elem) {\n        if (!elem.classList.contains(\"non-changable\")) {\n          elem.src = logos_configs[info];\n          elem.classList.remove(\"alpinelogo\");\n          elem.classList.remove(\"ferrarilogo\");\n          elem.classList.remove(\"lotuslogo\");\n          elem.classList.add(logos_classes_configs[info]);\n        }\n        if (elem.classList.contains(\"secondary\")) {\n          elem.src = elem.src.slice(0, -4) + \"2.png\";\n        }\n      });\n      let alpineVarName = \"--alpine-primary\";\n      let newVarName = \"--\" + info + \"-primary\";\n      change_css_variables(alpineVarName, newVarName);\n      let value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"50\"] = value;\n      alpineVarName = \"--alpine-secondary\";\n      newVarName = \"--\" + info + \"-secondary\";\n      change_css_variables(alpineVarName, newVarName);\n      value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"51\"] = value;\n      alpineVarName = \"--alpine-primary-transparent\";\n      newVarName = \"--\" + info + \"-primary-transparent\";\n      change_css_variables(alpineVarName, newVarName);\n      alpineVarName = \"--alpine-secondary-transparent\";\n      newVarName = \"--\" + info + \"-secondary-transparent\";\n      change_css_variables(alpineVarName, newVarName);\n    } else {\n      document.querySelectorAll(\".alpinelogo-replace\").forEach(function (elem) {\n        if (!elem.classList.contains(\"non-changable\")) {\n          elem.src = logos_configs[info];\n          elem.classList.remove(\"alpinelogo\");\n          elem.classList.remove(\"ferrarilogo\");\n          elem.classList.remove(\"lotuslogo\");\n          elem.classList.add(\"alpinelogo\");\n        }\n        if (elem.classList.contains(\"secondary\")) {\n          elem.src = elem.src.slice(0, -4) + \"2.png\";\n        }\n      });\n      let alpineVarName = \"--alpine-primary\";\n      let newVarName = \"--alpine-original\";\n      change_css_variables(alpineVarName, newVarName);\n      let value = getComputedStyle(document.documentElement).getPropertyValue(\"--alpine-original\").trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"50\"] = value;\n      alpineVarName = \"--alpine-secondary\";\n      newVarName = \"--alpine-secondary-original\";\n      change_css_variables(alpineVarName, newVarName);\n      value = getComputedStyle(document.documentElement).getPropertyValue(\"--alpine-secondary-original\").trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"51\"] = value;\n      alpineVarName = \"--alpine-primary-transparent\";\n      newVarName = \"--alpine-primary-transparent-original\";\n      change_css_variables(alpineVarName, newVarName);\n      alpineVarName = \"--alpine-secondary-transparent\";\n      newVarName = \"--alpine-secondary-transparent-original\";\n      change_css_variables(alpineVarName, newVarName);\n    }\n    document.querySelectorAll(\".team-menu-alpine-replace\").forEach(function (elem) {\n      let classes = elem.className.split(\" \");\n      classes.forEach(function (cl) {\n        if (cl.includes(\"changable\")) {\n          elem.classList.remove(cl);\n          elem.classList.add(\"changable-team-menu-\" + info);\n        }\n      });\n    });\n  }\n  function alfaReplace(info) {\n    document.querySelector(\"#alfaReplaceButton\").querySelector(\"button\").textContent = names_configs[info];\n    document.querySelector(\"#alfaReplaceButton\").querySelector(\"button\").dataset.value = info;\n    _config__WEBPACK_IMPORTED_MODULE_3__.combined_dict[9] = pretty_names[info];\n    _config__WEBPACK_IMPORTED_MODULE_3__.abreviations_dict[9] = abreviations_for_replacements[info];\n    document.querySelectorAll(\".af-teamname\").forEach(function (elem) {\n      elem.dataset.teamshow = pretty_names[info];\n    });\n    document.querySelectorAll(\".alfa-name\").forEach(function (elem) {\n      elem.textContent = names_configs[info];\n    });\n    if (info !== \"alfa\") {\n      document.querySelectorAll(\".alfalogo-replace\").forEach(function (elem) {\n        if (!elem.classList.contains(\"non-changable\")) {\n          elem.src = logos_configs[info];\n          elem.classList.remove(\"alfaromeologo\");\n          elem.classList.remove(\"audilogo\");\n          elem.classList.remove(\"sauberlogo\");\n          elem.classList.add(logos_classes_configs[info]);\n        }\n      });\n      let alfaVarName = \"--alfa-primary\";\n      let newVarName = \"--\" + info + \"-primary\";\n      change_css_variables(alfaVarName, newVarName);\n      let value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"90\"] = value;\n      alfaVarName = \"--alfa-secondary\";\n      newVarName = \"--\" + info + \"-secondary\";\n      change_css_variables(alfaVarName, newVarName);\n      value = getComputedStyle(document.documentElement).getPropertyValue(newVarName).trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"91\"] = value;\n      alfaVarName = \"--alfa-primary-transparent\";\n      newVarName = \"--\" + info + \"-primary-transparent\";\n      change_css_variables(alfaVarName, newVarName);\n      alfaVarName = \"--alfa-secondary-transparent\";\n      newVarName = \"--\" + info + \"-secondary-transparent\";\n      change_css_variables(alfaVarName, newVarName);\n    } else {\n      document.querySelectorAll(\".alfalogo-replace\").forEach(function (elem) {\n        if (!elem.classList.contains(\"non-changable\")) {\n          elem.src = logos_configs[info];\n          elem.className = \"alfalogo-replace alfalogo\";\n        }\n      });\n      let alfaVarName = \"--alfa-primary\";\n      let newVarName = \"--alfa-original\";\n      change_css_variables(alfaVarName, newVarName);\n      let value = getComputedStyle(document.documentElement).getPropertyValue(\"--alfa-original\").trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"90\"] = value;\n      alfaVarName = \"--alfa-secondary\";\n      newVarName = \"--alfa-secondary-original\";\n      change_css_variables(alfaVarName, newVarName);\n      value = getComputedStyle(document.documentElement).getPropertyValue(\"--alfa-secondary-original\").trim();\n      _head2head__WEBPACK_IMPORTED_MODULE_9__.colors_dict[\"91\"] = value;\n      alfaVarName = \"--alfa-primary-transparent\";\n      newVarName = \"--alfa-primary-transparent-original\";\n      change_css_variables(alfaVarName, newVarName);\n      alfaVarName = \"--alfa-secondary-transparent\";\n      newVarName = \"--alfa-secondary-transparent-original\";\n      change_css_variables(alfaVarName, newVarName);\n    }\n    document.querySelectorAll(\".team-menu-alfa-replace\").forEach(function (elem) {\n      let classes = elem.className.split(\" \");\n      classes.forEach(function (cl) {\n        if (cl.includes(\"changable\")) {\n          elem.classList.remove(cl);\n          elem.classList.add(\"changable-team-menu-\" + info);\n        }\n      });\n    });\n  }\n  function change_css_variables(oldVar, newVar) {\n    let root = document.documentElement;\n    let newVal = getComputedStyle(root).getPropertyValue(newVar).trim();\n    root.style.setProperty(oldVar, newVal);\n  }\n  function replace_modal_teams(version) {\n    if (version === 2024) {\n      document.getElementById(\"alphaModalLogo\").src = logos_configs[\"visarb\"];\n      document.getElementById(\"alphaModalLogo\").className = \"visarblogo non-changable\";\n      document.getElementById(\"alphaModalName\").textContent = pretty_names[\"visarb\"];\n      document.getElementById(\"alfaModalLogo\").src = logos_configs[\"stake\"];\n      document.getElementById(\"alfaModalName\").textContent = pretty_names[\"stake\"];\n    } else if (version === 2023) {\n      document.getElementById(\"alphaModalLogo\").src = logos_configs[\"alphatauri\"];\n      document.getElementById(\"alphaModalLogo\").className = \"alphataurilogo non-changable\";\n      document.getElementById(\"alphaModalName\").textContent = pretty_names[\"alphatauri\"];\n      document.getElementById(\"alfaModalLogo\").src = logos_configs[\"alfa\"];\n      document.getElementById(\"alfaModalName\").textContent = pretty_names[\"alfa\"];\n    }\n  }\n\n  //select all team-change-button\n  document.querySelectorAll(\".team-change-button\").forEach(function (elem) {\n    elem.querySelectorAll(\"a\").forEach(function (a) {\n      a.addEventListener(\"click\", function () {\n        elem.querySelector(\"button\").textContent = a.textContent;\n        elem.querySelector(\"button\").dataset.value = a.dataset.value;\n      });\n    });\n  });\n  document.querySelector(\"#configDetailsButton\").addEventListener(\"click\", function () {\n    save = document.querySelector(\"#saveSelector\").textContent;\n    save = save.slice(0, -4);\n    alphatauri = document.querySelector(\"#alphaTauriReplaceButton\").querySelector(\"button\").dataset.value;\n    alpine = document.querySelector(\"#alpineReplaceButton\").querySelector(\"button\").dataset.value;\n    alfa = document.querySelector(\"#alfaReplaceButton\").querySelector(\"button\").dataset.value;\n    let mentalityFrozen = 0;\n    if (document.getElementById(\"freezeMentalityToggle\").checked) {\n      mentalityFrozen = 1;\n    }\n    let refurbish = 0;\n    if (document.getElementById(\"refurbishingToggle\").checked) {\n      refurbish = 1;\n    }\n    let difficulty = 0;\n    let difficultySlider = document.getElementById(\"difficultySlider\");\n    let difficultyValue = document.getElementById(\"difficultySpan\").textContent === \"Custom\" ? -2 : parseInt(difficultySlider.value);\n    let disabledList = {};\n    let triggerList = {};\n    document.querySelectorAll(\".dif-warning:not(.default)\").forEach(function (elem) {\n      let id = elem.id;\n      if (elem.classList.contains(\"disabled\") || elem.classList.contains(\"d-none\")) {\n        disabledList[id] = 1;\n      } else {\n        disabledList[id] = 0;\n      }\n      triggerList[id] = elem.classList && (elem.classList.contains(\"d-none\") || elem.classList.contains(\"disabled\")) ? -1 : inverted_difficulty_dict[elem.className.split(\" \")[1]];\n    });\n    let data = {\n      command: \"configUpdate\",\n      save: save,\n      alphatauri: alphatauri,\n      alpine: alpine,\n      alfa: alfa,\n      mentalityFrozen: mentalityFrozen,\n      difficulty: difficultyValue,\n      refurbish: refurbish,\n      disabled: disabledList,\n      triggerList: triggerList\n    };\n    if (customIconPath !== null) {\n      data[\"icon\"] = customIconPath;\n      replace_custom_team_logo(customIconPath);\n    }\n    if (custom_team) {\n      data[\"primaryColor\"] = document.getElementById(\"primarySelector\").value;\n      data[\"secondaryColor\"] = document.getElementById(\"secondarySelector\").value;\n      replace_custom_team_color(data[\"primaryColor\"], data[\"secondaryColor\"]);\n    }\n    socket.send(JSON.stringify(data));\n    info = {\n      teams: {\n        alphatauri: alphatauri,\n        alpine: alpine,\n        alfa: alfa\n      }\n    };\n    replace_all_teams(info);\n    reloadTables();\n  });\n\n  /**\r\n   * checks if a save and a script have been selected to unlock the tool\r\n   */\n  function check_selected() {\n    if (isSaveSelected == 1 && scriptSelected == 1 && divBlocking == 1) {\n      document.getElementById(\"blockDiv\").className = \"d-none\";\n      divBlocking = 0;\n    }\n  }\n\n  /**\r\n   * Pills and their eventListeners\r\n   */\n  predictPill.addEventListener(\"click\", function () {\n    manageScripts(\"show\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\");\n    scriptSelected = 1;\n    check_selected();\n    manageSaveButton(false);\n  });\n  h2hPill.addEventListener(\"click\", function () {\n    manageScripts(\"hide\", \"show\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\");\n    scriptSelected = 1;\n    check_selected();\n    manageSaveButton(false);\n  });\n  viewPill.addEventListener(\"click\", function () {\n    manageScripts(\"hide\", \"hide\", \"show\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\");\n    scriptSelected = 1;\n    check_selected();\n    manageSaveButton(false);\n  });\n  driverTransferPill.addEventListener(\"click\", function () {\n    manageScripts(\"hide\", \"hide\", \"hide\", \"show\", \"hide\", \"hide\", \"hide\", \"hide\");\n    scriptSelected = 1;\n    check_selected();\n    manageSaveButton(false);\n  });\n  editStatsPill.addEventListener(\"click\", function () {\n    manageScripts(\"hide\", \"hide\", \"hide\", \"hide\", \"show\", \"hide\", \"hide\", \"hide\");\n    scriptSelected = 1;\n    check_selected();\n    manageSaveButton(true, \"stats\");\n  });\n  constructorsPill.addEventListener(\"click\", function () {\n    manageScripts(\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"show\");\n    scriptSelected = 1;\n    check_selected();\n    manageSaveButton(true, \"teams\");\n  });\n  CalendarPill.addEventListener(\"click\", function () {\n    manageScripts(\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"show\", \"hide\", \"hide\");\n    scriptSelected = 1;\n    check_selected();\n    manageSaveButton(true, \"calendar\");\n  });\n  carPill.addEventListener(\"click\", function () {\n    manageScripts(\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"show\", \"hide\");\n    scriptSelected = 1;\n    check_selected();\n    manageSaveButton(!_performance__WEBPACK_IMPORTED_MODULE_6__.viewingGraph, \"performance\");\n  });\n  gamePill.addEventListener(\"click\", function () {\n    document.querySelector(\"#editorChanges\").classList.add(\"d-none\");\n    document.querySelector(\"#gameChanges\").classList.remove(\"d-none\");\n  });\n  editorPill.addEventListener(\"click\", function () {\n    document.querySelector(\"#editorChanges\").classList.remove(\"d-none\");\n    document.querySelector(\"#gameChanges\").classList.add(\"d-none\");\n  });\n  document.getElementById(\"difficultySlider\").addEventListener(\"input\", function () {\n    let value = this.value;\n    update_difficulty_span(value);\n    manage_difficulty_warnings(difficulty_dict[parseInt(value)]);\n    difcultyCustom = \"default\";\n    document.getElementById(\"customGearButton\").classList.remove(\"custom\");\n  });\n  function update_difficulty_span(value) {\n    let span = document.querySelector(\"#difficultySpan\");\n    let difficulty = difficulty_dict[parseInt(value)];\n    if (difficulty === \"reduced weight\") {\n      span.className = \"option-state reduced-weight\";\n    } else if (difficulty === \"Custom\") {\n      span.className = \"option-state custom\";\n      document.getElementById(\"customGearButton\").classList.remove(\"custom\");\n      document.getElementById(\"customGearButton\").click();\n    } else {\n      span.className = \"option-state \" + difficulty;\n    }\n    span.textContent = difficulty.charAt(0).toUpperCase() + difficulty.slice(1);\n  }\n  document.getElementById(\"freezeMentalityToggle\").addEventListener(\"change\", function () {\n    let value = this.checked;\n    update_mentality_span(value);\n  });\n  function update_mentality_span(value) {\n    let span = document.querySelector(\"#mentalitySpan\");\n    if (value) {\n      span.className = \"option-state frozen\";\n      span.textContent = \"Frozen\";\n    } else {\n      span.className = \"option-state default\";\n      span.textContent = \"Unfrozen\";\n    }\n  }\n  document.getElementById(\"refurbishingToggle\").addEventListener(\"change\", function () {\n    let value = this.checked;\n    update_refurbish_span(value);\n  });\n  function update_refurbish_span(value) {\n    let span = document.querySelector(\"#refurbishSpan\");\n    if (value) {\n      span.className = \"option-state fixed\";\n      span.textContent = \"Fixed\";\n    } else {\n      span.className = \"option-state default\";\n      span.textContent = \"Default\";\n    }\n  }\n  function manage_difficulty_warnings(level) {\n    const elements = [\"defaultDif\", \"lightDif\", \"researchDif\", \"statDif\", \"designTimeDif\", \"factoryDif\", \"buildDif\"];\n    const selectedConfig = difficultyConfig[level] || difficultyConfig[\"default\"];\n    elements.forEach(id => {\n      document.getElementById(id).classList.add(\"d-none\");\n    });\n    selectedConfig.visible.forEach(id => {\n      document.getElementById(id).classList.remove(\"d-none\");\n    });\n    elements.forEach(id => {\n      if (selectedConfig[id]) {\n        const elementConfig = selectedConfig[id];\n        const element = document.getElementById(id);\n        element.className = elementConfig.className;\n        element.textContent = elementConfig.text;\n      }\n    });\n  }\n  function load_difficulty_warnings(triggerList) {\n    for (let id in triggerList) {\n      let warn = document.getElementById(id);\n      let difName = difficulty_dict[triggerList[id]];\n      if (triggerList[id] !== -1) {\n        warn.className = difficultyConfig[difName][id].className;\n        warn.textContent = difficultyConfig[difName][id].text;\n      } else {\n        warn.classList.add(\"disabled\");\n      }\n    }\n  }\n  document.getElementById(\"customGearButton\").addEventListener(\"click\", function () {\n    this.classList.toggle(\"custom\");\n    if (this.classList.contains(\"custom\")) {\n      difcultyCustom = \"custom\";\n      document.querySelector(\"#difficultySpan\").textContent = \"Custom\";\n      document.querySelector(\"#difficultySpan\").className = \"option-state custom\";\n      document.querySelector(\".custom-description\").textContent = \"cycle through its states\";\n      let warnigs = document.querySelectorAll(\".dif-warning\");\n      warnigs.forEach(function (elem) {\n        if (elem.id !== \"defaultDif\") {\n          for (let level in difficultyConfig) {\n            if (difficultyConfig[level].visible.includes(elem.id)) {\n              elem.className = difficultyConfig[level][elem.id]?.className || \"dif-warning\";\n              elem.textContent = difficultyConfig[level][elem.id]?.text || \"\";\n              break;\n            }\n          }\n        } else {\n          elem.classList.add(\"d-none\");\n        }\n      });\n    } else {\n      difcultyCustom = \"default\";\n      document.querySelector(\".custom-description\").textContent = \"remove/add it\";\n      actualDifficulty = document.getElementById(\"difficultySlider\").value;\n      manage_difficulty_warnings(difficulty_dict[parseInt(actualDifficulty)]);\n      update_difficulty_span(actualDifficulty);\n    }\n  });\n  function rotateDifficultyLevel(elementId) {\n    const levels = [\"extra-hard\", \"brutal\", \"unfair\", \"insane\", \"impossible\"];\n    const element = document.getElementById(elementId);\n\n    // Detectar si el elemento está en estado \"disabled\" actualmente\n    if (element.classList.contains(\"disabled\")) {\n      let nextConfig;\n      for (let level in difficultyConfig) {\n        if (difficultyConfig[level].visible.includes(elementId)) {\n          nextConfig = difficultyConfig[level][elementId];\n          break;\n        }\n      }\n      if (nextConfig) {\n        element.className = nextConfig.className;\n        element.textContent = nextConfig.text;\n      }\n      return;\n    }\n    let currentLevelIndex = levels.findIndex(level => {\n      return difficultyConfig[level][elementId] && element.classList.contains(difficultyConfig[level][elementId].className.split(\" \")[1]);\n    });\n    if (currentLevelIndex === levels.length - 1) {\n      element.className = \"dif-warning disabled\";\n      return;\n    }\n    let nextLevelIndex = (currentLevelIndex + 1) % levels.length;\n    let nextConfig = difficultyConfig[levels[nextLevelIndex]][elementId];\n    while ((!nextConfig || nextConfig.className === element.className && nextConfig.text === element.textContent || !difficultyConfig[levels[nextLevelIndex]].visible.includes(elementId)) && nextLevelIndex !== currentLevelIndex) {\n      nextLevelIndex = (nextLevelIndex + 1) % levels.length;\n      nextConfig = difficultyConfig[levels[nextLevelIndex]][elementId];\n    }\n    if (nextConfig) {\n      element.className = nextConfig.className;\n      element.textContent = nextConfig.text;\n    }\n  }\n  document.querySelectorAll(\".dif-warning:not(.default)\").forEach(function (elem) {\n    elem.addEventListener(\"click\", function () {\n      if (difcultyCustom === \"custom\") {\n        rotateDifficultyLevel(elem.id);\n      } else {\n        elem.classList.toggle(\"disabled\");\n      }\n    });\n  });\n\n  /**\r\n   * Manages the stats of the divs associated with the pills\r\n   * @param  {Array} divs array of state of the divs\r\n   */\n  function manageScripts(...divs) {\n    scriptsArray.forEach(function (div, index) {\n      if (divs[index] === \"show\") {\n        div.className = \"script-view\";\n      } else {\n        div.className = \"script-view d-none\";\n      }\n    });\n  }\n  document.querySelector(\"#cancelDetailsButton\").addEventListener(\"click\", function () {\n    manage_config_content(configCopy[0], false);\n  });\n});\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/renderer.js?");

/***/ }),

/***/ "./src/js/seasonViewer.js":
/*!********************************!*\
  !*** ./src/js/seasonViewer.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   engine_allocations: () => (/* binding */ engine_allocations),\n/* harmony export */   generateYearsMenu: () => (/* binding */ generateYearsMenu),\n/* harmony export */   resetViewer: () => (/* binding */ resetViewer),\n/* harmony export */   resetYearButtons: () => (/* binding */ resetYearButtons),\n/* harmony export */   setEngineAllocations: () => (/* binding */ setEngineAllocations),\n/* harmony export */   update_logo: () => (/* binding */ update_logo)\n/* harmony export */ });\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transfers */ \"./src/js/transfers.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n/* harmony import */ var _head2head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./head2head */ \"./src/js/head2head.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderer */ \"./src/js/renderer.js\");\n\n\n\n\n\nlet seasonTable;\nlet teamsTable;\nlet races_ids = [];\nlet seasonResults;\nlet calendarData;\nlet pointsOrPos = \"points\";\nlet alphaReplace = \"alphatauri\";\nlet alpineReplace = \"alpine\";\nlet alfaReplace = \"alfa\";\nlet driverOrTeams = \"drivers\";\nlet isYearSelected = false;\nlet engine_allocations;\nlet engine_names = {\n  //this one is changed as the user adds engines, so it will stayhere\n  1: \"Ferrari\",\n  4: \"Rbpt\",\n  7: \"Mercedes\",\n  10: \"Renault\"\n};\nfunction setEngineAllocations(allocations) {\n  engine_allocations = allocations;\n}\nfunction resetViewer() {\n  if (seasonTable) {\n    seasonTable.destroy();\n  }\n  pointsOrPos = \"points\";\n  if (teamsTable) {\n    teamsTable.destroy();\n  }\n}\nfunction resetYearButtons() {\n  document.getElementById(\"yearButton\").textContent = \"Year\";\n  isYearSelected = false;\n  manage_show_tables();\n  document.getElementById(\"yearButtonH2H\").textContent = \"Year\";\n  document.getElementById(\"yearPredictionButton\").textContent = \"Year\";\n  document.getElementById(\"yearPredictionModalButton\").textContent = \"Year\";\n}\n\n/**\r\n * Pills for the drivers and teams tables\r\n */\ndocument.getElementById(\"driverspill\").addEventListener(\"click\", function () {\n  driverOrTeams = \"drivers\";\n  manage_show_tables();\n});\ndocument.getElementById(\"teamspill\").addEventListener(\"click\", function () {\n  driverOrTeams = \"teams\";\n  manage_show_tables();\n});\nfunction manage_show_tables() {\n  if (isYearSelected) {\n    if (driverOrTeams === \"drivers\") {\n      document.querySelector(\".teams-table\").classList.add(\"d-none\");\n      document.querySelector(\".drivers-table\").classList.remove(\"d-none\");\n    } else {\n      document.querySelector(\".teams-table\").classList.remove(\"d-none\");\n      document.querySelector(\".drivers-table\").classList.add(\"d-none\");\n    }\n  } else {\n    document.querySelector(\".teams-table\").classList.add(\"d-none\");\n    document.querySelector(\".drivers-table\").classList.add(\"d-none\");\n  }\n}\ndocument.querySelectorAll(\"#tableTypeDropdown a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    pointsOrPos = elem.dataset.value;\n    change_points_pos_drivers();\n    change_points_pos_teams();\n    document.querySelector(\"#tableTypeButton\").textContent = elem.textContent;\n  });\n});\nfunction change_points_pos_drivers() {\n  let datazone = document.querySelector(\".drivers-table-data\");\n  let rows = datazone.querySelectorAll(\".drivers-table-row\");\n  rows.forEach(function (row, index) {\n    let cells = row.querySelectorAll(\".drivers-table-normal\");\n    cells.forEach(function (cell) {\n      let newCell = manageText(cell);\n      cell.innerText = newCell.innerText;\n    });\n  });\n}\nfunction change_points_pos_teams() {\n  let datazone = document.querySelector(\".teams-table-data\");\n  let rows = datazone.querySelectorAll(\".teams-table-row\");\n  rows.forEach(function (row, index) {\n    let cells = row.querySelectorAll(\".teams-table-normal\");\n    cells.forEach(function (cell) {\n      let newCell = manageTeamsText(cell);\n      cell.innerHTML = newCell.innerHTML;\n    });\n  });\n}\nfunction new_drivers_table(data) {\n  calendarData = data;\n  races_ids = [];\n  let header = document.querySelector(\".drivers-table-header\");\n  header.innerHTML = \"\";\n  let driverDiv = document.createElement(\"div\");\n  driverDiv.classList = \"drivers-table-driver bold-font\";\n  driverDiv.innerText = \"DRIVER\";\n  let PositionDiv = document.createElement(\"div\");\n  PositionDiv.classList = \"drivers-table-position bold-font\";\n  PositionDiv.innerText = \"#\";\n  header.appendChild(PositionDiv);\n  header.appendChild(driverDiv);\n  data.forEach(function (elem) {\n    races_ids.push(elem[0]);\n    let headerPos = document.createElement(\"div\");\n    headerPos.className = \"drivers-table-normal bold-font flag-header\";\n    let headerPosFlag = document.createElement(\"img\");\n    race = races_map[elem[1]];\n    flag_src = _config__WEBPACK_IMPORTED_MODULE_1__.codes_dict[race];\n    headerPosFlag.src = flag_src;\n    let headerPosDiv = document.createElement(\"div\");\n    headerPosDiv.classList.add(\"text-in-front\");\n    headerPosDiv.classList.add(\"bold-font\");\n    headerPosDiv.innerText = _config__WEBPACK_IMPORTED_MODULE_1__.races_names[elem[1]];\n    headerPos.appendChild(headerPosFlag);\n    headerPos.appendChild(headerPosDiv);\n    header.appendChild(headerPos);\n  });\n  let PointsDiv = document.createElement(\"div\");\n  PointsDiv.classList = \"drivers-table-points bold-font\";\n  PointsDiv.innerText = \"PTS\";\n  header.appendChild(PointsDiv);\n}\nfunction new_teams_table(data) {\n  calendarData = data;\n  races_ids = [];\n  let header = document.querySelector(\".teams-table-header\");\n  header.innerHTML = \"\";\n  let driverDiv = document.createElement(\"div\");\n  driverDiv.classList = \"teams-table-team bold-font\";\n  driverDiv.innerText = \"TEAM\";\n  let PositionDiv = document.createElement(\"div\");\n  PositionDiv.classList = \"teams-table-position bold-font\";\n  PositionDiv.innerText = \"#\";\n  header.appendChild(PositionDiv);\n  header.appendChild(driverDiv);\n  data.forEach(function (elem) {\n    races_ids.push(elem[0]);\n    let headerPos = document.createElement(\"div\");\n    headerPos.className = \"teams-table-normal bold-font flag-header\";\n    let headerPosFlag = document.createElement(\"img\");\n    race = races_map[elem[1]];\n    flag_src = _config__WEBPACK_IMPORTED_MODULE_1__.codes_dict[race];\n    headerPosFlag.src = flag_src;\n    let headerPosDiv = document.createElement(\"div\");\n    headerPosDiv.classList.add(\"text-in-front\");\n    headerPosDiv.classList.add(\"bold-font\");\n    headerPosDiv.innerText = _config__WEBPACK_IMPORTED_MODULE_1__.races_names[elem[1]];\n    headerPos.appendChild(headerPosFlag);\n    headerPos.appendChild(headerPosDiv);\n    header.appendChild(headerPos);\n  });\n  let PointsDiv = document.createElement(\"div\");\n  PointsDiv.classList = \"teams-table-points bold-font\";\n  PointsDiv.innerText = \"PTS\";\n  header.appendChild(PointsDiv);\n}\nfunction checkscroll() {\n  let datazone = document.querySelector(\".drivers-table-data\");\n  let pointscol = document.querySelector(\".drivers-table-header\").querySelector(\".drivers-table-points\");\n  if (datazone.scrollHeight > datazone.clientHeight) {\n    pointscol.style.width = \"84px\";\n  } else {\n    pointscol.style.width = \"80px\";\n  }\n}\nfunction new_color_drivers_table() {\n  let datazone = document.querySelector(\".drivers-table-data\");\n  let rows = datazone.querySelectorAll(\".drivers-table-row\");\n  rows.forEach(function (row, index) {\n    let cells = row.querySelectorAll(\".drivers-table-normal\");\n    cells.forEach(function (cell) {\n      if (cell.dataset.pos === \"1\") {\n        cell.classList.add(\"first\");\n      } else if (cell.dataset.pos === \"2\") {\n        cell.classList.add(\"second\");\n      } else if (cell.dataset.pos === \"3\") {\n        cell.classList.add(\"third\");\n      }\n      if (cell.dataset.fastlap === \"1\") {\n        cell.classList.add(\"fastest\");\n      }\n      if (cell.dataset.qualy === \"1\") {\n        cell.style.fontFamily = \"Formula1Bold\";\n      }\n    });\n  });\n}\nfunction manage_teams_table_logos() {\n  let logos = document.querySelectorAll(\".teams-table-logo-inner\");\n  logos.forEach(function (logo) {\n    if (logo.dataset.teamid === \"1\") {\n      logo.className = \"teams-table-logo-inner ferrari-team-table-logo\";\n    } else if (logo.dataset.teamid === \"2\") {\n      // logo.className = \"teams-table-logo-inner mclaren-team-table-logo\"\n      logo.src = \"../assets/images/mclaren2.png\";\n    } else if (logo.dataset.teamid === \"3\") {\n      logo.className = \"teams-table-logo-inner redbull-team-table-logo\";\n    } else if (logo.dataset.teamid === \"4\") {\n      logo.className = \"teams-table-logo-inner merc-team-table-logo\";\n    } else if (logo.dataset.teamid === \"5\") {\n      if (alpineReplace === \"alpine\") {\n        logo.className = \"teams-table-logo-inner alpine-team-table-logo\";\n      } else if (alpineReplace === \"andretti\") {\n        logo.className = \"teams-table-logo-inner ferrari-team-table-logo\";\n        logo.src = \"../assets/images/andretti2.png\";\n      } else if (alpineReplace === \"renault\") {\n        logo.className = \"teams-table-logo-inner ferrari-team-table-logo\";\n        logo.src = \"../assets/images/renault2.png\";\n      } else if (alpineReplace === \"lotus\") {\n        logo.src = \"../assets/images/lotus2.png\";\n      }\n    } else if (logo.dataset.teamid === \"6\") {\n      logo.className = \"teams-table-logo-inner williams-team-table-logo\";\n      logo.src = \"../assets/images/williams2.png\";\n    } else if (logo.dataset.teamid === \"7\") {\n      logo.className = \"teams-table-logo-inner haas-team-table-logo\";\n    } else if (logo.dataset.teamid === \"8\") {\n      if (alphaReplace === \"alphatauri\") {\n        logo.className = \"teams-table-logo-inner alphatauri-team-table-logo\";\n      } else if (alphaReplace === \"visarb\") {\n        logo.className = \"teams-table-logo-inner merc-team-table-logo\";\n      } else if (alphaReplace === \"hugo\") {\n        logo.className = \"teams-table-logo-inner hugo-team-table-logo\";\n      } else if (alphaReplace === \"toyota\") {\n        logo.className = \"teams-table-logo-inner toyota-team-table-logo\";\n        logo.src = \"../assets/images/toyota2.png\";\n      } else if (alphaReplace === \"porsche\") {\n        logo.className = \"teams-table-logo-inner porsche-team-table-logo\";\n      } else if (alphaReplace === \"brawn\") {\n        logo.className = \"teams-table-logo-inner brawn-team-table-logo\";\n        logo.src = \"../assets/images/brawn2.png\";\n      }\n    } else if (logo.dataset.teamid === \"9\") {\n      if (alfaReplace === \"alfa\") {\n        logo.className = \"teams-table-logo-inner merc-team-table-logo\";\n      } else if (alfaReplace === \"audi\") {\n        logo.className = \"teams-table-logo-inner audi-team-table-logo\";\n      } else if (alfaReplace === \"stake\") {\n        logo.className = \"teams-table-logo-inner stake-team-table-logo\";\n      } else if (alfaReplace === \"sauber\") {\n        logo.className = \"teams-table-logo-inner ferrari-team-table-logo\";\n        logo.src = \"../assets/images/sauber2.png\";\n      }\n    } else if (logo.dataset.teamid === \"10\") {\n      logo.className = \"teams-table-logo-inner aston-team-table-logo\";\n    } else if (logo.dataset.teamid === \"32\") {\n      logo.className = \"teams-table-logo-inner custom-team-table-logo\";\n    }\n  });\n}\nfunction manage_teams_table_names() {\n  let names = document.querySelectorAll(\".teams-table-team\");\n  names.forEach(function (name) {\n    if (name.dataset.teamid === \"5\") {\n      if (alpineReplace === \"alpine\") {\n        name.firstChild.innerText = \"ALPINE\";\n      } else if (alpineReplace === \"andretti\") {\n        name.firstChild.innerText = \"ANDRETTI\";\n      } else if (alpineReplace === \"renault\") {\n        name.firstChild.innerText = \"RENAULT\";\n      } else if (alpineReplace === \"lotus\") {\n        name.firstChild.innerText = \"LOTUS\";\n      }\n    } else if (name.dataset.teamid === \"8\") {\n      if (alphaReplace === \"alphatauri\") {\n        name.firstChild.innerText = \"ALPHA TAURI\";\n      } else if (alphaReplace === \"visarb\") {\n        name.firstChild.innerText = \"VISA CASHAPP RB\";\n      } else if (alphaReplace === \"hugo\") {\n        name.firstChild.innerText = \"HUGO\";\n      } else if (alphaReplace === \"toyota\") {\n        name.firstChild.innerText = \"TOYOTA\";\n      } else if (alphaReplace === \"porsche\") {\n        name.firstChild.innerText = \"PORSCHE\";\n      } else if (alphaReplace === \"brawn\") {\n        name.firstChild.innerText = \"BRAWN GP\";\n      }\n    } else if (name.dataset.teamid === \"9\") {\n      if (alfaReplace === \"alfa\") {\n        name.firstChild.innerText = \"ALFA ROMEO\";\n      } else if (alfaReplace === \"audi\") {\n        name.firstChild.innerText = \"AUDI\";\n      } else if (alfaReplace === \"stake\") {\n        name.firstChild.innerText = \"STAKE SAUBER\";\n      } else if (alfaReplace === \"sauber\") {\n        name.firstChild.innerText = \"SAUBER\";\n      }\n    }\n  });\n}\nfunction new_color_teams_table() {\n  let datazone = document.querySelector(\".teams-table-data\");\n  calendarData.forEach(function (race) {\n    let id = race[0];\n    let colCells = datazone.querySelectorAll(\".teams-table-normal[data-raceid='\" + id + \"']\");\n    if (colCells.length > 0) {\n      let values = [];\n      colCells.forEach(function (cell, index) {\n        let value = cell.dataset.points;\n        values.push([value, index]);\n        if (cell.dataset.quali1 === \"1\" || cell.dataset.quali2 === \"1\") {\n          cell.style.fontFamily = \"Formula1Bold\";\n        }\n        if (cell.dataset.fastlap1 === \"1\" || cell.dataset.fastlap2 === \"1\") {\n          cell.classList.add(\"fastest\");\n        }\n      });\n      values.sort((a, b) => b[0] - a[0]);\n      let topThree = values.slice(0, 3);\n      colCells[topThree[0][1]].classList.add(\"first\");\n      colCells[topThree[1][1]].classList.add(\"second\");\n      colCells[topThree[2][1]].classList.add(\"third\");\n    }\n  });\n}\nfunction order_teams_table() {\n  let datazone = document.querySelector(\".teams-table-data\");\n  let rows = datazone.querySelectorAll(\".teams-table-row\");\n  let ordered = Array.from(rows).sort((a, b) => parseInt(a.querySelector(\".teams-table-position\").innerText) - parseInt(b.querySelector(\".teams-table-position\").innerText));\n  datazone.innerHTML = \"\";\n  ordered.forEach(function (row, index) {\n    let odd = index % 2 === 0;\n    if (odd) {\n      row.classList.add(\"odd\");\n    }\n    datazone.appendChild(row);\n  });\n}\nfunction new_load_drivers_table(data) {\n  seasonResults = data;\n  let datazone = document.querySelector(\".drivers-table-data\");\n  datazone.innerHTML = \"\";\n  data = data.slice(0, -1);\n  data = new_order_drivers(data);\n  data.forEach(function (driver, index) {\n    let odd = index % 2 === 0;\n    let races_done = driver.slice(3).map(x => x[0]);\n    new_addDriver(driver, races_done, odd);\n  });\n  hoverListeners();\n  checkscroll();\n  new_color_drivers_table();\n}\nfunction new_order_drivers(array) {\n  return array.sort((a, b) => a[2] - b[2]);\n}\nfunction update_logo(team, logo, newTeam) {\n  if (team === \"alpine\") {\n    alpineReplace = newTeam;\n    _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[5] = logo;\n  } else if (team === \"williams\") {\n    _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[6] = logo;\n  } else if (team === \"haas\") {\n    _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[7] = logo;\n  } else if (team === \"alphatauri\") {\n    alphaReplace = newTeam;\n    _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[8] = logo;\n  } else if (team === \"alfa\") {\n    alfaReplace = newTeam;\n    _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[9] = logo;\n  }\n}\nfunction reloadTables() {\n  let datazone = document.querySelector(\".drivers-table-data\");\n  //if not empty\n  if (datazone.innerHTML !== \"\") {\n    new_drivers_table(calendarData);\n    new_load_drivers_table(seasonResults);\n    new_teams_table(calendarData);\n    new_load_teams_table(seasonResults);\n  }\n}\nfunction new_load_teams_table(data) {\n  let pairTeamPos = data[data.length - 1];\n  //create dict with dirst element of pair as key and second as value\n  let pairTeamPosDict = {};\n  pairTeamPos.forEach(function (pair) {\n    pairTeamPosDict[pair[0]] = pair[1];\n  });\n  data = data.slice(0, -1);\n  let datazone = document.querySelector(\".teams-table-data\");\n  datazone.innerHTML = \"\";\n  let teamData = {\n    1: [],\n    2: [],\n    3: [],\n    4: [],\n    5: [],\n    6: [],\n    7: [],\n    8: [],\n    9: [],\n    10: []\n  };\n  if (_renderer__WEBPACK_IMPORTED_MODULE_3__.game_version === 2024 && custom_team) {\n    teamData[32] = [];\n  }\n  data.forEach(function (driver) {\n    let races = driver.slice(3);\n    races.forEach(function (race) {\n      let team = race[race.length - 1];\n      teamData[team].push(race);\n    });\n  });\n  for (let team in teamData) {\n    //order the rray by the firit element of each elmeent\n    teamData[team].sort((a, b) => a[0] - b[0]);\n    let seasonLong = races_ids.length * 2;\n    let racesDone = teamData.length;\n    //push [] until the length is the same as the\n    while (teamData[team].length < seasonLong) {\n      teamData[team].push([]);\n    }\n  }\n  for (let team in _config__WEBPACK_IMPORTED_MODULE_1__.combined_dict) {\n    if (f1_teams.includes(parseInt(team))) {\n      let pos = pairTeamPosDict[team];\n      new_addTeam(teamData[team], _config__WEBPACK_IMPORTED_MODULE_1__.combined_dict[team], pos, team);\n    }\n  }\n  new_color_teams_table();\n  order_teams_table();\n  manage_teams_table_logos();\n  manage_teams_table_names();\n}\nfunction new_addTeam(teamData, name, pos, id) {\n  let data = document.querySelector(\".teams-table-data\");\n  let row = document.createElement(\"div\");\n  row.classList = \"teams-table-row\";\n  let nameDiv = document.createElement(\"div\");\n  let teamName = document.createElement(\"span\");\n  let engineName = document.createElement(\"span\");\n  engineName.classList = \"teams-table-engine-name bold-font\";\n  engineName.textContent = engine_names[engine_allocations[id]];\n  nameDiv.dataset.teamid = id;\n  nameDiv.classList = \"teams-table-team bold-font\";\n  teamName.innerText = name.toUpperCase();\n  nameDiv.appendChild(teamName);\n  nameDiv.appendChild(engineName);\n  row.appendChild(nameDiv);\n  let posDiv = document.createElement(\"div\");\n  posDiv.classList = \"teams-table-position bold-font\";\n  posDiv.innerText = pos;\n  row.appendChild(posDiv);\n  let logoDiv = document.createElement(\"div\");\n  logoDiv.classList = \"teams-table-logo\";\n  let logo = document.createElement(\"img\");\n  logo.classList = \"teams-table-logo-inner\";\n  logo.dataset.teamid = id;\n  logoDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_1__.team_dict[id] + \"iconback\");\n  logo.setAttribute(\"src\", _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[id]);\n  logoDiv.appendChild(logo);\n  row.appendChild(logoDiv);\n  row.appendChild(nameDiv);\n  let driverCounted = 0;\n  let teampoints = 0;\n  //only take pair indexes\n  if (teamData !== undefined) {\n    teamData.forEach(function (race, index) {\n      if (index % 2 === 0) {\n        let raceDiv = document.createElement(\"div\");\n        raceDiv.classList = \"teams-table-normal\";\n        if (race.length > 0) {\n          let driver1 = teamData[index];\n          let driver2 = teamData[index + 1];\n          raceDiv.dataset.raceid = driver1[0];\n          let driver1Points = 0;\n          let driver2Points = 0;\n          let driver1Pos = 0;\n          let driver2Pos = 0;\n          if (driver1[2] === -1) {\n            driver1Points = 0;\n            driver1Pos = \"DNF\";\n          } else {\n            driver1Points = driver1[2];\n            driver1Pos = driver1[1];\n          }\n          if (driver2[2] === -1) {\n            driver2Points = 0;\n            driver2Pos = \"DNF\";\n          } else {\n            driver2Points = driver2[2];\n            driver2Pos = driver2[1];\n          }\n          raceDiv.dataset.points = parseInt(driver1Points) + parseInt(driver2Points);\n          raceDiv.dataset.pos1 = driver1Pos;\n          raceDiv.dataset.pos2 = driver2Pos;\n          raceDiv.dataset.quali1 = driver1[4];\n          raceDiv.dataset.quali2 = driver2[4];\n          raceDiv.dataset.fastlap1 = driver1[3];\n          raceDiv.dataset.fastlap2 = driver2[3];\n          raceDiv.dataset.gapToWinner1 = driver1[5];\n          raceDiv.dataset.gapToWinner2 = driver2[5];\n          raceDiv.dataset.gapToPole1 = driver1[6];\n          raceDiv.dataset.gapToPole2 = driver2[6];\n          teampoints += parseInt(raceDiv.dataset.points);\n          if (race.length > 8) {\n            let d1SprintPoints = 0;\n            let d2SprintPoints = 0;\n            let d1SprintPos = 0;\n            let d2SprintPos = 0;\n            if (driver1[5] === -1) {\n              d1SprintPoints = 0;\n              d1SprintPos = \"DNF\";\n            } else {\n              d1SprintPoints = driver1[7];\n              d1SprintPos = driver1[8];\n            }\n            if (driver2[5] === -1) {\n              d2SprintPoints = 0;\n              d2SprintPos = \"DNF\";\n            } else {\n              d2SprintPoints = driver2[7];\n              d2SprintPos = driver2[8];\n            }\n            raceDiv.dataset.sprintpoints = parseInt(d1SprintPoints) + parseInt(d2SprintPoints);\n            raceDiv.dataset.sprintpos1 = d1SprintPos;\n            teampoints += parseInt(raceDiv.dataset.sprintpoints);\n            raceDiv.dataset.sprintpos2 = d2SprintPos;\n          }\n        } else {\n          raceDiv.innerText = \"-\";\n        }\n        let newText = manageTeamsText(raceDiv);\n        raceDiv.innerHTML = newText.innerHTML;\n        row.appendChild(raceDiv);\n      }\n    });\n  }\n  let pointsDiv = document.createElement(\"div\");\n  pointsDiv.classList = \"teams-table-points bold-font\";\n  pointsDiv.innerText = teampoints;\n  row.appendChild(pointsDiv);\n  data.appendChild(row);\n}\nfunction new_addDriver(driver, races_done, odd) {\n  let data = document.querySelector(\".drivers-table-data\");\n  let row = document.createElement(\"div\");\n  row.classList = \"drivers-table-row\";\n  if (odd) {\n    row.classList.add(\"odd\");\n  }\n  let nameDiv = document.createElement(\"div\");\n  nameDiv.classList = \"drivers-table-driver\";\n  let name = driver[0].split(\" \");\n  let nameContainer = document.createElement(\"div\");\n  nameContainer.className = \"name-container\";\n  let spanName = document.createElement(\"span\");\n  let spanLastName = document.createElement(\"span\");\n  spanName.textContent = (0,_transfers__WEBPACK_IMPORTED_MODULE_0__.insert_space)(name[0]) + \" \";\n  spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n  spanLastName.classList.add(\"bold-font\");\n  spanLastName.dataset.teamid = driver[1];\n  row.dataset.teamid = driver[1];\n  nameContainer.appendChild(spanName);\n  nameContainer.appendChild(spanLastName);\n  nameDiv.appendChild(nameContainer);\n  manageColor(spanLastName, spanLastName);\n  let posDiv = document.createElement(\"div\");\n  posDiv.classList = \"drivers-table-position bold-font\";\n  posDiv.innerText = driver[2];\n  row.appendChild(posDiv);\n  let logoDiv = document.createElement(\"div\");\n  logoDiv.classList = \"drivers-table-logo-div\";\n  let logo = document.createElement(\"img\");\n  logo.classList = \"drivers-table-logo\";\n  logo.dataset.teamid = driver[1];\n  if (driver[1] === 1) {\n    //ferrari\n    logo.classList.add(\"logo-ferrari-table\");\n  }\n  if (driver[1] === 2) {\n    //mclaren\n    logo.classList.add(\"logo-reduce\");\n  }\n  if (driver[1] === 3) {\n    //redbull\n    logo.classList.add(\"logo-up-down-mid\");\n  }\n  if (driver[1] === 6) {\n    logo.classList.add(\"logo-williams-table\");\n  }\n  if (driver[1] === 4 || driver[1] === 7) {\n    //mercedes  haas\n    logo.classList.add(\"logo-merc-table\");\n  }\n  if (driver[1] === 5) {\n    //different to aston\n    logo.classList.add(driversTableLogosDict[alpineReplace]);\n  }\n  if (driver[1] === 8) {\n    //alphatauri\n    logo.classList.add(driversTableLogosDict[alphaReplace]);\n  }\n  if (driver[1] === 9) {\n    //alfa\n    logo.classList.add(driversTableLogosDict[alfaReplace]);\n  }\n  if (driver[1] === 10 || driver[1] === 32) {\n    logo.classList.add(\"logo-up-down-little\");\n  }\n  logoDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_1__.team_dict[driver[1]] + \"hoverback\");\n  logo.setAttribute(\"src\", _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[driver[1]]);\n  logoDiv.appendChild(logo);\n  row.appendChild(logoDiv);\n  row.appendChild(nameDiv);\n  let driverpoints = 0;\n  races_ids.forEach(function (raceid) {\n    let raceDiv = document.createElement(\"div\");\n    raceDiv.classList = \"drivers-table-normal\";\n    if (races_done.includes(raceid)) {\n      let index = races_done.indexOf(raceid);\n      let race = driver[index + 3];\n      raceDiv.dataset.pos = race[1];\n      raceDiv.dataset.points = race[2];\n      raceDiv.dataset.fastlap = race[3];\n      raceDiv.dataset.qualy = race[4];\n      raceDiv.dataset.gapToWinner = race[5];\n      raceDiv.dataset.gapToPole = race[6];\n      if (race.length > 8) {\n        //sprint \n        raceDiv.dataset.sprintpos = race[8];\n        raceDiv.dataset.sprintpoints = race[7];\n        if (raceDiv.dataset.sprintpoints !== \"-1\") {\n          driverpoints += parseInt(raceDiv.dataset.sprintpoints);\n        }\n      }\n      if (raceDiv.dataset.points !== \"-1\") {\n        driverpoints += parseInt(raceDiv.dataset.points);\n      }\n      raceDiv = manageText(raceDiv);\n      row.appendChild(raceDiv);\n    } else {\n      raceDiv.innerText = \"-\";\n      row.appendChild(raceDiv);\n    }\n  });\n  let pointsDiv = document.createElement(\"div\");\n  pointsDiv.classList = \"drivers-table-points bold-font\";\n  pointsDiv.innerText = driverpoints;\n  row.appendChild(pointsDiv);\n  row.addEventListener(\"hover\", function (elem) {\n    if (elem.dataset.teamid === 2) {\n      let logo = this.querySelector(\".drivers-table-logo\");\n      logo.style.opacity = \"0\";\n      let logo2 = this.querySelector(\".drivers-table-logo\").nextElementSibling;\n      logo2.style.opacity = \"1\";\n    }\n  });\n  data.appendChild(row);\n}\nfunction manageText(raceDiv) {\n  if (raceDiv.innerText === \"-\") {\n    return raceDiv;\n  }\n  if (pointsOrPos === \"points\" || pointsOrPos === \"pos\") {\n    let racePart = \"\";\n    let sprintPart = \"\";\n    if (raceDiv.dataset.points !== \"-1\") {\n      if (pointsOrPos === \"points\") {\n        racePart = raceDiv.dataset.points;\n      } else {\n        racePart = raceDiv.dataset.pos;\n      }\n    } else {\n      racePart = \"DNF\";\n    }\n    if (raceDiv.dataset.points === \"0\" && pointsOrPos === \"points\") {\n      racePart = \"\";\n    }\n    if (raceDiv.dataset.sprintpoints !== undefined) {\n      if (raceDiv.dataset.sprintpoints !== \"-1\") {\n        if (pointsOrPos === \"points\") {\n          sprintPart = raceDiv.dataset.sprintpoints;\n        } else {\n          sprintPart = raceDiv.dataset.sprintpos;\n        }\n      } else {\n        sprintPart = \"DNF\";\n      }\n    }\n    if (raceDiv.dataset.sprintpoints === undefined || raceDiv.dataset.sprintpoints === \"0\") {\n      raceDiv.innerText = racePart;\n    } else {\n      raceDiv.innerText = racePart + \"(\" + sprintPart + \")\";\n    }\n  } else if (pointsOrPos === \"quali\") {\n    raceDiv.innerText = raceDiv.dataset.qualy;\n  } else if (pointsOrPos === \"gapWinner\") {\n    if (raceDiv.dataset.pos === \"-1\") {\n      raceDiv.innerText = \"DNF\";\n    } else {\n      raceDiv.innerText = raceDiv.dataset.gapToWinner;\n    }\n  } else if (pointsOrPos === \"gapPole\") {\n    raceDiv.innerText = raceDiv.dataset.gapToPole;\n  }\n  return raceDiv;\n}\nfunction manageTeamsText(raceDiv) {\n  if (raceDiv.innerText === \"-\") {\n    return raceDiv;\n  }\n  if (pointsOrPos === \"points\") {\n    if (raceDiv.dataset.sprintpoints !== undefined) {\n      let racePart = raceDiv.dataset.points;\n      let sprintPart = \"(\" + raceDiv.dataset.sprintpoints + \")\";\n      if (racePart === \"0\") {\n        racePart = \"\";\n      }\n      if (sprintPart === \"0\") {\n        sprintPart = \"\";\n      }\n      raceDiv.innerText = racePart + sprintPart;\n    } else {\n      let racePart = raceDiv.dataset.points;\n      if (racePart === \"0\") {\n        racePart = \"\";\n      }\n      raceDiv.innerText = racePart;\n    }\n  } else if (pointsOrPos === \"pos\") {\n    let d1Pos = \"DNF\";\n    let d2Pos = \"DNF\";\n    let d1SprPos = \"\";\n    let d2SprPos = \"\";\n    if (raceDiv.dataset.pos1 !== \"DNF\") {\n      d1Pos = raceDiv.dataset.pos1;\n    }\n    if (raceDiv.dataset.pos2 !== \"DNF\") {\n      d2Pos = raceDiv.dataset.pos2;\n    }\n    if (raceDiv.dataset.sprintpos1 !== undefined) {\n      d1SprPos = raceDiv.dataset.sprintpos1;\n    }\n    if (raceDiv.dataset.sprintpos2 !== undefined) {\n      d2SprPos = raceDiv.dataset.sprintpos2;\n    }\n    let text = d1Pos + \"<br>\" + d2Pos;\n    if (d1SprPos !== \"\" && d2SprPos !== \"\") {\n      text = d1Pos + \"(\" + d1SprPos + \")\" + \"<br>\" + d2Pos + \"(\" + d2SprPos + \")\";\n    }\n    raceDiv.innerHTML = text;\n  } else if (pointsOrPos === \"quali\") {\n    raceDiv.innerHTML = raceDiv.dataset.quali1 + \"<br>\" + raceDiv.dataset.quali2;\n  } else if (pointsOrPos === \"gapWinner\") {\n    let d1, d2;\n    if (raceDiv.dataset.pos1 === \"DNF\") {\n      d1 = \"DNF\";\n    } else {\n      d1 = raceDiv.dataset.gapToWinner1;\n    }\n    if (raceDiv.dataset.pos2 === \"DNF\") {\n      d2 = \"DNF\";\n    } else {\n      d2 = raceDiv.dataset.gapToWinner2;\n    }\n    raceDiv.innerHTML = d1 + \"<br>\" + d2;\n  } else if (pointsOrPos === \"gapPole\") {\n    raceDiv.innerHTML = raceDiv.dataset.gapToPole1 + \"<br>\" + raceDiv.dataset.gapToPole2;\n  }\n  return raceDiv;\n}\nfunction hoverListeners() {\n  document.querySelectorAll(\".drivers-table-row\").forEach(function (row) {\n    row.addEventListener(\"mouseenter\", function () {\n      if (this.dataset.teamid === \"2\" || this.dataset.teamid === \"6\" || this.dataset.teamid === \"5\" && alpineReplace !== \"alpine\" || this.dataset.teamid === \"9\" && alfaReplace === \"sauber\" || this.dataset.teamid === \"8\" && (alphaReplace === \"brawn\" || alphaReplace === \"hugo\" || alphaReplace === \"toyota\")) {\n        let logo = this.querySelector(\".drivers-table-logo\");\n        let new_src = _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[this.dataset.teamid].slice(0, -4) + \"2\" + logo.src.slice(-4);\n        logo.src = new_src;\n      }\n    });\n    row.addEventListener(\"mouseleave\", function () {\n      if (this.dataset.teamid === \"2\" || this.dataset.teamid === \"6\" || this.dataset.teamid === \"5\" && alpineReplace !== \"alpine\" || this.dataset.teamid === \"9\" && alfaReplace === \"sauber\" || this.dataset.teamid === \"8\" && (alphaReplace === \"brawn\" || alphaReplace === \"hugo\" || alphaReplace === \"toyota\")) {\n        let logo = this.querySelector(\".drivers-table-logo\");\n        let new_src = _config__WEBPACK_IMPORTED_MODULE_1__.logos_disc[this.dataset.teamid].slice(0, -4) + logo.src.slice(-4);\n        logo.src = new_src;\n      }\n    });\n  });\n}\n\n/**\r\n * Creates the year selector menu\r\n * @param {String} actualYear current year of the save\r\n */\nfunction generateYearsMenu(actualYear) {\n  document.querySelector(\"#yearInput\").min = actualYear;\n  _transfers__WEBPACK_IMPORTED_MODULE_0__.currentSeason = actualYear;\n  let yearMenu = document.querySelector(\"#yearMenu\");\n  let yearH2H = document.querySelector(\"#yearMenuH2H\");\n  let yearPrediction = document.querySelector(\"#yearPredictionMenu\");\n  let yearPredictionModal = document.querySelector(\"#yearPredictionModalMenu\");\n  yearMenu.innerHTML = \"\";\n  yearH2H.innerHTML = \"\";\n  yearPrediction.innerHTML = \"\";\n  yearPredictionModal.innerHTML = \"\";\n  for (let year = actualYear; year >= actualYear; year--) {\n    let a = document.createElement(\"a\");\n    a.textContent = year.toString();\n    a.classList = \"dropdown-item\";\n    a.style.cursor = \"pointer\";\n    yearMenu.appendChild(a);\n    a.addEventListener(\"click\", function () {\n      document.getElementById(\"yearButton\").textContent = a.textContent;\n      let dataYear = {\n        command: \"yearSelected\",\n        year: a.textContent\n      };\n      isYearSelected = true;\n      manage_show_tables();\n      socket.send(JSON.stringify(dataYear));\n    });\n    let a2 = document.createElement(\"a\");\n    a2.textContent = year.toString();\n    a2.classList = \"dropdown-item\";\n    a2.style.cursor = \"pointer\";\n    yearH2H.appendChild(a2);\n    a2.addEventListener(\"click\", function () {\n      (0,_head2head__WEBPACK_IMPORTED_MODULE_2__.resetH2H)();\n      document.querySelectorAll(\".modal-team\").forEach(function (elem) {\n        elem.classList.remove(\"d-none\");\n      });\n      document.getElementById(\"yearButtonH2H\").textContent = a2.textContent;\n      let dataYear = {\n        command: \"yearSelectedH2H\",\n        year: a2.textContent\n      };\n      socket.send(JSON.stringify(dataYear));\n    });\n    let a3 = document.createElement(\"a\");\n    a3.textContent = year.toString();\n    a3.classList = \"dropdown-item\";\n    a3.style.cursor = \"pointer\";\n    yearPrediction.appendChild(a3);\n    a3.addEventListener(\"click\", function () {\n      document.getElementById(\"yearPredictionButton\").textContent = a3.textContent;\n      document.querySelector(\"#mainPred\").classList.remove(\"d-none\");\n      let dataYear = {\n        command: \"yearSelectedPrediction\",\n        year: a3.textContent\n      };\n      socket.send(JSON.stringify(dataYear));\n    });\n    let a4 = document.createElement(\"a\");\n    a4.textContent = year.toString();\n    a4.classList = \"dropdown-item\";\n    a4.style.cursor = \"pointer\";\n    yearPredictionModal.appendChild(a4);\n    a4.addEventListener(\"click\", function () {\n      document.getElementById(\"yearPredictionModalButton\").textContent = a4.textContent;\n      let dataYear = {\n        command: \"yearSelectedPredictionModal\",\n        year: a4.textContent\n      };\n      socket.send(JSON.stringify(dataYear));\n    });\n  }\n  yearMenu.childNodes[0].click();\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/seasonViewer.js?");

/***/ }),

/***/ "./src/js/stats.js":
/*!*************************!*\
  !*** ./src/js/stats.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listeners_plusLess: () => (/* binding */ listeners_plusLess),\n/* harmony export */   place_drivers_editStats: () => (/* binding */ place_drivers_editStats),\n/* harmony export */   place_staff_editStats: () => (/* binding */ place_staff_editStats),\n/* harmony export */   removeStatsDrivers: () => (/* binding */ removeStatsDrivers),\n/* harmony export */   statPanelShown: () => (/* binding */ statPanelShown),\n/* harmony export */   typeOverall: () => (/* binding */ typeOverall)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n/* harmony import */ var _transfers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transfers */ \"./src/js/transfers.js\");\n\n\nlet driverStatTitle = document.getElementById(\"driverStatsTitle\");\nlet statPanelShown = 0;\nlet typeOverall = \"driver\";\nlet typeEdit;\nlet oldNum;\n\n/**\r\n * Removes all the staff from their list\r\n */\nfunction removeStatsDrivers() {\n  document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n    elem.innerHTML = \"\";\n  });\n}\n\n/**\r\n * Places the drivers that the backend fetched on the driver list\r\n * @param {Object} driversArray Object with all the drivers that the backend fetched\r\n */\nfunction place_drivers_editStats(driversArray) {\n  let divPosition;\n  driversArray.forEach(driver => {\n    divPosition = \"fulldriverlist\";\n    let newDiv = document.createElement(\"div\");\n    let ovrDiv = document.createElement(\"div\");\n    let ovrSpan = document.createElement(\"span\");\n    let mentality_ovrSpan = document.createElement(\"span\");\n    newDiv.className = \"col normal-driver\";\n    newDiv.dataset.driverid = driver[1];\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.className = \"name-div-edit-stats\";\n    newDiv.dataset.teamid = driver[2];\n    newDiv.dataset.type = 0;\n    let name = driver[0].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    spanName.textContent = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    newDiv.dataset.name = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \" + name.slice(1).join(\" \");\n    spanLastName.classList.add(\"bold-font\");\n    spanLastName.classList.add(\"surname\");\n    nameDiv.appendChild(spanName);\n    nameDiv.appendChild(spanLastName);\n    manageColor(newDiv, spanLastName);\n    newDiv.appendChild(nameDiv);\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[2]] + \"-transparent\");\n    let statsString = '';\n    for (let i = 5; i <= 15; i++) {\n      statsString += driver[i] + ' ';\n    }\n    newDiv.dataset.stats = statsString;\n    newDiv.dataset.superLicense = driver[\"superlicense\"];\n    newDiv.dataset.age = driver[\"age\"];\n    newDiv.dataset.retirement = driver[\"retirement_age\"];\n    newDiv.dataset.numWC = driver[\"wants1\"];\n    newDiv.dataset.number = driver[\"driver_number\"];\n    newDiv.dataset.raceFormula = driver[\"race_formula\"];\n    newDiv.dataset.driverCode = driver[\"driver_code\"];\n    newDiv.dataset.isRetired = driver[4];\n    if (driver[\"nationality\"] !== \"\") {\n      let country_code = driver[\"nationality\"];\n      let flag = document.createElement(\"img\");\n      flag.className = \"name-flag\";\n      flag.src = `https://flagsapi.com/${country_code}/flat/24.png`;\n      nameDiv.appendChild(flag);\n    }\n    if (driver[\"mentality0\"] >= 0) {\n      newDiv.dataset.mentality0 = driver[\"mentality0\"];\n      newDiv.dataset.mentality1 = driver[\"mentality1\"];\n      newDiv.dataset.mentality2 = driver[\"mentality2\"];\n      newDiv.dataset.globalMentality = driver[\"global_mentality\"];\n    }\n    let mentality = driver[\"global_mentality\"];\n    let modifier = getMentalityModifier(mentality);\n    if (modifier > 0) {\n      mentality_ovrSpan.classList.add(\"mentality-small-ovr-positive\");\n    } else if (modifier < 0) {\n      mentality_ovrSpan.classList.add(\"mentality-small-ovr-negative\");\n    }\n    newDiv.dataset.marketability = driver[\"marketability\"];\n    let ovr = calculateOverall(statsString, \"driver\", mentality);\n    ovrSpan.textContent = ovr[0];\n    mentality_ovrSpan.textContent = \"\";\n    if (ovr[0] !== ovr[1]) {\n      mentality_ovrSpan.textContent = ovr[1];\n    }\n    ovrDiv.appendChild(mentality_ovrSpan);\n    ovrDiv.appendChild(ovrSpan);\n    ovrDiv.classList.add(\"bold-font\");\n    ovrDiv.classList.add(\"small-ovr\");\n    newDiv.appendChild(ovrDiv);\n    newDiv.addEventListener('click', () => {\n      let elementosClicked = document.querySelectorAll('.clicked');\n      elementosClicked.forEach(item => item.classList.remove('clicked'));\n      newDiv.classList.toggle('clicked');\n      driverStatTitle.value = newDiv.dataset.name;\n      load_stats(newDiv);\n      if (statPanelShown == 0) {\n        document.getElementById(\"editStatsPanel\").className = \"left-panel-stats\";\n        statPanelShown = 1;\n      }\n      recalculateOverall();\n      let diff = parseInt(ovr[1]) - parseInt(ovr[0]);\n      let mentalitydiff = document.querySelector(\".mentality-change-ovr\");\n      if (diff > 0) {\n        mentalitydiff.textContent = \"+\" + diff;\n        mentalitydiff.className = \"mentality-change-ovr positive\";\n      } else if (diff < 0) {\n        mentalitydiff.textContent = diff;\n        mentalitydiff.className = \"mentality-change-ovr negative\";\n      } else {\n        mentalitydiff.textContent = \"\";\n        mentalitydiff.className = \"mentality-change-ovr\";\n      }\n    });\n    document.getElementById(divPosition).appendChild(newDiv);\n  });\n  document.querySelector(\"#edit_stats\").querySelectorAll(\".custom-input-number\").forEach(function (elem) {\n    elem.addEventListener(\"change\", function () {\n      if (elem.value > 100) {\n        elem.value = 100;\n      }\n      recalculateOverall();\n    });\n  });\n  manage_order(0);\n}\n\n/**\r\n * Places the staff that the backend fetched on their respective staff list\r\n * @param {Object} staffArray Object with all the staff that the backend fetched\r\n */\nfunction place_staff_editStats(staffArray) {\n  let divPosition;\n  staffArray.forEach(staff => {\n    let statsString = '';\n    if (staff[3] == 1) {\n      divPosition = \"fullTechnicalList\";\n      for (let i = 4; i <= 9; i++) {\n        statsString += staff[i] + ' ';\n      }\n    } else if (staff[3] == 2) {\n      divPosition = \"fullEngineerList\";\n      for (let i = 4; i <= 6; i++) {\n        statsString += staff[i] + ' ';\n      }\n    } else if (staff[3] == 3) {\n      divPosition = \"fullAeroList\";\n      for (let i = 4; i <= 11; i++) {\n        statsString += staff[i] + ' ';\n      }\n    } else if (staff[3] == 4) {\n      divPosition = \"fullDirectorList\";\n      for (let i = 4; i <= 7; i++) {\n        statsString += staff[i] + ' ';\n      }\n    }\n    statsString = statsString.slice(0, -1);\n    let newDiv = document.createElement(\"div\");\n    let ovrDiv = document.createElement(\"div\");\n    let ovrSpan = document.createElement(\"span\");\n    let mentality_ovrSpan = document.createElement(\"span\");\n    newDiv.className = \"col normal-driver\";\n    newDiv.dataset.driverid = staff[1];\n    newDiv.dataset.type = staff[3];\n    let nameDiv = document.createElement(\"div\");\n    nameDiv.className = \"name-div-edit-stats\";\n    newDiv.dataset.teamid = staff[2];\n    let name = staff[0].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    spanName.textContent = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    newDiv.dataset.name = (0,_transfers__WEBPACK_IMPORTED_MODULE_1__.insert_space)(name[0]) + \" \" + name.slice(1).join(\" \");\n    spanLastName.classList.add(\"bold-font\");\n    spanLastName.classList.add(\"surname\");\n    nameDiv.appendChild(spanName);\n    nameDiv.appendChild(spanLastName);\n    manageColor(newDiv, spanLastName);\n    newDiv.appendChild(nameDiv);\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[staff[2]] + \"-transparent\");\n    newDiv.dataset.stats = statsString;\n    newDiv.dataset.age = staff[\"age\"];\n    newDiv.dataset.retirement = staff[\"retirement_age\"];\n    newDiv.dataset.raceFormula = staff[\"race_formula\"];\n    newDiv.dataset.isRetired = staff[4];\n    if (staff[\"nationality\"] !== \"\") {\n      let country_code = staff[\"nationality\"];\n      let flag = document.createElement(\"img\");\n      flag.className = \"name-flag\";\n      flag.src = `https://flagsapi.com/${country_code}/flat/24.png`;\n      nameDiv.appendChild(flag);\n    }\n    if (staff[\"mentality0\"] >= 0) {\n      newDiv.dataset.mentality0 = staff[\"mentality0\"];\n      newDiv.dataset.mentality1 = staff[\"mentality1\"];\n      newDiv.dataset.mentality2 = staff[\"mentality2\"];\n      newDiv.dataset.globalMentality = staff[\"global_mentality\"];\n    }\n    let mentality = staff[\"global_mentality\"];\n    let ovr = calculateOverall(statsString, \"staff\", mentality);\n    ovrSpan.textContent = ovr[0];\n    mentality_ovrSpan.textContent = \"\";\n    if (ovr[0] !== ovr[1]) {\n      mentality_ovrSpan.textContent = ovr[1];\n    }\n    ovrDiv.appendChild(mentality_ovrSpan);\n    let modifier = getMentalityModifier(mentality);\n    if (modifier > 0) {\n      mentality_ovrSpan.classList.add(\"mentality-small-ovr-positive\");\n    } else if (modifier < 0) {\n      mentality_ovrSpan.classList.add(\"mentality-small-ovr-negative\");\n    }\n    ovrDiv.appendChild(ovrSpan);\n    ovrDiv.classList.add(\"bold-font\");\n    ovrDiv.classList.add(\"small-ovr\");\n    newDiv.appendChild(ovrDiv);\n    newDiv.addEventListener('click', () => {\n      let elementosClicked = document.querySelectorAll('.clicked');\n      elementosClicked.forEach(item => item.classList.remove('clicked'));\n      newDiv.classList.toggle('clicked');\n      driverStatTitle.value = newDiv.dataset.name;\n      load_stats(newDiv);\n      if (statPanelShown == 0) {\n        document.getElementById(\"editStatsPanel\").className = \"left-panel-stats\";\n        statPanelShown = 1;\n      }\n      recalculateOverall();\n      let diff = parseInt(ovr[1]) - parseInt(ovr[0]);\n      let mentalitydiff = document.querySelector(\".mentality-change-ovr\");\n      if (diff > 0) {\n        mentalitydiff.textContent = \"+\" + diff;\n        mentalitydiff.classList.add(\"positive\");\n      } else if (diff < 0) {\n        mentalitydiff.textContent = diff;\n        mentalitydiff.classList.add(\"negative\");\n      } else {\n        mentalitydiff.textContent = \"\";\n        mentalitydiff.classList.remove(\"positive\");\n        mentalitydiff.classList.remove(\"negative\");\n      }\n    });\n    document.getElementById(divPosition).appendChild(newDiv);\n  });\n}\nfunction getMentalityModifier(mentality) {\n  let keys = Object.keys(mentalityModifiers).map(Number).sort((a, b) => a - b);\n  let nextKey = keys.find(key => key > mentality);\n  return nextKey !== undefined ? mentalityModifiers[nextKey] : null;\n}\n\n/**\r\n * changes the overall placed in the overall square\r\n */\nfunction recalculateOverall() {\n  let stats = \"\";\n  document.querySelectorAll(\".elegible\").forEach(function (elem) {\n    stats += elem.value + \" \";\n  });\n  stats = stats.slice(0, -1);\n  let oldovr = document.getElementById(\"ovrholder\").innerHTML;\n  let ovr = calculateOverall(stats, typeOverall, 2, \"big\");\n  if (oldovr > ovr) {\n    document.getElementById(\"ovrholder\").innerHTML = ovr;\n    document.getElementById(\"ovrholder\").className = \"overall-holder bold-font alertNeg\";\n    setTimeout(() => {\n      document.getElementById(\"ovrholder\").className = \"overall-holder bold-font\";\n    }, 300);\n  } else if (oldovr < ovr) {\n    document.getElementById(\"ovrholder\").innerHTML = ovr;\n    document.getElementById(\"ovrholder\").className = \"overall-holder bold-font alertPos\";\n    setTimeout(() => {\n      document.getElementById(\"ovrholder\").className = \"overall-holder bold-font\";\n    }, 300);\n  }\n}\n\n/**\r\n * eventListeenr for the confirm button for the stats\r\n */\n\n/**\r\n * Gets the named with a space between name and lastname\r\n * @param {*} html element with the name bad formatted\r\n * @returns the name formatted\r\n */\nfunction getName(html) {\n  let name = \"\";\n  html.querySelectorAll('span').forEach(function (elem) {\n    name += elem.innerText + \" \";\n  });\n  name = name.slice(0, -1);\n  return name;\n}\n\n/**\r\n * Mathematic calculations to get a staff's overall value\r\n * @param {string} stats all stats spearated by a space between them\r\n * @param {string} type type of staff\r\n * @returns the number of his overall value\r\n */\nfunction calculateOverall(stats, type, mentality = 2, ovr = \"small\") {\n  let statsArray = stats.split(\" \").map(Number);\n  let mentality_stats = [];\n  for (let i = 0; i < statsArray.length; i++) {\n    mentality_stats[i] = statsArray[i] + getMentalityModifier(mentality);\n  }\n  let rating, mentality_rating;\n  if (type === \"driver\") {\n    let cornering = statsArray[0];\n    let braking = statsArray[1];\n    let control = statsArray[2];\n    let smoothness = statsArray[3];\n    let adaptability = statsArray[4];\n    let overtaking = statsArray[5];\n    let defence = statsArray[6];\n    let reactions = statsArray[7];\n    let accuracy = statsArray[8];\n    rating = (cornering + braking * 0.75 + reactions * 0.5 + control * 0.75 + smoothness * 0.5 + accuracy * 0.75 + adaptability * 0.25 + overtaking * 0.25 + defence * 0.25) / 5;\n    mentality_rating = (mentality_stats[0] + mentality_stats[1] * 0.75 + mentality_stats[7] * 0.5 + mentality_stats[2] * 0.75 + mentality_stats[3] * 0.5 + mentality_stats[8] * 0.75 + mentality_stats[4] * 0.25 + mentality_stats[5] * 0.25 + mentality_stats[6] * 0.25) / 5;\n  } else if (type === \"staff\") {\n    let suma = 0;\n    mentality_rating = 0;\n    for (let i = 0; i < statsArray.length; i++) {\n      suma += statsArray[i];\n      mentality_rating += mentality_stats[i];\n    }\n    rating = suma / statsArray.length;\n    mentality_rating = mentality_rating / statsArray.length;\n  }\n  if (ovr === \"small\") {\n    return [Math.round(rating), Math.round(mentality_rating)];\n  } else {\n    return Math.round(rating);\n  }\n}\nfunction updateStat(input, increment) {\n  let val = parseInt(input.value) + increment;\n  if (val > 100) val = 100;\n  if (val < 0) val = 0;\n  input.value = val;\n  recalculateOverall();\n  manage_stat_bar(input, val);\n}\nfunction listeners_plusLess() {\n  document.querySelectorAll(\".attirbutes-panel .bi-plus-lg\").forEach(button => {\n    let intervalId;\n    button.addEventListener('mousedown', function () {\n      let input = this.parentNode.parentNode.querySelector(\"input\");\n      updateStat(input, 1);\n      intervalId = setInterval(() => {\n        updateStat(input, 1);\n      }, 100);\n    });\n    button.addEventListener('mouseup', function () {\n      clearInterval(intervalId);\n    });\n    button.addEventListener('mouseleave', function () {\n      clearInterval(intervalId);\n    });\n  });\n  document.querySelectorAll(\".attirbutes-panel .bi-dash-lg\").forEach(button => {\n    let intervalId;\n    button.addEventListener('mousedown', function () {\n      let input = this.parentNode.parentNode.querySelector(\"input\");\n      updateStat(input, -1);\n      intervalId = setInterval(() => {\n        updateStat(input, -1);\n      }, 100);\n    });\n    button.addEventListener('mouseup', function () {\n      clearInterval(intervalId);\n    });\n    button.addEventListener('mouseleave', function () {\n      clearInterval(intervalId);\n    });\n  });\n  document.querySelectorAll(\".age-holder .bi-plus-lg\").forEach(function (elem) {\n    elem.addEventListener('mousedown', function (event) {\n      let intervalId;\n      let input = event.target.parentNode.parentNode.querySelector(\".age-ret\");\n      function updateRetirement(increment) {\n        let age = parseInt(input.innerText.split(\" \")[1]) + increment;\n        input.innerText = input.dataset.text + \" \" + age;\n      }\n      updateRetirement(1);\n      intervalId = setInterval(() => {\n        updateRetirement(1);\n      }, 100);\n      this.addEventListener('mouseup', function () {\n        clearInterval(intervalId);\n      });\n      this.addEventListener('mouseleave', function () {\n        clearInterval(intervalId);\n      });\n    });\n  });\n  document.querySelectorAll(\".age-holder .bi-dash-lg\").forEach(function (elem) {\n    elem.addEventListener('mousedown', function (event) {\n      let intervalId;\n      let input = event.target.parentNode.parentNode.querySelector(\".age-ret\");\n      function updateRetirement(increment) {\n        let age = parseInt(input.innerText.split(\" \")[1]) + increment;\n        input.innerText = input.dataset.text + \" \" + age;\n      }\n      updateRetirement(-1);\n      intervalId = setInterval(() => {\n        updateRetirement(-1);\n      }, 100);\n      this.addEventListener('mouseup', function () {\n        clearInterval(intervalId);\n      });\n      this.addEventListener('mouseleave', function () {\n        clearInterval(intervalId);\n      });\n    });\n  });\n  document.querySelector(\"#nameFilter\").addEventListener(\"input\", function (event) {\n    let text = event.target.value;\n    if (text !== \"\") {\n      document.querySelector(\"#filterContainer\").querySelector(\".bi-x\").classList.remove(\"d-none\");\n    } else {\n      document.querySelector(\"#filterContainer\").querySelector(\".bi-x\").classList.add(\"d-none\");\n    }\n    let elements = document.querySelectorAll(\".normal-driver\");\n    elements.forEach(function (elem) {\n      let first_name = elem.children[0].children[0].innerText;\n      let last_name = elem.children[0].children[1].innerText;\n      let full_name = first_name + \" \" + last_name;\n      let minus = full_name.toLowerCase();\n      let name = text.toLowerCase();\n      if (minus.includes(name)) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  });\n  document.querySelectorAll(\".text-filter-container .bi-x\").forEach(function (elem) {\n    elem.addEventListener(\"click\", function () {\n      let input = elem.parentNode.querySelector(\"input\");\n      input.value = \"\";\n      elem.classList.add(\"d-none\");\n      let event = new Event('input', {\n        bubbles: true,\n        cancelable: true\n      });\n      input.dispatchEvent(event);\n    });\n  });\n  document.querySelector(\"#filterIcon\").addEventListener(\"click\", function () {\n    document.getElementById(\"edit_stats\").querySelector(\".category-filters\").classList.toggle(\"show\");\n    document.getElementById(\"edit_stats\").querySelector(\".filter-container\").classList.toggle(\"focused\");\n  });\n  document.getElementById(\"edit_stats\").querySelectorAll(\".filter-pills\").forEach(function (elem) {\n    elem.addEventListener(\"click\", function (event) {\n      let isActive = elem.classList.contains('active');\n      document.getElementById(\"edit_stats\").querySelectorAll('.filter-pills').forEach(function (el) {\n        el.classList.remove('active');\n      });\n      if (!isActive) {\n        elem.classList.add('active');\n      }\n    });\n  });\n  document.querySelector(\"#F1filter\").addEventListener(\"click\", function (event) {\n    if (!event.target.classList.contains(\"active\")) {\n      let elements = document.querySelectorAll(\".normal-driver\");\n      elements.forEach(function (elem) {\n        elem.classList.remove(\"d-none\");\n      });\n    } else {\n      let elements = document.querySelectorAll(\".normal-driver\");\n      elements.forEach(function (elem) {\n        if (parseInt(elem.dataset.raceFormula) === 1) {\n          elem.classList.remove(\"d-none\");\n        } else {\n          elem.classList.add(\"d-none\");\n        }\n      });\n    }\n  });\n  document.querySelector(\"#F2filter\").addEventListener(\"click\", function (event) {\n    if (!event.target.classList.contains(\"active\")) {\n      let elements = document.querySelectorAll(\".normal-driver\");\n      elements.forEach(function (elem) {\n        elem.classList.remove(\"d-none\");\n      });\n    } else {\n      let elements = document.querySelectorAll(\".normal-driver\");\n      elements.forEach(function (elem) {\n        if (parseInt(elem.dataset.raceFormula) === 2) {\n          elem.classList.remove(\"d-none\");\n        } else {\n          elem.classList.add(\"d-none\");\n        }\n      });\n    }\n  });\n  document.querySelector(\"#F3filter\").addEventListener(\"click\", function (event) {\n    if (!event.target.classList.contains(\"active\")) {\n      let elements = document.querySelectorAll(\".normal-driver\");\n      elements.forEach(function (elem) {\n        elem.classList.remove(\"d-none\");\n      });\n    } else {\n      let elements = document.querySelectorAll(\".normal-driver\");\n      elements.forEach(function (elem) {\n        if (parseInt(elem.dataset.raceFormula) === 3) {\n          elem.classList.remove(\"d-none\");\n        } else {\n          elem.classList.add(\"d-none\");\n        }\n      });\n    }\n  });\n  document.querySelector(\"#freefilter\").addEventListener(\"click\", function (event) {\n    if (!event.target.classList.contains(\"active\")) {\n      let elements = document.querySelectorAll(\".normal-driver\");\n      elements.forEach(function (elem) {\n        elem.classList.remove(\"d-none\");\n      });\n    } else {\n      let elements = document.querySelectorAll(\".normal-driver\");\n      elements.forEach(function (elem) {\n        if (parseInt(elem.dataset.raceFormula) === 4) {\n          elem.classList.remove(\"d-none\");\n        } else {\n          elem.classList.add(\"d-none\");\n        }\n      });\n    }\n  });\n  document.querySelector(\".order-space\").querySelectorAll(\"i\").forEach(function (elem) {\n    elem.addEventListener(\"click\", function (event) {\n      let parent = elem.parentNode;\n      let state = parent.dataset.state;\n      let orderNumUp = document.querySelector(\".bi-sort-numeric-up-alt\");\n      let orderNumDown = document.querySelector(\".bi-sort-numeric-down\");\n      parent.dataset.state = (parseInt(state) + 1) % 3;\n      if (parent.dataset.state == 0) {\n        orderNumUp.classList.remove(\"active\");\n        orderNumUp.classList.remove(\"hidden\");\n        orderNumDown.classList.add(\"hidden\");\n      } else if (parent.dataset.state == 1) {\n        orderNumDown.classList.add(\"hidden\");\n        orderNumDown.classList.add(\"active\");\n        orderNumUp.classList.add(\"active\");\n        orderNumUp.classList.remove(\"hidden\");\n      } else if (parent.dataset.state == 2) {\n        orderNumUp.classList.remove(\"active\");\n        orderNumUp.classList.add(\"hidden\");\n        orderNumDown.classList.add(\"active\");\n        orderNumDown.classList.remove(\"hidden\");\n      }\n      manage_order(parseInt(parent.dataset.state));\n    });\n  });\n}\n\n/**\r\n * Adds eventListeners to all the elements of the staff dropdown\r\n */\nfunction listenersStaffGroups() {\n  document.querySelectorAll('#staffMenu a').forEach(item => {\n    item.addEventListener(\"click\", function () {\n      const staffButton = document.getElementById('staffDropdown');\n      let staffSelected = item.innerHTML;\n      let staffCode = item.dataset.spacestats;\n      if (staffCode === \"driverStats\") {\n        typeOverall = \"driver\";\n        typeEdit = \"0\";\n        document.getElementById(\"driverSpecialAttributes\").classList.remove(\"d-none\");\n        document.querySelector(\"#superLicenseSwitch\").classList.remove(\"d-none\");\n        document.querySelector(\"#driverCode\").classList.remove(\"d-none\");\n      } else {\n        typeOverall = \"staff\";\n        document.getElementById(\"driverSpecialAttributes\").classList.add(\"d-none\");\n        document.querySelector(\"#superLicenseSwitch\").classList.add(\"d-none\");\n        document.querySelector(\"#driverCode\").classList.add(\"d-none\");\n        if (staffCode === \"chiefStats\") {\n          typeEdit = \"1\";\n        }\n        if (staffCode === \"engineerStats\") {\n          typeEdit = \"2\";\n        }\n        if (staffCode === \"aeroStats\") {\n          typeEdit = \"3\";\n        }\n        if (staffCode === \"directorStats\") {\n          typeEdit = \"4\";\n        }\n      }\n      staffButton.innerHTML = staffSelected;\n      change_elegibles(item.dataset.spacestats);\n      document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n        elem.classList.add(\"d-none\");\n        if (item.dataset.list == elem.id) {\n          elem.classList.remove(\"d-none\");\n        }\n      });\n      document.querySelector(\".left-panel-stats\").classList.add(\"d-none\");\n      statPanelShown = 0;\n    });\n  });\n}\nfunction manage_order(state) {\n  let elements = document.querySelectorAll(\".normal-driver\");\n  let array = Array.from(elements);\n\n  // Crear un objeto para almacenar los padres originales\n  let parents = {};\n  array.forEach(elem => {\n    parents[elem.dataset.driverid] = elem.parentNode; // Asumiendo que cada .normal-driver tiene un data-id único\n  });\n  let sortedArray = array.sort(function (a, b) {\n    let ovrA = parseInt(a.children[1].innerText);\n    let ovrB = parseInt(b.children[1].innerText);\n    let teamA = parseInt(a.dataset.teamid);\n    let teamB = parseInt(b.dataset.teamid);\n    if (state == 0) {\n      if (teamA === 0) return 1;\n      if (teamB === 0) return -1;\n      let indexA = teamOrder.indexOf(teamA);\n      let indexB = teamOrder.indexOf(teamB);\n      if (indexA !== indexB) {\n        return indexA - indexB;\n      }\n      return ovrB - ovrA;\n    } else if (state == 1) {\n      return ovrB - ovrA;\n    } else {\n      return ovrA - ovrB;\n    }\n  });\n\n  // Limpiar los contenedores\n  document.querySelectorAll(\".staff-list\").forEach(function (elem) {\n    elem.innerHTML = \"\";\n  });\n\n  // Volver a colocar los elementos ordenados en sus padres originales\n  sortedArray.forEach(function (elem) {\n    let parent = parents[elem.dataset.driverid];\n    parent.appendChild(elem);\n  });\n}\nfunction manage_stat_bar(element, value) {\n  let container = element.parentNode.parentNode.parentNode;\n  let bar = container.querySelector(\".one-stat-progress\");\n  let percentage = value + \"%\";\n  bar.style.width = percentage;\n}\nfunction manage_mentality_modifiers(element, mentality) {\n  let name_stat = element.parentNode.parentNode.querySelector(\"span.bold-font\");\n  let modifier_span = name_stat.querySelector(\".mentality-modifier\");\n  if (modifier_span) {\n    modifier_span.remove();\n  }\n  let modifier = getMentalityModifier(mentality);\n  let mentality_class,\n    span = \"\";\n  if (modifier > 0) {\n    mentality_class = \"positive\";\n    span = \"<span class='mentality-modifier positive'> +\" + modifier + \"</span>\";\n  } else if (modifier < 0) {\n    mentality_class = \"negative\";\n    span = \"<span class='mentality-modifier negative'> \" + modifier + \"</span>\";\n  }\n  if (name_stat.textContent !== \"GROWTH\" && name_stat.textContent !== \"AGRESSION\") {\n    name_stat.innerHTML = name_stat.textContent + span;\n  }\n}\n\n/**\r\n * Loads the stats into the input numbers\r\n * @param {div} div div of the staff that is about to be edited\r\n */\nfunction load_stats(div) {\n  let statsArray = div.dataset.stats.split(\" \").map(Number);\n  let inputArray = document.querySelectorAll(\".elegible\");\n  inputArray.forEach(function (input, index) {\n    let value = statsArray[index];\n    input.value = value;\n    manage_stat_bar(input, value);\n    manage_mentality_modifiers(input, div.dataset.globalMentality);\n  });\n  let actualAge = document.querySelector(\".actual-age\");\n  let retirementAge = document.querySelector(\".actual-retirement\");\n  let numberButton = document.querySelector(\"#numberButton\");\n  let numberWC = document.querySelector(\"#driverNumber1\");\n  let codeInput = document.querySelector(\"#driverCode\");\n  codeInput.value = div.dataset.driverCode;\n  oldNum = div.dataset.number;\n  actualAge.innerText = \"Age \" + div.dataset.age;\n  retirementAge.innerText = \"Ret \" + div.dataset.retirement;\n  numberButton.querySelector(\".front-gradient\").innerText = div.dataset.number;\n  if (div.dataset.numWC === \"0\") {\n    numberWC.checked = false;\n  } else {\n    numberWC.checked = true;\n  }\n  if (div.dataset.superLicense === \"1\") {\n    document.querySelector(\"#superLicense\").checked = true;\n  } else {\n    document.querySelector(\"#superLicense\").checked = false;\n  }\n  if (div.dataset.isRetired === \"1\") {\n    document.querySelector(\"#retiredInput\").checked = true;\n  } else {\n    document.querySelector(\"#retiredInput\").checked = false;\n  }\n  if (div.dataset.mentality0) {\n    for (i = 0; i < 3; i++) {\n      let mentality = div.dataset[\"mentality\" + i];\n      let indicator = document.getElementById(\"mentality\" + i);\n      indicator.parentNode.parentNode.classList.remove(\"d-none\");\n      indicator.dataset.value = mentality;\n      let inverted_value = 5 - mentality;\n      let levels = indicator.querySelectorAll('.mentality-level');\n      let mentality_class = mentality_dict[mentality];\n      for (j = 0; j < 5; j++) {\n        levels[j].className = \"mentality-level\";\n        if (j <= inverted_value - 1) {\n          levels[j].classList.add(mentality_class);\n        }\n      }\n      let nameEmoji = indicator.parentNode.parentNode.querySelector(\".mentality-and-emoji\");\n      nameEmoji.innerText = capitalizeFirstLetter(mentality_class);\n      nameEmoji.className = \"mentality-and-emoji\";\n      nameEmoji.classList.add(mentality_class);\n    }\n  } else {\n    for (i = 0; i < 3; i++) {\n      let indicator = document.getElementById(\"mentality\" + i);\n      indicator.parentNode.parentNode.classList.add(\"d-none\");\n    }\n  }\n  if (div.dataset.marketability) {\n    document.querySelector(\"#marketability\").classList.remove(\"d-none\");\n    document.getElementById(\"marketabilityInput\").value = div.dataset.marketability;\n    document.getElementById(\"marketabilityBar\").style.width = div.dataset.marketability + \"%\";\n  } else {\n    document.querySelector(\"#marketability\").classList.add(\"d-none\");\n  }\n}\ndocument.querySelectorAll(\".bar-container .bi-chevron-right\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let indicator = elem.parentNode.querySelector(\".mentality-level-indicator\");\n    let value = parseInt(indicator.getAttribute('data-value')) - 1;\n    if (value < 0) {\n      value = 0;\n    }\n    let inverted_value = 5 - value;\n    indicator.setAttribute('data-value', value);\n    let levels = indicator.querySelectorAll('.mentality-level');\n    let mentality_class = mentality_dict[value];\n    for (j = 0; j < 5; j++) {\n      levels[j].className = \"mentality-level\";\n      if (j <= inverted_value - 1) {\n        levels[j].classList.add(mentality_class);\n      }\n    }\n    let nameEmoji = elem.parentNode.parentNode.querySelector(\".mentality-and-emoji\");\n    nameEmoji.innerText = capitalizeFirstLetter(mentality_class);\n    nameEmoji.className = \"mentality-and-emoji\";\n    nameEmoji.classList.add(mentality_class);\n  });\n});\ndocument.querySelectorAll(\".bar-container .bi-chevron-left\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let indicator = elem.parentNode.querySelector(\".mentality-level-indicator\");\n    let value = parseInt(indicator.getAttribute('data-value')) + 1;\n    if (value > 4) {\n      value = 4;\n    }\n    let inverted_value = 5 - value;\n    indicator.setAttribute('data-value', value);\n    let levels = indicator.querySelectorAll('.mentality-level');\n    let mentality_class = mentality_dict[value];\n    for (j = 0; j < 5; j++) {\n      levels[j].className = \"mentality-level\";\n      if (j <= inverted_value - 1) {\n        levels[j].classList.add(mentality_class);\n      }\n    }\n    let nameEmoji = elem.parentNode.parentNode.querySelector(\".mentality-and-emoji\");\n    nameEmoji.innerText = capitalizeFirstLetter(mentality_class);\n    nameEmoji.className = \"mentality-and-emoji\";\n    nameEmoji.classList.add(mentality_class);\n  });\n});\nfunction capitalizeFirstLetter(str) {\n  if (!str) return str; // Manejo de cadena vacía\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}\n\n/**\r\n * Generates the name title on the main panel of the edit stats\r\n * @param {div} html div from the staff selected\r\n * @returns the html necessary to put in the name with correct color\r\n */\nfunction manage_stats_title(html) {\n  let colorClass = \"\";\n  if (html.dataset.teamid != 0) {\n    colorClass = _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[html.dataset.teamid] + \"font\";\n  }\n  let spanName = document.createElement(\"span\");\n  let spanLastName = document.createElement(\"span\");\n  let name = \"<span>\" + html.children[0].children[0].innerText + \" </span>\" + \"<span class='\" + colorClass + \"'>\" + html.children[0].children[1].innerText + \"</span>\";\n\n  //let name = html.substring(0,html.length - 2).trim();\n\n  return name;\n}\n\n/**\r\n * Changes the input number that are taken into account to change stats \r\n * @param {div} divID div that contains the correct input numbers  \r\n */\nfunction change_elegibles(divID) {\n  document.querySelectorAll(\".elegible\").forEach(function (elem) {\n    elem.classList.remove(\"elegible\");\n  });\n  let divStats = document.getElementById(divID);\n  divStats.querySelectorAll(\".custom-input-number\").forEach(function (elem) {\n    elem.classList.add(\"elegible\");\n  });\n  if (divID === \"driverStats\") {\n    document.getElementById(\"growthInput\").classList.add(\"elegible\");\n    document.getElementById(\"agressionInput\").classList.add(\"elegible\");\n  }\n  document.querySelectorAll(\".main-panel-stats\").forEach(function (elem) {\n    elem.className = \"main-panel-stats d-none\";\n  });\n  divStats.classList.remove(\"d-none\");\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/stats.js?");

/***/ }),

/***/ "./src/js/teams.js":
/*!*************************!*\
  !*** ./src/js/teams.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resetTeamEditing: () => (/* binding */ resetTeamEditing)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n\nlet teamCod;\nlet currYear;\nlet originalCostCap;\nlet longTermObj;\n\n/**\r\n * Listener for the team menu buttons\r\n */\ndocument.querySelector(\"#teamMenu\").querySelectorAll(\"a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    document.querySelector(\"#teamButton\").innerText = elem.querySelector(\".team-menu-name\").innerText;\n    teamCod = elem.dataset.teamid;\n    let saveSelector = document.getElementById('saveSelector');\n    let saveSelected = saveSelector.innerHTML;\n    let data = {\n      command: \"teamRequest\",\n      teamID: teamCod,\n      saveSelected: saveSelected\n    };\n    socket.send(JSON.stringify(data));\n    document.querySelector(\".team-viewer\").classList.remove(\"d-none\");\n  });\n});\n\n/**\r\n * Listener for the objective menu dropdown\r\n */\ndocument.querySelector(\"#objectiveMenu\").querySelectorAll(\"a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    document.querySelector(\".objective-label\").innerText = elem.textContent;\n    longTermObj = elem.id[elem.id.length - 1];\n  });\n});\n\n/**\r\n * Helper function to add mousedown listener with auto increment/decrement\r\n */\nfunction addContinuousListener(element, selector, incrementCallback, decrementCallback) {\n  let intervalId;\n  element.querySelectorAll(selector).forEach(function (elem) {\n    elem.addEventListener('mousedown', function () {\n      let input = this.parentNode.parentNode.querySelector(\"input\");\n      if (this.classList.contains('bi-chevron-up') || this.classList.contains('bi-plus-lg')) {\n        incrementCallback(input);\n        intervalId = setInterval(() => {\n          incrementCallback(input);\n        }, 100);\n      } else if (this.classList.contains('bi-chevron-down') || this.classList.contains('bi-dash-lg')) {\n        decrementCallback(input);\n        intervalId = setInterval(() => {\n          decrementCallback(input);\n        }, 100);\n      }\n    });\n    elem.addEventListener('mouseup', function () {\n      clearInterval(intervalId);\n    });\n    elem.addEventListener('mouseleave', function () {\n      clearInterval(intervalId);\n    });\n  });\n}\n\n/**\r\n * Listeners for the long term input year\r\n */\naddContinuousListener(document.querySelector(\"#objAndYear\"), \".bi-chevron-up, .bi-chevron-down\", function (input) {\n  input.value = Number(input.value) + 1;\n}, function (input) {\n  let value = Number(input.value) - 1;\n  if (value <= currYear) {\n    value = currYear;\n  }\n  input.value = value;\n});\n\n/**\r\n * Listeners for the season objective input\r\n */\naddContinuousListener(document.querySelector(\"#seasonObjective\"), \".bi-chevron-up, .bi-chevron-down\", function (input) {\n  let value = Number(input.value) - 1;\n  if (value <= 1) {\n    value = 1;\n  }\n  input.value = value;\n}, function (input) {\n  let value = Number(input.value) + 1;\n  if (value >= 10) {\n    value = 10;\n  }\n  input.value = value;\n});\n\n/**\r\n * Listeners for the board confidence input\r\n */\naddContinuousListener(document.querySelector(\"#confidence\"), \".bi-plus-lg, .bi-dash-lg\", function (input) {\n  let value = Number(input.value) + 5;\n  if (value >= 100) {\n    value = 100;\n  }\n  input.value = value;\n}, function (input) {\n  let value = Number(input.value) - 5;\n  if (value <= 0) {\n    value = 0;\n  }\n  input.value = value;\n});\n\n/**\r\n * Listeners for the cost cap input\r\n */\naddContinuousListener(document.querySelector(\"#costCap\"), \".bi-plus-lg, .bi-dash-lg\", function (input) {\n  let valorActual = input.value.replace(/[$,]/g, \"\");\n  let nuevoValor = Number(valorActual) + 100000;\n  input.value = nuevoValor.toLocaleString('en-US') + '$';\n}, function (input) {\n  let valorActual = input.value.replace(/[$,]/g, \"\");\n  let nuevoValor = Number(valorActual) - 100000;\n  input.value = nuevoValor.toLocaleString('en-US') + '$';\n});\n\n/**\r\n * Listeners for the team budget input\r\n */\naddContinuousListener(document.querySelector(\"#teamBudget\"), \".bi-plus-lg, .bi-dash-lg\", function (input) {\n  let valorActual = input.value.replace(/[$,]/g, \"\");\n  let nuevoValor = Number(valorActual) + 100000;\n  input.value = nuevoValor.toLocaleString('en-US') + '$';\n}, function (input) {\n  let valorActual = input.value.replace(/[$,]/g, \"\");\n  let nuevoValor = Number(valorActual) - 100000;\n  input.value = nuevoValor.toLocaleString('en-US') + '$';\n});\nfunction updateCondition(input, increment, bar) {\n  let actual = input.innerText.split(\"%\")[0];\n  let val = parseInt(actual) + increment;\n  if (val > 100) val = 100;\n  if (val < 0) val = 0;\n  input.innerText = val + \"%\";\n  bar.style.width = val + \"%\";\n}\ndocument.querySelectorAll(\".condition-container .bi-plus\").forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    let input = button.parentNode.parentNode.querySelector(\".condition-container-value\");\n    let bar = button.parentNode.parentNode.querySelector(\".condition-container-bar-progress\");\n    updateCondition(input, 1, bar);\n    intervalId = setInterval(() => {\n      updateCondition(input, 1, bar);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelectorAll(\".condition-container .bi-dash\").forEach(button => {\n  let intervalId;\n  button.addEventListener('mousedown', function () {\n    let input = button.parentNode.parentNode.querySelector(\".condition-container-value\");\n    let bar = button.parentNode.parentNode.querySelector(\".condition-container-bar-progress\");\n    updateCondition(input, -1, bar);\n    intervalId = setInterval(() => {\n      updateCondition(input, -1, bar);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\n\n/**\r\n * Listeners for the show and hide buttons facilities\r\n */\ndocument.querySelector(\"#carDevButton\").addEventListener(\"click\", function () {\n  if (document.querySelector(\"#operationButton\").dataset.state === \"show\") {\n    document.querySelector(\"#operationButton\").click();\n  }\n  if (document.querySelector(\"#staffButton\").dataset.state === \"show\") {\n    document.querySelector(\"#staffButton\").click();\n  }\n  if (document.querySelector(\"#carDevButton\").dataset.state === \"show\") {\n    document.querySelector(\"#carDevButton\").dataset.state = \"hide\";\n    document.querySelector(\"#carDevButton\").querySelector(\".front-gradient\").innerText = \"Show\";\n  } else {\n    document.querySelector(\"#carDevButton\").dataset.state = \"show\";\n    document.querySelector(\"#carDevButton\").querySelector(\".front-gradient\").innerText = \"Hide\";\n  }\n});\ndocument.querySelector(\"#operationButton\").addEventListener(\"click\", function () {\n  if (document.querySelector(\"#carDevButton\").dataset.state === \"show\") {\n    document.querySelector(\"#carDevButton\").click();\n  }\n  if (document.querySelector(\"#staffButton\").dataset.state === \"show\") {\n    document.querySelector(\"#staffButton\").click();\n  }\n  if (document.querySelector(\"#operationButton\").dataset.state === \"show\") {\n    document.querySelector(\"#operationButton\").dataset.state = \"hide\";\n    document.querySelector(\"#operationButton\").querySelector(\".front-gradient\").innerText = \"Show\";\n  } else {\n    document.querySelector(\"#operationButton\").dataset.state = \"show\";\n    document.querySelector(\"#operationButton\").querySelector(\".front-gradient\").innerText = \"Hide\";\n  }\n});\ndocument.querySelector(\"#staffButton\").addEventListener(\"click\", function () {\n  if (document.querySelector(\"#operationButton\").dataset.state === \"show\") {\n    document.querySelector(\"#operationButton\").click();\n  }\n  if (document.querySelector(\"#carDevButton\").dataset.state === \"show\") {\n    document.querySelector(\"#carDevButton\").click();\n  }\n  if (document.querySelector(\"#staffButton\").dataset.state === \"show\") {\n    document.querySelector(\"#staffButton\").dataset.state = \"hide\";\n    document.querySelector(\"#staffButton\").querySelector(\".front-gradient\").innerText = \"Show\";\n  } else {\n    document.querySelector(\"#staffButton\").dataset.state = \"show\";\n    document.querySelector(\"#staffButton\").querySelector(\".front-gradient\").innerText = \"Hide\";\n  }\n});\n\n/**\r\n * Fills the level for each facility\r\n * @param {object} teamData info of the team facilities\r\n */\nfunction fillLevels(teamData) {\n  teamData.slice(0, 15).forEach(function (elem) {\n    let num = elem[0];\n    let level = num % 10;\n    let facilityID = Math.floor(num / 10);\n    let facility = document.querySelector(\"#facility\" + facilityID);\n    let indicator = facility.querySelector('.facility-level-indicator');\n    let condition_container = facility.querySelector('.condition-container');\n    let bar = condition_container.querySelector('.condition-container-bar-progress');\n    let condition_value = condition_container.querySelector('.condition-container-value');\n    bar.style.width = elem[1] * 100 + \"%\";\n    condition_value.innerText = parseInt(elem[1] * 100) + \"%\";\n    indicator.dataset.value = level;\n    let value = level;\n    let levels = indicator.querySelectorAll('.level');\n    for (let i = 0; i < 5; i++) {\n      levels[i].className = \"level\";\n      if (i <= value - 1) {\n        levels[i].classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamCod] + 'activated');\n      }\n    }\n  });\n  document.querySelector(\"#seasonObjectiveInput\").value = teamData[16];\n  document.querySelector(\"#longTermObj\" + teamData[17][0]).click();\n  document.querySelector(\"#longTermInput\").value = teamData[17][1];\n  document.querySelector(\"#teamBudgetInput\").value = teamData[18].toLocaleString(\"en-US\") + \"$\";\n  document.querySelector(\"#costCapInput\").value = Math.abs(teamData[19][0]).toLocaleString(\"en-US\") + \"$\";\n  manageConfidence(teamData[20]);\n  document.querySelector(\"#confidenceInput\").value = teamData[20];\n  currYear = teamData[21];\n  originalCostCap = Math.abs(teamData[19][0]);\n  for (key in teamData[22]) {\n    let pitCrewStat = document.querySelector(`.pit-crew-details .one-stat-panel[data-crewStat='${key}']`);\n    let input = pitCrewStat.querySelector(\"input\");\n    let value = Math.round(teamData[22][key]);\n    if (key === \"38\") {\n      value = value / 10;\n    }\n    input.value = value + \"%\";\n    let bar = pitCrewStat.querySelector(\".one-stat-progress\");\n    bar.style.width = value + \"%\";\n  }\n  let engineManufacturer = teamData[23];\n  document.querySelector(`#engineMenu a[data-engine='${engineManufacturer}']`).click();\n  let bars = document.querySelector(\".pit-crew-details\").querySelectorAll(\".one-stat-progress\");\n  bars.forEach(function (elem) {\n    elem.classList = \"one-stat-progress \" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamCod] + \"bar-primary\";\n  });\n}\ndocument.querySelectorAll(\".facility-refurbish svg\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let facility = elem.parentNode.parentNode;\n    let condition_value = facility.querySelector('.condition-container-value');\n    let bar = facility.querySelector('.condition-container-bar-progress');\n    condition_value.innerText = \"100%\";\n    bar.style.width = \"100%\";\n  });\n});\ndocument.querySelectorAll(\"#engineMenu a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let engineiD = elem.dataset.engine;\n    let engine = elem.innerText;\n    document.querySelector(\"#engineLabel\").innerText = engine;\n    document.querySelector(\"#engineButton\").dataset.value = engineiD;\n  });\n});\n\n/**\r\n * Resets the view\r\n */\nfunction resetTeamEditing() {\n  document.querySelector(\".team-viewer\").classList.add(\"d-none\");\n  teamCod = null;\n  document.querySelector(\"#teamButton\").innerText = \"Team\";\n}\nfunction updatePitStat(input, increment) {\n  let actual = input.value.split(\"%\")[0];\n  let val = parseInt(actual) + increment;\n  if (val > 100) val = 100;\n  if (val < 0) val = 0;\n  input.value = val + \"%\";\n  manage_stat_bar(input, val);\n}\ndocument.querySelector(\".pit-crew-details\").querySelectorAll(\".bi-plus-lg\").forEach(function (elem) {\n  let intervalId;\n  elem.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\"input\");\n    updatePitStat(input, 1);\n    intervalId = setInterval(() => {\n      updatePitStat(input, 1);\n    }, 100);\n  });\n  elem.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  elem.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".pit-crew-details\").querySelectorAll(\".bi-dash-lg\").forEach(function (elem) {\n  let intervalId;\n  elem.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\"input\");\n    updatePitStat(input, -1);\n    intervalId = setInterval(() => {\n      updatePitStat(input, -1);\n    }, 100);\n  });\n  elem.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  elem.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\n\n/**\r\n * Manages state of blocking div for confidence\r\n * @param {Number} data Confidence number. If -1, blocking div is activated\r\n */\nfunction manageConfidence(data) {\n  if (Number(data[0]) !== -1) {\n    document.querySelector(\".blocking-confidence\").classList.add(\"d-none\");\n  } else {\n    document.querySelector(\".blocking-confidence\").classList.remove(\"d-none\");\n  }\n}\n\n/**\r\n * Listeners for the level indicators for each facility\r\n */\ndocument.querySelector(\"#edit_teams\").querySelectorAll(\".bi-chevron-right\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let indicator = elem.parentNode.querySelector(\".facility-level-indicator\");\n    let value = parseInt(indicator.getAttribute('data-value')) + 1;\n    if (value > 5) {\n      value = 5;\n    }\n    indicator.setAttribute('data-value', value);\n    let levels = indicator.querySelectorAll('.level');\n    if (value <= levels.length) {\n      levels[value - 1].classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamCod] + 'activated');\n    }\n  });\n});\ndocument.querySelector(\"#edit_teams\").querySelectorAll(\".bi-chevron-left\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    let indicator = elem.parentNode.querySelector(\".facility-level-indicator\");\n    let value = parseInt(indicator.getAttribute('data-value')) - 1;\n    if (value < 0) {\n      value = 0;\n    }\n    indicator.setAttribute('data-value', value);\n    let levels = indicator.querySelectorAll('.level');\n    if (value < levels.length) {\n      levels[value].className = \"level\";\n    }\n  });\n});\n\n/**\r\n * Collects the data for each facility\r\n * @returns array with tuples for each facility\r\n */\nfunction gather_team_data() {\n  let facilities = document.getElementsByClassName('facility');\n  let result = [];\n  for (let i = 0; i < facilities.length; i++) {\n    let facility = facilities[i];\n    let id = facility.id.match(/\\d+$/)[0]; // Extrae el número al final del id\n    let levelIndicator = facility.getElementsByClassName('facility-level-indicator')[0];\n    let level = levelIndicator.getAttribute('data-value');\n    let number = id + level; // Compone el número concatenando los strings\n    let condition = facility.querySelector('.condition-container-value').innerText.split(\"%\")[0] / 100;\n    result.push([number, condition]); // Añade la tupla a la lista\n  }\n  return result;\n}\nfunction gather_pit_crew() {\n  let pitCrewStats = document.querySelectorAll(\".pit-crew-details .one-stat-panel\");\n  let result = {};\n  pitCrewStats.forEach(function (elem) {\n    let key = elem.dataset.crewstat;\n    let value = elem.querySelector(\"input\").value.split(\"%\")[0];\n    if (key === \"38\") {\n      value = value * 10;\n    }\n    result[key] = value;\n  });\n  return result;\n}\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/teams.js?");

/***/ }),

/***/ "./src/js/transfers.js":
/*!*****************************!*\
  !*** ./src/js/transfers.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   currentSeason: () => (/* binding */ currentSeason),\n/* harmony export */   freeDriversDiv: () => (/* binding */ freeDriversDiv),\n/* harmony export */   insert_space: () => (/* binding */ insert_space),\n/* harmony export */   loadNumbers: () => (/* binding */ loadNumbers),\n/* harmony export */   place_drivers: () => (/* binding */ place_drivers),\n/* harmony export */   place_staff: () => (/* binding */ place_staff),\n/* harmony export */   remove_drivers: () => (/* binding */ remove_drivers),\n/* harmony export */   sortList: () => (/* binding */ sortList)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/js/renderer.js\");\n\n\nconst myModal = new bootstrap.Modal(document.getElementById('contractModal'));\nconst raceBonusAmt = document.getElementById(\"raceBonusAmt\");\nconst raceBonusPos = document.getElementById(\"raceBonusPos\");\nconst freeDriversPill = document.getElementById(\"freepill\");\nconst f2DriversPill = document.getElementById(\"F2pill\");\nconst f3DriversPill = document.getElementById(\"F3pill\");\nconst freeDriversDiv = document.getElementById(\"free-drivers\");\nconst freeStaffDiv = document.getElementById(\"free-staff\");\nconst f2DriversDiv = document.getElementById(\"f2-drivers\");\nconst f3DriversDiv = document.getElementById(\"f3-drivers\");\nconst autoContractToggle = document.getElementById(\"autoContractToggle\");\nconst divsArray = [freeDriversDiv, f2DriversDiv, f3DriversDiv];\nconst fileInput = document.getElementById('fileInput');\nlet originalParent;\nlet destinationParent;\nlet draggable;\nlet teamDestiniy;\nlet teamOrigin;\nlet posInTeam;\nlet modalType;\nlet driverEditingID;\nlet driverEditingName;\nlet driver1;\nlet driver2;\nlet originalTeamId;\nlet currentSeason;\nlet name_dict = {\n  'ferrari': \"Ferrari\",\n  'mclaren': \"McLaren\",\n  'redbull': \"Red Bull\",\n  'merc': \"Mercedes\",\n  'alpine': \"Alpine\",\n  'williams': \"Williams\",\n  'haas': \"Haas\",\n  'alphatauri': \"Alpha Tauri\",\n  'alfaromeo': \"Alfa Romeo\",\n  'astonmartin': \"Aston Martin\",\n  \"F2\": \"F2\",\n  \"F3\": \"F3\",\n  \"custom\": \"Custom Team\"\n};\n//custom team name changes so this dict stays here\n\n/**\r\n * Removes all the drivers from teams and categories\r\n */\nfunction remove_drivers() {\n  document.querySelectorAll('.driver-space').forEach(item => {\n    item.innerHTML = \"\";\n  });\n  document.querySelectorAll('.staff-space').forEach(item => {\n    item.innerHTML = \"\";\n  });\n  document.querySelectorAll('.affiliates-space').forEach(item => {\n    item.innerHTML = \"\";\n  });\n  freeDriversDiv.innerHTML = \"\";\n  freeStaffDiv.innerHTML = \"\";\n}\nfunction insert_space(str) {\n  return str.replace(/([A-Z])/g, ' $1').trim();\n}\n\n/**\r\n * Places all drivers in their respective team, category etc\r\n * @param {Object} driversArray List of drivers\r\n */\nfunction place_drivers(driversArray) {\n  let divPosition;\n  driversArray.forEach(driver => {\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = \"col free-driver\";\n    newDiv.dataset.driverid = driver[1];\n    newDiv.dataset.teamid = driver[2];\n    let name = driver[0].split(\" \");\n    let nameContainer = document.createElement(\"div\");\n    nameContainer.className = \"name-container\";\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    spanName.textContent = insert_space(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    spanLastName.classList.add(\"bold-font\");\n    nameContainer.appendChild(spanName);\n    nameContainer.appendChild(spanLastName);\n    newDiv.appendChild(nameContainer);\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[2]] + \"-transparent\");\n    if (driver[\"team_future\"] !== -1) {\n      add_future_team_noti(newDiv, driver[\"team_future\"]);\n    }\n    newDiv.dataset.futureteam = driver[\"team_future\"];\n    manageColor(newDiv, spanLastName);\n    divPosition = \"free-drivers\";\n    let position = driver[3];\n    if (position >= 3) {\n      position = 3;\n    }\n    addIcon(newDiv);\n    add_edit_container(newDiv);\n    if (driver[2] > 0 && driver[2] <= 10 || driver[2] === 32) {\n      divPosition = _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[driver[2]] + position;\n    }\n    document.getElementById(divPosition).appendChild(newDiv);\n  });\n}\nfunction add_edit_container(div) {\n  let edit_container = document.createElement(\"div\");\n  edit_container.className = \"edit-container\";\n  let numbersicon = document.createElement(\"i\");\n  numbersicon.className = \"bi bi bi-123\";\n  let pencilicon = document.createElement(\"i\");\n  pencilicon.className = \"bi bi-pencil-fill\";\n  edit_container.appendChild(pencilicon);\n  edit_container.appendChild(numbersicon);\n  div.appendChild(edit_container);\n  edit_container.addEventListener(\"click\", function () {\n    let id = div.dataset.driverid;\n    document.getElementById(\"statspill\").click();\n    let edit_stats_div = document.querySelector(`.normal-driver[data-driverid=\"${id}\"]`);\n    let typeStaff = typeStaff_dict[edit_stats_div.dataset.type];\n    let menuClick = document.querySelector(`#staffMenu a[data-list=\"${typeStaff}\"]`);\n    menuClick.click();\n    edit_stats_div.click();\n    edit_stats_div.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"center\"\n    });\n  });\n}\nfunction update_name(driverID, name) {\n  let freeDiv = document.querySelector(`.free-driver[data-driverid='${driverID}']`);\n  let normalDiv = document.querySelector(`.normal-driver[data-driverid='${driverID}']`);\n  let nameContainer = freeDiv.querySelector(\".name-container\");\n  let nameArray = name.split(\" \");\n  let new_name = nameArray[0];\n  let new_surname = nameArray.slice(1).join(\" \").toUpperCase();\n  let firstNameContainer = nameContainer.childNodes[0];\n  let lastNameContainer = nameContainer.querySelector(\".bold-font\");\n  firstNameContainer.textContent = new_name;\n  lastNameContainer.textContent = new_surname;\n  firstNameContainer = normalDiv.childNodes[0].childNodes[0];\n  lastNameContainer = normalDiv.childNodes[0].querySelector(\".bold-font\");\n  firstNameContainer.textContent = new_name + \" \";\n  lastNameContainer.textContent = new_surname;\n  normalDiv.dataset.name = name;\n}\nfunction sortList(divID) {\n  let container = document.getElementById(divID);\n  let divs = Array.from(container.querySelectorAll('.free-driver'));\n  let compareFunction = (a, b) => {\n    let futureTeamA = parseInt(a.dataset.futureteam);\n    let futureTeamB = parseInt(b.dataset.futureteam);\n    if (futureTeamA > futureTeamB) return -1;\n    if (futureTeamA < futureTeamB) return 1;\n    let textA = a.firstElementChild.textContent.toLowerCase();\n    let textB = b.firstElementChild.textContent.toLowerCase();\n    return textA.localeCompare(textB);\n  };\n  divs.sort(compareFunction);\n  container.innerHTML = '';\n  divs.forEach(div => container.appendChild(div));\n}\nfunction place_staff(staffArray) {\n  let divPosition;\n  staffArray.forEach(staff => {\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = \"col free-driver\";\n    newDiv.dataset.driverid = staff[1];\n    newDiv.dataset.teamid = staff[2];\n    let name = staff[0].split(\" \");\n    let spanName = document.createElement(\"span\");\n    let spanLastName = document.createElement(\"span\");\n    let marqueeContainer = document.createElement(\"div\");\n    marqueeContainer.className = \"marquee-wrapper\";\n    let nameContainer = document.createElement(\"div\");\n    nameContainer.className = \"name-container\";\n    spanName.textContent = insert_space(name[0]) + \" \";\n    spanLastName.textContent = name.slice(1).join(\" \").toUpperCase();\n    spanLastName.classList.add(\"bold-font\");\n    let staffLogo = document.createElement(\"img\");\n    let position = staff[3];\n    staffLogo.src = _config__WEBPACK_IMPORTED_MODULE_0__.staff_pics[position];\n    staffLogo.className = \"staff-logo\";\n    newDiv.appendChild(staffLogo);\n    nameContainer.appendChild(spanName);\n    nameContainer.appendChild(spanLastName);\n    marqueeContainer.appendChild(nameContainer);\n    newDiv.appendChild(marqueeContainer);\n    newDiv.classList.add(_config__WEBPACK_IMPORTED_MODULE_0__.team_dict[staff[2]] + \"-transparent\");\n    if (staff[\"team_future\"] !== -1) {\n      add_future_team_noti(newDiv, staff[\"team_future\"]);\n    }\n    newDiv.dataset.futureteam = staff[\"team_future\"];\n    manageColor(newDiv, spanLastName);\n    // if (staff[4] === 1) {\n    //     addUnRetireIcon(newDiv)\n    // }\n    divPosition = \"free-staff\";\n    let staff_position = _config__WEBPACK_IMPORTED_MODULE_0__.staff_positions[position];\n    newDiv.dataset.type = staff_position;\n    staffLogo.classList.add(staff_position + \"-border\");\n    addIcon(newDiv);\n    add_edit_container(newDiv);\n    if (staff[2] > 0 && staff[2] <= 10 || staff[2] === 32) {\n      let teamDiv = document.querySelector(`.staff-section[data-teamid='${staff[2]}']`);\n      if (position !== 2) {\n        teamDiv.querySelector(`[data-type='${staff_position}']`).appendChild(newDiv);\n      } else {\n        let engineer_1_has_child = teamDiv.querySelector(`[data-type='${staff_position}'][data-pos='1']`).childElementCount;\n        if (engineer_1_has_child === 0) {\n          teamDiv.querySelector(`[data-type='${staff_position}'][data-pos='1']`).appendChild(newDiv);\n        } else {\n          teamDiv.querySelector(`[data-type='${staff_position}'][data-pos='2']`).appendChild(newDiv);\n        }\n      }\n    } else {\n      document.getElementById(divPosition).appendChild(newDiv);\n    }\n  });\n}\ndocument.querySelectorAll(\"#stafftransfersMenu a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    document.querySelector(\"#staffTransfersDropdown\").innerText = elem.innerText;\n    let value = elem.dataset.value;\n    document.querySelector(\"#staffTransfersDropdown\").dataset.value = value;\n    manage_staff_drivers(value);\n  });\n});\nfunction manage_staff_drivers(value) {\n  if (value === \"drivers\") {\n    document.getElementById(\"free-drivers\").classList.remove(\"d-none\");\n    document.getElementById(\"free-staff\").classList.add(\"d-none\");\n    document.querySelectorAll(\".drivers-section\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    document.querySelectorAll(\".staff-section\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n  } else {\n    document.getElementById(\"free-drivers\").classList.add(\"d-none\");\n    document.getElementById(\"free-staff\").classList.remove(\"d-none\");\n    document.querySelectorAll(\".drivers-section\").forEach(function (elem) {\n      elem.classList.add(\"d-none\");\n    });\n    document.querySelectorAll(\".staff-section\").forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  }\n}\nfunction add_future_team_noti(driverDiv, teamID) {\n  let notiDiv = document.createElement(\"div\");\n  notiDiv.className = \"future-contract-noti noti-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamID];\n  driverDiv.appendChild(notiDiv);\n}\ndocument.querySelectorAll(\".affiliates-and-arrows\").forEach(function (elem) {\n  elem.querySelector(\".bi-chevron-right\").addEventListener(\"click\", function (event) {\n    let parent = elem.parentNode.parentNode;\n    let affiliatesDiv = parent.querySelector(\".affiliates-space\");\n    let maxScrollLeft = affiliatesDiv.scrollWidth - affiliatesDiv.clientWidth;\n    let newScrollLeft = affiliatesDiv.scrollLeft + 100;\n    if (newScrollLeft > maxScrollLeft) {\n      event.target.parentNode.classList.add(\"d-none\");\n    }\n    affiliatesDiv.scrollTo({\n      left: newScrollLeft,\n      behavior: 'smooth'\n    });\n  });\n  elem.querySelector(\".bi-chevron-left\").addEventListener(\"click\", function () {\n    let parent = elem.parentNode.parentNode;\n    let affiliatesDiv = parent.querySelector(\".affiliates-space\");\n    elem.parentNode.querySelector(\".bi-chevron-right\").parentNode.classList.remove(\"d-none\");\n    affiliatesDiv.scrollBy({\n      left: -100,\n      behavior: 'smooth'\n    });\n  });\n});\n\n/**\r\n * Updates the color from the div depending on the team, both in contract and stats view\r\n * @param {div} div div from the driver\r\n */\nfunction updateColor(div) {\n  let surnameDiv = div.querySelector(\".bold-font\");\n  surnameDiv.className = \"bold-font\";\n  manageColor(div, surnameDiv);\n  let statsDiv = document.querySelector('.normal-driver[data-driverid=\"' + div.dataset.driverid + '\"]');\n  statsDiv.dataset.teamid = div.dataset.teamid;\n  surnameDiv = statsDiv.querySelector(\".surname\");\n  surnameDiv.className = \"bold-font surname\";\n  manageColor(statsDiv, surnameDiv);\n  div.className = \"colr free-driver \" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[div.dataset.teamid] + \"-transparent\";\n  statsDiv.className = \"colr normal-driver \" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[div.dataset.teamid] + \"-transparent\";\n}\n\n/**\r\n * Manages the color depending on the team\r\n * @param {div} div div from the driver\r\n * @param {span} lastName the lastname span from the driver\r\n */\nfunction manageColor(div, lastName) {\n  if (div.dataset.teamid != 0) {\n    let colorClass = _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[div.dataset.teamid] + \"font\";\n    lastName.classList.add(colorClass);\n  }\n}\n\n/**\r\n * Loads all the numbers into the number menu\r\n * @param {Object} nums all numbers array\r\n */\nfunction loadNumbers(nums) {\n  let numsMenu = document.getElementById(\"numberMenu\");\n  numsMenu.innerHTML = \"\";\n  nums.forEach(function (elem) {\n    let a = document.createElement(\"a\");\n    a.textContent = elem.toString();\n    a.classList = \"dropdown-item\";\n    a.style.cursor = \"pointer\";\n    numsMenu.appendChild(a);\n    a.addEventListener(\"click\", function () {\n      document.getElementById(\"numberButton\").querySelector(\".front-gradient\").textContent = a.textContent;\n    });\n  });\n}\n\n/**\r\n * Adds the edit icon\r\n * @param {div} div div from the driver that is going to add the icon into\r\n */\nfunction addIcon(div) {\n  let iconDiv = document.createElement(\"div\");\n  iconDiv.className = \"custom-icon\";\n  let iconElement = document.createElement(\"i\");\n  iconElement.className = \"bi bi-pencil-square\";\n  iconListener(iconElement);\n  iconDiv.appendChild(iconElement);\n  div.appendChild(iconDiv);\n}\nfunction addUnRetireIcon(div) {\n  let iconDiv = document.createElement(\"div\");\n  let iconElement = document.createElement(\"i\");\n  iconElement.className = \"bi bi-ban\";\n  unretireListener(iconElement);\n  div.appendChild(iconElement);\n  div.appendChild(iconDiv);\n}\n\n/**\r\n * Adds the eventlistener for one icon\r\n * @param {div} icon div from the icon\r\n */\nfunction iconListener(icon) {\n  icon.addEventListener(\"click\", function () {\n    modalType = \"edit\";\n    document.getElementById(\"contractModalTitle\").innerText = icon.parentNode.parentNode.innerText.replace(/\\n/g, ' ') + \"'s contract\";\n    queryContract(icon.parentNode.parentNode);\n    let space = icon.parentNode.parentNode.parentNode;\n    if (space.classList.contains(\"driver-space\") || space.classList.contains(\"affiliates-space\") || space.id === \"free-drivers\" && (f2_teams.includes(parseInt(icon.parentNode.parentNode.dataset.teamid)) || f3_teams.includes(parseInt(icon.parentNode.parentNode.dataset.teamid)))) {\n      manage_modal_driver_staff(\"driver\");\n    } else if (space.classList.contains(\"staff-space\") || space.id === \"free-staff\" && (f2_teams.includes(parseInt(icon.parentNode.parentNode.dataset.teamid)) || f3_teams.includes(parseInt(icon.parentNode.parentNode.dataset.teamid)))) {\n      if (event.target.parentNode.parentNode.dataset.type === \"race-engineer\") {\n        manage_modal_driver_staff(\"race-engineer\");\n      } else {\n        manage_modal_driver_staff(\"staff\");\n      }\n    } else if (space.id === \"free-drivers\") {\n      manage_modal_driver_staff(\"free-driver\");\n    } else if (space.id === \"free-staff\") {\n      if (event.target.parentNode.parentNode.dataset.type === \"race-engineer\") {\n        manage_modal_driver_staff(\"free-race-engineer\");\n      } else {\n        manage_modal_driver_staff(\"free-staff\");\n      }\n    }\n    myModal.show();\n  });\n}\nfunction manage_modal_driver_staff(type) {\n  if (type === \"staff\" || type === \"race-engineer\") {\n    document.getElementById(\"currentContractTitle\").classList.remove(\"d-none\");\n    document.getElementById(\"currentContractOptions\").classList.remove(\"d-none\");\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = true;\n      input.classList.add(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.add(\"disabled\");\n      });\n    });\n  } else if (type === \"driver\") {\n    document.getElementById(\"currentContractTitle\").classList.remove(\"d-none\");\n    document.getElementById(\"currentContractOptions\").classList.remove(\"d-none\");\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = false;\n      input.classList.remove(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.remove(\"disabled\");\n      });\n    });\n    let positionInput = document.querySelector(\"#positionInput input\");\n    positionInput.max = 999;\n  } else if (type === \"free-driver\") {\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = false;\n      input.classList.remove(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.remove(\"disabled\");\n      });\n    });\n    let positionInput = document.querySelector(\"#positionInput input\");\n    positionInput.max = 999;\n    document.getElementById(\"currentContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractTitle\").classList.add(\"d-none\");\n    document.getElementById(\"currentContractTitle\").classList.add(\"d-none\");\n    document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n  } else if (type === \"free-staff\") {\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = true;\n      input.classList.add(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.add(\"disabled\");\n      });\n    });\n    let positionInput = document.querySelector(\"#positionInput input\");\n    positionInput.disabled = true;\n    let buttons = document.querySelectorAll(\"#positionInput i\");\n    buttons.forEach(function (button) {\n      button.classList.add(\"disabled\");\n    });\n    document.getElementById(\"currentContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractTitle\").classList.add(\"d-none\");\n    document.getElementById(\"currentContractTitle\").classList.add(\"d-none\");\n    document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n  } else if (type === \"free-race-engineer\") {\n    document.querySelectorAll(\".driver-only\").forEach(function (elem) {\n      let input = elem.querySelector(\"input\");\n      input.disabled = true;\n      input.classList.add(\"disabled\");\n      let buttons = elem.querySelectorAll(\"i\");\n      buttons.forEach(function (button) {\n        button.classList.add(\"disabled\");\n      });\n    });\n    let input = document.querySelector(\"#positionInput input\");\n    let buttons = document.querySelectorAll(\"#positionInput i\");\n    input.disabled = false;\n    input.max = 2;\n    input.classList.remove(\"disabled\");\n    buttons.forEach(function (button) {\n      button.classList.remove(\"disabled\");\n    });\n    document.getElementById(\"currentContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractOptions\").classList.add(\"d-none\");\n    document.getElementById(\"futureContractTitle\").classList.add(\"d-none\");\n    document.getElementById(\"currentContractTitle\").classList.add(\"d-none\");\n    document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n  }\n  if (type === \"race-engineer\") {\n    let input = document.querySelector(\"#positionInput input\");\n    let buttons = document.querySelectorAll(\"#positionInput i\");\n    input.disabled = false;\n    input.max = 2;\n    input.classList.remove(\"disabled\");\n    buttons.forEach(function (button) {\n      button.classList.remove(\"disabled\");\n    });\n  }\n}\nfunction unretireListener(icon) {\n  icon.addEventListener(\"click\", function () {\n    let driverReq = {\n      command: \"unretireDriver\",\n      driverID: icon.parentNode.dataset.driverid,\n      driver: icon.parentNode.innerText\n    };\n    icon.classList.add(\"d-none\");\n    socket.send(JSON.stringify(driverReq));\n  });\n}\n\n/**\r\n * Places all the values for the modal that just openend\r\n * @param {Object} info values for the contract modal that just opened\r\n */\nfunction manage_modal(info) {\n  if (info[0] !== null) {\n    let teamID;\n    if (info[0][5] <= 10 || info[0][5] === 32) {\n      teamID = info[0][5];\n    } else if (f2_teams.includes(info[0][5])) {\n      teamID = 33;\n    } else if (f3_teams.includes(info[0][5])) {\n      teamID = 34;\n    }\n    document.getElementById(\"currentContract\").innerText = _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[info[0][5]].toUpperCase();\n    document.getElementById(\"currentContract\").className = \"team-contract engine-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[teamID];\n    document.getElementById(\"yearInput\").dataset.maxYear = info[2];\n    document.getElementById(\"yearInput\").min = info[2];\n    document.getElementById(\"yearInputFuture\").min = info[2] + 1;\n    document.querySelector(\"#currentContractOptions\").querySelectorAll(\".old-custom-input-number\").forEach(function (elem, index) {\n      if (elem.id === \"salaryInput\" || elem.id === \"signBonusInput\" || elem.id === \"raceBonusAmt\") {\n        elem.value = info[0][index].toLocaleString(\"en-US\") + \" $\";\n      } else {\n        elem.value = info[0][index];\n      }\n    });\n  }\n  if (info[1] === null) {\n    document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n    document.querySelector(\"#futureContractTitle\").classList.add(\"d-none\");\n    document.querySelector(\"#futureContractOptions\").classList.add(\"d-none\");\n    document.querySelector(\"#teamContractButton\").innerText = \"Team\";\n    document.querySelector(\"#teamContractButton\").dataset.teamid = \"-1\";\n  } else {\n    document.querySelector(\".add-contract\").classList.add(\"d-none\");\n    document.querySelector(\"#futureContractTitle\").classList.remove(\"d-none\");\n    document.querySelector(\"#futureContractOptions\").classList.remove(\"d-none\");\n    document.getElementById(\"futureYear\").innerText = \"Contract for \" + parseInt(info[2] + 1);\n    document.getElementById(\"futureContract\").innerText = _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[info[1][6]].toUpperCase();\n    document.querySelector(\"#teamContractButton\").dataset.teamid = info[1][6];\n    document.getElementById(\"futureContract\").className = \"team-contract engine-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[info[1][6]];\n    document.querySelector(\"#futureContractOptions\").querySelectorAll(\".old-custom-input-number\").forEach(function (elem, index) {\n      if (elem.id === \"salaryInputFuture\" || elem.id === \"signBonusInputFuture\" || elem.id === \"raceBonusAmtFuture\") {\n        elem.value = info[1][index].toLocaleString(\"en-US\") + \" $\";\n      } else {\n        elem.value = info[1][index];\n      }\n    });\n  }\n}\n\n/**\r\n * Listener for the team menu buttons\r\n */\ndocument.querySelector(\"#teamContractMenu\").querySelectorAll(\"a\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function () {\n    document.querySelector(\"#teamContractButton\").innerText = elem.querySelector(\".team-menu-name\").innerText;\n    document.querySelector(\"#teamContractButton\").dataset.teamid = elem.dataset.teamid;\n    document.querySelector(\".add-contract\").classList.add(\"enabled\");\n  });\n});\nfunction formatNumber(num) {\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\ndocument.querySelector(\".add-contract i\").addEventListener(\"click\", function () {\n  if (event.target.parentNode.classList.contains(\"enabled\")) {\n    document.getElementById(\"yearInput\").value = document.getElementById(\"yearInput\").dataset.maxYear;\n    document.querySelector(\"#futureYear\").innerText = \"Next year's contract\";\n    document.querySelector(\"#futureContract\").className = \"team-contract engine-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[document.querySelector(\"#teamContractButton\").dataset.teamid];\n    document.querySelector(\"#futureContract\").innerText = document.querySelector(\"#teamContractButton\").innerText;\n    document.querySelector(\".add-contract\").classList.add(\"d-none\");\n    document.querySelector(\"#futureContractTitle\").classList.remove(\"d-none\");\n    document.querySelector(\"#futureContractOptions\").classList.remove(\"d-none\");\n    if (document.querySelector(\"#salaryInput\").value !== \"\") {\n      document.querySelector(\"#salaryInputFuture\").value = formatNumber((parseFloat(document.querySelector(\"#salaryInput\").value.replace(/,/g, '').split(\" \")[0]) * 1.3).toFixed(0)) + \" $\";\n      document.querySelector(\"#signBonusInputFuture\").value = formatNumber((parseFloat(document.querySelector(\"#signBonusInput\").value.replace(/,/g, '').split(\" \")[0]) * 1.15).toFixed(0)) + \" $\";\n      document.querySelector(\"#raceBonusAmtFuture\").value = formatNumber((parseFloat(document.querySelector(\"#raceBonusAmt\").value.replace(/,/g, '').split(\" \")[0]) * 1.15).toFixed(0)) + \" $\";\n      document.querySelector(\"#raceBonusPosFuture\").value = parseInt(document.querySelector(\"#raceBonusPos\").value);\n      document.querySelector(\"#yearInputFuture\").value = parseInt(document.querySelector(\"#yearInput\").value) + 2;\n    } else {\n      document.querySelector(\"#salaryInputFuture\").value = \"1,000,000 $\";\n      document.querySelector(\"#signBonusInputFuture\").value = \"100,000 $\";\n      document.querySelector(\"#raceBonusAmtFuture\").value = \"0 $\";\n      document.querySelector(\"#raceBonusPosFuture\").value = \"1\";\n      document.querySelector(\"#yearInputFuture\").value = parseInt(currentSeason) + 1;\n    }\n    document.querySelector(\"#posInTeamFuture\").value = 1;\n  }\n});\ndocument.querySelector(\".break-contract\").addEventListener(\"click\", function () {\n  document.querySelector(\".add-contract\").classList.remove(\"d-none\");\n  document.querySelector(\"#futureContractTitle\").classList.add(\"d-none\");\n  document.querySelector(\"#futureContractOptions\").classList.add(\"d-none\");\n  document.querySelector(\"#teamContractButton\").innerText = \"Team\";\n  document.querySelector(\"#teamContractButton\").dataset.teamid = \"-1\";\n  document.querySelector(\".add-contract\").classList.remove(\"enabled\");\n});\ndocument.querySelector(\".contract-options\").querySelectorAll('.bi-plus-lg').forEach(button => {\n  let intervalId;\n  let increment = 10000;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\".old-custom-input-number\");\n    if (input.id === \"salaryInput\") {\n      increment = 100000;\n    }\n    updateContractMoneyValue(input, increment);\n    intervalId = setInterval(() => {\n      updateContractMoneyValue(input, increment);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".contract-options\").querySelectorAll('.bi-dash-lg').forEach(button => {\n  let intervalId;\n  let increment = -10000;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\".old-custom-input-number\");\n    if (input.id === \"salaryInput\") {\n      increment = -100000;\n    }\n    updateContractMoneyValue(input, increment);\n    intervalId = setInterval(() => {\n      updateContractMoneyValue(input, increment);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".contract-options\").querySelectorAll('.bi-chevron-up').forEach(button => {\n  let intervalId;\n  let increment = 1;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\".old-custom-input-number\");\n    if (input.id == \"raceBonusPos\") {\n      increment = -1;\n    }\n    updateContractValue(input, increment);\n    intervalId = setInterval(() => {\n      updateContractValue(input, increment);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\ndocument.querySelector(\".contract-options\").querySelectorAll('.bi-chevron-down').forEach(button => {\n  let intervalId;\n  let increment = -1;\n  button.addEventListener('mousedown', function () {\n    let input = this.parentNode.parentNode.querySelector(\".old-custom-input-number\");\n    if (input.id == \"raceBonusPos\") {\n      increment = 1;\n    }\n    updateContractValue(input, increment);\n    intervalId = setInterval(() => {\n      updateContractValue(input, increment);\n    }, 100);\n  });\n  button.addEventListener('mouseup', function () {\n    clearInterval(intervalId);\n  });\n  button.addEventListener('mouseleave', function () {\n    clearInterval(intervalId);\n  });\n});\nfunction updateContractMoneyValue(input, increment) {\n  let val = input.value.replace(/[$,]/g, \"\");\n  let new_val = Number(val) + increment;\n  if (new_val < parseInt(input.min)) {\n    new_val = input.min;\n  }\n  let formatted = new_val.toLocaleString('en-US') + '$';\n  input.value = formatted;\n}\nfunction updateContractValue(input, increment) {\n  let val = input.value;\n  let new_val = Number(val) + increment;\n  if (new_val < parseInt(input.min)) {\n    new_val = input.min;\n  }\n  if (new_val > parseInt(input.max)) {\n    new_val = input.max;\n  }\n  input.value = new_val;\n}\n\n/**\r\n * Sends the message that requests the details from the driver\r\n * @param {div} elem div from the driver its requesting its details\r\n */\nfunction queryContract(elem) {\n  driverEditingID = elem.dataset.driverid;\n  driverEditingName = elem.innerText;\n  let driverReq = {\n    command: \"requestDriver\",\n    driverID: driverEditingID,\n    driver: elem.innerText\n  };\n  socket.send(JSON.stringify(driverReq));\n}\n\n/**\r\n * Manages the state of the categorias\r\n * @param  {...string} divs the state of each div\r\n */\nfunction manageDrivers(...divs) {\n  divsArray.forEach(function (div, index) {\n    if (divs[index] === \"show\") {\n      div.className = \"main-columns-drag-section\";\n    } else {\n      div.className = \"main-columns-drag-section d-none\";\n    }\n  });\n}\n\n/**\r\n * Event listener for the confirm button from the modal\r\n */\ndocument.getElementById(\"confirmButton\").addEventListener('click', function () {\n  if (modalType === \"hire\") {\n    if ((f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) && !destinationParent.classList.contains(\"affiliates-space\")) | originalParent.className === \"driver-space\" | originalParent.classList.contains(\"affiliates-space\") | originalParent.className === \"staff-space\") {\n      signDriver(\"fireandhire\");\n    }\n    signDriver(\"regular\");\n    modalType = \"\";\n  } else if (modalType === \"edit\") {\n    editContract();\n    modalType = \"\";\n  }\n  setTimeout(clearModal, 500);\n  sortList(\"free-drivers\");\n  sortList(\"free-staff\");\n});\n\n/**\r\n * Clears the modal's inputs\r\n */\nfunction clearModal() {\n  document.querySelectorAll(\".old-custom-input-number\").forEach(function (elem) {\n    elem.value = \"\";\n  });\n}\n\n/**\r\n * Sends the message to the backend to edit the contract\r\n */\nfunction editContract() {\n  let values = [];\n  document.querySelector(\"#currentContractOptions\").querySelectorAll(\".old-custom-input-number\").forEach(function (elem) {\n    if (elem.id === \"salaryInput\" || elem.id === \"signBonusInput\" || elem.id === \"raceBonusAmt\") {\n      values.push(elem.value.replace(/[$,]/g, \"\"));\n    } else {\n      values.push(elem.value);\n    }\n  });\n  let futureValues = [];\n  document.querySelector(\"#futureContractOptions\").querySelectorAll(\".old-custom-input-number\").forEach(function (elem) {\n    if (elem.id === \"salaryInputFuture\" || elem.id === \"signBonusInputFuture\" || elem.id === \"raceBonusAmtFuture\") {\n      futureValues.push(elem.value.replace(/[$,]/g, \"\"));\n    } else {\n      futureValues.push(elem.value);\n    }\n  });\n  let future_team = document.querySelector(\"#teamContractButton\").dataset.teamid;\n  let data = {\n    command: \"editContract\",\n    driverID: driverEditingID,\n    salary: values[0],\n    year: values[1],\n    signBonus: values[2],\n    raceBonus: values[3],\n    raceBonusPos: values[4],\n    driver: driverEditingName,\n    futureTeam: future_team,\n    futureSalary: futureValues[0],\n    futureYear: futureValues[1],\n    futureSignBonus: futureValues[2],\n    futureRaceBonus: futureValues[3],\n    futureRaceBonusPos: futureValues[4],\n    futurePosition: futureValues[5]\n  };\n  socket.send(JSON.stringify(data));\n  if (future_team !== \"-1\") {\n    let driverDiv = document.querySelector('.free-driver[data-driverid=\"' + driverEditingID + '\"]');\n    add_future_team_noti(driverDiv, future_team);\n    driverDiv.dataset.futureteam = future_team;\n  } else {\n    let driverDiv = document.querySelector('.free-driver[data-driverid=\"' + driverEditingID + '\"]');\n    driverDiv.querySelector(\".future-contract-noti\").remove();\n    driverDiv.dataset.futureteam = -1;\n  }\n}\n\n/**\r\n * Changes the positions of 2 drivers involved in a swap\r\n */\nfunction manage_swap() {\n  let parent1 = driver1.parentNode;\n  let parent2 = driver2.parentNode;\n  parent1.removeChild(driver1);\n  parent2.removeChild(driver2);\n  parent1.appendChild(driver2);\n  parent2.appendChild(driver1);\n}\n\n/**\r\n * Sends the necessary messages to hire a driver\r\n * @param {string} type type of the hiring of the driver, depending if he needs to be fired before or not\r\n */\nfunction signDriver(type) {\n  let driverName = draggable.innerText;\n  if (type === \"fireandhire\") {\n    let data = {\n      command: \"fire\",\n      driverID: draggable.dataset.driverid,\n      driver: driverName,\n      team: name_dict[teamOrigin.dataset.team],\n      teamID: originalTeamId\n    };\n    if (!data[\"team\"]) {\n      if (f2_teams.includes(originalTeamId)) {\n        data[\"team\"] = \"F2\";\n      } else if (f3_teams.includes(originalTeamId)) {\n        data[\"team\"] = \"F3\";\n      }\n    }\n    socket.send(JSON.stringify(data));\n  }\n  if (type === \"regular\") {\n    let salaryData = document.getElementById(\"salaryInput\").value.replace(/[$,]/g, \"\");\n    let yearData = document.getElementById(\"yearInput\").value;\n    let signBonusData = document.getElementById(\"signBonusInput\").value.replace(/[$,]/g, \"\");\n    let raceBonusData;\n    let raceBonusPosData;\n    if (signBonusData === \"\") signBonusData = \"0\";\n    if (raceBonusAmt.value === \"\") raceBonusData = \"0\";else raceBonusData = raceBonusAmt.value.replace(/[$,]/g, \"\");\n    if (raceBonusPos.value === \"\") raceBonusPosData = \"10\";else raceBonusPosData = raceBonusPos.value;\n    let data = {\n      command: \"hire\",\n      driverID: draggable.dataset.driverid,\n      teamID: inverted_dict[teamDestiniy],\n      position: posInTeam,\n      salary: salaryData,\n      signBonus: signBonusData,\n      raceBonus: raceBonusData,\n      raceBonusPos: raceBonusPosData,\n      year: yearData,\n      driver: driverName,\n      team: name_dict[teamDestiniy]\n    };\n    destinationParent.appendChild(draggable);\n    socket.send(JSON.stringify(data));\n  } else if (type === \"autocontract\") {\n    let dataAuto = {\n      command: \"autoContract\",\n      driverID: draggable.dataset.driverid,\n      teamID: inverted_dict[teamDestiniy],\n      position: posInTeam,\n      driver: driverName,\n      team: name_dict[teamDestiniy]\n    };\n    destinationParent.appendChild(draggable);\n    socket.send(JSON.stringify(dataAuto));\n  }\n}\n\n/**\r\n * Event listener for the cancel button on the modal\r\n */\ndocument.getElementById(\"cancelButton\").addEventListener('click', function () {\n  document.querySelector(\".add-contract\").classList.remove(\"enabled\");\n  if (modalType === \"hire\") {\n    originalParent.appendChild(draggable);\n    draggable.dataset.teamid = inverted_dict[teamOrigin.dataset.team];\n    updateColor(draggable);\n  }\n  setTimeout(clearModal, 500);\n});\ndocument.querySelector(\"#nameFilterTransfer\").addEventListener(\"input\", function (event) {\n  let text = event.target.value;\n  if (text !== \"\") {\n    document.querySelector(\"#filterTransfersContainer\").querySelector(\".bi-x\").classList.remove(\"d-none\");\n  } else {\n    document.querySelector(\"#filterTransfersContainer\").querySelector(\".bi-x\").classList.add(\"d-none\");\n  }\n  let driverElements = document.querySelectorAll(\"#free-drivers .free-driver\");\n  driverElements.forEach(function (elem) {\n    let first_name = elem.children[0].innerText;\n    let last_name = elem.children[1].innerText;\n    let full_name = first_name + \" \" + last_name;\n    let minus = full_name.toLowerCase();\n    let name = text.toLowerCase();\n    if (minus.includes(name)) {\n      elem.classList.remove(\"d-none\");\n    } else {\n      elem.classList.add(\"d-none\");\n    }\n  });\n  let staffElements = document.querySelectorAll(\"#free-staff .free-driver\");\n  staffElements.forEach(function (elem) {\n    let first_name = elem.children[0].innerText;\n    let last_name = elem.children[1].innerText;\n    let full_name = first_name + \" \" + last_name;\n    let minus = full_name.toLowerCase();\n    let name = text.toLowerCase();\n    if (minus.includes(name)) {\n      elem.classList.remove(\"d-none\");\n    } else {\n      elem.classList.add(\"d-none\");\n    }\n  });\n});\ndocument.querySelector(\"#filterIconTransfers\").addEventListener(\"click\", function () {\n  document.querySelector(\".category-filters\").classList.toggle(\"show\");\n  document.querySelector(\".filter-container\").classList.toggle(\"focused\");\n});\ndocument.getElementById(\"driver_transfers\").querySelectorAll(\".filter-pills\").forEach(function (elem) {\n  elem.addEventListener(\"click\", function (event) {\n    let isActive = elem.classList.contains('active');\n    document.getElementById(\"driver_transfers\").querySelectorAll('.filter-pills').forEach(function (el) {\n      el.classList.remove('active');\n    });\n    if (!isActive) {\n      elem.classList.add('active');\n    }\n  });\n});\ndocument.querySelector(\"#F2filterTransfers\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) <= 21 && parseInt(elem.dataset.teamid) > 10) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) <= 21 && parseInt(elem.dataset.teamid) > 10) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\ndocument.querySelector(\"#F3filterTransfers\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) <= 31 && parseInt(elem.dataset.teamid) > 21) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) <= 31 && parseInt(elem.dataset.teamid) > 21) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\ndocument.querySelector(\"#freefilterTransfers\").addEventListener(\"click\", function (event) {\n  if (!event.target.classList.contains(\"active\")) {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      elem.classList.remove(\"d-none\");\n    });\n  } else {\n    let driverElements = document.getElementById(\"free-drivers\").querySelectorAll(\".free-driver\");\n    driverElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) == 0) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n    let staffElements = document.getElementById(\"free-staff\").querySelectorAll(\".free-driver\");\n    staffElements.forEach(function (elem) {\n      if (parseInt(elem.dataset.teamid) == 0) {\n        elem.classList.remove(\"d-none\");\n      } else {\n        elem.classList.add(\"d-none\");\n      }\n    });\n  }\n});\nfunction hire_modal_standars() {\n  document.querySelector(\".add-contract\").classList.add(\"d-none\");\n  document.querySelector(\"#futureContractTitle\").classList.add(\"d-none\");\n  document.querySelector(\"#futureContractOptions\").classList.add(\"d-none\");\n  document.getElementById(\"currentContract\").innerText = _config__WEBPACK_IMPORTED_MODULE_0__.combined_dict[inverted_dict[teamDestiniy]].toUpperCase();\n  document.getElementById(\"currentContract\").className = \"team-contract engine-\" + _config__WEBPACK_IMPORTED_MODULE_0__.team_dict[inverted_dict[teamDestiniy]];\n}\n\n/**\r\n * Manages the interaction to drag drivers\r\n */\ninteract('.free-driver').draggable({\n  inertia: true,\n  listeners: {\n    start(event) {\n      originalParent = event.target.parentNode;\n      if (originalParent.className != \"main-columns-drag-section\") {\n        if (originalParent.classList.contains(\"affiliates-space\")) {\n          teamOrigin = originalParent.parentNode.parentNode;\n        } else {\n          teamOrigin = originalParent.parentNode;\n        }\n      } else {\n        teamOrigin = originalParent;\n      }\n      draggable = event.target;\n      let target = event.target;\n      let position = target.getBoundingClientRect();\n      let width = target.getBoundingClientRect().width;\n      target.style.width = width + \"px\";\n      target.style.position = \"fixed\";\n      target.style.top = position.top + \"px\";\n      target.style.left = position.left + \"px\"; // Añadir esta línea para manejar la posición izquierda\n    },\n    move(event) {\n      const target = event.target;\n      const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;\n      const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\n      target.style.transform = `translate(${x}px, ${y}px)`;\n      target.style.opacity = 1;\n      target.style.zIndex = 10;\n      target.setAttribute('data-x', x);\n      target.setAttribute('data-y', y);\n    },\n    end(event) {\n      let target = event.target;\n      target.style.position = \"relative\";\n      target.style.top = \"auto\";\n      target.style.left = \"auto\"; // Resetear la posición izquierda\n      target.style.width = \"auto\";\n      target.style.transform = 'none';\n      target.style.zIndex = 1;\n      target.setAttribute('data-x', 0);\n      target.setAttribute('data-y', 0);\n      //is driver\n      if (event.target.parentNode.classList.contains(\"driver-space\") | event.target.parentNode.classList.contains(\"affiliates-space\") | event.target.parentNode.id === \"free-drivers\") {\n        let freeDrivers = document.getElementById('free-drivers');\n        let freeRect = freeDrivers.getBoundingClientRect();\n        let driverSpaceElements = document.querySelectorAll('.driver-space');\n        driverSpaceElements.forEach(function (element) {\n          let rect = element.getBoundingClientRect();\n          if (event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom) {\n            if (element.classList.contains(\"affiliates-space\") && _renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024) {\n              posInTeam = 3 + element.childElementCount;\n              teamDestiniy = element.parentNode.parentNode.dataset.team;\n              destinationParent = element;\n              element.appendChild(target);\n              originalTeamId = parseInt(target.dataset.teamid);\n              target.dataset.teamid = inverted_dict[teamDestiniy];\n              updateColor(target);\n              document.getElementById(\"contractModalTitle\").innerText = target.innerText + \"'s contract with \" + name_dict[teamDestiniy];\n              if (autoContractToggle.checked) {\n                if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024 && originalParent.className === \"driver-space\" | originalParent.classList.contains(\"affiliates-space\")) {\n                  signDriver(\"fireandhire\");\n                }\n                signDriver(\"autocontract\");\n              } else {\n                modalType = \"hire\";\n                hire_modal_standars();\n                manage_modal_driver_staff(\"driver\");\n                myModal.show();\n              }\n              if (target.querySelector(\".custom-icon\") === null) {\n                addIcon(target);\n              }\n            } else {\n              if (element.childElementCount < 1) {\n                posInTeam = element.id.charAt(2);\n                teamDestiniy = element.parentNode.dataset.team;\n                destinationParent = element;\n                element.appendChild(target);\n                originalTeamId = parseInt(target.dataset.teamid);\n                target.dataset.teamid = inverted_dict[teamDestiniy];\n                updateColor(target);\n                document.getElementById(\"contractModalTitle\").innerText = target.innerText + \"'s contract with \" + name_dict[teamDestiniy];\n                if (autoContractToggle.checked) {\n                  if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023 && f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) | originalParent.className === \"driver-space\" | originalParent.classList.contains(\"affiliates-space\") || _renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024 && f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) | originalParent.className === \"driver-space\" | originalParent.classList.contains(\"affiliates-space\")) {\n                    signDriver(\"fireandhire\");\n                  }\n                  signDriver(\"autocontract\");\n                } else {\n                  modalType = \"hire\";\n                  hire_modal_standars();\n                  manage_modal_driver_staff(\"driver\");\n                  myModal.show();\n                }\n                if (target.querySelector(\".custom-icon\") === null) {\n                  addIcon(target);\n                }\n              } else if (element.childElementCount == 1) {\n                if (originalParent.classList.contains(\"driver-space\")) {\n                  driver1 = target;\n                  driver2 = element.firstChild;\n                  let team1 = driver1.parentNode.parentNode;\n                  let team2 = driver2.parentNode.parentNode;\n                  driver1.dataset.teamid = inverted_dict[team2.dataset.team];\n                  updateColor(driver1);\n                  driver2.dataset.teamid = inverted_dict[team1.dataset.team];\n                  updateColor(driver2);\n                  if (driver1 !== driver2) {\n                    let data = {\n                      command: \"swap\",\n                      driver1ID: target.dataset.driverid,\n                      driver2ID: element.firstChild.dataset.driverid,\n                      driver1: target.innerText,\n                      driver2: element.firstChild.innerText\n                    };\n                    socket.send(JSON.stringify(data));\n                    manage_swap();\n                  }\n                }\n              }\n            }\n          }\n        });\n        if (event.clientX >= freeRect.left && event.clientX <= freeRect.right && event.clientY >= freeRect.top && event.clientY <= freeRect.bottom) {\n          if (target.querySelector(\".custom-icon\") !== null) {\n            draggable.removeChild(draggable.querySelector(\".custom-icon\"));\n          }\n          if (originalParent.id !== \"free-drivers\") {\n            originalParent.removeChild(draggable);\n            originalTeamId = parseInt(target.dataset.teamid);\n            draggable.dataset.teamid = 0;\n            updateColor(draggable);\n            freeDrivers.appendChild(target);\n            let data = {\n              command: \"fire\",\n              driverID: draggable.dataset.driverid,\n              driver: draggable.innerText,\n              team: name_dict[teamOrigin.dataset.team],\n              teamID: originalTeamId\n            };\n            if (!data[\"team\"]) {\n              if (f2_teams.includes(originalTeamId)) {\n                data[\"team\"] = \"F2\";\n              } else if (f3_teams.includes(originalTeamId)) {\n                data[\"team\"] = \"F3\";\n              }\n            }\n            socket.send(JSON.stringify(data));\n          }\n        }\n      }\n      //is staff\n      else if (event.target.parentNode.classList.contains(\"staff-space\") | event.target.parentNode.id === \"free-staff\") {\n        let tfreeStaff = document.getElementById('free-staff');\n        let staffRect = tfreeStaff.getBoundingClientRect();\n        let staffSpaceElements = document.querySelectorAll('.staff-space');\n        staffSpaceElements.forEach(function (element) {\n          let rect = element.getBoundingClientRect();\n          if (event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom) {\n            if (element.dataset.type === event.target.dataset.type) {\n              if (element.childElementCount < 1) {\n                posInTeam = element.dataset.pos;\n                teamDestiniy = element.parentNode.dataset.team;\n                destinationParent = element;\n                element.appendChild(target);\n                originalTeamId = parseInt(target.dataset.teamid);\n                target.dataset.teamid = inverted_dict[teamDestiniy];\n                updateColor(target);\n                document.getElementById(\"contractModalTitle\").innerText = target.innerText + \"'s contract with \" + name_dict[teamDestiniy];\n                if (autoContractToggle.checked) {\n                  if (_renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2023 && f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) | originalParent.className === \"staff-space\" || _renderer__WEBPACK_IMPORTED_MODULE_1__.game_version === 2024 && f2_teams.includes(originalTeamId) | f3_teams.includes(originalTeamId) | originalParent.className === \"staff-space\") {\n                    signDriver(\"fireandhire\");\n                  }\n                  signDriver(\"autocontract\");\n                } else {\n                  modalType = \"hire\";\n                  hire_modal_standars();\n                  if (event.target.dataset.type === \"race-engineer\") {\n                    manage_modal_driver_staff(\"race-engineer\");\n                  } else {\n                    manage_modal_driver_staff(\"staff\");\n                  }\n                  myModal.show();\n                }\n                if (target.querySelector(\".custom-icon\") === null) {\n                  addIcon(target);\n                }\n              } else if (element.childElementCount == 1) {\n                if (originalParent.classList.contains(\"staff-space\")) {\n                  driver1 = target;\n                  driver2 = element.firstChild;\n                  let team1 = driver1.parentNode.parentNode;\n                  let team2 = driver2.parentNode.parentNode;\n                  driver1.dataset.teamid = inverted_dict[team2.dataset.team];\n                  updateColor(driver1);\n                  driver2.dataset.teamid = inverted_dict[team1.dataset.team];\n                  updateColor(driver2);\n                  if (driver1 !== driver2) {\n                    let data = {\n                      command: \"swap\",\n                      driver1ID: target.dataset.driverid,\n                      driver2ID: element.firstChild.dataset.driverid,\n                      driver1: target.innerText,\n                      driver2: element.firstChild.innerText\n                    };\n                    socket.send(JSON.stringify(data));\n                    manage_swap();\n                  }\n                }\n              }\n            } else {\n              update_notifications(\"You can't change staff from different positions\", \"lighterror\");\n            }\n          }\n        });\n        if (event.clientX >= staffRect.left && event.clientX <= staffRect.right && event.clientY >= staffRect.top && event.clientY <= staffRect.bottom) {\n          if (target.querySelector(\".custom-icon\") !== null) {\n            draggable.removeChild(draggable.querySelector(\".custom-icon\"));\n          }\n          if (originalParent.id !== \"free-staff\") {\n            originalParent.removeChild(draggable);\n            originalTeamId = parseInt(target.dataset.teamid);\n            draggable.dataset.teamid = 0;\n            updateColor(draggable);\n            tfreeStaff.appendChild(target);\n            let data = {\n              command: \"fire\",\n              driverID: draggable.dataset.driverid,\n              driver: draggable.innerText,\n              team: name_dict[teamOrigin.dataset.team],\n              teamID: originalTeamId\n            };\n            if (!data[\"team\"]) {\n              if (f2_teams.includes(originalTeamId)) {\n                data[\"team\"] = \"F2\";\n              } else if (f3_teams.includes(originalTeamId)) {\n                data[\"team\"] = \"F3\";\n              }\n            }\n            socket.send(JSON.stringify(data));\n          }\n        }\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./src/js/transfers.js?");

/***/ }),

/***/ "./node_modules/marked/lib/marked.esm.js":
/*!***********************************************!*\
  !*** ./node_modules/marked/lib/marked.esm.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hooks: () => (/* binding */ _Hooks),\n/* harmony export */   Lexer: () => (/* binding */ _Lexer),\n/* harmony export */   Marked: () => (/* binding */ Marked),\n/* harmony export */   Parser: () => (/* binding */ _Parser),\n/* harmony export */   Renderer: () => (/* binding */ _Renderer),\n/* harmony export */   Slugger: () => (/* binding */ _Slugger),\n/* harmony export */   TextRenderer: () => (/* binding */ _TextRenderer),\n/* harmony export */   Tokenizer: () => (/* binding */ _Tokenizer),\n/* harmony export */   defaults: () => (/* binding */ _defaults),\n/* harmony export */   getDefaults: () => (/* binding */ _getDefaults),\n/* harmony export */   lexer: () => (/* binding */ lexer),\n/* harmony export */   marked: () => (/* binding */ marked),\n/* harmony export */   options: () => (/* binding */ options),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseInline: () => (/* binding */ parseInline),\n/* harmony export */   parser: () => (/* binding */ parser),\n/* harmony export */   setOptions: () => (/* binding */ setOptions),\n/* harmony export */   use: () => (/* binding */ use),\n/* harmony export */   walkTokens: () => (/* binding */ walkTokens)\n/* harmony export */ });\n/**\n * marked v7.0.3 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        baseUrl: null,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        headerIds: false,\n        headerPrefix: '',\n        highlight: null,\n        hooks: null,\n        langPrefix: 'language-',\n        mangle: false,\n        pedantic: false,\n        renderer: null,\n        sanitize: false,\n        sanitizer: null,\n        silent: false,\n        smartypants: false,\n        tokenizer: null,\n        walkTokens: null,\n        xhtml: false\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret, '$1');\n            regex = regex.replace(name, val);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(regex, opt);\n        }\n    };\n    return obj;\n}\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n    if (sanitize) {\n        let prot;\n        try {\n            prot = decodeURIComponent(unescape(href))\n                .replace(nonWordAndColonTest, '')\n                .toLowerCase();\n        }\n        catch (e) {\n            return null;\n        }\n        if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n            return null;\n        }\n    }\n    if (base && !originIndependentUrl.test(href)) {\n        href = resolveUrl(base, href);\n    }\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\nfunction resolveUrl(base, href) {\n    if (!baseUrls[' ' + base]) {\n        // we can ignore everything in base after the last slash of its path component,\n        // but we might need to add _that_\n        // https://tools.ietf.org/html/rfc3986#section-3\n        if (justDomain.test(base)) {\n            baseUrls[' ' + base] = base + '/';\n        }\n        else {\n            baseUrls[' ' + base] = rtrim(base, '/', true);\n        }\n    }\n    base = baseUrls[' ' + base];\n    const relativeBase = base.indexOf(':') === -1;\n    if (href.substring(0, 2) === '//') {\n        if (relativeBase) {\n            return href;\n        }\n        return base.replace(protocol, '$1') + href;\n    }\n    else if (href.charAt(0) === '/') {\n        if (relativeBase) {\n            return href;\n        }\n        return base.replace(domain, '$1') + href;\n    }\n    else {\n        return base + href;\n    }\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false, curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    const l = str.length;\n    let level = 0, i = 0;\n    for (; i < l; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\nfunction checkDeprecations(opt, callback) {\n    if (!opt || opt.silent) {\n        return;\n    }\n    if (callback) {\n        console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n    }\n    if (opt.sanitize || opt.sanitizer) {\n        console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n    }\n    if (opt.highlight || opt.langPrefix !== 'language-') {\n        console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n    }\n    if (opt.mangle) {\n        console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n    }\n    if (opt.baseUrl) {\n        console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n    }\n    if (opt.smartypants) {\n        console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n    }\n    if (opt.xhtml) {\n        console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n    }\n    if (opt.headerIds || opt.headerPrefix) {\n        console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n    }\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                nextLine = src.split('\\n', 1)[0];\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimLeft();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimRight();\n            list.items[list.items.length - 1].text = itemContents.trimRight();\n            list.raw = list.raw.trimRight();\n            const l = list.items.length;\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (i = 0; i < l; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (i = 0; i < l; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: !this.options.sanitizer\n                    && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n                text: cap[0]\n            };\n            if (this.options.sanitize) {\n                const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n                const paragraph = token;\n                paragraph.type = 'paragraph';\n                paragraph.text = text;\n                paragraph.tokens = this.lexer.inline(text);\n            }\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c };\n                }),\n                align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i, j, k, row;\n                for (i = 0; i < l; i++) {\n                    if (/^ *-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'right';\n                    }\n                    else if (/^ *:-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'center';\n                    }\n                    else if (/^ *:-+ *$/.test(item.align[i])) {\n                        item.align[i] = 'left';\n                    }\n                    else {\n                        item.align[i] = null;\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n                        return { text: c };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: this.options.sanitize\n                    ? 'text'\n                    : 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: this.options.sanitize\n                    ? (this.options.sanitizer\n                        ? this.options.sanitizer(cap[0])\n                        : escape(cap[0]))\n                    : cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n                title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                const raw = [...src].slice(0, lLength + match.index + rLength + 1).join('');\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src, mangle) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src, mangle) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src, smartypants) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n            }\n            else {\n                text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst block = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')',\n    def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label', block._label)\n    .replace('title', block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull', block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g, block.bullet)\n    .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n    .replace('def', '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n    .replace('comment', block._comment)\n    .replace('tag', block._tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g, block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph', block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal,\n    table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n        + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table', block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', block._comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr', block.hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', block.lheading)\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme', inline._scheme)\n    .replace('email', inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment', inline._comment)\n    .replace('attribute', inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label', inline._label)\n    .replace('href', inline._href)\n    .replace('title', inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label', inline._label)\n    .replace('ref', block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref', block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n    .replace('reflink', inline.reflink)\n    .replace('nolink', inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal,\n    strong: {\n        start: /^__|\\*\\*/,\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n        endAst: /\\*\\*(?!\\*)/g,\n        endUnd: /__(?!_)/g\n    },\n    em: {\n        start: /^_|\\*/,\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n        endAst: /\\*(?!\\*)/g,\n        endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', inline._label)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal,\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i')\n    .replace('email', inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm,\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n    return text\n        // em-dashes\n        .replace(/---/g, '\\u2014')\n        // en-dashes\n        .replace(/--/g, '\\u2013')\n        // opening singles\n        .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n        // closing singles & apostrophes\n        .replace(/'/g, '\\u2019')\n        // opening doubles\n        .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n        // closing doubles\n        .replace(/\"/g, '\\u201d')\n        // ellipses\n        .replace(/\\.{3}/g, '\\u2026');\n}\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n    let out = '', i, ch;\n    const l = text.length;\n    for (i = 0; i < l; i++) {\n        ch = text.charCodeAt(i);\n        if (Math.random() > 0.5) {\n            ch = 'x' + ch.toString(16);\n        }\n        out += '&#' + ch + ';';\n    }\n    return out;\n}\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src, mangle)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/\\S*/)[0];\n        if (this.options.highlight) {\n            const out = this.options.highlight(code, lang);\n            if (out != null && out !== code) {\n                escaped = true;\n                code = out;\n            }\n        }\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"'\n            + this.options.langPrefix\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw, slugger) {\n        if (this.options.headerIds) {\n            const id = this.options.headerPrefix + slugger.slug(raw);\n            return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n        }\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul', startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\"'\n            + (this.options.xhtml ? ' /' : '')\n            + '> ';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return this.options.xhtml ? '<br/>' : '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n        if (href === null) {\n            return text;\n        }\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n        if (href === null) {\n            return text;\n        }\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += this.options.xhtml ? '/>' : '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Slugger generates header id\n */\nclass _Slugger {\n    seen;\n    constructor() {\n        this.seen = {};\n    }\n    serialize(value) {\n        return value\n            .toLowerCase()\n            .trim()\n            // remove html tags\n            .replace(/<[!\\/a-z].*?>/ig, '')\n            // remove unwanted chars\n            .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n            .replace(/\\s/g, '-');\n    }\n    /**\n     * Finds the next safe (unique) slug to use\n     */\n    getNextSafeSlug(originalSlug, isDryRun) {\n        let slug = originalSlug;\n        let occurenceAccumulator = 0;\n        if (this.seen.hasOwnProperty(slug)) {\n            occurenceAccumulator = this.seen[originalSlug];\n            do {\n                occurenceAccumulator++;\n                slug = originalSlug + '-' + occurenceAccumulator;\n            } while (this.seen.hasOwnProperty(slug));\n        }\n        if (!isDryRun) {\n            this.seen[originalSlug] = occurenceAccumulator;\n            this.seen[slug] = 0;\n        }\n        return slug;\n    }\n    /**\n     * Convert string to unique id\n     */\n    slug(value, options = {}) {\n        const slug = this.serialize(value);\n        return this.getNextSafeSlug(slug, options.dryrun);\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    slugger;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n        this.slugger = new _Slugger();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '', i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;\n        const l = tokens.length;\n        for (i = 0; i < l; i++) {\n            token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token.text, token.lang, !!token.escaped);\n                    continue;\n                }\n                case 'table': {\n                    header = '';\n                    // header\n                    cell = '';\n                    l2 = token.header.length;\n                    for (j = 0; j < l2; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), { header: true, align: token.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    body = '';\n                    l2 = token.rows.length;\n                    for (j = 0; j < l2; j++) {\n                        row = token.rows[j];\n                        cell = '';\n                        l3 = row.length;\n                        for (k = 0; k < l3; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: token.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    body = this.parse(token.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    ordered = token.ordered;\n                    start = token.start;\n                    loose = token.loose;\n                    l2 = token.items.length;\n                    body = '';\n                    for (j = 0; j < l2; j++) {\n                        item = token.items[j];\n                        checked = item.checked;\n                        task = item.task;\n                        itemBody = '';\n                        if (item.task) {\n                            checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox;\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token.text, token.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(this.parseInline(token.tokens));\n                    continue;\n                }\n                case 'text': {\n                    body = token.tokens ? this.parseInline(token.tokens) : token.text;\n                    while (i + 1 < l && tokens[i + 1].type === 'text') {\n                        token = tokens[++i];\n                        body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '', i, token, ret;\n        const l = tokens.length;\n        for (i = 0; i < l; i++) {\n            token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token.text);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token.text);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token.href, token.title, token.text);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(this.parseInline(token.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(this.parseInline(token.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(this.parseInline(token.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    parser = _Parser.parse;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    lexer = _Lexer.lex;\n    Tokenizer = _Tokenizer;\n    Slugger = _Slugger;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    for (const cell of token.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of token.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    values = values.concat(this.walkTokens(token.items, callback));\n                    break;\n                }\n                default: {\n                    if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n                        this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n                            // @ts-expect-error we assume token[childToken] is an array of tokens but we can't be sure\n                            values = values.concat(this.walkTokens(token[childTokens], callback));\n                        });\n                    }\n                    else if (token.tokens) {\n                        values = values.concat(this.walkTokens(token.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        if (extensions[ext.level]) {\n                            extensions[ext.level].unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(pack.walkTokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, optOrCallback, callback) => {\n            if (typeof optOrCallback === 'function') {\n                callback = optOrCallback;\n                optOrCallback = null;\n            }\n            const origOpt = { ...optOrCallback };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.#onError(!!opt.silent, !!opt.async, callback);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            checkDeprecations(opt, callback);\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (callback) {\n                const highlight = opt.highlight;\n                let tokens;\n                try {\n                    if (opt.hooks) {\n                        src = opt.hooks.preprocess(src);\n                    }\n                    tokens = lexer(src, opt);\n                }\n                catch (e) {\n                    return throwError(e);\n                }\n                const done = (err) => {\n                    let out;\n                    if (!err) {\n                        try {\n                            if (opt.walkTokens) {\n                                this.walkTokens(tokens, opt.walkTokens);\n                            }\n                            out = parser(tokens, opt);\n                            if (opt.hooks) {\n                                out = opt.hooks.postprocess(out);\n                            }\n                        }\n                        catch (e) {\n                            err = e;\n                        }\n                    }\n                    opt.highlight = highlight;\n                    return err\n                        ? throwError(err)\n                        : callback(null, out);\n                };\n                if (!highlight || highlight.length < 3) {\n                    return done();\n                }\n                delete opt.highlight;\n                if (!tokens.length)\n                    return done();\n                let pending = 0;\n                this.walkTokens(tokens, (token) => {\n                    if (token.type === 'code') {\n                        pending++;\n                        setTimeout(() => {\n                            highlight(token.text, token.lang, (err, code) => {\n                                if (err) {\n                                    return done(err);\n                                }\n                                if (code != null && code !== token.text) {\n                                    token.text = code;\n                                    token.escaped = true;\n                                }\n                                pending--;\n                                if (pending === 0) {\n                                    done();\n                                }\n                            });\n                        }, 0);\n                    }\n                });\n                if (pending === 0) {\n                    done();\n                }\n                return;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async, callback) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                if (callback) {\n                    callback(null, msg);\n                    return;\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            if (callback) {\n                callback(e);\n                return;\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt, callback) {\n    return markedInstance.parse(src, opt, callback);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\n\n//# sourceMappingURL=marked.esm.js.map\n\n\n//# sourceURL=webpack://Database_Editor_F1_Manager/./node_modules/marked/lib/marked.esm.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;